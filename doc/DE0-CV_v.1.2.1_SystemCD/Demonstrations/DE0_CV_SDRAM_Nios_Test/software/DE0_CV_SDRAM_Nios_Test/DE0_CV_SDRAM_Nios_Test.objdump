
DE0_CV_SDRAM_Nios_Test.elf:     file format elf32-littlenios2
DE0_CV_SDRAM_Nios_Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x200201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x20020000 paddr 0x20020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20020020 paddr 0x20020020 align 2**12
         filesz 0x0000cf1c memsz 0x0000cf1c flags r-x
    LOAD off    0x0000df3c vaddr 0x2002cf3c paddr 0x2002e994 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x000103ec vaddr 0x200303ec paddr 0x200303ec align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20020000  20020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  20020020  20020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c918  200201b8  200201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000046c  2002cad0  2002cad0  0000dad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  2002cf3c  2002e994  0000df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  200303ec  200303ec  000103ec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f994  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e20  00000000  00000000  0000f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000255b8  00000000  00000000  000107d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000097d8  00000000  00000000  00035d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000acc7  00000000  00000000  0003f568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001918  00000000  00000000  0004a230  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f71  00000000  00000000  0004bb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000109c5  00000000  00000000  0004eab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  0005f480  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0005f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00063037  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  0006303a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00063044  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00063045  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00063046  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006304a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006304e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00063052  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0006305b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00063064  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0006306d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000040  00000000  00000000  00063078  2**0
                  CONTENTS, READONLY
 28 .jdi          00004f72  00000000  00000000  000630b8  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005c4fa  00000000  00000000  0006802a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20020000 l    d  .entry	00000000 .entry
20020020 l    d  .exceptions	00000000 .exceptions
200201b8 l    d  .text	00000000 .text
2002cad0 l    d  .rodata	00000000 .rodata
2002cf3c l    d  .rwdata	00000000 .rwdata
200303ec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_CV_SDRAM_Nios_Test_bsp//obj/HAL/src/crt0.o
20020200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
20020094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mem_verify.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
20020b00 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
20020f54 l     F .text	00000034 __sprint_r
2002cc62 l     O .rodata	00000010 blanks.3546
2002cc72 l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
20022f18 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20024954 l     F .text	00000008 __fp_lock
2002495c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
2002cf3c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
2002cca8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
2002cdf0 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
20028f08 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
2002a164 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
2002a2c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
2002a2ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
2002a3e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
2002a4d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
2002a5c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
2002a79c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
2002e984 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
2002abb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2002acf4 l     F .text	00000038 alt_dev_reg
2002d8f8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2002afe4 l     F .text	00000204 altera_avalon_jtag_uart_irq
2002b1e8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
2002b820 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2002bbb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2002c050 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
2002c188 l     F .text	00000050 alt_get_errno
2002c1d8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
20020d98 g     F .text	0000001c putchar
200271b4 g     F .text	00000074 _mprec_log10
200272a4 g     F .text	00000084 __any_on
20028218 g     F .text	00000064 _isatty_r
2002ccd8 g     O .rodata	00000028 __mprec_tinytens
2002a6e4 g     F .text	00000078 alt_main
2002a120 g     F .text	00000044 __ashldi3
20020db4 g     F .text	00000084 _puts_r
20030448 g     O .bss	00000100 alt_irq
2002827c g     F .text	0000006c _lseek_r
2002e994 g       *ABS*	00000000 __flash_rwdata_start
200297a8 g     F .text	0000005c __eqdf2
200306d8 g       *ABS*	00000000 __alt_heap_start
20020d54 g     F .text	0000003c printf
20027c74 g     F .text	0000005c __sseek
200249e4 g     F .text	0000010c __sinit
20027d7c g     F .text	0000013c __swbuf_r
2002567c g     F .text	0000009c _setlocale_r
20024970 g     F .text	00000064 __sfmoreglue
2002a77c g     F .text	00000020 __malloc_unlock
2002617c g     F .text	00000128 memmove
200249d4 g     F .text	00000010 _cleanup
20026380 g     F .text	000000a8 _Balloc
20029860 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
20020000 g     F .entry	0000001c __reset
20020020 g       *ABS*	00000000 __flash_exceptions_start
200281b0 g     F .text	00000068 _fstat_r
20030404 g     O .bss	00000004 errno
2003040c g     O .bss	00000004 alt_argv
20036958 g       *ABS*	00000000 _gp
2002ab88 g     F .text	00000030 usleep
2002d778 g     O .rwdata	00000180 alt_fd_list
20020d90 g     F .text	00000008 _putchar_r
2002c418 g     F .text	00000090 alt_find_dev
20020c30 g     F .text	000000f8 memcpy
200203dc g     F .text	000004ec TMEM_Verify
20024964 g     F .text	0000000c _cleanup_r
20029984 g     F .text	000000d4 __floatsidf
2002c110 g     F .text	00000078 alt_io_redirect
20029928 g     F .text	0000005c __ltdf2
2002cad0 g       *ABS*	00000000 __DTOR_END__
20020e38 g     F .text	00000014 puts
20027110 g     F .text	000000a4 __ratio
2002b3e8 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
20020d28 g     F .text	0000002c _printf_r
20020c20 g     F .text	00000008 __udivsi3
2002a438 g     F .text	000000a0 isatty
2002cd28 g     O .rodata	000000c8 __mprec_tens
20025718 g     F .text	0000000c __locale_charset
2002c670 g     F .text	0000008c alt_icache_flush
20030400 g     O .bss	00000004 __malloc_top_pad
2002e960 g     O .rwdata	00000004 __mb_cur_max
20025724 g     F .text	0000000c _localeconv_r
20026780 g     F .text	0000003c __i2b
20025038 g     F .text	000004e4 __sfvwrite_r
20027b34 g     F .text	00000064 _sbrk_r
200282e8 g     F .text	0000006c _read_r
2002d33c g     O .rwdata	0000000c __lc_ctype
2002e97c g     O .rwdata	00000004 alt_max_fd
20029f08 g     F .text	00000104 __unpack_d
20028060 g     F .text	0000013c _fclose_r
20024924 g     F .text	00000030 fflush
200303fc g     O .bss	00000004 __malloc_max_sbrked_mem
2002925c g     F .text	00000054 __adddf3
20026e84 g     F .text	00000148 __b2d
2002897c g     F .text	0000058c __umoddi3
2002a614 g     F .text	000000d0 lseek
2002e958 g     O .rwdata	00000004 _global_impure_ptr
200274d4 g     F .text	000005fc _realloc_r
200306d8 g       *ABS*	00000000 __bss_end
2002bf60 g     F .text	000000f0 alt_iic_isr_register
2002aa84 g     F .text	00000104 alt_tick
200283b4 g     F .text	000005c8 __udivdi3
2002cd00 g     O .rodata	00000028 __mprec_bigtens
20026564 g     F .text	00000104 __s2b
20029b1c g     F .text	0000011c __floatunsidf
20026c24 g     F .text	00000058 __mcmp
20024bfc g     F .text	00000018 __fp_lock_all
2002bf14 g     F .text	0000004c alt_ic_irq_enabled
2002a9ec g     F .text	00000098 alt_alarm_stop
2003041c g     O .bss	00000004 alt_irq_active
200200ec g     F .exceptions	000000cc alt_irq_handler
2002d750 g     O .rwdata	00000028 alt_dev_null
2002a27c g     F .text	00000044 alt_dcache_flush_all
20026668 g     F .text	00000068 __hi0bits
20029a58 g     F .text	000000c4 __fixdfsi
2002e994 g       *ABS*	00000000 __ram_rwdata_end
2002e974 g     O .rwdata	00000008 alt_dev_list
2002ac08 g     F .text	000000ec write
20027328 g     F .text	000000bc _putc_r
2002cf3c g       *ABS*	00000000 __ram_rodata_end
2002a33c g     F .text	000000ac fstat
2002a0dc g     F .text	00000044 __lshrdi3
2002699c g     F .text	0000012c __pow5mult
200303f4 g     O .bss	00000004 __nlocale_changed
20020c28 g     F .text	00000008 __umodsi3
200306d8 g       *ABS*	00000000 end
2002af24 g     F .text	000000c0 altera_avalon_jtag_uart_init
2002cad0 g       *ABS*	00000000 __CTOR_LIST__
2003f400 g       *ABS*	00000000 __alt_stack_pointer
2002b894 g     F .text	00000088 alt_avalon_timer_sc_init
20029c38 g     F .text	000000ac __clzsi2
2002b600 g     F .text	00000220 altera_avalon_jtag_uart_write
20024bec g     F .text	00000004 __sfp_lock_acquire
20026084 g     F .text	000000f8 memchr
20020f88 g     F .text	00001df8 ___vfprintf_internal_r
20024d68 g     F .text	000002d0 _free_r
2002c8f4 g     F .text	000001a0 __call_exitprocs
200303f0 g     O .bss	00000004 __mlocale_changed
2002e964 g     O .rwdata	00000004 __malloc_sbrk_base
200201b8 g     F .text	0000004c _start
20030414 g     O .bss	00000004 _alt_tick_rate
20020e64 g     F .text	00000064 rand
20026ac8 g     F .text	0000015c __lshift
20030418 g     O .bss	00000004 _alt_nticks
2002a7ec g     F .text	000000f0 read
2002ad60 g     F .text	00000060 alt_sys_init
2002c7c4 g     F .text	00000130 __register_exitproc
200267bc g     F .text	000001e0 __multiply
2002b28c g     F .text	00000068 altera_avalon_jtag_uart_close
2002cf3c g       *ABS*	00000000 __ram_rwdata_start
2002cad0 g       *ABS*	00000000 __ram_rodata_start
20030420 g     O .bss	00000028 __malloc_current_mallinfo
20026fcc g     F .text	00000144 __d2b
2002adc0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2002c5bc g     F .text	000000b4 alt_get_fd
2002ba5c g     F .text	00000154 alt_busy_sleep
2002a00c g     F .text	000000d0 __fpcmp_parts_d
20027ffc g     F .text	00000064 _close_r
2002c748 g     F .text	0000007c memcmp
2002ae80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
200306d8 g       *ABS*	00000000 __alt_stack_base
2002aed0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
20022da4 g     F .text	00000174 __swsetup_r
200295f4 g     F .text	000001b4 __divdf3
20024af0 g     F .text	000000fc __sfp
20027228 g     F .text	0000007c __copybits
2002d348 g     O .rwdata	00000408 __malloc_av_
20024bf8 g     F .text	00000004 __sinit_lock_release
20029310 g     F .text	000002e4 __muldf3
20027b98 g     F .text	00000054 __sread
2002c4a8 g     F .text	00000114 alt_find_file
2002bc00 g     F .text	000000a0 alt_dev_llist_insert
2002a75c g     F .text	00000020 __malloc_lock
2002a93c g     F .text	000000b0 sbrk
2002473c g     F .text	000001e8 _fflush_r
20027f40 g     F .text	000000bc _calloc_r
200303ec g       *ABS*	00000000 __bss_start
200262a4 g     F .text	000000dc memset
20020204 g     F .text	000001d8 main
20030410 g     O .bss	00000004 alt_envp
200303f8 g     O .bss	00000004 __malloc_max_total_mem
2002ae20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
20027eb8 g     F .text	0000001c __swbuf
20020e4c g     F .text	00000018 srand
20027cd0 g     F .text	00000008 __sclose
2003f400 g       *ABS*	00000000 __alt_heap_limit
2002819c g     F .text	00000014 fclose
20030548 g     O .bss	00000190 _atexit0
20023120 g     F .text	0000161c _dtoa_r
20025900 g     F .text	00000784 _malloc_r
2002e980 g     O .rwdata	00000004 alt_errno
2002551c g     F .text	000000a8 _fwalk
200273e4 g     F .text	000000f0 putc
20020b74 g     F .text	00000050 __divsi3
2002cdfc g     O .rodata	00000014 __thenan_df
20024c2c g     F .text	0000013c _malloc_trim_r
2002cad0 g       *ABS*	00000000 __CTOR_END__
20027cd8 g     F .text	000000a4 strcmp
2002cad0 g       *ABS*	00000000 __flash_rodata_start
2002cad0 g       *ABS*	00000000 __DTOR_LIST__
20029804 g     F .text	0000005c __nedf2
2002ad2c g     F .text	00000034 alt_irq_init
2002a8dc g     F .text	00000060 alt_release_fd
2002ce10 g     O .rodata	00000100 __clz_tab
200303ec g     O .bss	00000004 _PathLocale
2002c6fc g     F .text	00000014 atexit
20027ed4 g     F .text	0000006c _write_r
20025730 g     F .text	0000001c setlocale
2002e95c g     O .rwdata	00000004 _impure_ptr
20030408 g     O .bss	00000004 alt_argc
2002bcfc g     F .text	0000005c _do_dtors
20020020 g       .exceptions	00000000 alt_irq_entry
20026e24 g     F .text	00000060 __ulp
20027ad0 g     F .text	00000038 __isinfd
20024c14 g     F .text	00000018 __fp_unlock_all
2002e96c g     O .rwdata	00000008 alt_fs_list
20020020 g       *ABS*	00000000 __ram_exceptions_start
2002574c g     F .text	0000000c localeconv
20020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
2002bd88 g     F .text	00000050 alt_ic_isr_register
2002e994 g       *ABS*	00000000 _edata
200306d8 g       *ABS*	00000000 _end
200201b8 g       *ABS*	00000000 __ram_exceptions_end
2002b2f4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
2002be74 g     F .text	000000a0 alt_ic_irq_disable
20027bec g     F .text	00000088 __swrite
2002e968 g     O .rwdata	00000004 __malloc_trim_threshold
2002c3f8 g     F .text	00000020 altera_nios2_qsys_irq_init
2002c710 g     F .text	00000038 exit
200255c4 g     F .text	000000b8 _fwalk_reent
20026c7c g     F .text	000001a8 __mdiff
20020bc4 g     F .text	0000005c __modsi3
200208c8 g     F .text	00000238 TMEM_QuickVerify
2003f400 g       *ABS*	00000000 __alt_data_end
20020020 g     F .exceptions	00000000 alt_exception
20024bf0 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
2002ca94 g     F .text	0000003c _exit
20027b08 g     F .text	0000002c __isnand
2002b91c g     F .text	00000140 alt_alarm_start
20028354 g     F .text	00000060 __muldi3
20025758 g     F .text	000001a8 __smakebuf_r
20020ec8 g     F .text	0000008c strlen
2002c2a4 g     F .text	00000154 open
200298c4 g     F .text	00000064 __gedf2
2002bd58 g     F .text	00000030 alt_icache_flush_all
2002e990 g     O .rwdata	00000004 alt_priority_mask
2002bdd8 g     F .text	0000009c alt_ic_irq_enable
20022d80 g     F .text	00000024 __vfprintf_internal
200292b0 g     F .text	00000060 __subdf3
200266d0 g     F .text	000000b0 __lo0bits
2002e988 g     O .rwdata	00000008 alt_alarm_list
2002bca0 g     F .text	0000005c _do_ctors
2002a1b4 g     F .text	000000c8 close
2002a544 g     F .text	00000080 alt_load
20029ce4 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
20024bf4 g     F .text	00000004 __sinit_lock_acquire
20026450 g     F .text	00000114 __multadd
20026428 g     F .text	00000028 _Bfree



Disassembly of section .entry:

20020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2002000c:	00bffd16 	blt	zero,r2,20020004 <__alt_data_end+0xfffe0c04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20020010:	004800b4 	movhi	at,8194
    ori r1, r1, %lo(_start)
20020014:	08406e14 	ori	at,at,440
    jmp r1
20020018:	0800683a 	jmp	at
2002001c:	00000000 	call	20000000 <__alt_mem_sdram+0x20000000>

Disassembly of section .exceptions:

20020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2002007c:	10000326 	beq	r2,zero,2002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20020080:	20000226 	beq	r4,zero,2002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20020084:	00200ec0 	call	200200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20020088:	00000306 	br	20020098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2002008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20020090:	e8bfff17 	ldw	r2,-4(ea)

20020094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
20020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
20020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
2002009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200200e8:	ef80083a 	eret

200200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200200ec:	defff904 	addi	sp,sp,-28
200200f0:	dfc00615 	stw	ra,24(sp)
200200f4:	df000515 	stw	fp,20(sp)
200200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
200200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20020100:	0005313a 	rdctl	r2,ipending
20020104:	e0bffe15 	stw	r2,-8(fp)

  return active;
20020108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2002010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20020110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20020114:	00800044 	movi	r2,1
20020118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2002011c:	e0fffb17 	ldw	r3,-20(fp)
20020120:	e0bffc17 	ldw	r2,-16(fp)
20020124:	1884703a 	and	r2,r3,r2
20020128:	10001726 	beq	r2,zero,20020188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2002012c:	00c800f4 	movhi	r3,8195
20020130:	18c11204 	addi	r3,r3,1096
20020134:	e0bffd17 	ldw	r2,-12(fp)
20020138:	100490fa 	slli	r2,r2,3
2002013c:	1885883a 	add	r2,r3,r2
20020140:	10c00017 	ldw	r3,0(r2)
20020144:	010800f4 	movhi	r4,8195
20020148:	21011204 	addi	r4,r4,1096
2002014c:	e0bffd17 	ldw	r2,-12(fp)
20020150:	100490fa 	slli	r2,r2,3
20020154:	2085883a 	add	r2,r4,r2
20020158:	10800104 	addi	r2,r2,4
2002015c:	10800017 	ldw	r2,0(r2)
20020160:	1009883a 	mov	r4,r2
20020164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20020168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2002016c:	0005313a 	rdctl	r2,ipending
20020170:	e0bfff15 	stw	r2,-4(fp)

  return active;
20020174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
20020178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
2002017c:	e0bffb17 	ldw	r2,-20(fp)
20020180:	103fe31e 	bne	r2,zero,20020110 <__alt_data_end+0xfffe0d10>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
20020184:	00000706 	br	200201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
20020188:	e0bffc17 	ldw	r2,-16(fp)
2002018c:	1085883a 	add	r2,r2,r2
20020190:	e0bffc15 	stw	r2,-16(fp)
      i++;
20020194:	e0bffd17 	ldw	r2,-12(fp)
20020198:	10800044 	addi	r2,r2,1
2002019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200201a0:	003fde06 	br	2002011c <__alt_data_end+0xfffe0d1c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
200201a4:	e037883a 	mov	sp,fp
200201a8:	dfc00117 	ldw	ra,4(sp)
200201ac:	df000017 	ldw	fp,0(sp)
200201b0:	dec00204 	addi	sp,sp,8
200201b4:	f800283a 	ret

Disassembly of section .text:

200201b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
200201b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
200201bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
200201c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
200201c4:	00bffd16 	blt	zero,r2,200201bc <__alt_data_end+0xfffe0dbc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
200201c8:	06c800f4 	movhi	sp,8195
    ori sp, sp, %lo(__alt_stack_pointer)
200201cc:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
200201d0:	068800f4 	movhi	gp,8195
    ori gp, gp, %lo(_gp)
200201d4:	d69a5614 	ori	gp,gp,26968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
200201d8:	008800f4 	movhi	r2,8195
    ori r2, r2, %lo(__bss_start)
200201dc:	1080fb14 	ori	r2,r2,1004

    movhi r3, %hi(__bss_end)
200201e0:	00c800f4 	movhi	r3,8195
    ori r3, r3, %lo(__bss_end)
200201e4:	18c1b614 	ori	r3,r3,1752

    beq r2, r3, 1f
200201e8:	10c00326 	beq	r2,r3,200201f8 <_start+0x40>

0:
    stw zero, (r2)
200201ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
200201f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
200201f4:	10fffd36 	bltu	r2,r3,200201ec <__alt_data_end+0xfffe0dec>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
200201f8:	002a5440 	call	2002a544 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
200201fc:	002a6e40 	call	2002a6e4 <alt_main>

20020200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20020200:	003fff06 	br	20020200 <__alt_data_end+0xfffe0e00>

20020204 <main>:
#include "mem_verify.h"
#include "system.h"
#include "alt_types.h"

int main()
{
20020204:	defff404 	addi	sp,sp,-48
20020208:	dfc00b15 	stw	ra,44(sp)
2002020c:	df000a15 	stw	fp,40(sp)
20020210:	dc000915 	stw	r16,36(sp)
20020214:	df000904 	addi	fp,sp,36
	bool bPass, bLoop;
	int TestIndex ;
	alt_u32 InitValue = 0x01;
20020218:	00800044 	movi	r2,1
2002021c:	e0bffb15 	stw	r2,-20(fp)
	bool bShowMessage = TRUE;
20020220:	00800044 	movi	r2,1
20020224:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 TimeStart, TimeElapsed;
	alt_u8 Status,ButtonStatus;
	const alt_u8 ButtonMask = 0x0F; // 4 button
20020228:	008003c4 	movi	r2,15
2002022c:	e0bffd05 	stb	r2,-12(fp)

    printf("===== SDRAM Test! Size=%dMB (CPU Clock:%d) =====\r\n", SDRAM_SPAN/1024/1024, ALT_CPU_CPU_FREQ);
20020230:	010800f4 	movhi	r4,8195
20020234:	2132b404 	addi	r4,r4,-13616
20020238:	01401004 	movi	r5,64
2002023c:	018221b4 	movhi	r6,2182
20020240:	31807004 	addi	r6,r6,448
20020244:	0020d540 	call	20020d54 <printf>
20020248:	00000106 	br	20020250 <main+0x4c>
            	if ((ButtonStatus & ButtonMask) != ButtonMask)
            		bLoop = FALSE; // press any key to abort continued test
            }
            usleep(600*1000);
        }while(bLoop && bPass);
	} // while(1)
2002024c:	0001883a 	nop
	const alt_u8 ButtonMask = 0x0F; // 4 button

    printf("===== SDRAM Test! Size=%dMB (CPU Clock:%d) =====\r\n", SDRAM_SPAN/1024/1024, ALT_CPU_CPU_FREQ);

    while(1){
        printf("\n==========================================================\n");
20020250:	010800f4 	movhi	r4,8195
20020254:	2132c104 	addi	r4,r4,-13564
20020258:	0020e380 	call	20020e38 <puts>
        printf("Press any KEY to start test [KEY0 for continued test] \n");
2002025c:	010800f4 	movhi	r4,8195
20020260:	2132d004 	addi	r4,r4,-13504
20020264:	0020e380 	call	20020e38 <puts>
        ButtonStatus = ButtonMask;
20020268:	e0bffd03 	ldbu	r2,-12(fp)
2002026c:	e0bffa05 	stb	r2,-24(fp)
        while((ButtonStatus & ButtonMask) == ButtonMask){
20020270:	00000406 	br	20020284 <main+0x80>

        	ButtonStatus = IORD(KEY_BASE, 0);
20020274:	00880134 	movhi	r2,8196
20020278:	10840804 	addi	r2,r2,4128
2002027c:	10800037 	ldwio	r2,0(r2)
20020280:	e0bffa05 	stb	r2,-24(fp)

    while(1){
        printf("\n==========================================================\n");
        printf("Press any KEY to start test [KEY0 for continued test] \n");
        ButtonStatus = ButtonMask;
        while((ButtonStatus & ButtonMask) == ButtonMask){
20020284:	e0fffa03 	ldbu	r3,-24(fp)
20020288:	e0bffd03 	ldbu	r2,-12(fp)
2002028c:	1884703a 	and	r2,r3,r2
20020290:	10c03fcc 	andi	r3,r2,255
20020294:	e0bffd03 	ldbu	r2,-12(fp)
20020298:	18bff626 	beq	r3,r2,20020274 <__alt_data_end+0xfffe0e74>

        	ButtonStatus = IORD(KEY_BASE, 0);
        }

        if ((ButtonStatus & 0x01) == 0x00){
2002029c:	e0bffa03 	ldbu	r2,-24(fp)
200202a0:	1080004c 	andi	r2,r2,1
200202a4:	1000031e 	bne	r2,zero,200202b4 <main+0xb0>
            bLoop = TRUE;
200202a8:	00800044 	movi	r2,1
200202ac:	e0bff815 	stw	r2,-32(fp)
200202b0:	00000106 	br	200202b8 <main+0xb4>
        }else{
            bLoop = FALSE;
200202b4:	e03ff815 	stw	zero,-32(fp)
        }

		//
        bPass = TRUE;
200202b8:	00800044 	movi	r2,1
200202bc:	e0bff715 	stw	r2,-36(fp)
        TestIndex = 0;
200202c0:	e03ff915 	stw	zero,-28(fp)

        do{
        	TestIndex++;
200202c4:	e0bff917 	ldw	r2,-28(fp)
200202c8:	10800044 	addi	r2,r2,1
200202cc:	e0bff915 	stw	r2,-28(fp)
        	printf("=====> SDRAM Testing, Iteration: %d\n", TestIndex);
200202d0:	010800f4 	movhi	r4,8195
200202d4:	2132de04 	addi	r4,r4,-13448
200202d8:	e17ff917 	ldw	r5,-28(fp)
200202dc:	0020d540 	call	20020d54 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
200202e0:	008800f4 	movhi	r2,8195
200202e4:	10810604 	addi	r2,r2,1048
200202e8:	10800017 	ldw	r2,0(r2)
        	TimeStart = alt_nticks();
200202ec:	e0bffe15 	stw	r2,-8(fp)

        	if (bPass)
200202f0:	e0bff717 	ldw	r2,-36(fp)
200202f4:	10000626 	beq	r2,zero,20020310 <main+0x10c>
        		bPass = TMEM_Verify(SDRAM_BASE, SDRAM_SPAN, InitValue,  bShowMessage);
200202f8:	0009883a 	mov	r4,zero
200202fc:	01410034 	movhi	r5,1024
20020300:	e1bffb17 	ldw	r6,-20(fp)
20020304:	e1fffc17 	ldw	r7,-16(fp)
20020308:	00203dc0 	call	200203dc <TMEM_Verify>
2002030c:	e0bff715 	stw	r2,-36(fp)
20020310:	008800f4 	movhi	r2,8195
20020314:	10810604 	addi	r2,r2,1048
20020318:	10800017 	ldw	r2,0(r2)

        	TimeElapsed = alt_nticks() - TimeStart;
2002031c:	1007883a 	mov	r3,r2
20020320:	e0bffe17 	ldw	r2,-8(fp)
20020324:	1885c83a 	sub	r2,r3,r2
20020328:	e0bfff15 	stw	r2,-4(fp)
        	printf("SDRAM test:%s, %d seconds\r\n", bPass?"Pass":"NG", (int)(TimeElapsed/alt_ticks_per_second()));
2002032c:	e0bff717 	ldw	r2,-36(fp)
20020330:	10000326 	beq	r2,zero,20020340 <main+0x13c>
20020334:	040800f4 	movhi	r16,8195
20020338:	8432e804 	addi	r16,r16,-13408
2002033c:	00000206 	br	20020348 <main+0x144>
20020340:	040800f4 	movhi	r16,8195
20020344:	8432ea04 	addi	r16,r16,-13400
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20020348:	008800f4 	movhi	r2,8195
2002034c:	10810504 	addi	r2,r2,1044
20020350:	10800017 	ldw	r2,0(r2)
20020354:	e13fff17 	ldw	r4,-4(fp)
20020358:	100b883a 	mov	r5,r2
2002035c:	0020c200 	call	20020c20 <__udivsi3>
20020360:	010800f4 	movhi	r4,8195
20020364:	2132eb04 	addi	r4,r4,-13396
20020368:	800b883a 	mov	r5,r16
2002036c:	100d883a 	mov	r6,r2
20020370:	0020d540 	call	20020d54 <printf>

            usleep(500*1000);
20020374:	01000234 	movhi	r4,8
20020378:	21284804 	addi	r4,r4,-24288
2002037c:	002ab880 	call	2002ab88 <usleep>
            if (bPass && bLoop){  // is abort loop?
20020380:	e0bff717 	ldw	r2,-36(fp)
20020384:	10000d26 	beq	r2,zero,200203bc <main+0x1b8>
20020388:	e0bff817 	ldw	r2,-32(fp)
2002038c:	10000b26 	beq	r2,zero,200203bc <main+0x1b8>
            	ButtonStatus = IORD(KEY_BASE, 0);
20020390:	00880134 	movhi	r2,8196
20020394:	10840804 	addi	r2,r2,4128
20020398:	10800037 	ldwio	r2,0(r2)
2002039c:	e0bffa05 	stb	r2,-24(fp)
            	if ((ButtonStatus & ButtonMask) != ButtonMask)
200203a0:	e0fffa03 	ldbu	r3,-24(fp)
200203a4:	e0bffd03 	ldbu	r2,-12(fp)
200203a8:	1884703a 	and	r2,r3,r2
200203ac:	10c03fcc 	andi	r3,r2,255
200203b0:	e0bffd03 	ldbu	r2,-12(fp)
200203b4:	18800126 	beq	r3,r2,200203bc <main+0x1b8>
            		bLoop = FALSE; // press any key to abort continued test
200203b8:	e03ff815 	stw	zero,-32(fp)
            }
            usleep(600*1000);
200203bc:	01000274 	movhi	r4,9
200203c0:	2109f004 	addi	r4,r4,10176
200203c4:	002ab880 	call	2002ab88 <usleep>
        }while(bLoop && bPass);
200203c8:	e0bff817 	ldw	r2,-32(fp)
200203cc:	103f9f26 	beq	r2,zero,2002024c <__alt_data_end+0xfffe0e4c>
200203d0:	e0bff717 	ldw	r2,-36(fp)
200203d4:	103fbb1e 	bne	r2,zero,200202c4 <__alt_data_end+0xfffe0ec4>
	} // while(1)
200203d8:	003f9c06 	br	2002024c <__alt_data_end+0xfffe0e4c>

200203dc <TMEM_Verify>:
#include "terasic_includes.h"
#include "mem_verify.h"



bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue, bool bShowMessage){
200203dc:	def7e504 	addi	sp,sp,-8300
200203e0:	dfc81a15 	stw	ra,8296(sp)
200203e4:	df081915 	stw	fp,8292(sp)
200203e8:	df081904 	addi	fp,sp,8292
200203ec:	e13ffc15 	stw	r4,-16(fp)
200203f0:	e17ffd15 	stw	r5,-12(fp)
200203f4:	e1bffe15 	stw	r6,-8(fp)
200203f8:	e1ffff15 	stw	r7,-4(fp)
    bool bPass = TRUE;
200203fc:	00800044 	movi	r2,1
20020400:	e0b7e715 	stw	r2,-8292(fp)
    alt_u32 szData[1025];
    alt_u32 szRead[1025];
    int i, nRemainedLen, nAccessLen;
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
20020404:	e037ed15 	stw	zero,-8268(fp)
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
20020408:	e037e815 	stw	zero,-8288(fp)
2002040c:	00001206 	br	20020458 <TMEM_Verify+0x7c>
        szProgress[i] = ByteLen/10*(i+1);     
20020410:	e0bffd17 	ldw	r2,-12(fp)
20020414:	1009883a 	mov	r4,r2
20020418:	01400284 	movi	r5,10
2002041c:	0020c200 	call	20020c20 <__udivsi3>
20020420:	1007883a 	mov	r3,r2
20020424:	e0b7e817 	ldw	r2,-8288(fp)
20020428:	10800044 	addi	r2,r2,1
2002042c:	1887383a 	mul	r3,r3,r2
20020430:	e0b7e817 	ldw	r2,-8288(fp)
20020434:	1085883a 	add	r2,r2,r2
20020438:	1085883a 	add	r2,r2,r2
2002043c:	e137e704 	addi	r4,fp,-8292
20020440:	2085883a 	add	r2,r4,r2
20020444:	10880b04 	addi	r2,r2,8236
20020448:	10c00015 	stw	r3,0(r2)
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
2002044c:	e0b7e817 	ldw	r2,-8288(fp)
20020450:	10800044 	addi	r2,r2,1
20020454:	e0b7e815 	stw	r2,-8288(fp)
20020458:	e0b7e817 	ldw	r2,-8288(fp)
2002045c:	10800290 	cmplti	r2,r2,10
20020460:	103feb1e 	bne	r2,zero,20020410 <__alt_data_end+0xfffe1010>
        szProgress[i] = ByteLen/10*(i+1);     
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
20020464:	00810044 	movi	r2,1025
20020468:	e0b7ee15 	stw	r2,-8264(fp)
    for(i=0;i<nItemNum;i++){
2002046c:	e037e815 	stw	zero,-8288(fp)
20020470:	00001e06 	br	200204ec <TMEM_Verify+0x110>
        if (i == 0)
20020474:	e0b7e817 	ldw	r2,-8288(fp)
20020478:	1000091e 	bne	r2,zero,200204a0 <TMEM_Verify+0xc4>
            szData[i] = InitValue;
2002047c:	e0b7e817 	ldw	r2,-8288(fp)
20020480:	1085883a 	add	r2,r2,r2
20020484:	1085883a 	add	r2,r2,r2
20020488:	e0f7e704 	addi	r3,fp,-8292
2002048c:	1885883a 	add	r2,r3,r2
20020490:	10800904 	addi	r2,r2,36
20020494:	e0fffe17 	ldw	r3,-8(fp)
20020498:	10c00015 	stw	r3,0(r2)
2002049c:	00001006 	br	200204e0 <TMEM_Verify+0x104>
        else     
            szData[i] = szData[i-1] * 13;
200204a0:	e0b7e817 	ldw	r2,-8288(fp)
200204a4:	10bfffc4 	addi	r2,r2,-1
200204a8:	1085883a 	add	r2,r2,r2
200204ac:	1085883a 	add	r2,r2,r2
200204b0:	e137e704 	addi	r4,fp,-8292
200204b4:	2085883a 	add	r2,r4,r2
200204b8:	10800904 	addi	r2,r2,36
200204bc:	10800017 	ldw	r2,0(r2)
200204c0:	10c00364 	muli	r3,r2,13
200204c4:	e0b7e817 	ldw	r2,-8288(fp)
200204c8:	1085883a 	add	r2,r2,r2
200204cc:	1085883a 	add	r2,r2,r2
200204d0:	e137e704 	addi	r4,fp,-8292
200204d4:	2085883a 	add	r2,r4,r2
200204d8:	10800904 	addi	r2,r2,36
200204dc:	10c00015 	stw	r3,0(r2)
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
200204e0:	e0b7e817 	ldw	r2,-8288(fp)
200204e4:	10800044 	addi	r2,r2,1
200204e8:	e0b7e815 	stw	r2,-8288(fp)
200204ec:	e0f7e817 	ldw	r3,-8288(fp)
200204f0:	e0b7ee17 	ldw	r2,-8264(fp)
200204f4:	18bfdf36 	bltu	r3,r2,20020474 <__alt_data_end+0xfffe1074>
        if (i == 0)
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
200204f8:	e0b7ee17 	ldw	r2,-8264(fp)
200204fc:	10bfffc4 	addi	r2,r2,-1
20020500:	1085883a 	add	r2,r2,r2
20020504:	1085883a 	add	r2,r2,r2
20020508:	e0f7e704 	addi	r3,fp,-8292
2002050c:	1885883a 	add	r2,r3,r2
20020510:	10800904 	addi	r2,r2,36
20020514:	00eaaaf4 	movhi	r3,43691
20020518:	18eaaa84 	addi	r3,r3,-21846
2002051c:	10c00015 	stw	r3,0(r2)
    szData[nItemNum-2] = 0x55555555;
20020520:	e0b7ee17 	ldw	r2,-8264(fp)
20020524:	10bfff84 	addi	r2,r2,-2
20020528:	1085883a 	add	r2,r2,r2
2002052c:	1085883a 	add	r2,r2,r2
20020530:	e137e704 	addi	r4,fp,-8292
20020534:	2085883a 	add	r2,r4,r2
20020538:	10800904 	addi	r2,r2,36
2002053c:	00d55574 	movhi	r3,21845
20020540:	18d55544 	addi	r3,r3,21845
20020544:	10c00015 	stw	r3,0(r2)
    szData[nItemNum-3] = 0x00000000;
20020548:	e0b7ee17 	ldw	r2,-8264(fp)
2002054c:	10bfff44 	addi	r2,r2,-3
20020550:	1085883a 	add	r2,r2,r2
20020554:	1085883a 	add	r2,r2,r2
20020558:	e0f7e704 	addi	r3,fp,-8292
2002055c:	1885883a 	add	r2,r3,r2
20020560:	10800904 	addi	r2,r2,36
20020564:	10000015 	stw	zero,0(r2)
    szData[nItemNum-4] = 0xFFFFFFFF;
20020568:	e0b7ee17 	ldw	r2,-8264(fp)
2002056c:	10bfff04 	addi	r2,r2,-4
20020570:	1085883a 	add	r2,r2,r2
20020574:	1085883a 	add	r2,r2,r2
20020578:	e137e704 	addi	r4,fp,-8292
2002057c:	2085883a 	add	r2,r4,r2
20020580:	10800904 	addi	r2,r2,36
20020584:	00ffffc4 	movi	r3,-1
20020588:	10c00015 	stw	r3,0(r2)
    
    if (bShowMessage)
2002058c:	e0bfff17 	ldw	r2,-4(fp)
20020590:	10000326 	beq	r2,zero,200205a0 <TMEM_Verify+0x1c4>
        printf("write...\n");
20020594:	010800f4 	movhi	r4,8195
20020598:	2132f204 	addi	r4,r4,-13368
2002059c:	0020e380 	call	20020e38 <puts>
    // write
    pDes = (alt_u32 *)BaseAddr;
200205a0:	e0bffc17 	ldw	r2,-16(fp)
200205a4:	e0b7ea15 	stw	r2,-8280(fp)
    nAccessLen = sizeof(szData);
200205a8:	00840104 	movi	r2,4100
200205ac:	e0b7e915 	stw	r2,-8284(fp)
    nPos = 0;
200205b0:	e037ec15 	stw	zero,-8272(fp)
    while(nPos < ByteLen){
200205b4:	00003506 	br	2002068c <TMEM_Verify+0x2b0>
        nRemainedLen = ByteLen - nPos;
200205b8:	e0fffd17 	ldw	r3,-12(fp)
200205bc:	e0b7ec17 	ldw	r2,-8272(fp)
200205c0:	1885c83a 	sub	r2,r3,r2
200205c4:	e0b7ef15 	stw	r2,-8260(fp)
        if (nAccessLen > nRemainedLen)
200205c8:	e0b7e917 	ldw	r2,-8284(fp)
200205cc:	e0f7ef17 	ldw	r3,-8260(fp)
200205d0:	1880020e 	bge	r3,r2,200205dc <TMEM_Verify+0x200>
            nAccessLen = nRemainedLen;
200205d4:	e0b7ef17 	ldw	r2,-8260(fp)
200205d8:	e0b7e915 	stw	r2,-8284(fp)
        memcpy(pDes, szData, nAccessLen);
200205dc:	e0b7e917 	ldw	r2,-8284(fp)
200205e0:	e0f7f004 	addi	r3,fp,-8256
200205e4:	e137ea17 	ldw	r4,-8280(fp)
200205e8:	180b883a 	mov	r5,r3
200205ec:	100d883a 	mov	r6,r2
200205f0:	0020c300 	call	20020c30 <memcpy>
        pDes += nAccessLen/4;
200205f4:	e0b7e917 	ldw	r2,-8284(fp)
200205f8:	1000010e 	bge	r2,zero,20020600 <TMEM_Verify+0x224>
200205fc:	108000c4 	addi	r2,r2,3
20020600:	1005d0ba 	srai	r2,r2,2
20020604:	1085883a 	add	r2,r2,r2
20020608:	1085883a 	add	r2,r2,r2
2002060c:	e0f7ea17 	ldw	r3,-8280(fp)
20020610:	1885883a 	add	r2,r3,r2
20020614:	e0b7ea15 	stw	r2,-8280(fp)
        nPos += nAccessLen;
20020618:	e0b7e917 	ldw	r2,-8284(fp)
2002061c:	e0f7ec17 	ldw	r3,-8272(fp)
20020620:	1885883a 	add	r2,r3,r2
20020624:	e0b7ec15 	stw	r2,-8272(fp)
        
        if (bShowMessage){
20020628:	e0bfff17 	ldw	r2,-4(fp)
2002062c:	10001726 	beq	r2,zero,2002068c <TMEM_Verify+0x2b0>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
20020630:	e0b7ed17 	ldw	r2,-8268(fp)
20020634:	10800288 	cmpgei	r2,r2,10
20020638:	1000141e 	bne	r2,zero,2002068c <TMEM_Verify+0x2b0>
2002063c:	e0b7ed17 	ldw	r2,-8268(fp)
20020640:	1085883a 	add	r2,r2,r2
20020644:	1085883a 	add	r2,r2,r2
20020648:	e0f7e704 	addi	r3,fp,-8292
2002064c:	1885883a 	add	r2,r3,r2
20020650:	10880b04 	addi	r2,r2,8236
20020654:	10800017 	ldw	r2,0(r2)
20020658:	e0f7ec17 	ldw	r3,-8272(fp)
2002065c:	18800b36 	bltu	r3,r2,2002068c <TMEM_Verify+0x2b0>
                nProgressIndex++;
20020660:	e0b7ed17 	ldw	r2,-8268(fp)
20020664:	10800044 	addi	r2,r2,1
20020668:	e0b7ed15 	stw	r2,-8268(fp)
                printf("%02d%% ", nProgressIndex*10);
2002066c:	e0b7ed17 	ldw	r2,-8268(fp)
20020670:	108002a4 	muli	r2,r2,10
20020674:	010800f4 	movhi	r4,8195
20020678:	2132f504 	addi	r4,r4,-13356
2002067c:	100b883a 	mov	r5,r2
20020680:	0020d540 	call	20020d54 <printf>
                usleep(50);
20020684:	01000c84 	movi	r4,50
20020688:	002ab880 	call	2002ab88 <usleep>
        printf("write...\n");
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
2002068c:	e0f7ec17 	ldw	r3,-8272(fp)
20020690:	e0bffd17 	ldw	r2,-12(fp)
20020694:	18bfc836 	bltu	r3,r2,200205b8 <__alt_data_end+0xfffe11b8>
                usleep(50);
            }
        }            
    } 
    
    alt_dcache_flush_all();
20020698:	002a27c0 	call	2002a27c <alt_dcache_flush_all>
    
    if (bShowMessage){
2002069c:	e0bfff17 	ldw	r2,-4(fp)
200206a0:	10000626 	beq	r2,zero,200206bc <TMEM_Verify+0x2e0>
        nProgressIndex = 0;
200206a4:	e037ed15 	stw	zero,-8268(fp)
        printf("\nread/verify...\n");
200206a8:	010800f4 	movhi	r4,8195
200206ac:	2132f704 	addi	r4,r4,-13348
200206b0:	0020e380 	call	20020e38 <puts>
        usleep(50);
200206b4:	01000c84 	movi	r4,50
200206b8:	002ab880 	call	2002ab88 <usleep>
    }        
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
200206bc:	e0bffc17 	ldw	r2,-16(fp)
200206c0:	e0b7eb15 	stw	r2,-8276(fp)
    nAccessLen = sizeof(szRead);
200206c4:	00840104 	movi	r2,4100
200206c8:	e0b7e915 	stw	r2,-8284(fp)
    nPos = 0;
200206cc:	e037ec15 	stw	zero,-8272(fp)
    while(bPass && nPos < ByteLen){
200206d0:	00006e06 	br	2002088c <TMEM_Verify+0x4b0>
        nRemainedLen = ByteLen - nPos;
200206d4:	e0fffd17 	ldw	r3,-12(fp)
200206d8:	e0b7ec17 	ldw	r2,-8272(fp)
200206dc:	1885c83a 	sub	r2,r3,r2
200206e0:	e0b7ef15 	stw	r2,-8260(fp)
        if (nAccessLen > nRemainedLen)
200206e4:	e0b7e917 	ldw	r2,-8284(fp)
200206e8:	e0f7ef17 	ldw	r3,-8260(fp)
200206ec:	1880020e 	bge	r3,r2,200206f8 <TMEM_Verify+0x31c>
            nAccessLen = nRemainedLen;
200206f0:	e0b7ef17 	ldw	r2,-8260(fp)
200206f4:	e0b7e915 	stw	r2,-8284(fp)
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
200206f8:	e0b7e917 	ldw	r2,-8284(fp)
200206fc:	e0fbf104 	addi	r3,fp,-4156
20020700:	1809883a 	mov	r4,r3
20020704:	e177eb17 	ldw	r5,-8276(fp)
20020708:	100d883a 	mov	r6,r2
2002070c:	0020c300 	call	20020c30 <memcpy>
        // verify
        nItemNum = nAccessLen / 4;
20020710:	e0b7e917 	ldw	r2,-8284(fp)
20020714:	1000010e 	bge	r2,zero,2002071c <TMEM_Verify+0x340>
20020718:	108000c4 	addi	r2,r2,3
2002071c:	1005d0ba 	srai	r2,r2,2
20020720:	e0b7ee15 	stw	r2,-8264(fp)
        for(i=0;i<nItemNum && bPass;i++){
20020724:	e037e815 	stw	zero,-8288(fp)
20020728:	00003006 	br	200207ec <TMEM_Verify+0x410>
            if (szRead[i] != szData[i]){
2002072c:	e0b7e817 	ldw	r2,-8288(fp)
20020730:	1085883a 	add	r2,r2,r2
20020734:	1085883a 	add	r2,r2,r2
20020738:	e137e704 	addi	r4,fp,-8292
2002073c:	2085883a 	add	r2,r4,r2
20020740:	10840a04 	addi	r2,r2,4136
20020744:	10c00017 	ldw	r3,0(r2)
20020748:	e0b7e817 	ldw	r2,-8288(fp)
2002074c:	1085883a 	add	r2,r2,r2
20020750:	1085883a 	add	r2,r2,r2
20020754:	e137e704 	addi	r4,fp,-8292
20020758:	2085883a 	add	r2,r4,r2
2002075c:	10800904 	addi	r2,r2,36
20020760:	10800017 	ldw	r2,0(r2)
20020764:	18801e26 	beq	r3,r2,200207e0 <TMEM_Verify+0x404>
                if (bShowMessage){
20020768:	e0bfff17 	ldw	r2,-4(fp)
2002076c:	10001b26 	beq	r2,zero,200207dc <TMEM_Verify+0x400>
                   printf("verify ng, read=%08Xh, expected=%08Xh, i=%Xh\n", (int)szRead[i], (int)szData[i], (int)(nPos/4+i));
20020770:	e0b7e817 	ldw	r2,-8288(fp)
20020774:	1085883a 	add	r2,r2,r2
20020778:	1085883a 	add	r2,r2,r2
2002077c:	e0f7e704 	addi	r3,fp,-8292
20020780:	1885883a 	add	r2,r3,r2
20020784:	10840a04 	addi	r2,r2,4136
20020788:	10800017 	ldw	r2,0(r2)
2002078c:	100b883a 	mov	r5,r2
20020790:	e0b7e817 	ldw	r2,-8288(fp)
20020794:	1085883a 	add	r2,r2,r2
20020798:	1085883a 	add	r2,r2,r2
2002079c:	e137e704 	addi	r4,fp,-8292
200207a0:	2085883a 	add	r2,r4,r2
200207a4:	10800904 	addi	r2,r2,36
200207a8:	10800017 	ldw	r2,0(r2)
200207ac:	1007883a 	mov	r3,r2
200207b0:	e0b7ec17 	ldw	r2,-8272(fp)
200207b4:	1008d0ba 	srli	r4,r2,2
200207b8:	e0b7e817 	ldw	r2,-8288(fp)
200207bc:	2085883a 	add	r2,r4,r2
200207c0:	010800f4 	movhi	r4,8195
200207c4:	2132fb04 	addi	r4,r4,-13332
200207c8:	180d883a 	mov	r6,r3
200207cc:	100f883a 	mov	r7,r2
200207d0:	0020d540 	call	20020d54 <printf>
                   usleep(50);
200207d4:	01000c84 	movi	r4,50
200207d8:	002ab880 	call	2002ab88 <usleep>
                }   
                bPass = FALSE;
200207dc:	e037e715 	stw	zero,-8292(fp)
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
200207e0:	e0b7e817 	ldw	r2,-8288(fp)
200207e4:	10800044 	addi	r2,r2,1
200207e8:	e0b7e815 	stw	r2,-8288(fp)
200207ec:	e0f7e817 	ldw	r3,-8288(fp)
200207f0:	e0b7ee17 	ldw	r2,-8264(fp)
200207f4:	1880022e 	bgeu	r3,r2,20020800 <TMEM_Verify+0x424>
200207f8:	e0b7e717 	ldw	r2,-8292(fp)
200207fc:	103fcb1e 	bne	r2,zero,2002072c <__alt_data_end+0xfffe132c>
                }   
                bPass = FALSE;
            }    
        }
        //
        pSrc += nItemNum;
20020800:	e0b7ee17 	ldw	r2,-8264(fp)
20020804:	1085883a 	add	r2,r2,r2
20020808:	1085883a 	add	r2,r2,r2
2002080c:	e0f7eb17 	ldw	r3,-8276(fp)
20020810:	1885883a 	add	r2,r3,r2
20020814:	e0b7eb15 	stw	r2,-8276(fp)
        nPos += nAccessLen;
20020818:	e0b7e917 	ldw	r2,-8284(fp)
2002081c:	e0f7ec17 	ldw	r3,-8272(fp)
20020820:	1885883a 	add	r2,r3,r2
20020824:	e0b7ec15 	stw	r2,-8272(fp)

        if (bShowMessage){
20020828:	e0bfff17 	ldw	r2,-4(fp)
2002082c:	10001726 	beq	r2,zero,2002088c <TMEM_Verify+0x4b0>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
20020830:	e0b7ed17 	ldw	r2,-8268(fp)
20020834:	10800288 	cmpgei	r2,r2,10
20020838:	1000141e 	bne	r2,zero,2002088c <TMEM_Verify+0x4b0>
2002083c:	e0b7ed17 	ldw	r2,-8268(fp)
20020840:	1085883a 	add	r2,r2,r2
20020844:	1085883a 	add	r2,r2,r2
20020848:	e0f7e704 	addi	r3,fp,-8292
2002084c:	1885883a 	add	r2,r3,r2
20020850:	10880b04 	addi	r2,r2,8236
20020854:	10800017 	ldw	r2,0(r2)
20020858:	e0f7ec17 	ldw	r3,-8272(fp)
2002085c:	18800b36 	bltu	r3,r2,2002088c <TMEM_Verify+0x4b0>
                nProgressIndex++;
20020860:	e0b7ed17 	ldw	r2,-8268(fp)
20020864:	10800044 	addi	r2,r2,1
20020868:	e0b7ed15 	stw	r2,-8268(fp)
                printf("%02d%% ", nProgressIndex*10);
2002086c:	e0b7ed17 	ldw	r2,-8268(fp)
20020870:	108002a4 	muli	r2,r2,10
20020874:	010800f4 	movhi	r4,8195
20020878:	2132f504 	addi	r4,r4,-13356
2002087c:	100b883a 	mov	r5,r2
20020880:	0020d540 	call	20020d54 <printf>
                usleep(50);
20020884:	01000c84 	movi	r4,50
20020888:	002ab880 	call	2002ab88 <usleep>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
2002088c:	e0b7e717 	ldw	r2,-8292(fp)
20020890:	10000326 	beq	r2,zero,200208a0 <TMEM_Verify+0x4c4>
20020894:	e0f7ec17 	ldw	r3,-8272(fp)
20020898:	e0bffd17 	ldw	r2,-12(fp)
2002089c:	18bf8d36 	bltu	r3,r2,200206d4 <__alt_data_end+0xfffe12d4>
                usleep(50);
            }
        }            
    }     
    
    if (bShowMessage)
200208a0:	e0bfff17 	ldw	r2,-4(fp)
200208a4:	10000226 	beq	r2,zero,200208b0 <TMEM_Verify+0x4d4>
        printf("\n");
200208a8:	01000284 	movi	r4,10
200208ac:	0020d980 	call	20020d98 <putchar>
   
    
    return bPass;
200208b0:	e0b7e717 	ldw	r2,-8292(fp)
}
200208b4:	e037883a 	mov	sp,fp
200208b8:	dfc00117 	ldw	ra,4(sp)
200208bc:	df000017 	ldw	fp,0(sp)
200208c0:	dec00204 	addi	sp,sp,8
200208c4:	f800283a 	ret

200208c8 <TMEM_QuickVerify>:

bool TMEM_QuickVerify(alt_u32 BaseAddr, alt_u32 DataSize, alt_u32 DataWidth, alt_u32 AddrWidth){
200208c8:	defff104 	addi	sp,sp,-60
200208cc:	dfc00e15 	stw	ra,56(sp)
200208d0:	df000d15 	stw	fp,52(sp)
200208d4:	df000d04 	addi	fp,sp,52
200208d8:	e13ffc15 	stw	r4,-16(fp)
200208dc:	e17ffd15 	stw	r5,-12(fp)
200208e0:	e1bffe15 	stw	r6,-8(fp)
200208e4:	e1ffff15 	stw	r7,-4(fp)
    bool bPass = TRUE;
200208e8:	00800044 	movi	r2,1
200208ec:	e0bff315 	stw	r2,-52(fp)
    const alt_u32 TestNum = 1024*512;
200208f0:	00800234 	movhi	r2,8
200208f4:	e0bff615 	stw	r2,-40(fp)
    const alt_u32 TestPattern = 0xAA;
200208f8:	00802a84 	movi	r2,170
200208fc:	e0bff715 	stw	r2,-36(fp)
    alt_u32 mask, Read32, Addr32, TestData32, TestAddr32;
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
20020900:	00800044 	movi	r2,1
20020904:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<AddrWidth && bPass;i++){
20020908:	e03ff515 	stw	zero,-44(fp)
2002090c:	00001a06 	br	20020978 <TMEM_QuickVerify+0xb0>
        //*(pMem + mask) = TestPattern;
        IOWR(BaseAddr, mask, TestPattern);
20020910:	e0bff417 	ldw	r2,-48(fp)
20020914:	1085883a 	add	r2,r2,r2
20020918:	1085883a 	add	r2,r2,r2
2002091c:	1007883a 	mov	r3,r2
20020920:	e0bffc17 	ldw	r2,-16(fp)
20020924:	1885883a 	add	r2,r3,r2
20020928:	e0fff717 	ldw	r3,-36(fp)
2002092c:	10c00035 	stwio	r3,0(r2)
        //if (*(pMem + mask) != TestPattern)
        Read32 = IORD(BaseAddr, mask);
20020930:	e0bff417 	ldw	r2,-48(fp)
20020934:	1085883a 	add	r2,r2,r2
20020938:	1085883a 	add	r2,r2,r2
2002093c:	1007883a 	mov	r3,r2
20020940:	e0bffc17 	ldw	r2,-16(fp)
20020944:	1885883a 	add	r2,r3,r2
20020948:	10800037 	ldwio	r2,0(r2)
2002094c:	e0bff815 	stw	r2,-32(fp)
        if (Read32 != TestPattern)
20020950:	e0fff817 	ldw	r3,-32(fp)
20020954:	e0bff717 	ldw	r2,-36(fp)
20020958:	18800126 	beq	r3,r2,20020960 <TMEM_QuickVerify+0x98>
            bPass = FALSE;
2002095c:	e03ff315 	stw	zero,-52(fp)
        mask <<= 1;    
20020960:	e0bff417 	ldw	r2,-48(fp)
20020964:	1085883a 	add	r2,r2,r2
20020968:	e0bff415 	stw	r2,-48(fp)
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
2002096c:	e0bff517 	ldw	r2,-44(fp)
20020970:	10800044 	addi	r2,r2,1
20020974:	e0bff515 	stw	r2,-44(fp)
20020978:	e0fff517 	ldw	r3,-44(fp)
2002097c:	e0bfff17 	ldw	r2,-4(fp)
20020980:	1880022e 	bgeu	r3,r2,2002098c <TMEM_QuickVerify+0xc4>
20020984:	e0bff317 	ldw	r2,-52(fp)
20020988:	103fe11e 	bne	r2,zero,20020910 <__alt_data_end+0xfffe1510>
            bPass = FALSE;
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
2002098c:	00800044 	movi	r2,1
20020990:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<DataWidth && bPass;i++){
20020994:	e03ff515 	stw	zero,-44(fp)
20020998:	00002106 	br	20020a20 <TMEM_QuickVerify+0x158>
        //*(pMem+i/32) = mask;
        Addr32 = i*13;
2002099c:	e0bff517 	ldw	r2,-44(fp)
200209a0:	10800364 	muli	r2,r2,13
200209a4:	e0bff915 	stw	r2,-28(fp)
        IOWR(BaseAddr, Addr32, mask);
200209a8:	e0bff917 	ldw	r2,-28(fp)
200209ac:	1085883a 	add	r2,r2,r2
200209b0:	1085883a 	add	r2,r2,r2
200209b4:	1007883a 	mov	r3,r2
200209b8:	e0bffc17 	ldw	r2,-16(fp)
200209bc:	1885883a 	add	r2,r3,r2
200209c0:	e0fff417 	ldw	r3,-48(fp)
200209c4:	10c00035 	stwio	r3,0(r2)
        Read32 = IORD(BaseAddr, Addr32);
200209c8:	e0bff917 	ldw	r2,-28(fp)
200209cc:	1085883a 	add	r2,r2,r2
200209d0:	1085883a 	add	r2,r2,r2
200209d4:	1007883a 	mov	r3,r2
200209d8:	e0bffc17 	ldw	r2,-16(fp)
200209dc:	1885883a 	add	r2,r3,r2
200209e0:	10800037 	ldwio	r2,0(r2)
200209e4:	e0bff815 	stw	r2,-32(fp)
        //if (*(pMem+i/32) != mask)
        if (Read32 != mask)
200209e8:	e0fff817 	ldw	r3,-32(fp)
200209ec:	e0bff417 	ldw	r2,-48(fp)
200209f0:	18800126 	beq	r3,r2,200209f8 <TMEM_QuickVerify+0x130>
            bPass = FALSE;
200209f4:	e03ff315 	stw	zero,-52(fp)
        mask <<= 1;
200209f8:	e0bff417 	ldw	r2,-48(fp)
200209fc:	1085883a 	add	r2,r2,r2
20020a00:	e0bff415 	stw	r2,-48(fp)
        if (mask == 0x00)
20020a04:	e0bff417 	ldw	r2,-48(fp)
20020a08:	1000021e 	bne	r2,zero,20020a14 <TMEM_QuickVerify+0x14c>
            mask = 0x01;    
20020a0c:	00800044 	movi	r2,1
20020a10:	e0bff415 	stw	r2,-48(fp)
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
20020a14:	e0bff517 	ldw	r2,-44(fp)
20020a18:	10800044 	addi	r2,r2,1
20020a1c:	e0bff515 	stw	r2,-44(fp)
20020a20:	e0fff517 	ldw	r3,-44(fp)
20020a24:	e0bffe17 	ldw	r2,-8(fp)
20020a28:	1880022e 	bgeu	r3,r2,20020a34 <TMEM_QuickVerify+0x16c>
20020a2c:	e0bff317 	ldw	r2,-52(fp)
20020a30:	103fda1e 	bne	r2,zero,2002099c <__alt_data_end+0xfffe159c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20020a34:	008800f4 	movhi	r2,8195
20020a38:	10810604 	addi	r2,r2,1048
20020a3c:	10800017 	ldw	r2,0(r2)
        if (mask == 0x00)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
20020a40:	1009883a 	mov	r4,r2
20020a44:	0020e4c0 	call	20020e4c <srand>
    for(i=0;i<TestNum && bPass;i++){
20020a48:	e03ff515 	stw	zero,-44(fp)
20020a4c:	00002106 	br	20020ad4 <TMEM_QuickVerify+0x20c>
        TestAddr32 = rand()%(DataSize/4);
20020a50:	0020e640 	call	20020e64 <rand>
20020a54:	1007883a 	mov	r3,r2
20020a58:	e0bffd17 	ldw	r2,-12(fp)
20020a5c:	1004d0ba 	srli	r2,r2,2
20020a60:	1809883a 	mov	r4,r3
20020a64:	100b883a 	mov	r5,r2
20020a68:	0020c280 	call	20020c28 <__umodsi3>
20020a6c:	e0bffa15 	stw	r2,-24(fp)
        TestData32 = rand();
20020a70:	0020e640 	call	20020e64 <rand>
20020a74:	e0bffb15 	stw	r2,-20(fp)
        IOWR(BaseAddr, TestAddr32, TestData32);
20020a78:	e0bffa17 	ldw	r2,-24(fp)
20020a7c:	1085883a 	add	r2,r2,r2
20020a80:	1085883a 	add	r2,r2,r2
20020a84:	1007883a 	mov	r3,r2
20020a88:	e0bffc17 	ldw	r2,-16(fp)
20020a8c:	1885883a 	add	r2,r3,r2
20020a90:	e0fffb17 	ldw	r3,-20(fp)
20020a94:	10c00035 	stwio	r3,0(r2)
        Read32 = IORD(BaseAddr, TestAddr32);
20020a98:	e0bffa17 	ldw	r2,-24(fp)
20020a9c:	1085883a 	add	r2,r2,r2
20020aa0:	1085883a 	add	r2,r2,r2
20020aa4:	1007883a 	mov	r3,r2
20020aa8:	e0bffc17 	ldw	r2,-16(fp)
20020aac:	1885883a 	add	r2,r3,r2
20020ab0:	10800037 	ldwio	r2,0(r2)
20020ab4:	e0bff815 	stw	r2,-32(fp)
        if (Read32 != TestData32)
20020ab8:	e0fff817 	ldw	r3,-32(fp)
20020abc:	e0bffb17 	ldw	r2,-20(fp)
20020ac0:	18800126 	beq	r3,r2,20020ac8 <TMEM_QuickVerify+0x200>
            bPass = FALSE;        
20020ac4:	e03ff315 	stw	zero,-52(fp)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
    for(i=0;i<TestNum && bPass;i++){
20020ac8:	e0bff517 	ldw	r2,-44(fp)
20020acc:	10800044 	addi	r2,r2,1
20020ad0:	e0bff515 	stw	r2,-44(fp)
20020ad4:	e0fff517 	ldw	r3,-44(fp)
20020ad8:	e0bff617 	ldw	r2,-40(fp)
20020adc:	1880022e 	bgeu	r3,r2,20020ae8 <TMEM_QuickVerify+0x220>
20020ae0:	e0bff317 	ldw	r2,-52(fp)
20020ae4:	103fda1e 	bne	r2,zero,20020a50 <__alt_data_end+0xfffe1650>
        if (Read32 != TestData32)
            bPass = FALSE;        
        
    }
    
    return bPass;
20020ae8:	e0bff317 	ldw	r2,-52(fp)
}
20020aec:	e037883a 	mov	sp,fp
20020af0:	dfc00117 	ldw	ra,4(sp)
20020af4:	df000017 	ldw	fp,0(sp)
20020af8:	dec00204 	addi	sp,sp,8
20020afc:	f800283a 	ret

20020b00 <udivmodsi4>:
20020b00:	2005883a 	mov	r2,r4
20020b04:	2900182e 	bgeu	r5,r4,20020b68 <udivmodsi4+0x68>
20020b08:	28001716 	blt	r5,zero,20020b68 <udivmodsi4+0x68>
20020b0c:	01000804 	movi	r4,32
20020b10:	00c00044 	movi	r3,1
20020b14:	00000206 	br	20020b20 <udivmodsi4+0x20>
20020b18:	20001126 	beq	r4,zero,20020b60 <udivmodsi4+0x60>
20020b1c:	28000516 	blt	r5,zero,20020b34 <udivmodsi4+0x34>
20020b20:	294b883a 	add	r5,r5,r5
20020b24:	213fffc4 	addi	r4,r4,-1
20020b28:	18c7883a 	add	r3,r3,r3
20020b2c:	28bffa36 	bltu	r5,r2,20020b18 <__alt_data_end+0xfffe1718>
20020b30:	18000b26 	beq	r3,zero,20020b60 <udivmodsi4+0x60>
20020b34:	0009883a 	mov	r4,zero
20020b38:	11400236 	bltu	r2,r5,20020b44 <udivmodsi4+0x44>
20020b3c:	1145c83a 	sub	r2,r2,r5
20020b40:	20c8b03a 	or	r4,r4,r3
20020b44:	1806d07a 	srli	r3,r3,1
20020b48:	280ad07a 	srli	r5,r5,1
20020b4c:	183ffa1e 	bne	r3,zero,20020b38 <__alt_data_end+0xfffe1738>
20020b50:	3000021e 	bne	r6,zero,20020b5c <udivmodsi4+0x5c>
20020b54:	2005883a 	mov	r2,r4
20020b58:	f800283a 	ret
20020b5c:	f800283a 	ret
20020b60:	0009883a 	mov	r4,zero
20020b64:	003ffa06 	br	20020b50 <__alt_data_end+0xfffe1750>
20020b68:	00c00044 	movi	r3,1
20020b6c:	0009883a 	mov	r4,zero
20020b70:	003ff106 	br	20020b38 <__alt_data_end+0xfffe1738>

20020b74 <__divsi3>:
20020b74:	defffe04 	addi	sp,sp,-8
20020b78:	dfc00115 	stw	ra,4(sp)
20020b7c:	dc000015 	stw	r16,0(sp)
20020b80:	20000a16 	blt	r4,zero,20020bac <__divsi3+0x38>
20020b84:	0021883a 	mov	r16,zero
20020b88:	28000b16 	blt	r5,zero,20020bb8 <__divsi3+0x44>
20020b8c:	000d883a 	mov	r6,zero
20020b90:	0020b000 	call	20020b00 <udivmodsi4>
20020b94:	80000126 	beq	r16,zero,20020b9c <__divsi3+0x28>
20020b98:	0085c83a 	sub	r2,zero,r2
20020b9c:	dfc00117 	ldw	ra,4(sp)
20020ba0:	dc000017 	ldw	r16,0(sp)
20020ba4:	dec00204 	addi	sp,sp,8
20020ba8:	f800283a 	ret
20020bac:	0109c83a 	sub	r4,zero,r4
20020bb0:	04000044 	movi	r16,1
20020bb4:	283ff50e 	bge	r5,zero,20020b8c <__alt_data_end+0xfffe178c>
20020bb8:	014bc83a 	sub	r5,zero,r5
20020bbc:	8400005c 	xori	r16,r16,1
20020bc0:	003ff206 	br	20020b8c <__alt_data_end+0xfffe178c>

20020bc4 <__modsi3>:
20020bc4:	deffff04 	addi	sp,sp,-4
20020bc8:	dfc00015 	stw	ra,0(sp)
20020bcc:	20000516 	blt	r4,zero,20020be4 <__modsi3+0x20>
20020bd0:	28000c16 	blt	r5,zero,20020c04 <__modsi3+0x40>
20020bd4:	01800044 	movi	r6,1
20020bd8:	dfc00017 	ldw	ra,0(sp)
20020bdc:	dec00104 	addi	sp,sp,4
20020be0:	0020b001 	jmpi	20020b00 <udivmodsi4>
20020be4:	0109c83a 	sub	r4,zero,r4
20020be8:	28000b16 	blt	r5,zero,20020c18 <__modsi3+0x54>
20020bec:	01800044 	movi	r6,1
20020bf0:	0020b000 	call	20020b00 <udivmodsi4>
20020bf4:	0085c83a 	sub	r2,zero,r2
20020bf8:	dfc00017 	ldw	ra,0(sp)
20020bfc:	dec00104 	addi	sp,sp,4
20020c00:	f800283a 	ret
20020c04:	014bc83a 	sub	r5,zero,r5
20020c08:	01800044 	movi	r6,1
20020c0c:	dfc00017 	ldw	ra,0(sp)
20020c10:	dec00104 	addi	sp,sp,4
20020c14:	0020b001 	jmpi	20020b00 <udivmodsi4>
20020c18:	014bc83a 	sub	r5,zero,r5
20020c1c:	003ff306 	br	20020bec <__alt_data_end+0xfffe17ec>

20020c20 <__udivsi3>:
20020c20:	000d883a 	mov	r6,zero
20020c24:	0020b001 	jmpi	20020b00 <udivmodsi4>

20020c28 <__umodsi3>:
20020c28:	01800044 	movi	r6,1
20020c2c:	0020b001 	jmpi	20020b00 <udivmodsi4>

20020c30 <memcpy>:
20020c30:	00c003c4 	movi	r3,15
20020c34:	2005883a 	mov	r2,r4
20020c38:	3009883a 	mov	r4,r6
20020c3c:	1980032e 	bgeu	r3,r6,20020c4c <memcpy+0x1c>
20020c40:	2886b03a 	or	r3,r5,r2
20020c44:	18c000cc 	andi	r3,r3,3
20020c48:	18000926 	beq	r3,zero,20020c70 <memcpy+0x40>
20020c4c:	1007883a 	mov	r3,r2
20020c50:	290f883a 	add	r7,r5,r4
20020c54:	20000526 	beq	r4,zero,20020c6c <memcpy+0x3c>
20020c58:	29800003 	ldbu	r6,0(r5)
20020c5c:	18c00044 	addi	r3,r3,1
20020c60:	29400044 	addi	r5,r5,1
20020c64:	19bfffc5 	stb	r6,-1(r3)
20020c68:	29fffb1e 	bne	r5,r7,20020c58 <__alt_data_end+0xfffe1858>
20020c6c:	f800283a 	ret
20020c70:	327ffc04 	addi	r9,r6,-16
20020c74:	4812d13a 	srli	r9,r9,4
20020c78:	11000404 	addi	r4,r2,16
20020c7c:	1007883a 	mov	r3,r2
20020c80:	4810913a 	slli	r8,r9,4
20020c84:	280f883a 	mov	r7,r5
20020c88:	2209883a 	add	r4,r4,r8
20020c8c:	3a000017 	ldw	r8,0(r7)
20020c90:	18c00404 	addi	r3,r3,16
20020c94:	39c00404 	addi	r7,r7,16
20020c98:	1a3ffc15 	stw	r8,-16(r3)
20020c9c:	3a3ffd17 	ldw	r8,-12(r7)
20020ca0:	1a3ffd15 	stw	r8,-12(r3)
20020ca4:	3a3ffe17 	ldw	r8,-8(r7)
20020ca8:	1a3ffe15 	stw	r8,-8(r3)
20020cac:	3a3fff17 	ldw	r8,-4(r7)
20020cb0:	1a3fff15 	stw	r8,-4(r3)
20020cb4:	193ff51e 	bne	r3,r4,20020c8c <__alt_data_end+0xfffe188c>
20020cb8:	49c00044 	addi	r7,r9,1
20020cbc:	380e913a 	slli	r7,r7,4
20020cc0:	310003cc 	andi	r4,r6,15
20020cc4:	018000c4 	movi	r6,3
20020cc8:	11c7883a 	add	r3,r2,r7
20020ccc:	29cb883a 	add	r5,r5,r7
20020cd0:	313fdf2e 	bgeu	r6,r4,20020c50 <__alt_data_end+0xfffe1850>
20020cd4:	213fff04 	addi	r4,r4,-4
20020cd8:	2014d0ba 	srli	r10,r4,2
20020cdc:	1a400104 	addi	r9,r3,4
20020ce0:	180d883a 	mov	r6,r3
20020ce4:	528f883a 	add	r7,r10,r10
20020ce8:	39cf883a 	add	r7,r7,r7
20020cec:	49d3883a 	add	r9,r9,r7
20020cf0:	280f883a 	mov	r7,r5
20020cf4:	3a000017 	ldw	r8,0(r7)
20020cf8:	31800104 	addi	r6,r6,4
20020cfc:	39c00104 	addi	r7,r7,4
20020d00:	323fff15 	stw	r8,-4(r6)
20020d04:	327ffb1e 	bne	r6,r9,20020cf4 <__alt_data_end+0xfffe18f4>
20020d08:	51800044 	addi	r6,r10,1
20020d0c:	52bfff24 	muli	r10,r10,-4
20020d10:	318d883a 	add	r6,r6,r6
20020d14:	318d883a 	add	r6,r6,r6
20020d18:	5109883a 	add	r4,r10,r4
20020d1c:	298b883a 	add	r5,r5,r6
20020d20:	1987883a 	add	r3,r3,r6
20020d24:	003fca06 	br	20020c50 <__alt_data_end+0xfffe1850>

20020d28 <_printf_r>:
20020d28:	defffd04 	addi	sp,sp,-12
20020d2c:	dfc00015 	stw	ra,0(sp)
20020d30:	d9800115 	stw	r6,4(sp)
20020d34:	d9c00215 	stw	r7,8(sp)
20020d38:	280d883a 	mov	r6,r5
20020d3c:	21400217 	ldw	r5,8(r4)
20020d40:	d9c00104 	addi	r7,sp,4
20020d44:	0020f880 	call	20020f88 <___vfprintf_internal_r>
20020d48:	dfc00017 	ldw	ra,0(sp)
20020d4c:	dec00304 	addi	sp,sp,12
20020d50:	f800283a 	ret

20020d54 <printf>:
20020d54:	defffc04 	addi	sp,sp,-16
20020d58:	dfc00015 	stw	ra,0(sp)
20020d5c:	d9400115 	stw	r5,4(sp)
20020d60:	d9800215 	stw	r6,8(sp)
20020d64:	d9c00315 	stw	r7,12(sp)
20020d68:	008800f4 	movhi	r2,8195
20020d6c:	10ba5704 	addi	r2,r2,-5796
20020d70:	10800017 	ldw	r2,0(r2)
20020d74:	200b883a 	mov	r5,r4
20020d78:	d9800104 	addi	r6,sp,4
20020d7c:	11000217 	ldw	r4,8(r2)
20020d80:	0022d800 	call	20022d80 <__vfprintf_internal>
20020d84:	dfc00017 	ldw	ra,0(sp)
20020d88:	dec00404 	addi	sp,sp,16
20020d8c:	f800283a 	ret

20020d90 <_putchar_r>:
20020d90:	21800217 	ldw	r6,8(r4)
20020d94:	00273281 	jmpi	20027328 <_putc_r>

20020d98 <putchar>:
20020d98:	008800f4 	movhi	r2,8195
20020d9c:	10ba5704 	addi	r2,r2,-5796
20020da0:	10800017 	ldw	r2,0(r2)
20020da4:	200b883a 	mov	r5,r4
20020da8:	11800217 	ldw	r6,8(r2)
20020dac:	1009883a 	mov	r4,r2
20020db0:	00273281 	jmpi	20027328 <_putc_r>

20020db4 <_puts_r>:
20020db4:	defff604 	addi	sp,sp,-40
20020db8:	dc400815 	stw	r17,32(sp)
20020dbc:	2023883a 	mov	r17,r4
20020dc0:	2809883a 	mov	r4,r5
20020dc4:	dc000715 	stw	r16,28(sp)
20020dc8:	dfc00915 	stw	ra,36(sp)
20020dcc:	2821883a 	mov	r16,r5
20020dd0:	0020ec80 	call	20020ec8 <strlen>
20020dd4:	10c00044 	addi	r3,r2,1
20020dd8:	d8800115 	stw	r2,4(sp)
20020ddc:	89400217 	ldw	r5,8(r17)
20020de0:	008800f4 	movhi	r2,8195
20020de4:	10b30704 	addi	r2,r2,-13284
20020de8:	d8800215 	stw	r2,8(sp)
20020dec:	00800044 	movi	r2,1
20020df0:	d8800315 	stw	r2,12(sp)
20020df4:	8809883a 	mov	r4,r17
20020df8:	00800084 	movi	r2,2
20020dfc:	d9800404 	addi	r6,sp,16
20020e00:	dc000015 	stw	r16,0(sp)
20020e04:	d8c00615 	stw	r3,24(sp)
20020e08:	dec00415 	stw	sp,16(sp)
20020e0c:	d8800515 	stw	r2,20(sp)
20020e10:	00250380 	call	20025038 <__sfvwrite_r>
20020e14:	1000061e 	bne	r2,zero,20020e30 <_puts_r+0x7c>
20020e18:	00800284 	movi	r2,10
20020e1c:	dfc00917 	ldw	ra,36(sp)
20020e20:	dc400817 	ldw	r17,32(sp)
20020e24:	dc000717 	ldw	r16,28(sp)
20020e28:	dec00a04 	addi	sp,sp,40
20020e2c:	f800283a 	ret
20020e30:	00bfffc4 	movi	r2,-1
20020e34:	003ff906 	br	20020e1c <__alt_data_end+0xfffe1a1c>

20020e38 <puts>:
20020e38:	008800f4 	movhi	r2,8195
20020e3c:	10ba5704 	addi	r2,r2,-5796
20020e40:	200b883a 	mov	r5,r4
20020e44:	11000017 	ldw	r4,0(r2)
20020e48:	0020db41 	jmpi	20020db4 <_puts_r>

20020e4c <srand>:
20020e4c:	008800f4 	movhi	r2,8195
20020e50:	10ba5704 	addi	r2,r2,-5796
20020e54:	10800017 	ldw	r2,0(r2)
20020e58:	11002915 	stw	r4,164(r2)
20020e5c:	10002a15 	stw	zero,168(r2)
20020e60:	f800283a 	ret

20020e64 <rand>:
20020e64:	defffe04 	addi	sp,sp,-8
20020e68:	008800f4 	movhi	r2,8195
20020e6c:	10ba5704 	addi	r2,r2,-5796
20020e70:	dc000015 	stw	r16,0(sp)
20020e74:	14000017 	ldw	r16,0(r2)
20020e78:	dfc00115 	stw	ra,4(sp)
20020e7c:	01932574 	movhi	r6,19605
20020e80:	319fcb44 	addi	r6,r6,32557
20020e84:	81002917 	ldw	r4,164(r16)
20020e88:	81402a17 	ldw	r5,168(r16)
20020e8c:	01d614b4 	movhi	r7,22610
20020e90:	39fd0b44 	addi	r7,r7,-3027
20020e94:	00283540 	call	20028354 <__muldi3>
20020e98:	11000044 	addi	r4,r2,1
20020e9c:	2085803a 	cmpltu	r2,r4,r2
20020ea0:	10c7883a 	add	r3,r2,r3
20020ea4:	00a00034 	movhi	r2,32768
20020ea8:	10bfffc4 	addi	r2,r2,-1
20020eac:	1884703a 	and	r2,r3,r2
20020eb0:	81002915 	stw	r4,164(r16)
20020eb4:	80c02a15 	stw	r3,168(r16)
20020eb8:	dfc00117 	ldw	ra,4(sp)
20020ebc:	dc000017 	ldw	r16,0(sp)
20020ec0:	dec00204 	addi	sp,sp,8
20020ec4:	f800283a 	ret

20020ec8 <strlen>:
20020ec8:	208000cc 	andi	r2,r4,3
20020ecc:	10001f1e 	bne	r2,zero,20020f4c <strlen+0x84>
20020ed0:	20800017 	ldw	r2,0(r4)
20020ed4:	01ffbff4 	movhi	r7,65279
20020ed8:	39ffbfc4 	addi	r7,r7,-257
20020edc:	01a02074 	movhi	r6,32897
20020ee0:	31a02004 	addi	r6,r6,-32640
20020ee4:	11c7883a 	add	r3,r2,r7
20020ee8:	0084303a 	nor	r2,zero,r2
20020eec:	1886703a 	and	r3,r3,r2
20020ef0:	1986703a 	and	r3,r3,r6
20020ef4:	2005883a 	mov	r2,r4
20020ef8:	1800101e 	bne	r3,zero,20020f3c <strlen+0x74>
20020efc:	10800104 	addi	r2,r2,4
20020f00:	10c00017 	ldw	r3,0(r2)
20020f04:	19cb883a 	add	r5,r3,r7
20020f08:	00c6303a 	nor	r3,zero,r3
20020f0c:	28c6703a 	and	r3,r5,r3
20020f10:	1986703a 	and	r3,r3,r6
20020f14:	1800091e 	bne	r3,zero,20020f3c <strlen+0x74>
20020f18:	10800104 	addi	r2,r2,4
20020f1c:	10c00017 	ldw	r3,0(r2)
20020f20:	19cb883a 	add	r5,r3,r7
20020f24:	00c6303a 	nor	r3,zero,r3
20020f28:	28c6703a 	and	r3,r5,r3
20020f2c:	1986703a 	and	r3,r3,r6
20020f30:	183ff226 	beq	r3,zero,20020efc <__alt_data_end+0xfffe1afc>
20020f34:	00000106 	br	20020f3c <strlen+0x74>
20020f38:	10800044 	addi	r2,r2,1
20020f3c:	10c00007 	ldb	r3,0(r2)
20020f40:	183ffd1e 	bne	r3,zero,20020f38 <__alt_data_end+0xfffe1b38>
20020f44:	1105c83a 	sub	r2,r2,r4
20020f48:	f800283a 	ret
20020f4c:	2005883a 	mov	r2,r4
20020f50:	003ffa06 	br	20020f3c <__alt_data_end+0xfffe1b3c>

20020f54 <__sprint_r>:
20020f54:	30800217 	ldw	r2,8(r6)
20020f58:	defffe04 	addi	sp,sp,-8
20020f5c:	dc000015 	stw	r16,0(sp)
20020f60:	dfc00115 	stw	ra,4(sp)
20020f64:	3021883a 	mov	r16,r6
20020f68:	10000226 	beq	r2,zero,20020f74 <__sprint_r+0x20>
20020f6c:	00250380 	call	20025038 <__sfvwrite_r>
20020f70:	80000215 	stw	zero,8(r16)
20020f74:	80000115 	stw	zero,4(r16)
20020f78:	dfc00117 	ldw	ra,4(sp)
20020f7c:	dc000017 	ldw	r16,0(sp)
20020f80:	dec00204 	addi	sp,sp,8
20020f84:	f800283a 	ret

20020f88 <___vfprintf_internal_r>:
20020f88:	defeb904 	addi	sp,sp,-1308
20020f8c:	dc013d15 	stw	r16,1268(sp)
20020f90:	d9013015 	stw	r4,1216(sp)
20020f94:	dfc14615 	stw	ra,1304(sp)
20020f98:	df014515 	stw	fp,1300(sp)
20020f9c:	ddc14415 	stw	r23,1296(sp)
20020fa0:	dd814315 	stw	r22,1292(sp)
20020fa4:	dd414215 	stw	r21,1288(sp)
20020fa8:	dd014115 	stw	r20,1284(sp)
20020fac:	dcc14015 	stw	r19,1280(sp)
20020fb0:	dc813f15 	stw	r18,1276(sp)
20020fb4:	dc413e15 	stw	r17,1272(sp)
20020fb8:	d9412915 	stw	r5,1188(sp)
20020fbc:	3021883a 	mov	r16,r6
20020fc0:	d9c12d15 	stw	r7,1204(sp)
20020fc4:	00257240 	call	20025724 <_localeconv_r>
20020fc8:	10800017 	ldw	r2,0(r2)
20020fcc:	d9013017 	ldw	r4,1216(sp)
20020fd0:	d8013315 	stw	zero,1228(sp)
20020fd4:	d8813715 	stw	r2,1244(sp)
20020fd8:	d8013415 	stw	zero,1232(sp)
20020fdc:	20000226 	beq	r4,zero,20020fe8 <___vfprintf_internal_r+0x60>
20020fe0:	20800e17 	ldw	r2,56(r4)
20020fe4:	10019826 	beq	r2,zero,20021648 <___vfprintf_internal_r+0x6c0>
20020fe8:	da012917 	ldw	r8,1188(sp)
20020fec:	4080030b 	ldhu	r2,12(r8)
20020ff0:	10c0020c 	andi	r3,r2,8
20020ff4:	18ffffcc 	andi	r3,r3,65535
20020ff8:	18e0001c 	xori	r3,r3,32768
20020ffc:	18e00004 	addi	r3,r3,-32768
20021000:	18013a26 	beq	r3,zero,200214ec <___vfprintf_internal_r+0x564>
20021004:	40c00417 	ldw	r3,16(r8)
20021008:	18013826 	beq	r3,zero,200214ec <___vfprintf_internal_r+0x564>
2002100c:	1100068c 	andi	r4,r2,26
20021010:	00c00284 	movi	r3,10
20021014:	20c13e26 	beq	r4,r3,20021510 <___vfprintf_internal_r+0x588>
20021018:	da010dc4 	addi	r8,sp,1079
2002101c:	d8800404 	addi	r2,sp,16
20021020:	da012615 	stw	r8,1176(sp)
20021024:	d8811b15 	stw	r2,1132(sp)
20021028:	1013883a 	mov	r9,r2
2002102c:	d8812617 	ldw	r2,1176(sp)
20021030:	da010e04 	addi	r8,sp,1080
20021034:	dc413017 	ldw	r17,1216(sp)
20021038:	da012715 	stw	r8,1180(sp)
2002103c:	4091c83a 	sub	r8,r8,r2
20021040:	d8011d15 	stw	zero,1140(sp)
20021044:	d8011c15 	stw	zero,1136(sp)
20021048:	802b883a 	mov	r21,r16
2002104c:	d8013215 	stw	zero,1224(sp)
20021050:	d8013615 	stw	zero,1240(sp)
20021054:	d8013515 	stw	zero,1236(sp)
20021058:	d8012c15 	stw	zero,1200(sp)
2002105c:	da013915 	stw	r8,1252(sp)
20021060:	a8800007 	ldb	r2,0(r21)
20021064:	1002ec26 	beq	r2,zero,20021c18 <___vfprintf_internal_r+0xc90>
20021068:	00c00944 	movi	r3,37
2002106c:	a825883a 	mov	r18,r21
20021070:	10c0021e 	bne	r2,r3,2002107c <___vfprintf_internal_r+0xf4>
20021074:	00001406 	br	200210c8 <___vfprintf_internal_r+0x140>
20021078:	10c00326 	beq	r2,r3,20021088 <___vfprintf_internal_r+0x100>
2002107c:	94800044 	addi	r18,r18,1
20021080:	90800007 	ldb	r2,0(r18)
20021084:	103ffc1e 	bne	r2,zero,20021078 <__alt_data_end+0xfffe1c78>
20021088:	9561c83a 	sub	r16,r18,r21
2002108c:	80000e26 	beq	r16,zero,200210c8 <___vfprintf_internal_r+0x140>
20021090:	da011d17 	ldw	r8,1140(sp)
20021094:	d8c11c17 	ldw	r3,1136(sp)
20021098:	4d400015 	stw	r21,0(r9)
2002109c:	4c000115 	stw	r16,4(r9)
200210a0:	4411883a 	add	r8,r8,r16
200210a4:	18c00044 	addi	r3,r3,1
200210a8:	da011d15 	stw	r8,1140(sp)
200210ac:	d8c11c15 	stw	r3,1136(sp)
200210b0:	008001c4 	movi	r2,7
200210b4:	10c15d16 	blt	r2,r3,2002162c <___vfprintf_internal_r+0x6a4>
200210b8:	4a400204 	addi	r9,r9,8
200210bc:	d8812c17 	ldw	r2,1200(sp)
200210c0:	1405883a 	add	r2,r2,r16
200210c4:	d8812c15 	stw	r2,1200(sp)
200210c8:	90800007 	ldb	r2,0(r18)
200210cc:	10013b26 	beq	r2,zero,200215bc <___vfprintf_internal_r+0x634>
200210d0:	95400044 	addi	r21,r18,1
200210d4:	94800047 	ldb	r18,1(r18)
200210d8:	d8012585 	stb	zero,1174(sp)
200210dc:	073fffc4 	movi	fp,-1
200210e0:	d8012e15 	stw	zero,1208(sp)
200210e4:	0021883a 	mov	r16,zero
200210e8:	00c01604 	movi	r3,88
200210ec:	01400244 	movi	r5,9
200210f0:	02800a84 	movi	r10,42
200210f4:	01c01b04 	movi	r7,108
200210f8:	01800ac4 	movi	r6,43
200210fc:	02c00804 	movi	r11,32
20021100:	ad400044 	addi	r21,r21,1
20021104:	90bff804 	addi	r2,r18,-32
20021108:	1880092e 	bgeu	r3,r2,20021130 <___vfprintf_internal_r+0x1a8>
2002110c:	90012b26 	beq	r18,zero,200215bc <___vfprintf_internal_r+0x634>
20021110:	00c00044 	movi	r3,1
20021114:	d8c12815 	stw	r3,1184(sp)
20021118:	dc810405 	stb	r18,1040(sp)
2002111c:	d8012585 	stb	zero,1174(sp)
20021120:	d8c12b15 	stw	r3,1196(sp)
20021124:	dcc10404 	addi	r19,sp,1040
20021128:	d8013115 	stw	zero,1220(sp)
2002112c:	00008806 	br	20021350 <___vfprintf_internal_r+0x3c8>
20021130:	1085883a 	add	r2,r2,r2
20021134:	1085883a 	add	r2,r2,r2
20021138:	010800b4 	movhi	r4,8194
2002113c:	21045304 	addi	r4,r4,4428
20021140:	1105883a 	add	r2,r2,r4
20021144:	10800017 	ldw	r2,0(r2)
20021148:	1000683a 	jmp	r2
2002114c:	20021700 	call	22002170 <__alt_data_end+0x1fc2d70>
20021150:	2002110c 	andi	zero,r4,2116
20021154:	2002110c 	andi	zero,r4,2116
20021158:	20021714 	ori	zero,r4,2140
2002115c:	2002110c 	andi	zero,r4,2116
20021160:	2002110c 	andi	zero,r4,2116
20021164:	2002110c 	andi	zero,r4,2116
20021168:	2002110c 	andi	zero,r4,2116
2002116c:	2002110c 	andi	zero,r4,2116
20021170:	2002110c 	andi	zero,r4,2116
20021174:	200217fc 	xorhi	zero,r4,2143
20021178:	200216b8 	rdprs	zero,r4,2138
2002117c:	2002110c 	andi	zero,r4,2116
20021180:	200214e0 	cmpeqi	zero,r4,2131
20021184:	200216c4 	addi	zero,r4,2139
20021188:	2002110c 	andi	zero,r4,2116
2002118c:	20021720 	cmpeqi	zero,r4,2140
20021190:	20021820 	cmpeqi	zero,r4,2144
20021194:	20021820 	cmpeqi	zero,r4,2144
20021198:	20021820 	cmpeqi	zero,r4,2144
2002119c:	20021820 	cmpeqi	zero,r4,2144
200211a0:	20021820 	cmpeqi	zero,r4,2144
200211a4:	20021820 	cmpeqi	zero,r4,2144
200211a8:	20021820 	cmpeqi	zero,r4,2144
200211ac:	20021820 	cmpeqi	zero,r4,2144
200211b0:	20021820 	cmpeqi	zero,r4,2144
200211b4:	2002110c 	andi	zero,r4,2116
200211b8:	2002110c 	andi	zero,r4,2116
200211bc:	2002110c 	andi	zero,r4,2116
200211c0:	2002110c 	andi	zero,r4,2116
200211c4:	2002110c 	andi	zero,r4,2116
200211c8:	2002110c 	andi	zero,r4,2116
200211cc:	2002110c 	andi	zero,r4,2116
200211d0:	2002110c 	andi	zero,r4,2116
200211d4:	2002110c 	andi	zero,r4,2116
200211d8:	2002110c 	andi	zero,r4,2116
200211dc:	2002147c 	xorhi	zero,r4,2129
200211e0:	20021848 	cmpgei	zero,r4,2145
200211e4:	2002110c 	andi	zero,r4,2116
200211e8:	20021848 	cmpgei	zero,r4,2145
200211ec:	2002110c 	andi	zero,r4,2116
200211f0:	2002110c 	andi	zero,r4,2116
200211f4:	2002110c 	andi	zero,r4,2116
200211f8:	2002110c 	andi	zero,r4,2116
200211fc:	200219b8 	rdprs	zero,r4,2150
20021200:	2002110c 	andi	zero,r4,2116
20021204:	2002110c 	andi	zero,r4,2116
20021208:	20021444 	addi	zero,r4,2129
2002120c:	2002110c 	andi	zero,r4,2116
20021210:	2002110c 	andi	zero,r4,2116
20021214:	2002110c 	andi	zero,r4,2116
20021218:	2002110c 	andi	zero,r4,2116
2002121c:	2002110c 	andi	zero,r4,2116
20021220:	200212b0 	cmpltui	zero,r4,2122
20021224:	2002110c 	andi	zero,r4,2116
20021228:	2002110c 	andi	zero,r4,2116
2002122c:	2002172c 	andhi	zero,r4,2140
20021230:	2002110c 	andi	zero,r4,2116
20021234:	2002110c 	andi	zero,r4,2116
20021238:	2002110c 	andi	zero,r4,2116
2002123c:	2002110c 	andi	zero,r4,2116
20021240:	2002110c 	andi	zero,r4,2116
20021244:	2002110c 	andi	zero,r4,2116
20021248:	2002110c 	andi	zero,r4,2116
2002124c:	2002110c 	andi	zero,r4,2116
20021250:	2002110c 	andi	zero,r4,2116
20021254:	2002110c 	andi	zero,r4,2116
20021258:	200217a0 	cmpeqi	zero,r4,2142
2002125c:	20021480 	call	22002148 <__alt_data_end+0x1fc2d48>
20021260:	20021848 	cmpgei	zero,r4,2145
20021264:	20021848 	cmpgei	zero,r4,2145
20021268:	20021848 	cmpgei	zero,r4,2145
2002126c:	20021780 	call	22002178 <__alt_data_end+0x1fc2d78>
20021270:	20021480 	call	22002148 <__alt_data_end+0x1fc2d48>
20021274:	2002110c 	andi	zero,r4,2116
20021278:	2002110c 	andi	zero,r4,2116
2002127c:	2002178c 	andi	zero,r4,2142
20021280:	2002110c 	andi	zero,r4,2116
20021284:	200217d0 	cmplti	zero,r4,2143
20021288:	20021448 	cmpgei	zero,r4,2129
2002128c:	200218d0 	cmplti	zero,r4,2147
20021290:	2002191c 	xori	zero,r4,2148
20021294:	2002110c 	andi	zero,r4,2116
20021298:	20021928 	cmpgeui	zero,r4,2148
2002129c:	2002110c 	andi	zero,r4,2116
200212a0:	200212b4 	orhi	zero,r4,2122
200212a4:	2002110c 	andi	zero,r4,2116
200212a8:	2002110c 	andi	zero,r4,2116
200212ac:	20021984 	addi	zero,r4,2150
200212b0:	84000414 	ori	r16,r16,16
200212b4:	8080080c 	andi	r2,r16,32
200212b8:	1000f51e 	bne	r2,zero,20021690 <___vfprintf_internal_r+0x708>
200212bc:	8080040c 	andi	r2,r16,16
200212c0:	10042c26 	beq	r2,zero,20022374 <___vfprintf_internal_r+0x13ec>
200212c4:	da012d17 	ldw	r8,1204(sp)
200212c8:	002d883a 	mov	r22,zero
200212cc:	00c00044 	movi	r3,1
200212d0:	45c00017 	ldw	r23,0(r8)
200212d4:	42000104 	addi	r8,r8,4
200212d8:	da012d15 	stw	r8,1204(sp)
200212dc:	b805883a 	mov	r2,r23
200212e0:	d8012585 	stb	zero,1174(sp)
200212e4:	e0000216 	blt	fp,zero,200212f0 <___vfprintf_internal_r+0x368>
200212e8:	013fdfc4 	movi	r4,-129
200212ec:	8120703a 	and	r16,r16,r4
200212f0:	1002671e 	bne	r2,zero,20021c90 <___vfprintf_internal_r+0xd08>
200212f4:	e002661e 	bne	fp,zero,20021c90 <___vfprintf_internal_r+0xd08>
200212f8:	18c03fcc 	andi	r3,r3,255
200212fc:	1803561e 	bne	r3,zero,20022058 <___vfprintf_internal_r+0x10d0>
20021300:	8080004c 	andi	r2,r16,1
20021304:	10035426 	beq	r2,zero,20022058 <___vfprintf_internal_r+0x10d0>
20021308:	da013917 	ldw	r8,1252(sp)
2002130c:	00800c04 	movi	r2,48
20021310:	d8810dc5 	stb	r2,1079(sp)
20021314:	da012b15 	stw	r8,1196(sp)
20021318:	dcc10dc4 	addi	r19,sp,1079
2002131c:	d8812b17 	ldw	r2,1196(sp)
20021320:	d8812815 	stw	r2,1184(sp)
20021324:	1700010e 	bge	r2,fp,2002132c <___vfprintf_internal_r+0x3a4>
20021328:	df012815 	stw	fp,1184(sp)
2002132c:	d8812583 	ldbu	r2,1174(sp)
20021330:	df013115 	stw	fp,1220(sp)
20021334:	10803fcc 	andi	r2,r2,255
20021338:	1080201c 	xori	r2,r2,128
2002133c:	10bfe004 	addi	r2,r2,-128
20021340:	10000326 	beq	r2,zero,20021350 <___vfprintf_internal_r+0x3c8>
20021344:	da012817 	ldw	r8,1184(sp)
20021348:	42000044 	addi	r8,r8,1
2002134c:	da012815 	stw	r8,1184(sp)
20021350:	80c0008c 	andi	r3,r16,2
20021354:	d8c12a15 	stw	r3,1192(sp)
20021358:	18000326 	beq	r3,zero,20021368 <___vfprintf_internal_r+0x3e0>
2002135c:	da012817 	ldw	r8,1184(sp)
20021360:	42000084 	addi	r8,r8,2
20021364:	da012815 	stw	r8,1184(sp)
20021368:	80c0210c 	andi	r3,r16,132
2002136c:	d8c12f15 	stw	r3,1212(sp)
20021370:	1801941e 	bne	r3,zero,200219c4 <___vfprintf_internal_r+0xa3c>
20021374:	da012e17 	ldw	r8,1208(sp)
20021378:	d8c12817 	ldw	r3,1184(sp)
2002137c:	40edc83a 	sub	r22,r8,r3
20021380:	0581900e 	bge	zero,r22,200219c4 <___vfprintf_internal_r+0xa3c>
20021384:	02800404 	movi	r10,16
20021388:	da011d17 	ldw	r8,1140(sp)
2002138c:	d8c11c17 	ldw	r3,1136(sp)
20021390:	05c800f4 	movhi	r23,8195
20021394:	bdf31884 	addi	r23,r23,-13214
20021398:	5580200e 	bge	r10,r22,2002141c <___vfprintf_internal_r+0x494>
2002139c:	dc813815 	stw	r18,1248(sp)
200213a0:	5039883a 	mov	fp,r10
200213a4:	b825883a 	mov	r18,r23
200213a8:	050001c4 	movi	r20,7
200213ac:	b02f883a 	mov	r23,r22
200213b0:	802d883a 	mov	r22,r16
200213b4:	dc012917 	ldw	r16,1188(sp)
200213b8:	00000306 	br	200213c8 <___vfprintf_internal_r+0x440>
200213bc:	bdfffc04 	addi	r23,r23,-16
200213c0:	4a400204 	addi	r9,r9,8
200213c4:	e5c0110e 	bge	fp,r23,2002140c <___vfprintf_internal_r+0x484>
200213c8:	4c800015 	stw	r18,0(r9)
200213cc:	4f000115 	stw	fp,4(r9)
200213d0:	42000404 	addi	r8,r8,16
200213d4:	18c00044 	addi	r3,r3,1
200213d8:	da011d15 	stw	r8,1140(sp)
200213dc:	d8c11c15 	stw	r3,1136(sp)
200213e0:	a0fff60e 	bge	r20,r3,200213bc <__alt_data_end+0xfffe1fbc>
200213e4:	8809883a 	mov	r4,r17
200213e8:	800b883a 	mov	r5,r16
200213ec:	d9811b04 	addi	r6,sp,1132
200213f0:	0020f540 	call	20020f54 <__sprint_r>
200213f4:	1000771e 	bne	r2,zero,200215d4 <___vfprintf_internal_r+0x64c>
200213f8:	bdfffc04 	addi	r23,r23,-16
200213fc:	da011d17 	ldw	r8,1140(sp)
20021400:	d8c11c17 	ldw	r3,1136(sp)
20021404:	da400404 	addi	r9,sp,16
20021408:	e5ffef16 	blt	fp,r23,200213c8 <__alt_data_end+0xfffe1fc8>
2002140c:	b021883a 	mov	r16,r22
20021410:	b82d883a 	mov	r22,r23
20021414:	902f883a 	mov	r23,r18
20021418:	dc813817 	ldw	r18,1248(sp)
2002141c:	4dc00015 	stw	r23,0(r9)
20021420:	4d800115 	stw	r22,4(r9)
20021424:	4591883a 	add	r8,r8,r22
20021428:	18c00044 	addi	r3,r3,1
2002142c:	da011d15 	stw	r8,1140(sp)
20021430:	d8c11c15 	stw	r3,1136(sp)
20021434:	008001c4 	movi	r2,7
20021438:	10c36d16 	blt	r2,r3,200221f0 <___vfprintf_internal_r+0x1268>
2002143c:	4a400204 	addi	r9,r9,8
20021440:	00016206 	br	200219cc <___vfprintf_internal_r+0xa44>
20021444:	84000414 	ori	r16,r16,16
20021448:	8080080c 	andi	r2,r16,32
2002144c:	1000801e 	bne	r2,zero,20021650 <___vfprintf_internal_r+0x6c8>
20021450:	8080040c 	andi	r2,r16,16
20021454:	1003da26 	beq	r2,zero,200223c0 <___vfprintf_internal_r+0x1438>
20021458:	d8c12d17 	ldw	r3,1204(sp)
2002145c:	002d883a 	mov	r22,zero
20021460:	1dc00017 	ldw	r23,0(r3)
20021464:	18c00104 	addi	r3,r3,4
20021468:	d8c12d15 	stw	r3,1204(sp)
2002146c:	b805883a 	mov	r2,r23
20021470:	0007883a 	mov	r3,zero
20021474:	d8012585 	stb	zero,1174(sp)
20021478:	003f9a06 	br	200212e4 <__alt_data_end+0xfffe1ee4>
2002147c:	84000414 	ori	r16,r16,16
20021480:	8080080c 	andi	r2,r16,32
20021484:	10007b1e 	bne	r2,zero,20021674 <___vfprintf_internal_r+0x6ec>
20021488:	8080040c 	andi	r2,r16,16
2002148c:	1003ed26 	beq	r2,zero,20022444 <___vfprintf_internal_r+0x14bc>
20021490:	d9012d17 	ldw	r4,1204(sp)
20021494:	25c00017 	ldw	r23,0(r4)
20021498:	21000104 	addi	r4,r4,4
2002149c:	d9012d15 	stw	r4,1204(sp)
200214a0:	b82dd7fa 	srai	r22,r23,31
200214a4:	b005883a 	mov	r2,r22
200214a8:	1003230e 	bge	r2,zero,20022138 <___vfprintf_internal_r+0x11b0>
200214ac:	05efc83a 	sub	r23,zero,r23
200214b0:	b804c03a 	cmpne	r2,r23,zero
200214b4:	05adc83a 	sub	r22,zero,r22
200214b8:	b0adc83a 	sub	r22,r22,r2
200214bc:	00800b44 	movi	r2,45
200214c0:	d8812585 	stb	r2,1174(sp)
200214c4:	00c00044 	movi	r3,1
200214c8:	bd84b03a 	or	r2,r23,r22
200214cc:	003f8506 	br	200212e4 <__alt_data_end+0xfffe1ee4>
200214d0:	da012e17 	ldw	r8,1208(sp)
200214d4:	d8812d15 	stw	r2,1204(sp)
200214d8:	0211c83a 	sub	r8,zero,r8
200214dc:	da012e15 	stw	r8,1208(sp)
200214e0:	84000114 	ori	r16,r16,4
200214e4:	ac800007 	ldb	r18,0(r21)
200214e8:	003f0506 	br	20021100 <__alt_data_end+0xfffe1d00>
200214ec:	d9013017 	ldw	r4,1216(sp)
200214f0:	d9412917 	ldw	r5,1188(sp)
200214f4:	0022da40 	call	20022da4 <__swsetup_r>
200214f8:	10003d1e 	bne	r2,zero,200215f0 <___vfprintf_internal_r+0x668>
200214fc:	d8c12917 	ldw	r3,1188(sp)
20021500:	1880030b 	ldhu	r2,12(r3)
20021504:	00c00284 	movi	r3,10
20021508:	1100068c 	andi	r4,r2,26
2002150c:	20fec21e 	bne	r4,r3,20021018 <__alt_data_end+0xfffe1c18>
20021510:	d9012917 	ldw	r4,1188(sp)
20021514:	20c0038b 	ldhu	r3,14(r4)
20021518:	193fffcc 	andi	r4,r3,65535
2002151c:	2120001c 	xori	r4,r4,32768
20021520:	21200004 	addi	r4,r4,-32768
20021524:	203ebc16 	blt	r4,zero,20021018 <__alt_data_end+0xfffe1c18>
20021528:	da012917 	ldw	r8,1188(sp)
2002152c:	d9013017 	ldw	r4,1216(sp)
20021530:	d9c12d17 	ldw	r7,1204(sp)
20021534:	42800717 	ldw	r10,28(r8)
20021538:	42400917 	ldw	r9,36(r8)
2002153c:	10bfff4c 	andi	r2,r2,65533
20021540:	02010004 	movi	r8,1024
20021544:	d881070d 	sth	r2,1052(sp)
20021548:	d9410404 	addi	r5,sp,1040
2002154c:	d8800404 	addi	r2,sp,16
20021550:	800d883a 	mov	r6,r16
20021554:	d8c1078d 	sth	r3,1054(sp)
20021558:	da810b15 	stw	r10,1068(sp)
2002155c:	da410d15 	stw	r9,1076(sp)
20021560:	d8810415 	stw	r2,1040(sp)
20021564:	d8810815 	stw	r2,1056(sp)
20021568:	da010615 	stw	r8,1048(sp)
2002156c:	da010915 	stw	r8,1060(sp)
20021570:	d8010a15 	stw	zero,1064(sp)
20021574:	0020f880 	call	20020f88 <___vfprintf_internal_r>
20021578:	d8812c15 	stw	r2,1200(sp)
2002157c:	10000416 	blt	r2,zero,20021590 <___vfprintf_internal_r+0x608>
20021580:	d9013017 	ldw	r4,1216(sp)
20021584:	d9410404 	addi	r5,sp,1040
20021588:	002473c0 	call	2002473c <_fflush_r>
2002158c:	1005d81e 	bne	r2,zero,20022cf0 <___vfprintf_internal_r+0x1d68>
20021590:	d881070b 	ldhu	r2,1052(sp)
20021594:	1080100c 	andi	r2,r2,64
20021598:	10bfffcc 	andi	r2,r2,65535
2002159c:	10a0001c 	xori	r2,r2,32768
200215a0:	10a00004 	addi	r2,r2,-32768
200215a4:	10001426 	beq	r2,zero,200215f8 <___vfprintf_internal_r+0x670>
200215a8:	d8c12917 	ldw	r3,1188(sp)
200215ac:	1880030b 	ldhu	r2,12(r3)
200215b0:	10801014 	ori	r2,r2,64
200215b4:	1880030d 	sth	r2,12(r3)
200215b8:	00000f06 	br	200215f8 <___vfprintf_internal_r+0x670>
200215bc:	d8811d17 	ldw	r2,1140(sp)
200215c0:	10000426 	beq	r2,zero,200215d4 <___vfprintf_internal_r+0x64c>
200215c4:	d9013017 	ldw	r4,1216(sp)
200215c8:	d9412917 	ldw	r5,1188(sp)
200215cc:	d9811b04 	addi	r6,sp,1132
200215d0:	0020f540 	call	20020f54 <__sprint_r>
200215d4:	d8c12917 	ldw	r3,1188(sp)
200215d8:	1880030b 	ldhu	r2,12(r3)
200215dc:	1080100c 	andi	r2,r2,64
200215e0:	10bfffcc 	andi	r2,r2,65535
200215e4:	10a0001c 	xori	r2,r2,32768
200215e8:	10a00004 	addi	r2,r2,-32768
200215ec:	10000226 	beq	r2,zero,200215f8 <___vfprintf_internal_r+0x670>
200215f0:	00bfffc4 	movi	r2,-1
200215f4:	d8812c15 	stw	r2,1200(sp)
200215f8:	d8812c17 	ldw	r2,1200(sp)
200215fc:	dfc14617 	ldw	ra,1304(sp)
20021600:	df014517 	ldw	fp,1300(sp)
20021604:	ddc14417 	ldw	r23,1296(sp)
20021608:	dd814317 	ldw	r22,1292(sp)
2002160c:	dd414217 	ldw	r21,1288(sp)
20021610:	dd014117 	ldw	r20,1284(sp)
20021614:	dcc14017 	ldw	r19,1280(sp)
20021618:	dc813f17 	ldw	r18,1276(sp)
2002161c:	dc413e17 	ldw	r17,1272(sp)
20021620:	dc013d17 	ldw	r16,1268(sp)
20021624:	dec14704 	addi	sp,sp,1308
20021628:	f800283a 	ret
2002162c:	d9412917 	ldw	r5,1188(sp)
20021630:	8809883a 	mov	r4,r17
20021634:	d9811b04 	addi	r6,sp,1132
20021638:	0020f540 	call	20020f54 <__sprint_r>
2002163c:	103fe51e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021640:	da400404 	addi	r9,sp,16
20021644:	003e9d06 	br	200210bc <__alt_data_end+0xfffe1cbc>
20021648:	00249e40 	call	200249e4 <__sinit>
2002164c:	003e6606 	br	20020fe8 <__alt_data_end+0xfffe1be8>
20021650:	d8812d17 	ldw	r2,1204(sp)
20021654:	0007883a 	mov	r3,zero
20021658:	15c00017 	ldw	r23,0(r2)
2002165c:	15800117 	ldw	r22,4(r2)
20021660:	10800204 	addi	r2,r2,8
20021664:	d8812d15 	stw	r2,1204(sp)
20021668:	d8012585 	stb	zero,1174(sp)
2002166c:	bd84b03a 	or	r2,r23,r22
20021670:	003f1c06 	br	200212e4 <__alt_data_end+0xfffe1ee4>
20021674:	d8c12d17 	ldw	r3,1204(sp)
20021678:	18800117 	ldw	r2,4(r3)
2002167c:	1dc00017 	ldw	r23,0(r3)
20021680:	18c00204 	addi	r3,r3,8
20021684:	d8c12d15 	stw	r3,1204(sp)
20021688:	102d883a 	mov	r22,r2
2002168c:	003f8606 	br	200214a8 <__alt_data_end+0xfffe20a8>
20021690:	d8c12d17 	ldw	r3,1204(sp)
20021694:	d9012d17 	ldw	r4,1204(sp)
20021698:	1dc00017 	ldw	r23,0(r3)
2002169c:	1d800117 	ldw	r22,4(r3)
200216a0:	21000204 	addi	r4,r4,8
200216a4:	00c00044 	movi	r3,1
200216a8:	d9012d15 	stw	r4,1204(sp)
200216ac:	bd84b03a 	or	r2,r23,r22
200216b0:	d8012585 	stb	zero,1174(sp)
200216b4:	003f0b06 	br	200212e4 <__alt_data_end+0xfffe1ee4>
200216b8:	d9812585 	stb	r6,1174(sp)
200216bc:	ac800007 	ldb	r18,0(r21)
200216c0:	003e8f06 	br	20021100 <__alt_data_end+0xfffe1d00>
200216c4:	ac800007 	ldb	r18,0(r21)
200216c8:	a9000044 	addi	r4,r21,1
200216cc:	92857d26 	beq	r18,r10,20022cc4 <___vfprintf_internal_r+0x1d3c>
200216d0:	90bff404 	addi	r2,r18,-48
200216d4:	0039883a 	mov	fp,zero
200216d8:	28800736 	bltu	r5,r2,200216f8 <___vfprintf_internal_r+0x770>
200216dc:	24800007 	ldb	r18,0(r4)
200216e0:	e70002a4 	muli	fp,fp,10
200216e4:	21000044 	addi	r4,r4,1
200216e8:	1739883a 	add	fp,r2,fp
200216ec:	90bff404 	addi	r2,r18,-48
200216f0:	28bffa2e 	bgeu	r5,r2,200216dc <__alt_data_end+0xfffe22dc>
200216f4:	e0044216 	blt	fp,zero,20022800 <___vfprintf_internal_r+0x1878>
200216f8:	202b883a 	mov	r21,r4
200216fc:	003e8106 	br	20021104 <__alt_data_end+0xfffe1d04>
20021700:	d8812587 	ldb	r2,1174(sp)
20021704:	1003581e 	bne	r2,zero,20022468 <___vfprintf_internal_r+0x14e0>
20021708:	dac12585 	stb	r11,1174(sp)
2002170c:	ac800007 	ldb	r18,0(r21)
20021710:	003e7b06 	br	20021100 <__alt_data_end+0xfffe1d00>
20021714:	84000054 	ori	r16,r16,1
20021718:	ac800007 	ldb	r18,0(r21)
2002171c:	003e7806 	br	20021100 <__alt_data_end+0xfffe1d00>
20021720:	84002014 	ori	r16,r16,128
20021724:	ac800007 	ldb	r18,0(r21)
20021728:	003e7506 	br	20021100 <__alt_data_end+0xfffe1d00>
2002172c:	020800f4 	movhi	r8,8195
20021730:	42330c04 	addi	r8,r8,-13264
20021734:	da013615 	stw	r8,1240(sp)
20021738:	8080080c 	andi	r2,r16,32
2002173c:	10009626 	beq	r2,zero,20021998 <___vfprintf_internal_r+0xa10>
20021740:	d8812d17 	ldw	r2,1204(sp)
20021744:	15c00017 	ldw	r23,0(r2)
20021748:	15800117 	ldw	r22,4(r2)
2002174c:	10800204 	addi	r2,r2,8
20021750:	d8812d15 	stw	r2,1204(sp)
20021754:	8080004c 	andi	r2,r16,1
20021758:	1002ae26 	beq	r2,zero,20022214 <___vfprintf_internal_r+0x128c>
2002175c:	bd84b03a 	or	r2,r23,r22
20021760:	10032a26 	beq	r2,zero,2002240c <___vfprintf_internal_r+0x1484>
20021764:	00c00c04 	movi	r3,48
20021768:	d8c12505 	stb	r3,1172(sp)
2002176c:	dc812545 	stb	r18,1173(sp)
20021770:	84000094 	ori	r16,r16,2
20021774:	00c00084 	movi	r3,2
20021778:	d8012585 	stb	zero,1174(sp)
2002177c:	003ed906 	br	200212e4 <__alt_data_end+0xfffe1ee4>
20021780:	84001014 	ori	r16,r16,64
20021784:	ac800007 	ldb	r18,0(r21)
20021788:	003e5d06 	br	20021100 <__alt_data_end+0xfffe1d00>
2002178c:	ac800007 	ldb	r18,0(r21)
20021790:	a805883a 	mov	r2,r21
20021794:	91c43226 	beq	r18,r7,20022860 <___vfprintf_internal_r+0x18d8>
20021798:	84000414 	ori	r16,r16,16
2002179c:	003e5806 	br	20021100 <__alt_data_end+0xfffe1d00>
200217a0:	d8c12d17 	ldw	r3,1204(sp)
200217a4:	02000044 	movi	r8,1
200217a8:	da012815 	stw	r8,1184(sp)
200217ac:	18800017 	ldw	r2,0(r3)
200217b0:	18c00104 	addi	r3,r3,4
200217b4:	d8012585 	stb	zero,1174(sp)
200217b8:	d8810405 	stb	r2,1040(sp)
200217bc:	d8c12d15 	stw	r3,1204(sp)
200217c0:	da012b15 	stw	r8,1196(sp)
200217c4:	dcc10404 	addi	r19,sp,1040
200217c8:	d8013115 	stw	zero,1220(sp)
200217cc:	003ee006 	br	20021350 <__alt_data_end+0xfffe1f50>
200217d0:	8080080c 	andi	r2,r16,32
200217d4:	10031026 	beq	r2,zero,20022418 <___vfprintf_internal_r+0x1490>
200217d8:	d9012d17 	ldw	r4,1204(sp)
200217dc:	da012c17 	ldw	r8,1200(sp)
200217e0:	20800017 	ldw	r2,0(r4)
200217e4:	4007d7fa 	srai	r3,r8,31
200217e8:	21000104 	addi	r4,r4,4
200217ec:	d9012d15 	stw	r4,1204(sp)
200217f0:	12000015 	stw	r8,0(r2)
200217f4:	10c00115 	stw	r3,4(r2)
200217f8:	003e1906 	br	20021060 <__alt_data_end+0xfffe1c60>
200217fc:	da012d17 	ldw	r8,1204(sp)
20021800:	d9012d17 	ldw	r4,1204(sp)
20021804:	42000017 	ldw	r8,0(r8)
20021808:	20800104 	addi	r2,r4,4
2002180c:	da012e15 	stw	r8,1208(sp)
20021810:	403f2f16 	blt	r8,zero,200214d0 <__alt_data_end+0xfffe20d0>
20021814:	d8812d15 	stw	r2,1204(sp)
20021818:	ac800007 	ldb	r18,0(r21)
2002181c:	003e3806 	br	20021100 <__alt_data_end+0xfffe1d00>
20021820:	0009883a 	mov	r4,zero
20021824:	90bff404 	addi	r2,r18,-48
20021828:	ac800007 	ldb	r18,0(r21)
2002182c:	210002a4 	muli	r4,r4,10
20021830:	ad400044 	addi	r21,r21,1
20021834:	2089883a 	add	r4,r4,r2
20021838:	90bff404 	addi	r2,r18,-48
2002183c:	28bffa2e 	bgeu	r5,r2,20021828 <__alt_data_end+0xfffe2428>
20021840:	d9012e15 	stw	r4,1208(sp)
20021844:	003e2f06 	br	20021104 <__alt_data_end+0xfffe1d04>
20021848:	8080020c 	andi	r2,r16,8
2002184c:	1002d426 	beq	r2,zero,200223a0 <___vfprintf_internal_r+0x1418>
20021850:	d8c12d17 	ldw	r3,1204(sp)
20021854:	1d800017 	ldw	r22,0(r3)
20021858:	1d000117 	ldw	r20,4(r3)
2002185c:	18c00204 	addi	r3,r3,8
20021860:	d8c12d15 	stw	r3,1204(sp)
20021864:	dd813315 	stw	r22,1228(sp)
20021868:	dd013415 	stw	r20,1232(sp)
2002186c:	b009883a 	mov	r4,r22
20021870:	a00b883a 	mov	r5,r20
20021874:	da413c15 	stw	r9,1264(sp)
20021878:	0027ad00 	call	20027ad0 <__isinfd>
2002187c:	da413c17 	ldw	r9,1264(sp)
20021880:	b009883a 	mov	r4,r22
20021884:	a00b883a 	mov	r5,r20
20021888:	10035726 	beq	r2,zero,200225e8 <___vfprintf_internal_r+0x1660>
2002188c:	000d883a 	mov	r6,zero
20021890:	000f883a 	mov	r7,zero
20021894:	00299280 	call	20029928 <__ltdf2>
20021898:	da413c17 	ldw	r9,1264(sp)
2002189c:	10041b16 	blt	r2,zero,2002290c <___vfprintf_internal_r+0x1984>
200218a0:	d8812583 	ldbu	r2,1174(sp)
200218a4:	00c011c4 	movi	r3,71
200218a8:	1c830b16 	blt	r3,r18,200224d8 <___vfprintf_internal_r+0x1550>
200218ac:	04c800f4 	movhi	r19,8195
200218b0:	9cf30804 	addi	r19,r19,-13280
200218b4:	020000c4 	movi	r8,3
200218b8:	00ffdfc4 	movi	r3,-129
200218bc:	da012815 	stw	r8,1184(sp)
200218c0:	80e0703a 	and	r16,r16,r3
200218c4:	da012b15 	stw	r8,1196(sp)
200218c8:	d8013115 	stw	zero,1220(sp)
200218cc:	003e9906 	br	20021334 <__alt_data_end+0xfffe1f34>
200218d0:	d8812d17 	ldw	r2,1204(sp)
200218d4:	d8c12d17 	ldw	r3,1204(sp)
200218d8:	020800f4 	movhi	r8,8195
200218dc:	42331104 	addi	r8,r8,-13244
200218e0:	15c00017 	ldw	r23,0(r2)
200218e4:	00800c04 	movi	r2,48
200218e8:	18c00104 	addi	r3,r3,4
200218ec:	d8812505 	stb	r2,1172(sp)
200218f0:	00801e04 	movi	r2,120
200218f4:	d8812545 	stb	r2,1173(sp)
200218f8:	d8c12d15 	stw	r3,1204(sp)
200218fc:	002d883a 	mov	r22,zero
20021900:	84000094 	ori	r16,r16,2
20021904:	da013615 	stw	r8,1240(sp)
20021908:	00c00084 	movi	r3,2
2002190c:	04801e04 	movi	r18,120
20021910:	b805883a 	mov	r2,r23
20021914:	d8012585 	stb	zero,1174(sp)
20021918:	003e7206 	br	200212e4 <__alt_data_end+0xfffe1ee4>
2002191c:	84000814 	ori	r16,r16,32
20021920:	ac800007 	ldb	r18,0(r21)
20021924:	003df606 	br	20021100 <__alt_data_end+0xfffe1d00>
20021928:	d8812d17 	ldw	r2,1204(sp)
2002192c:	d8012585 	stb	zero,1174(sp)
20021930:	14c00017 	ldw	r19,0(r2)
20021934:	15c00104 	addi	r23,r2,4
20021938:	98040126 	beq	r19,zero,20022940 <___vfprintf_internal_r+0x19b8>
2002193c:	9809883a 	mov	r4,r19
20021940:	e003dd16 	blt	fp,zero,200228b8 <___vfprintf_internal_r+0x1930>
20021944:	000b883a 	mov	r5,zero
20021948:	e00d883a 	mov	r6,fp
2002194c:	da413c15 	stw	r9,1264(sp)
20021950:	00260840 	call	20026084 <memchr>
20021954:	da413c17 	ldw	r9,1264(sp)
20021958:	10042e26 	beq	r2,zero,20022a14 <___vfprintf_internal_r+0x1a8c>
2002195c:	14c5c83a 	sub	r2,r2,r19
20021960:	d8812b15 	stw	r2,1196(sp)
20021964:	e083790e 	bge	fp,r2,2002274c <___vfprintf_internal_r+0x17c4>
20021968:	df012815 	stw	fp,1184(sp)
2002196c:	e0049516 	blt	fp,zero,20022bc4 <___vfprintf_internal_r+0x1c3c>
20021970:	d8812583 	ldbu	r2,1174(sp)
20021974:	df012b15 	stw	fp,1196(sp)
20021978:	ddc12d15 	stw	r23,1204(sp)
2002197c:	d8013115 	stw	zero,1220(sp)
20021980:	003e6c06 	br	20021334 <__alt_data_end+0xfffe1f34>
20021984:	020800f4 	movhi	r8,8195
20021988:	42331104 	addi	r8,r8,-13244
2002198c:	da013615 	stw	r8,1240(sp)
20021990:	8080080c 	andi	r2,r16,32
20021994:	103f6a1e 	bne	r2,zero,20021740 <__alt_data_end+0xfffe2340>
20021998:	8080040c 	andi	r2,r16,16
2002199c:	10029326 	beq	r2,zero,200223ec <___vfprintf_internal_r+0x1464>
200219a0:	d8c12d17 	ldw	r3,1204(sp)
200219a4:	002d883a 	mov	r22,zero
200219a8:	1dc00017 	ldw	r23,0(r3)
200219ac:	18c00104 	addi	r3,r3,4
200219b0:	d8c12d15 	stw	r3,1204(sp)
200219b4:	003f6706 	br	20021754 <__alt_data_end+0xfffe2354>
200219b8:	84000214 	ori	r16,r16,8
200219bc:	ac800007 	ldb	r18,0(r21)
200219c0:	003dcf06 	br	20021100 <__alt_data_end+0xfffe1d00>
200219c4:	da011d17 	ldw	r8,1140(sp)
200219c8:	d8c11c17 	ldw	r3,1136(sp)
200219cc:	d8812587 	ldb	r2,1174(sp)
200219d0:	10000b26 	beq	r2,zero,20021a00 <___vfprintf_internal_r+0xa78>
200219d4:	d8812584 	addi	r2,sp,1174
200219d8:	48800015 	stw	r2,0(r9)
200219dc:	00800044 	movi	r2,1
200219e0:	48800115 	stw	r2,4(r9)
200219e4:	4091883a 	add	r8,r8,r2
200219e8:	1887883a 	add	r3,r3,r2
200219ec:	da011d15 	stw	r8,1140(sp)
200219f0:	d8c11c15 	stw	r3,1136(sp)
200219f4:	008001c4 	movi	r2,7
200219f8:	10c18516 	blt	r2,r3,20022010 <___vfprintf_internal_r+0x1088>
200219fc:	4a400204 	addi	r9,r9,8
20021a00:	d9012a17 	ldw	r4,1192(sp)
20021a04:	20000b26 	beq	r4,zero,20021a34 <___vfprintf_internal_r+0xaac>
20021a08:	d8812504 	addi	r2,sp,1172
20021a0c:	48800015 	stw	r2,0(r9)
20021a10:	00800084 	movi	r2,2
20021a14:	48800115 	stw	r2,4(r9)
20021a18:	4091883a 	add	r8,r8,r2
20021a1c:	18c00044 	addi	r3,r3,1
20021a20:	da011d15 	stw	r8,1140(sp)
20021a24:	d8c11c15 	stw	r3,1136(sp)
20021a28:	008001c4 	movi	r2,7
20021a2c:	10c18116 	blt	r2,r3,20022034 <___vfprintf_internal_r+0x10ac>
20021a30:	4a400204 	addi	r9,r9,8
20021a34:	d9012f17 	ldw	r4,1212(sp)
20021a38:	00802004 	movi	r2,128
20021a3c:	2080fc26 	beq	r4,r2,20021e30 <___vfprintf_internal_r+0xea8>
20021a40:	d8813117 	ldw	r2,1220(sp)
20021a44:	d9012b17 	ldw	r4,1196(sp)
20021a48:	112fc83a 	sub	r23,r2,r4
20021a4c:	05c02a0e 	bge	zero,r23,20021af8 <___vfprintf_internal_r+0xb70>
20021a50:	07000404 	movi	fp,16
20021a54:	050800f4 	movhi	r20,8195
20021a58:	a5331c84 	addi	r20,r20,-13198
20021a5c:	e5c01d0e 	bge	fp,r23,20021ad4 <___vfprintf_internal_r+0xb4c>
20021a60:	dc812a15 	stw	r18,1192(sp)
20021a64:	058001c4 	movi	r22,7
20021a68:	a025883a 	mov	r18,r20
20021a6c:	8029883a 	mov	r20,r16
20021a70:	dc012917 	ldw	r16,1188(sp)
20021a74:	00000306 	br	20021a84 <___vfprintf_internal_r+0xafc>
20021a78:	bdfffc04 	addi	r23,r23,-16
20021a7c:	4a400204 	addi	r9,r9,8
20021a80:	e5c0110e 	bge	fp,r23,20021ac8 <___vfprintf_internal_r+0xb40>
20021a84:	4c800015 	stw	r18,0(r9)
20021a88:	4f000115 	stw	fp,4(r9)
20021a8c:	42000404 	addi	r8,r8,16
20021a90:	18c00044 	addi	r3,r3,1
20021a94:	da011d15 	stw	r8,1140(sp)
20021a98:	d8c11c15 	stw	r3,1136(sp)
20021a9c:	b0fff60e 	bge	r22,r3,20021a78 <__alt_data_end+0xfffe2678>
20021aa0:	8809883a 	mov	r4,r17
20021aa4:	800b883a 	mov	r5,r16
20021aa8:	d9811b04 	addi	r6,sp,1132
20021aac:	0020f540 	call	20020f54 <__sprint_r>
20021ab0:	103ec81e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021ab4:	bdfffc04 	addi	r23,r23,-16
20021ab8:	da011d17 	ldw	r8,1140(sp)
20021abc:	d8c11c17 	ldw	r3,1136(sp)
20021ac0:	da400404 	addi	r9,sp,16
20021ac4:	e5ffef16 	blt	fp,r23,20021a84 <__alt_data_end+0xfffe2684>
20021ac8:	a021883a 	mov	r16,r20
20021acc:	9029883a 	mov	r20,r18
20021ad0:	dc812a17 	ldw	r18,1192(sp)
20021ad4:	4d000015 	stw	r20,0(r9)
20021ad8:	4dc00115 	stw	r23,4(r9)
20021adc:	45d1883a 	add	r8,r8,r23
20021ae0:	18c00044 	addi	r3,r3,1
20021ae4:	da011d15 	stw	r8,1140(sp)
20021ae8:	d8c11c15 	stw	r3,1136(sp)
20021aec:	008001c4 	movi	r2,7
20021af0:	10c13e16 	blt	r2,r3,20021fec <___vfprintf_internal_r+0x1064>
20021af4:	4a400204 	addi	r9,r9,8
20021af8:	8080400c 	andi	r2,r16,256
20021afc:	1000831e 	bne	r2,zero,20021d0c <___vfprintf_internal_r+0xd84>
20021b00:	d8812b17 	ldw	r2,1196(sp)
20021b04:	4cc00015 	stw	r19,0(r9)
20021b08:	48800115 	stw	r2,4(r9)
20021b0c:	4091883a 	add	r8,r8,r2
20021b10:	18c00044 	addi	r3,r3,1
20021b14:	da011d15 	stw	r8,1140(sp)
20021b18:	d8c11c15 	stw	r3,1136(sp)
20021b1c:	008001c4 	movi	r2,7
20021b20:	10c05316 	blt	r2,r3,20021c70 <___vfprintf_internal_r+0xce8>
20021b24:	4a400204 	addi	r9,r9,8
20021b28:	8400010c 	andi	r16,r16,4
20021b2c:	80002e26 	beq	r16,zero,20021be8 <___vfprintf_internal_r+0xc60>
20021b30:	d8812e17 	ldw	r2,1208(sp)
20021b34:	d8c12817 	ldw	r3,1184(sp)
20021b38:	10e1c83a 	sub	r16,r2,r3
20021b3c:	04002a0e 	bge	zero,r16,20021be8 <___vfprintf_internal_r+0xc60>
20021b40:	04800404 	movi	r18,16
20021b44:	d8c11c17 	ldw	r3,1136(sp)
20021b48:	05c800f4 	movhi	r23,8195
20021b4c:	bdf31884 	addi	r23,r23,-13214
20021b50:	9400170e 	bge	r18,r16,20021bb0 <___vfprintf_internal_r+0xc28>
20021b54:	04c001c4 	movi	r19,7
20021b58:	dd012917 	ldw	r20,1188(sp)
20021b5c:	00000306 	br	20021b6c <___vfprintf_internal_r+0xbe4>
20021b60:	843ffc04 	addi	r16,r16,-16
20021b64:	4a400204 	addi	r9,r9,8
20021b68:	9400110e 	bge	r18,r16,20021bb0 <___vfprintf_internal_r+0xc28>
20021b6c:	4dc00015 	stw	r23,0(r9)
20021b70:	4c800115 	stw	r18,4(r9)
20021b74:	42000404 	addi	r8,r8,16
20021b78:	18c00044 	addi	r3,r3,1
20021b7c:	da011d15 	stw	r8,1140(sp)
20021b80:	d8c11c15 	stw	r3,1136(sp)
20021b84:	98fff60e 	bge	r19,r3,20021b60 <__alt_data_end+0xfffe2760>
20021b88:	8809883a 	mov	r4,r17
20021b8c:	a00b883a 	mov	r5,r20
20021b90:	d9811b04 	addi	r6,sp,1132
20021b94:	0020f540 	call	20020f54 <__sprint_r>
20021b98:	103e8e1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021b9c:	843ffc04 	addi	r16,r16,-16
20021ba0:	da011d17 	ldw	r8,1140(sp)
20021ba4:	d8c11c17 	ldw	r3,1136(sp)
20021ba8:	da400404 	addi	r9,sp,16
20021bac:	943fef16 	blt	r18,r16,20021b6c <__alt_data_end+0xfffe276c>
20021bb0:	4dc00015 	stw	r23,0(r9)
20021bb4:	4c000115 	stw	r16,4(r9)
20021bb8:	8211883a 	add	r8,r16,r8
20021bbc:	18c00044 	addi	r3,r3,1
20021bc0:	da011d15 	stw	r8,1140(sp)
20021bc4:	d8c11c15 	stw	r3,1136(sp)
20021bc8:	008001c4 	movi	r2,7
20021bcc:	10c0060e 	bge	r2,r3,20021be8 <___vfprintf_internal_r+0xc60>
20021bd0:	d9412917 	ldw	r5,1188(sp)
20021bd4:	8809883a 	mov	r4,r17
20021bd8:	d9811b04 	addi	r6,sp,1132
20021bdc:	0020f540 	call	20020f54 <__sprint_r>
20021be0:	103e7c1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021be4:	da011d17 	ldw	r8,1140(sp)
20021be8:	dd012817 	ldw	r20,1184(sp)
20021bec:	d9012e17 	ldw	r4,1208(sp)
20021bf0:	a100010e 	bge	r20,r4,20021bf8 <___vfprintf_internal_r+0xc70>
20021bf4:	2029883a 	mov	r20,r4
20021bf8:	d8812c17 	ldw	r2,1200(sp)
20021bfc:	1505883a 	add	r2,r2,r20
20021c00:	d8812c15 	stw	r2,1200(sp)
20021c04:	4000b91e 	bne	r8,zero,20021eec <___vfprintf_internal_r+0xf64>
20021c08:	d8011c15 	stw	zero,1136(sp)
20021c0c:	a8800007 	ldb	r2,0(r21)
20021c10:	da400404 	addi	r9,sp,16
20021c14:	103d141e 	bne	r2,zero,20021068 <__alt_data_end+0xfffe1c68>
20021c18:	a825883a 	mov	r18,r21
20021c1c:	003d2a06 	br	200210c8 <__alt_data_end+0xfffe1cc8>
20021c20:	d9412917 	ldw	r5,1188(sp)
20021c24:	8809883a 	mov	r4,r17
20021c28:	d9811b04 	addi	r6,sp,1132
20021c2c:	0020f540 	call	20020f54 <__sprint_r>
20021c30:	103e681e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021c34:	da011d17 	ldw	r8,1140(sp)
20021c38:	da400404 	addi	r9,sp,16
20021c3c:	8080004c 	andi	r2,r16,1
20021c40:	103fb926 	beq	r2,zero,20021b28 <__alt_data_end+0xfffe2728>
20021c44:	d8c11c17 	ldw	r3,1136(sp)
20021c48:	d9013717 	ldw	r4,1244(sp)
20021c4c:	00800044 	movi	r2,1
20021c50:	48800115 	stw	r2,4(r9)
20021c54:	49000015 	stw	r4,0(r9)
20021c58:	4091883a 	add	r8,r8,r2
20021c5c:	1887883a 	add	r3,r3,r2
20021c60:	da011d15 	stw	r8,1140(sp)
20021c64:	d8c11c15 	stw	r3,1136(sp)
20021c68:	008001c4 	movi	r2,7
20021c6c:	10ffad0e 	bge	r2,r3,20021b24 <__alt_data_end+0xfffe2724>
20021c70:	d9412917 	ldw	r5,1188(sp)
20021c74:	8809883a 	mov	r4,r17
20021c78:	d9811b04 	addi	r6,sp,1132
20021c7c:	0020f540 	call	20020f54 <__sprint_r>
20021c80:	103e541e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021c84:	da400404 	addi	r9,sp,16
20021c88:	da011d17 	ldw	r8,1140(sp)
20021c8c:	003fa606 	br	20021b28 <__alt_data_end+0xfffe2728>
20021c90:	18803fcc 	andi	r2,r3,255
20021c94:	00c00044 	movi	r3,1
20021c98:	10c10126 	beq	r2,r3,200220a0 <___vfprintf_internal_r+0x1118>
20021c9c:	00c00084 	movi	r3,2
20021ca0:	10c0f026 	beq	r2,r3,20022064 <___vfprintf_internal_r+0x10dc>
20021ca4:	d8c10dc4 	addi	r3,sp,1079
20021ca8:	b808d0fa 	srli	r4,r23,3
20021cac:	b00a977a 	slli	r5,r22,29
20021cb0:	b02cd0fa 	srli	r22,r22,3
20021cb4:	bdc001cc 	andi	r23,r23,7
20021cb8:	b8800c04 	addi	r2,r23,48
20021cbc:	292eb03a 	or	r23,r5,r4
20021cc0:	18800005 	stb	r2,0(r3)
20021cc4:	bd88b03a 	or	r4,r23,r22
20021cc8:	1827883a 	mov	r19,r3
20021ccc:	18ffffc4 	addi	r3,r3,-1
20021cd0:	203ff51e 	bne	r4,zero,20021ca8 <__alt_data_end+0xfffe28a8>
20021cd4:	8100004c 	andi	r4,r16,1
20021cd8:	980b883a 	mov	r5,r19
20021cdc:	20000726 	beq	r4,zero,20021cfc <___vfprintf_internal_r+0xd74>
20021ce0:	10803fcc 	andi	r2,r2,255
20021ce4:	1080201c 	xori	r2,r2,128
20021ce8:	10bfe004 	addi	r2,r2,-128
20021cec:	01000c04 	movi	r4,48
20021cf0:	11000226 	beq	r2,r4,20021cfc <___vfprintf_internal_r+0xd74>
20021cf4:	1827883a 	mov	r19,r3
20021cf8:	293fffc5 	stb	r4,-1(r5)
20021cfc:	d8812717 	ldw	r2,1180(sp)
20021d00:	14c5c83a 	sub	r2,r2,r19
20021d04:	d8812b15 	stw	r2,1196(sp)
20021d08:	003d8406 	br	2002131c <__alt_data_end+0xfffe1f1c>
20021d0c:	00801944 	movi	r2,101
20021d10:	14807c0e 	bge	r2,r18,20021f04 <___vfprintf_internal_r+0xf7c>
20021d14:	d9013317 	ldw	r4,1228(sp)
20021d18:	d9413417 	ldw	r5,1232(sp)
20021d1c:	000d883a 	mov	r6,zero
20021d20:	000f883a 	mov	r7,zero
20021d24:	d8c13b15 	stw	r3,1260(sp)
20021d28:	da013a15 	stw	r8,1256(sp)
20021d2c:	da413c15 	stw	r9,1264(sp)
20021d30:	00298040 	call	20029804 <__nedf2>
20021d34:	d8c13b17 	ldw	r3,1260(sp)
20021d38:	da013a17 	ldw	r8,1256(sp)
20021d3c:	da413c17 	ldw	r9,1264(sp)
20021d40:	1001001e 	bne	r2,zero,20022144 <___vfprintf_internal_r+0x11bc>
20021d44:	008800f4 	movhi	r2,8195
20021d48:	10b31804 	addi	r2,r2,-13216
20021d4c:	48800015 	stw	r2,0(r9)
20021d50:	00800044 	movi	r2,1
20021d54:	48800115 	stw	r2,4(r9)
20021d58:	4091883a 	add	r8,r8,r2
20021d5c:	1887883a 	add	r3,r3,r2
20021d60:	da011d15 	stw	r8,1140(sp)
20021d64:	d8c11c15 	stw	r3,1136(sp)
20021d68:	008001c4 	movi	r2,7
20021d6c:	10c1dd16 	blt	r2,r3,200224e4 <___vfprintf_internal_r+0x155c>
20021d70:	4a400204 	addi	r9,r9,8
20021d74:	d8812417 	ldw	r2,1168(sp)
20021d78:	d8c13217 	ldw	r3,1224(sp)
20021d7c:	10c00216 	blt	r2,r3,20021d88 <___vfprintf_internal_r+0xe00>
20021d80:	8080004c 	andi	r2,r16,1
20021d84:	103f6826 	beq	r2,zero,20021b28 <__alt_data_end+0xfffe2728>
20021d88:	d8c11c17 	ldw	r3,1136(sp)
20021d8c:	d9013717 	ldw	r4,1244(sp)
20021d90:	00800044 	movi	r2,1
20021d94:	48800115 	stw	r2,4(r9)
20021d98:	49000015 	stw	r4,0(r9)
20021d9c:	4091883a 	add	r8,r8,r2
20021da0:	1887883a 	add	r3,r3,r2
20021da4:	da011d15 	stw	r8,1140(sp)
20021da8:	d8c11c15 	stw	r3,1136(sp)
20021dac:	008001c4 	movi	r2,7
20021db0:	10c2af16 	blt	r2,r3,20022870 <___vfprintf_internal_r+0x18e8>
20021db4:	4a400204 	addi	r9,r9,8
20021db8:	d8813217 	ldw	r2,1224(sp)
20021dbc:	14bfffc4 	addi	r18,r2,-1
20021dc0:	04bf590e 	bge	zero,r18,20021b28 <__alt_data_end+0xfffe2728>
20021dc4:	04c00404 	movi	r19,16
20021dc8:	d8c11c17 	ldw	r3,1136(sp)
20021dcc:	050800f4 	movhi	r20,8195
20021dd0:	a5331c84 	addi	r20,r20,-13198
20021dd4:	9c81630e 	bge	r19,r18,20022364 <___vfprintf_internal_r+0x13dc>
20021dd8:	058001c4 	movi	r22,7
20021ddc:	ddc12917 	ldw	r23,1188(sp)
20021de0:	00000306 	br	20021df0 <___vfprintf_internal_r+0xe68>
20021de4:	4a400204 	addi	r9,r9,8
20021de8:	94bffc04 	addi	r18,r18,-16
20021dec:	9c815d0e 	bge	r19,r18,20022364 <___vfprintf_internal_r+0x13dc>
20021df0:	4d000015 	stw	r20,0(r9)
20021df4:	4cc00115 	stw	r19,4(r9)
20021df8:	42000404 	addi	r8,r8,16
20021dfc:	18c00044 	addi	r3,r3,1
20021e00:	da011d15 	stw	r8,1140(sp)
20021e04:	d8c11c15 	stw	r3,1136(sp)
20021e08:	b0fff60e 	bge	r22,r3,20021de4 <__alt_data_end+0xfffe29e4>
20021e0c:	8809883a 	mov	r4,r17
20021e10:	b80b883a 	mov	r5,r23
20021e14:	d9811b04 	addi	r6,sp,1132
20021e18:	0020f540 	call	20020f54 <__sprint_r>
20021e1c:	103ded1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021e20:	da011d17 	ldw	r8,1140(sp)
20021e24:	d8c11c17 	ldw	r3,1136(sp)
20021e28:	da400404 	addi	r9,sp,16
20021e2c:	003fee06 	br	20021de8 <__alt_data_end+0xfffe29e8>
20021e30:	d8812e17 	ldw	r2,1208(sp)
20021e34:	d9012817 	ldw	r4,1184(sp)
20021e38:	112fc83a 	sub	r23,r2,r4
20021e3c:	05ff000e 	bge	zero,r23,20021a40 <__alt_data_end+0xfffe2640>
20021e40:	07000404 	movi	fp,16
20021e44:	050800f4 	movhi	r20,8195
20021e48:	a5331c84 	addi	r20,r20,-13198
20021e4c:	e5c01d0e 	bge	fp,r23,20021ec4 <___vfprintf_internal_r+0xf3c>
20021e50:	dc812a15 	stw	r18,1192(sp)
20021e54:	058001c4 	movi	r22,7
20021e58:	a025883a 	mov	r18,r20
20021e5c:	8029883a 	mov	r20,r16
20021e60:	dc012917 	ldw	r16,1188(sp)
20021e64:	00000306 	br	20021e74 <___vfprintf_internal_r+0xeec>
20021e68:	bdfffc04 	addi	r23,r23,-16
20021e6c:	4a400204 	addi	r9,r9,8
20021e70:	e5c0110e 	bge	fp,r23,20021eb8 <___vfprintf_internal_r+0xf30>
20021e74:	4c800015 	stw	r18,0(r9)
20021e78:	4f000115 	stw	fp,4(r9)
20021e7c:	42000404 	addi	r8,r8,16
20021e80:	18c00044 	addi	r3,r3,1
20021e84:	da011d15 	stw	r8,1140(sp)
20021e88:	d8c11c15 	stw	r3,1136(sp)
20021e8c:	b0fff60e 	bge	r22,r3,20021e68 <__alt_data_end+0xfffe2a68>
20021e90:	8809883a 	mov	r4,r17
20021e94:	800b883a 	mov	r5,r16
20021e98:	d9811b04 	addi	r6,sp,1132
20021e9c:	0020f540 	call	20020f54 <__sprint_r>
20021ea0:	103dcc1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20021ea4:	bdfffc04 	addi	r23,r23,-16
20021ea8:	da011d17 	ldw	r8,1140(sp)
20021eac:	d8c11c17 	ldw	r3,1136(sp)
20021eb0:	da400404 	addi	r9,sp,16
20021eb4:	e5ffef16 	blt	fp,r23,20021e74 <__alt_data_end+0xfffe2a74>
20021eb8:	a021883a 	mov	r16,r20
20021ebc:	9029883a 	mov	r20,r18
20021ec0:	dc812a17 	ldw	r18,1192(sp)
20021ec4:	4d000015 	stw	r20,0(r9)
20021ec8:	4dc00115 	stw	r23,4(r9)
20021ecc:	45d1883a 	add	r8,r8,r23
20021ed0:	18c00044 	addi	r3,r3,1
20021ed4:	da011d15 	stw	r8,1140(sp)
20021ed8:	d8c11c15 	stw	r3,1136(sp)
20021edc:	008001c4 	movi	r2,7
20021ee0:	10c11716 	blt	r2,r3,20022340 <___vfprintf_internal_r+0x13b8>
20021ee4:	4a400204 	addi	r9,r9,8
20021ee8:	003ed506 	br	20021a40 <__alt_data_end+0xfffe2640>
20021eec:	d9412917 	ldw	r5,1188(sp)
20021ef0:	8809883a 	mov	r4,r17
20021ef4:	d9811b04 	addi	r6,sp,1132
20021ef8:	0020f540 	call	20020f54 <__sprint_r>
20021efc:	103f4226 	beq	r2,zero,20021c08 <__alt_data_end+0xfffe2808>
20021f00:	003db406 	br	200215d4 <__alt_data_end+0xfffe21d4>
20021f04:	d9013217 	ldw	r4,1224(sp)
20021f08:	00800044 	movi	r2,1
20021f0c:	4cc00015 	stw	r19,0(r9)
20021f10:	1100e10e 	bge	r2,r4,20022298 <___vfprintf_internal_r+0x1310>
20021f14:	00800044 	movi	r2,1
20021f18:	48800115 	stw	r2,4(r9)
20021f1c:	4091883a 	add	r8,r8,r2
20021f20:	1887883a 	add	r3,r3,r2
20021f24:	da011d15 	stw	r8,1140(sp)
20021f28:	d8c11c15 	stw	r3,1136(sp)
20021f2c:	008001c4 	movi	r2,7
20021f30:	10c0ed16 	blt	r2,r3,200222e8 <___vfprintf_internal_r+0x1360>
20021f34:	4a400204 	addi	r9,r9,8
20021f38:	d8813717 	ldw	r2,1244(sp)
20021f3c:	48800015 	stw	r2,0(r9)
20021f40:	00800044 	movi	r2,1
20021f44:	48800115 	stw	r2,4(r9)
20021f48:	4091883a 	add	r8,r8,r2
20021f4c:	1887883a 	add	r3,r3,r2
20021f50:	da011d15 	stw	r8,1140(sp)
20021f54:	d8c11c15 	stw	r3,1136(sp)
20021f58:	008001c4 	movi	r2,7
20021f5c:	10c0eb16 	blt	r2,r3,2002230c <___vfprintf_internal_r+0x1384>
20021f60:	4c800204 	addi	r18,r9,8
20021f64:	d9013317 	ldw	r4,1228(sp)
20021f68:	d9413417 	ldw	r5,1232(sp)
20021f6c:	000d883a 	mov	r6,zero
20021f70:	000f883a 	mov	r7,zero
20021f74:	d8c13b15 	stw	r3,1260(sp)
20021f78:	da013a15 	stw	r8,1256(sp)
20021f7c:	00297a80 	call	200297a8 <__eqdf2>
20021f80:	d8c13b17 	ldw	r3,1260(sp)
20021f84:	da013a17 	ldw	r8,1256(sp)
20021f88:	1000a626 	beq	r2,zero,20022224 <___vfprintf_internal_r+0x129c>
20021f8c:	d9013217 	ldw	r4,1224(sp)
20021f90:	9cc00044 	addi	r19,r19,1
20021f94:	94c00015 	stw	r19,0(r18)
20021f98:	20bfffc4 	addi	r2,r4,-1
20021f9c:	90800115 	stw	r2,4(r18)
20021fa0:	4091883a 	add	r8,r8,r2
20021fa4:	18c00044 	addi	r3,r3,1
20021fa8:	da011d15 	stw	r8,1140(sp)
20021fac:	d8c11c15 	stw	r3,1136(sp)
20021fb0:	008001c4 	movi	r2,7
20021fb4:	10c0c316 	blt	r2,r3,200222c4 <___vfprintf_internal_r+0x133c>
20021fb8:	94800204 	addi	r18,r18,8
20021fbc:	d9013517 	ldw	r4,1236(sp)
20021fc0:	d8811fc4 	addi	r2,sp,1151
20021fc4:	90800015 	stw	r2,0(r18)
20021fc8:	91000115 	stw	r4,4(r18)
20021fcc:	4111883a 	add	r8,r8,r4
20021fd0:	18c00044 	addi	r3,r3,1
20021fd4:	da011d15 	stw	r8,1140(sp)
20021fd8:	d8c11c15 	stw	r3,1136(sp)
20021fdc:	008001c4 	movi	r2,7
20021fe0:	10ff2316 	blt	r2,r3,20021c70 <__alt_data_end+0xfffe2870>
20021fe4:	92400204 	addi	r9,r18,8
20021fe8:	003ecf06 	br	20021b28 <__alt_data_end+0xfffe2728>
20021fec:	d9412917 	ldw	r5,1188(sp)
20021ff0:	8809883a 	mov	r4,r17
20021ff4:	d9811b04 	addi	r6,sp,1132
20021ff8:	0020f540 	call	20020f54 <__sprint_r>
20021ffc:	103d751e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022000:	da011d17 	ldw	r8,1140(sp)
20022004:	d8c11c17 	ldw	r3,1136(sp)
20022008:	da400404 	addi	r9,sp,16
2002200c:	003eba06 	br	20021af8 <__alt_data_end+0xfffe26f8>
20022010:	d9412917 	ldw	r5,1188(sp)
20022014:	8809883a 	mov	r4,r17
20022018:	d9811b04 	addi	r6,sp,1132
2002201c:	0020f540 	call	20020f54 <__sprint_r>
20022020:	103d6c1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022024:	da011d17 	ldw	r8,1140(sp)
20022028:	d8c11c17 	ldw	r3,1136(sp)
2002202c:	da400404 	addi	r9,sp,16
20022030:	003e7306 	br	20021a00 <__alt_data_end+0xfffe2600>
20022034:	d9412917 	ldw	r5,1188(sp)
20022038:	8809883a 	mov	r4,r17
2002203c:	d9811b04 	addi	r6,sp,1132
20022040:	0020f540 	call	20020f54 <__sprint_r>
20022044:	103d631e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022048:	da011d17 	ldw	r8,1140(sp)
2002204c:	d8c11c17 	ldw	r3,1136(sp)
20022050:	da400404 	addi	r9,sp,16
20022054:	003e7706 	br	20021a34 <__alt_data_end+0xfffe2634>
20022058:	d8012b15 	stw	zero,1196(sp)
2002205c:	dcc10e04 	addi	r19,sp,1080
20022060:	003cae06 	br	2002131c <__alt_data_end+0xfffe1f1c>
20022064:	d9413617 	ldw	r5,1240(sp)
20022068:	d8810dc4 	addi	r2,sp,1079
2002206c:	b8c003cc 	andi	r3,r23,15
20022070:	b008973a 	slli	r4,r22,28
20022074:	28c7883a 	add	r3,r5,r3
20022078:	b82ed13a 	srli	r23,r23,4
2002207c:	18c00003 	ldbu	r3,0(r3)
20022080:	b02cd13a 	srli	r22,r22,4
20022084:	25eeb03a 	or	r23,r4,r23
20022088:	10c00005 	stb	r3,0(r2)
2002208c:	bd86b03a 	or	r3,r23,r22
20022090:	1027883a 	mov	r19,r2
20022094:	10bfffc4 	addi	r2,r2,-1
20022098:	183ff41e 	bne	r3,zero,2002206c <__alt_data_end+0xfffe2c6c>
2002209c:	003f1706 	br	20021cfc <__alt_data_end+0xfffe28fc>
200220a0:	b0025826 	beq	r22,zero,20022a04 <___vfprintf_internal_r+0x1a7c>
200220a4:	b807883a 	mov	r3,r23
200220a8:	d8810dc4 	addi	r2,sp,1079
200220ac:	882f883a 	mov	r23,r17
200220b0:	04c00244 	movi	r19,9
200220b4:	8023883a 	mov	r17,r16
200220b8:	da412815 	stw	r9,1184(sp)
200220bc:	1821883a 	mov	r16,r3
200220c0:	8009883a 	mov	r4,r16
200220c4:	b00b883a 	mov	r5,r22
200220c8:	01800284 	movi	r6,10
200220cc:	000f883a 	mov	r7,zero
200220d0:	1029883a 	mov	r20,r2
200220d4:	002897c0 	call	2002897c <__umoddi3>
200220d8:	10800c04 	addi	r2,r2,48
200220dc:	8009883a 	mov	r4,r16
200220e0:	b00b883a 	mov	r5,r22
200220e4:	a0800005 	stb	r2,0(r20)
200220e8:	01800284 	movi	r6,10
200220ec:	000f883a 	mov	r7,zero
200220f0:	00283b40 	call	200283b4 <__udivdi3>
200220f4:	1021883a 	mov	r16,r2
200220f8:	182d883a 	mov	r22,r3
200220fc:	a0bfffc4 	addi	r2,r20,-1
20022100:	183fef1e 	bne	r3,zero,200220c0 <__alt_data_end+0xfffe2cc0>
20022104:	9c3fee36 	bltu	r19,r16,200220c0 <__alt_data_end+0xfffe2cc0>
20022108:	da412817 	ldw	r9,1184(sp)
2002210c:	8005883a 	mov	r2,r16
20022110:	8821883a 	mov	r16,r17
20022114:	b823883a 	mov	r17,r23
20022118:	102f883a 	mov	r23,r2
2002211c:	d8812717 	ldw	r2,1180(sp)
20022120:	a4ffffc4 	addi	r19,r20,-1
20022124:	bdc00c04 	addi	r23,r23,48
20022128:	14c5c83a 	sub	r2,r2,r19
2002212c:	a5ffffc5 	stb	r23,-1(r20)
20022130:	d8812b15 	stw	r2,1196(sp)
20022134:	003c7906 	br	2002131c <__alt_data_end+0xfffe1f1c>
20022138:	00c00044 	movi	r3,1
2002213c:	bd84b03a 	or	r2,r23,r22
20022140:	003c6806 	br	200212e4 <__alt_data_end+0xfffe1ee4>
20022144:	dc812417 	ldw	r18,1168(sp)
20022148:	0480ee0e 	bge	zero,r18,20022504 <___vfprintf_internal_r+0x157c>
2002214c:	d9013217 	ldw	r4,1224(sp)
20022150:	4cc00015 	stw	r19,0(r9)
20022154:	9100c616 	blt	r18,r4,20022470 <___vfprintf_internal_r+0x14e8>
20022158:	49000115 	stw	r4,4(r9)
2002215c:	4111883a 	add	r8,r8,r4
20022160:	18c00044 	addi	r3,r3,1
20022164:	da011d15 	stw	r8,1140(sp)
20022168:	d8c11c15 	stw	r3,1136(sp)
2002216c:	008001c4 	movi	r2,7
20022170:	10c20916 	blt	r2,r3,20022998 <___vfprintf_internal_r+0x1a10>
20022174:	4a400204 	addi	r9,r9,8
20022178:	d8813217 	ldw	r2,1224(sp)
2002217c:	90a5c83a 	sub	r18,r18,r2
20022180:	04beae0e 	bge	zero,r18,20021c3c <__alt_data_end+0xfffe283c>
20022184:	04c00404 	movi	r19,16
20022188:	d8c11c17 	ldw	r3,1136(sp)
2002218c:	050800f4 	movhi	r20,8195
20022190:	a5331c84 	addi	r20,r20,-13198
20022194:	9c81be0e 	bge	r19,r18,20022890 <___vfprintf_internal_r+0x1908>
20022198:	058001c4 	movi	r22,7
2002219c:	ddc12917 	ldw	r23,1188(sp)
200221a0:	00000306 	br	200221b0 <___vfprintf_internal_r+0x1228>
200221a4:	4a400204 	addi	r9,r9,8
200221a8:	94bffc04 	addi	r18,r18,-16
200221ac:	9c81b80e 	bge	r19,r18,20022890 <___vfprintf_internal_r+0x1908>
200221b0:	4d000015 	stw	r20,0(r9)
200221b4:	4cc00115 	stw	r19,4(r9)
200221b8:	42000404 	addi	r8,r8,16
200221bc:	18c00044 	addi	r3,r3,1
200221c0:	da011d15 	stw	r8,1140(sp)
200221c4:	d8c11c15 	stw	r3,1136(sp)
200221c8:	b0fff60e 	bge	r22,r3,200221a4 <__alt_data_end+0xfffe2da4>
200221cc:	8809883a 	mov	r4,r17
200221d0:	b80b883a 	mov	r5,r23
200221d4:	d9811b04 	addi	r6,sp,1132
200221d8:	0020f540 	call	20020f54 <__sprint_r>
200221dc:	103cfd1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200221e0:	da011d17 	ldw	r8,1140(sp)
200221e4:	d8c11c17 	ldw	r3,1136(sp)
200221e8:	da400404 	addi	r9,sp,16
200221ec:	003fee06 	br	200221a8 <__alt_data_end+0xfffe2da8>
200221f0:	d9412917 	ldw	r5,1188(sp)
200221f4:	8809883a 	mov	r4,r17
200221f8:	d9811b04 	addi	r6,sp,1132
200221fc:	0020f540 	call	20020f54 <__sprint_r>
20022200:	103cf41e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022204:	da011d17 	ldw	r8,1140(sp)
20022208:	d8c11c17 	ldw	r3,1136(sp)
2002220c:	da400404 	addi	r9,sp,16
20022210:	003dee06 	br	200219cc <__alt_data_end+0xfffe25cc>
20022214:	00c00084 	movi	r3,2
20022218:	bd84b03a 	or	r2,r23,r22
2002221c:	d8012585 	stb	zero,1174(sp)
20022220:	003c3006 	br	200212e4 <__alt_data_end+0xfffe1ee4>
20022224:	d8813217 	ldw	r2,1224(sp)
20022228:	14ffffc4 	addi	r19,r2,-1
2002222c:	04ff630e 	bge	zero,r19,20021fbc <__alt_data_end+0xfffe2bbc>
20022230:	05800404 	movi	r22,16
20022234:	050800f4 	movhi	r20,8195
20022238:	a5331c84 	addi	r20,r20,-13198
2002223c:	b4c03c0e 	bge	r22,r19,20022330 <___vfprintf_internal_r+0x13a8>
20022240:	05c001c4 	movi	r23,7
20022244:	df012917 	ldw	fp,1188(sp)
20022248:	00000306 	br	20022258 <___vfprintf_internal_r+0x12d0>
2002224c:	94800204 	addi	r18,r18,8
20022250:	9cfffc04 	addi	r19,r19,-16
20022254:	b4c0360e 	bge	r22,r19,20022330 <___vfprintf_internal_r+0x13a8>
20022258:	95000015 	stw	r20,0(r18)
2002225c:	95800115 	stw	r22,4(r18)
20022260:	42000404 	addi	r8,r8,16
20022264:	18c00044 	addi	r3,r3,1
20022268:	da011d15 	stw	r8,1140(sp)
2002226c:	d8c11c15 	stw	r3,1136(sp)
20022270:	b8fff60e 	bge	r23,r3,2002224c <__alt_data_end+0xfffe2e4c>
20022274:	8809883a 	mov	r4,r17
20022278:	e00b883a 	mov	r5,fp
2002227c:	d9811b04 	addi	r6,sp,1132
20022280:	0020f540 	call	20020f54 <__sprint_r>
20022284:	103cd31e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022288:	da011d17 	ldw	r8,1140(sp)
2002228c:	d8c11c17 	ldw	r3,1136(sp)
20022290:	dc800404 	addi	r18,sp,16
20022294:	003fee06 	br	20022250 <__alt_data_end+0xfffe2e50>
20022298:	8088703a 	and	r4,r16,r2
2002229c:	203f1d1e 	bne	r4,zero,20021f14 <__alt_data_end+0xfffe2b14>
200222a0:	48800115 	stw	r2,4(r9)
200222a4:	42000044 	addi	r8,r8,1
200222a8:	18c00044 	addi	r3,r3,1
200222ac:	da011d15 	stw	r8,1140(sp)
200222b0:	d8c11c15 	stw	r3,1136(sp)
200222b4:	008001c4 	movi	r2,7
200222b8:	10c00216 	blt	r2,r3,200222c4 <___vfprintf_internal_r+0x133c>
200222bc:	4c800204 	addi	r18,r9,8
200222c0:	003f3e06 	br	20021fbc <__alt_data_end+0xfffe2bbc>
200222c4:	d9412917 	ldw	r5,1188(sp)
200222c8:	8809883a 	mov	r4,r17
200222cc:	d9811b04 	addi	r6,sp,1132
200222d0:	0020f540 	call	20020f54 <__sprint_r>
200222d4:	103cbf1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200222d8:	dc800404 	addi	r18,sp,16
200222dc:	da011d17 	ldw	r8,1140(sp)
200222e0:	d8c11c17 	ldw	r3,1136(sp)
200222e4:	003f3506 	br	20021fbc <__alt_data_end+0xfffe2bbc>
200222e8:	d9412917 	ldw	r5,1188(sp)
200222ec:	8809883a 	mov	r4,r17
200222f0:	d9811b04 	addi	r6,sp,1132
200222f4:	0020f540 	call	20020f54 <__sprint_r>
200222f8:	103cb61e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200222fc:	da011d17 	ldw	r8,1140(sp)
20022300:	d8c11c17 	ldw	r3,1136(sp)
20022304:	da400404 	addi	r9,sp,16
20022308:	003f0b06 	br	20021f38 <__alt_data_end+0xfffe2b38>
2002230c:	d9412917 	ldw	r5,1188(sp)
20022310:	8809883a 	mov	r4,r17
20022314:	d9811b04 	addi	r6,sp,1132
20022318:	0020f540 	call	20020f54 <__sprint_r>
2002231c:	103cad1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022320:	da011d17 	ldw	r8,1140(sp)
20022324:	d8c11c17 	ldw	r3,1136(sp)
20022328:	dc800404 	addi	r18,sp,16
2002232c:	003f0d06 	br	20021f64 <__alt_data_end+0xfffe2b64>
20022330:	95000015 	stw	r20,0(r18)
20022334:	94c00115 	stw	r19,4(r18)
20022338:	44d1883a 	add	r8,r8,r19
2002233c:	003f1906 	br	20021fa4 <__alt_data_end+0xfffe2ba4>
20022340:	d9412917 	ldw	r5,1188(sp)
20022344:	8809883a 	mov	r4,r17
20022348:	d9811b04 	addi	r6,sp,1132
2002234c:	0020f540 	call	20020f54 <__sprint_r>
20022350:	103ca01e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022354:	da011d17 	ldw	r8,1140(sp)
20022358:	d8c11c17 	ldw	r3,1136(sp)
2002235c:	da400404 	addi	r9,sp,16
20022360:	003db706 	br	20021a40 <__alt_data_end+0xfffe2640>
20022364:	4d000015 	stw	r20,0(r9)
20022368:	4c800115 	stw	r18,4(r9)
2002236c:	4491883a 	add	r8,r8,r18
20022370:	003de706 	br	20021b10 <__alt_data_end+0xfffe2710>
20022374:	8080100c 	andi	r2,r16,64
20022378:	10010226 	beq	r2,zero,20022784 <___vfprintf_internal_r+0x17fc>
2002237c:	d8812d17 	ldw	r2,1204(sp)
20022380:	002d883a 	mov	r22,zero
20022384:	00c00044 	movi	r3,1
20022388:	15c0000b 	ldhu	r23,0(r2)
2002238c:	10800104 	addi	r2,r2,4
20022390:	d8812d15 	stw	r2,1204(sp)
20022394:	d8012585 	stb	zero,1174(sp)
20022398:	b805883a 	mov	r2,r23
2002239c:	003bd106 	br	200212e4 <__alt_data_end+0xfffe1ee4>
200223a0:	d9012d17 	ldw	r4,1204(sp)
200223a4:	25800017 	ldw	r22,0(r4)
200223a8:	25000117 	ldw	r20,4(r4)
200223ac:	21000204 	addi	r4,r4,8
200223b0:	d9012d15 	stw	r4,1204(sp)
200223b4:	dd813315 	stw	r22,1228(sp)
200223b8:	dd013415 	stw	r20,1232(sp)
200223bc:	003d2b06 	br	2002186c <__alt_data_end+0xfffe246c>
200223c0:	8080100c 	andi	r2,r16,64
200223c4:	1000fe26 	beq	r2,zero,200227c0 <___vfprintf_internal_r+0x1838>
200223c8:	d9012d17 	ldw	r4,1204(sp)
200223cc:	002d883a 	mov	r22,zero
200223d0:	0007883a 	mov	r3,zero
200223d4:	25c0000b 	ldhu	r23,0(r4)
200223d8:	21000104 	addi	r4,r4,4
200223dc:	d9012d15 	stw	r4,1204(sp)
200223e0:	b805883a 	mov	r2,r23
200223e4:	d8012585 	stb	zero,1174(sp)
200223e8:	003bbe06 	br	200212e4 <__alt_data_end+0xfffe1ee4>
200223ec:	8080100c 	andi	r2,r16,64
200223f0:	1000ed26 	beq	r2,zero,200227a8 <___vfprintf_internal_r+0x1820>
200223f4:	d9012d17 	ldw	r4,1204(sp)
200223f8:	002d883a 	mov	r22,zero
200223fc:	25c0000b 	ldhu	r23,0(r4)
20022400:	21000104 	addi	r4,r4,4
20022404:	d9012d15 	stw	r4,1204(sp)
20022408:	003cd206 	br	20021754 <__alt_data_end+0xfffe2354>
2002240c:	00c00084 	movi	r3,2
20022410:	d8012585 	stb	zero,1174(sp)
20022414:	003bb306 	br	200212e4 <__alt_data_end+0xfffe1ee4>
20022418:	8080040c 	andi	r2,r16,16
2002241c:	1000f11e 	bne	r2,zero,200227e4 <___vfprintf_internal_r+0x185c>
20022420:	8400100c 	andi	r16,r16,64
20022424:	80015526 	beq	r16,zero,2002297c <___vfprintf_internal_r+0x19f4>
20022428:	da012d17 	ldw	r8,1204(sp)
2002242c:	d8c12c17 	ldw	r3,1200(sp)
20022430:	40800017 	ldw	r2,0(r8)
20022434:	42000104 	addi	r8,r8,4
20022438:	da012d15 	stw	r8,1204(sp)
2002243c:	10c0000d 	sth	r3,0(r2)
20022440:	003b0706 	br	20021060 <__alt_data_end+0xfffe1c60>
20022444:	8080100c 	andi	r2,r16,64
20022448:	1000c726 	beq	r2,zero,20022768 <___vfprintf_internal_r+0x17e0>
2002244c:	da012d17 	ldw	r8,1204(sp)
20022450:	45c0000f 	ldh	r23,0(r8)
20022454:	42000104 	addi	r8,r8,4
20022458:	da012d15 	stw	r8,1204(sp)
2002245c:	b82dd7fa 	srai	r22,r23,31
20022460:	b005883a 	mov	r2,r22
20022464:	003c1006 	br	200214a8 <__alt_data_end+0xfffe20a8>
20022468:	ac800007 	ldb	r18,0(r21)
2002246c:	003b2406 	br	20021100 <__alt_data_end+0xfffe1d00>
20022470:	4c800115 	stw	r18,4(r9)
20022474:	9211883a 	add	r8,r18,r8
20022478:	18c00044 	addi	r3,r3,1
2002247c:	da011d15 	stw	r8,1140(sp)
20022480:	d8c11c15 	stw	r3,1136(sp)
20022484:	008001c4 	movi	r2,7
20022488:	10c15416 	blt	r2,r3,200229dc <___vfprintf_internal_r+0x1a54>
2002248c:	4a400204 	addi	r9,r9,8
20022490:	d8813717 	ldw	r2,1244(sp)
20022494:	9ca7883a 	add	r19,r19,r18
20022498:	48800015 	stw	r2,0(r9)
2002249c:	00800044 	movi	r2,1
200224a0:	48800115 	stw	r2,4(r9)
200224a4:	4091883a 	add	r8,r8,r2
200224a8:	1887883a 	add	r3,r3,r2
200224ac:	da011d15 	stw	r8,1140(sp)
200224b0:	d8c11c15 	stw	r3,1136(sp)
200224b4:	008001c4 	movi	r2,7
200224b8:	10c14016 	blt	r2,r3,200229bc <___vfprintf_internal_r+0x1a34>
200224bc:	4a400204 	addi	r9,r9,8
200224c0:	d9013217 	ldw	r4,1224(sp)
200224c4:	da011d17 	ldw	r8,1140(sp)
200224c8:	d8c11c17 	ldw	r3,1136(sp)
200224cc:	24a5c83a 	sub	r18,r4,r18
200224d0:	4cc00015 	stw	r19,0(r9)
200224d4:	003fa406 	br	20022368 <__alt_data_end+0xfffe2f68>
200224d8:	04c800f4 	movhi	r19,8195
200224dc:	9cf30904 	addi	r19,r19,-13276
200224e0:	003cf406 	br	200218b4 <__alt_data_end+0xfffe24b4>
200224e4:	d9412917 	ldw	r5,1188(sp)
200224e8:	8809883a 	mov	r4,r17
200224ec:	d9811b04 	addi	r6,sp,1132
200224f0:	0020f540 	call	20020f54 <__sprint_r>
200224f4:	103c371e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200224f8:	da011d17 	ldw	r8,1140(sp)
200224fc:	da400404 	addi	r9,sp,16
20022500:	003e1c06 	br	20021d74 <__alt_data_end+0xfffe2974>
20022504:	008800f4 	movhi	r2,8195
20022508:	10b31804 	addi	r2,r2,-13216
2002250c:	48800015 	stw	r2,0(r9)
20022510:	00800044 	movi	r2,1
20022514:	48800115 	stw	r2,4(r9)
20022518:	4091883a 	add	r8,r8,r2
2002251c:	1887883a 	add	r3,r3,r2
20022520:	da011d15 	stw	r8,1140(sp)
20022524:	d8c11c15 	stw	r3,1136(sp)
20022528:	008001c4 	movi	r2,7
2002252c:	10c0c316 	blt	r2,r3,2002283c <___vfprintf_internal_r+0x18b4>
20022530:	4a400204 	addi	r9,r9,8
20022534:	9000041e 	bne	r18,zero,20022548 <___vfprintf_internal_r+0x15c0>
20022538:	d8c13217 	ldw	r3,1224(sp)
2002253c:	1800021e 	bne	r3,zero,20022548 <___vfprintf_internal_r+0x15c0>
20022540:	8080004c 	andi	r2,r16,1
20022544:	103d7826 	beq	r2,zero,20021b28 <__alt_data_end+0xfffe2728>
20022548:	d8c11c17 	ldw	r3,1136(sp)
2002254c:	d9013717 	ldw	r4,1244(sp)
20022550:	00800044 	movi	r2,1
20022554:	48800115 	stw	r2,4(r9)
20022558:	49000015 	stw	r4,0(r9)
2002255c:	4091883a 	add	r8,r8,r2
20022560:	1887883a 	add	r3,r3,r2
20022564:	da011d15 	stw	r8,1140(sp)
20022568:	d8c11c15 	stw	r3,1136(sp)
2002256c:	008001c4 	movi	r2,7
20022570:	10c12e16 	blt	r2,r3,20022a2c <___vfprintf_internal_r+0x1aa4>
20022574:	4a400204 	addi	r9,r9,8
20022578:	04a5c83a 	sub	r18,zero,r18
2002257c:	0480de0e 	bge	zero,r18,200228f8 <___vfprintf_internal_r+0x1970>
20022580:	05800404 	movi	r22,16
20022584:	050800f4 	movhi	r20,8195
20022588:	a5331c84 	addi	r20,r20,-13198
2002258c:	b480e20e 	bge	r22,r18,20022918 <___vfprintf_internal_r+0x1990>
20022590:	05c001c4 	movi	r23,7
20022594:	df012917 	ldw	fp,1188(sp)
20022598:	00000306 	br	200225a8 <___vfprintf_internal_r+0x1620>
2002259c:	4a400204 	addi	r9,r9,8
200225a0:	94bffc04 	addi	r18,r18,-16
200225a4:	b480dc0e 	bge	r22,r18,20022918 <___vfprintf_internal_r+0x1990>
200225a8:	4d000015 	stw	r20,0(r9)
200225ac:	4d800115 	stw	r22,4(r9)
200225b0:	42000404 	addi	r8,r8,16
200225b4:	18c00044 	addi	r3,r3,1
200225b8:	da011d15 	stw	r8,1140(sp)
200225bc:	d8c11c15 	stw	r3,1136(sp)
200225c0:	b8fff60e 	bge	r23,r3,2002259c <__alt_data_end+0xfffe319c>
200225c4:	8809883a 	mov	r4,r17
200225c8:	e00b883a 	mov	r5,fp
200225cc:	d9811b04 	addi	r6,sp,1132
200225d0:	0020f540 	call	20020f54 <__sprint_r>
200225d4:	103bff1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200225d8:	da011d17 	ldw	r8,1140(sp)
200225dc:	d8c11c17 	ldw	r3,1136(sp)
200225e0:	da400404 	addi	r9,sp,16
200225e4:	003fee06 	br	200225a0 <__alt_data_end+0xfffe31a0>
200225e8:	da413c15 	stw	r9,1264(sp)
200225ec:	0027b080 	call	20027b08 <__isnand>
200225f0:	da413c17 	ldw	r9,1264(sp)
200225f4:	1000851e 	bne	r2,zero,2002280c <___vfprintf_internal_r+0x1884>
200225f8:	00bfffc4 	movi	r2,-1
200225fc:	e0817626 	beq	fp,r2,20022bd8 <___vfprintf_internal_r+0x1c50>
20022600:	008019c4 	movi	r2,103
20022604:	90817126 	beq	r18,r2,20022bcc <___vfprintf_internal_r+0x1c44>
20022608:	008011c4 	movi	r2,71
2002260c:	90816f26 	beq	r18,r2,20022bcc <___vfprintf_internal_r+0x1c44>
20022610:	82004014 	ori	r8,r16,256
20022614:	da012a15 	stw	r8,1192(sp)
20022618:	a0017116 	blt	r20,zero,20022be0 <___vfprintf_internal_r+0x1c58>
2002261c:	d8012f05 	stb	zero,1212(sp)
20022620:	00801984 	movi	r2,102
20022624:	90811226 	beq	r18,r2,20022a70 <___vfprintf_internal_r+0x1ae8>
20022628:	00801184 	movi	r2,70
2002262c:	90811026 	beq	r18,r2,20022a70 <___vfprintf_internal_r+0x1ae8>
20022630:	00801944 	movi	r2,101
20022634:	90819b26 	beq	r18,r2,20022ca4 <___vfprintf_internal_r+0x1d1c>
20022638:	00801144 	movi	r2,69
2002263c:	90819926 	beq	r18,r2,20022ca4 <___vfprintf_internal_r+0x1d1c>
20022640:	e02f883a 	mov	r23,fp
20022644:	d8812404 	addi	r2,sp,1168
20022648:	d8800115 	stw	r2,4(sp)
2002264c:	d8812304 	addi	r2,sp,1164
20022650:	d8800215 	stw	r2,8(sp)
20022654:	d8812204 	addi	r2,sp,1160
20022658:	ddc00015 	stw	r23,0(sp)
2002265c:	d8800315 	stw	r2,12(sp)
20022660:	8809883a 	mov	r4,r17
20022664:	b00b883a 	mov	r5,r22
20022668:	a00d883a 	mov	r6,r20
2002266c:	01c00084 	movi	r7,2
20022670:	da413c15 	stw	r9,1264(sp)
20022674:	00231200 	call	20023120 <_dtoa_r>
20022678:	1027883a 	mov	r19,r2
2002267c:	008019c4 	movi	r2,103
20022680:	da413c17 	ldw	r9,1264(sp)
20022684:	90818c1e 	bne	r18,r2,20022cb8 <___vfprintf_internal_r+0x1d30>
20022688:	8080004c 	andi	r2,r16,1
2002268c:	10017926 	beq	r2,zero,20022c74 <___vfprintf_internal_r+0x1cec>
20022690:	00801184 	movi	r2,70
20022694:	9dc7883a 	add	r3,r19,r23
20022698:	90810626 	beq	r18,r2,20022ab4 <___vfprintf_internal_r+0x1b2c>
2002269c:	b009883a 	mov	r4,r22
200226a0:	a00b883a 	mov	r5,r20
200226a4:	000d883a 	mov	r6,zero
200226a8:	000f883a 	mov	r7,zero
200226ac:	d8c13b15 	stw	r3,1260(sp)
200226b0:	da413c15 	stw	r9,1264(sp)
200226b4:	00297a80 	call	200297a8 <__eqdf2>
200226b8:	d8c13b17 	ldw	r3,1260(sp)
200226bc:	da413c17 	ldw	r9,1264(sp)
200226c0:	10000726 	beq	r2,zero,200226e0 <___vfprintf_internal_r+0x1758>
200226c4:	d8812217 	ldw	r2,1160(sp)
200226c8:	10c1962e 	bgeu	r2,r3,20022d24 <___vfprintf_internal_r+0x1d9c>
200226cc:	01000c04 	movi	r4,48
200226d0:	11000005 	stb	r4,0(r2)
200226d4:	10800044 	addi	r2,r2,1
200226d8:	d8812215 	stw	r2,1160(sp)
200226dc:	10fffc1e 	bne	r2,r3,200226d0 <__alt_data_end+0xfffe32d0>
200226e0:	1cc7c83a 	sub	r3,r3,r19
200226e4:	d8c13215 	stw	r3,1224(sp)
200226e8:	008019c4 	movi	r2,103
200226ec:	90810626 	beq	r18,r2,20022b08 <___vfprintf_internal_r+0x1b80>
200226f0:	008011c4 	movi	r2,71
200226f4:	90810426 	beq	r18,r2,20022b08 <___vfprintf_internal_r+0x1b80>
200226f8:	00801984 	movi	r2,102
200226fc:	90819a1e 	bne	r18,r2,20022d68 <___vfprintf_internal_r+0x1de0>
20022700:	d8812417 	ldw	r2,1168(sp)
20022704:	d8812b15 	stw	r2,1196(sp)
20022708:	0081880e 	bge	zero,r2,20022d2c <___vfprintf_internal_r+0x1da4>
2002270c:	e000021e 	bne	fp,zero,20022718 <___vfprintf_internal_r+0x1790>
20022710:	8400004c 	andi	r16,r16,1
20022714:	80000426 	beq	r16,zero,20022728 <___vfprintf_internal_r+0x17a0>
20022718:	d8812b17 	ldw	r2,1196(sp)
2002271c:	e2000044 	addi	r8,fp,1
20022720:	1205883a 	add	r2,r2,r8
20022724:	d8812b15 	stw	r2,1196(sp)
20022728:	d8812815 	stw	r2,1184(sp)
2002272c:	10011716 	blt	r2,zero,20022b8c <___vfprintf_internal_r+0x1c04>
20022730:	ddc12f07 	ldb	r23,1212(sp)
20022734:	b800ca26 	beq	r23,zero,20022a60 <___vfprintf_internal_r+0x1ad8>
20022738:	00800b44 	movi	r2,45
2002273c:	d8812585 	stb	r2,1174(sp)
20022740:	dc012a17 	ldw	r16,1192(sp)
20022744:	d8013115 	stw	zero,1220(sp)
20022748:	003afe06 	br	20021344 <__alt_data_end+0xfffe1f44>
2002274c:	d8812b17 	ldw	r2,1196(sp)
20022750:	d8812815 	stw	r2,1184(sp)
20022754:	10005e16 	blt	r2,zero,200228d0 <___vfprintf_internal_r+0x1948>
20022758:	d8812583 	ldbu	r2,1174(sp)
2002275c:	ddc12d15 	stw	r23,1204(sp)
20022760:	d8013115 	stw	zero,1220(sp)
20022764:	003af306 	br	20021334 <__alt_data_end+0xfffe1f34>
20022768:	d8812d17 	ldw	r2,1204(sp)
2002276c:	15c00017 	ldw	r23,0(r2)
20022770:	10800104 	addi	r2,r2,4
20022774:	d8812d15 	stw	r2,1204(sp)
20022778:	b82dd7fa 	srai	r22,r23,31
2002277c:	b005883a 	mov	r2,r22
20022780:	003b4906 	br	200214a8 <__alt_data_end+0xfffe20a8>
20022784:	d8c12d17 	ldw	r3,1204(sp)
20022788:	002d883a 	mov	r22,zero
2002278c:	1dc00017 	ldw	r23,0(r3)
20022790:	18c00104 	addi	r3,r3,4
20022794:	d8c12d15 	stw	r3,1204(sp)
20022798:	b805883a 	mov	r2,r23
2002279c:	00c00044 	movi	r3,1
200227a0:	d8012585 	stb	zero,1174(sp)
200227a4:	003acf06 	br	200212e4 <__alt_data_end+0xfffe1ee4>
200227a8:	da012d17 	ldw	r8,1204(sp)
200227ac:	002d883a 	mov	r22,zero
200227b0:	45c00017 	ldw	r23,0(r8)
200227b4:	42000104 	addi	r8,r8,4
200227b8:	da012d15 	stw	r8,1204(sp)
200227bc:	003be506 	br	20021754 <__alt_data_end+0xfffe2354>
200227c0:	da012d17 	ldw	r8,1204(sp)
200227c4:	002d883a 	mov	r22,zero
200227c8:	0007883a 	mov	r3,zero
200227cc:	45c00017 	ldw	r23,0(r8)
200227d0:	42000104 	addi	r8,r8,4
200227d4:	da012d15 	stw	r8,1204(sp)
200227d8:	b805883a 	mov	r2,r23
200227dc:	d8012585 	stb	zero,1174(sp)
200227e0:	003ac006 	br	200212e4 <__alt_data_end+0xfffe1ee4>
200227e4:	d8c12d17 	ldw	r3,1204(sp)
200227e8:	d9012c17 	ldw	r4,1200(sp)
200227ec:	18800017 	ldw	r2,0(r3)
200227f0:	18c00104 	addi	r3,r3,4
200227f4:	d8c12d15 	stw	r3,1204(sp)
200227f8:	11000015 	stw	r4,0(r2)
200227fc:	003a1806 	br	20021060 <__alt_data_end+0xfffe1c60>
20022800:	073fffc4 	movi	fp,-1
20022804:	202b883a 	mov	r21,r4
20022808:	003a3e06 	br	20021104 <__alt_data_end+0xfffe1d04>
2002280c:	008011c4 	movi	r2,71
20022810:	14809016 	blt	r2,r18,20022a54 <___vfprintf_internal_r+0x1acc>
20022814:	04c800f4 	movhi	r19,8195
20022818:	9cf30a04 	addi	r19,r19,-13272
2002281c:	00c000c4 	movi	r3,3
20022820:	00bfdfc4 	movi	r2,-129
20022824:	80a0703a 	and	r16,r16,r2
20022828:	d8c12815 	stw	r3,1184(sp)
2002282c:	d8812583 	ldbu	r2,1174(sp)
20022830:	d8c12b15 	stw	r3,1196(sp)
20022834:	d8013115 	stw	zero,1220(sp)
20022838:	003abe06 	br	20021334 <__alt_data_end+0xfffe1f34>
2002283c:	d9412917 	ldw	r5,1188(sp)
20022840:	8809883a 	mov	r4,r17
20022844:	d9811b04 	addi	r6,sp,1132
20022848:	0020f540 	call	20020f54 <__sprint_r>
2002284c:	103b611e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022850:	dc812417 	ldw	r18,1168(sp)
20022854:	da011d17 	ldw	r8,1140(sp)
20022858:	da400404 	addi	r9,sp,16
2002285c:	003f3506 	br	20022534 <__alt_data_end+0xfffe3134>
20022860:	ad400044 	addi	r21,r21,1
20022864:	84000814 	ori	r16,r16,32
20022868:	14800047 	ldb	r18,1(r2)
2002286c:	003a2406 	br	20021100 <__alt_data_end+0xfffe1d00>
20022870:	d9412917 	ldw	r5,1188(sp)
20022874:	8809883a 	mov	r4,r17
20022878:	d9811b04 	addi	r6,sp,1132
2002287c:	0020f540 	call	20020f54 <__sprint_r>
20022880:	103b541e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022884:	da011d17 	ldw	r8,1140(sp)
20022888:	da400404 	addi	r9,sp,16
2002288c:	003d4a06 	br	20021db8 <__alt_data_end+0xfffe29b8>
20022890:	4d000015 	stw	r20,0(r9)
20022894:	4c800115 	stw	r18,4(r9)
20022898:	4491883a 	add	r8,r8,r18
2002289c:	18c00044 	addi	r3,r3,1
200228a0:	da011d15 	stw	r8,1140(sp)
200228a4:	d8c11c15 	stw	r3,1136(sp)
200228a8:	008001c4 	movi	r2,7
200228ac:	10fcdc16 	blt	r2,r3,20021c20 <__alt_data_end+0xfffe2820>
200228b0:	4a400204 	addi	r9,r9,8
200228b4:	003ce106 	br	20021c3c <__alt_data_end+0xfffe283c>
200228b8:	da413c15 	stw	r9,1264(sp)
200228bc:	0020ec80 	call	20020ec8 <strlen>
200228c0:	d8812b15 	stw	r2,1196(sp)
200228c4:	d8812815 	stw	r2,1184(sp)
200228c8:	da413c17 	ldw	r9,1264(sp)
200228cc:	103fa20e 	bge	r2,zero,20022758 <__alt_data_end+0xfffe3358>
200228d0:	d8012815 	stw	zero,1184(sp)
200228d4:	003fa006 	br	20022758 <__alt_data_end+0xfffe3358>
200228d8:	d9412917 	ldw	r5,1188(sp)
200228dc:	8809883a 	mov	r4,r17
200228e0:	d9811b04 	addi	r6,sp,1132
200228e4:	0020f540 	call	20020f54 <__sprint_r>
200228e8:	103b3a1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200228ec:	da011d17 	ldw	r8,1140(sp)
200228f0:	d8c11c17 	ldw	r3,1136(sp)
200228f4:	da400404 	addi	r9,sp,16
200228f8:	d8813217 	ldw	r2,1224(sp)
200228fc:	4cc00015 	stw	r19,0(r9)
20022900:	48800115 	stw	r2,4(r9)
20022904:	4091883a 	add	r8,r8,r2
20022908:	003c8106 	br	20021b10 <__alt_data_end+0xfffe2710>
2002290c:	00800b44 	movi	r2,45
20022910:	d8812585 	stb	r2,1174(sp)
20022914:	003be306 	br	200218a4 <__alt_data_end+0xfffe24a4>
20022918:	4d000015 	stw	r20,0(r9)
2002291c:	4c800115 	stw	r18,4(r9)
20022920:	4491883a 	add	r8,r8,r18
20022924:	18c00044 	addi	r3,r3,1
20022928:	da011d15 	stw	r8,1140(sp)
2002292c:	d8c11c15 	stw	r3,1136(sp)
20022930:	008001c4 	movi	r2,7
20022934:	10ffe816 	blt	r2,r3,200228d8 <__alt_data_end+0xfffe34d8>
20022938:	4a400204 	addi	r9,r9,8
2002293c:	003fee06 	br	200228f8 <__alt_data_end+0xfffe34f8>
20022940:	df012b15 	stw	fp,1196(sp)
20022944:	00800184 	movi	r2,6
20022948:	1700072e 	bgeu	r2,fp,20022968 <___vfprintf_internal_r+0x19e0>
2002294c:	d8812b15 	stw	r2,1196(sp)
20022950:	d8812815 	stw	r2,1184(sp)
20022954:	ddc12d15 	stw	r23,1204(sp)
20022958:	04c800f4 	movhi	r19,8195
2002295c:	9cf31604 	addi	r19,r19,-13224
20022960:	d8013115 	stw	zero,1220(sp)
20022964:	003a7a06 	br	20021350 <__alt_data_end+0xfffe1f50>
20022968:	d8812b17 	ldw	r2,1196(sp)
2002296c:	d8812815 	stw	r2,1184(sp)
20022970:	103ff80e 	bge	r2,zero,20022954 <__alt_data_end+0xfffe3554>
20022974:	d8012815 	stw	zero,1184(sp)
20022978:	003ff606 	br	20022954 <__alt_data_end+0xfffe3554>
2002297c:	d9012d17 	ldw	r4,1204(sp)
20022980:	da012c17 	ldw	r8,1200(sp)
20022984:	20800017 	ldw	r2,0(r4)
20022988:	21000104 	addi	r4,r4,4
2002298c:	d9012d15 	stw	r4,1204(sp)
20022990:	12000015 	stw	r8,0(r2)
20022994:	0039b206 	br	20021060 <__alt_data_end+0xfffe1c60>
20022998:	d9412917 	ldw	r5,1188(sp)
2002299c:	8809883a 	mov	r4,r17
200229a0:	d9811b04 	addi	r6,sp,1132
200229a4:	0020f540 	call	20020f54 <__sprint_r>
200229a8:	103b0a1e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200229ac:	dc812417 	ldw	r18,1168(sp)
200229b0:	da011d17 	ldw	r8,1140(sp)
200229b4:	da400404 	addi	r9,sp,16
200229b8:	003def06 	br	20022178 <__alt_data_end+0xfffe2d78>
200229bc:	d9412917 	ldw	r5,1188(sp)
200229c0:	8809883a 	mov	r4,r17
200229c4:	d9811b04 	addi	r6,sp,1132
200229c8:	0020f540 	call	20020f54 <__sprint_r>
200229cc:	103b011e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200229d0:	dc812417 	ldw	r18,1168(sp)
200229d4:	da400404 	addi	r9,sp,16
200229d8:	003eb906 	br	200224c0 <__alt_data_end+0xfffe30c0>
200229dc:	d9412917 	ldw	r5,1188(sp)
200229e0:	8809883a 	mov	r4,r17
200229e4:	d9811b04 	addi	r6,sp,1132
200229e8:	0020f540 	call	20020f54 <__sprint_r>
200229ec:	103af91e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
200229f0:	dc812417 	ldw	r18,1168(sp)
200229f4:	da011d17 	ldw	r8,1140(sp)
200229f8:	d8c11c17 	ldw	r3,1136(sp)
200229fc:	da400404 	addi	r9,sp,16
20022a00:	003ea306 	br	20022490 <__alt_data_end+0xfffe3090>
20022a04:	00800244 	movi	r2,9
20022a08:	15fda636 	bltu	r2,r23,200220a4 <__alt_data_end+0xfffe2ca4>
20022a0c:	dd010e04 	addi	r20,sp,1080
20022a10:	003dc206 	br	2002211c <__alt_data_end+0xfffe2d1c>
20022a14:	df012815 	stw	fp,1184(sp)
20022a18:	d8812583 	ldbu	r2,1174(sp)
20022a1c:	df012b15 	stw	fp,1196(sp)
20022a20:	ddc12d15 	stw	r23,1204(sp)
20022a24:	d8013115 	stw	zero,1220(sp)
20022a28:	003a4206 	br	20021334 <__alt_data_end+0xfffe1f34>
20022a2c:	d9412917 	ldw	r5,1188(sp)
20022a30:	8809883a 	mov	r4,r17
20022a34:	d9811b04 	addi	r6,sp,1132
20022a38:	0020f540 	call	20020f54 <__sprint_r>
20022a3c:	103ae51e 	bne	r2,zero,200215d4 <__alt_data_end+0xfffe21d4>
20022a40:	dc812417 	ldw	r18,1168(sp)
20022a44:	da011d17 	ldw	r8,1140(sp)
20022a48:	d8c11c17 	ldw	r3,1136(sp)
20022a4c:	da400404 	addi	r9,sp,16
20022a50:	003ec906 	br	20022578 <__alt_data_end+0xfffe3178>
20022a54:	04c800f4 	movhi	r19,8195
20022a58:	9cf30b04 	addi	r19,r19,-13268
20022a5c:	003f6f06 	br	2002281c <__alt_data_end+0xfffe341c>
20022a60:	d8812583 	ldbu	r2,1174(sp)
20022a64:	dc012a17 	ldw	r16,1192(sp)
20022a68:	d8013115 	stw	zero,1220(sp)
20022a6c:	003a3106 	br	20021334 <__alt_data_end+0xfffe1f34>
20022a70:	d8812404 	addi	r2,sp,1168
20022a74:	d8800115 	stw	r2,4(sp)
20022a78:	d8812304 	addi	r2,sp,1164
20022a7c:	d8800215 	stw	r2,8(sp)
20022a80:	d8812204 	addi	r2,sp,1160
20022a84:	df000015 	stw	fp,0(sp)
20022a88:	d8800315 	stw	r2,12(sp)
20022a8c:	8809883a 	mov	r4,r17
20022a90:	b00b883a 	mov	r5,r22
20022a94:	a00d883a 	mov	r6,r20
20022a98:	01c000c4 	movi	r7,3
20022a9c:	da413c15 	stw	r9,1264(sp)
20022aa0:	00231200 	call	20023120 <_dtoa_r>
20022aa4:	da413c17 	ldw	r9,1264(sp)
20022aa8:	1027883a 	mov	r19,r2
20022aac:	1707883a 	add	r3,r2,fp
20022ab0:	e02f883a 	mov	r23,fp
20022ab4:	99000007 	ldb	r4,0(r19)
20022ab8:	00800c04 	movi	r2,48
20022abc:	20800326 	beq	r4,r2,20022acc <___vfprintf_internal_r+0x1b44>
20022ac0:	da812417 	ldw	r10,1168(sp)
20022ac4:	1a87883a 	add	r3,r3,r10
20022ac8:	003ef406 	br	2002269c <__alt_data_end+0xfffe329c>
20022acc:	b009883a 	mov	r4,r22
20022ad0:	a00b883a 	mov	r5,r20
20022ad4:	000d883a 	mov	r6,zero
20022ad8:	000f883a 	mov	r7,zero
20022adc:	d8c13b15 	stw	r3,1260(sp)
20022ae0:	da413c15 	stw	r9,1264(sp)
20022ae4:	00298040 	call	20029804 <__nedf2>
20022ae8:	d8c13b17 	ldw	r3,1260(sp)
20022aec:	da413c17 	ldw	r9,1264(sp)
20022af0:	103ff326 	beq	r2,zero,20022ac0 <__alt_data_end+0xfffe36c0>
20022af4:	00800044 	movi	r2,1
20022af8:	15d5c83a 	sub	r10,r2,r23
20022afc:	da812415 	stw	r10,1168(sp)
20022b00:	1a87883a 	add	r3,r3,r10
20022b04:	003ee506 	br	2002269c <__alt_data_end+0xfffe329c>
20022b08:	d8812417 	ldw	r2,1168(sp)
20022b0c:	d8812b15 	stw	r2,1196(sp)
20022b10:	1029883a 	mov	r20,r2
20022b14:	00bfff44 	movi	r2,-3
20022b18:	a0800116 	blt	r20,r2,20022b20 <___vfprintf_internal_r+0x1b98>
20022b1c:	e5001d0e 	bge	fp,r20,20022b94 <___vfprintf_internal_r+0x1c0c>
20022b20:	94bfff84 	addi	r18,r18,-2
20022b24:	a53fffc4 	addi	r20,r20,-1
20022b28:	dd012415 	stw	r20,1168(sp)
20022b2c:	dc811fc5 	stb	r18,1151(sp)
20022b30:	a0007816 	blt	r20,zero,20022d14 <___vfprintf_internal_r+0x1d8c>
20022b34:	00800ac4 	movi	r2,43
20022b38:	d8812005 	stb	r2,1152(sp)
20022b3c:	00800244 	movi	r2,9
20022b40:	15002b16 	blt	r2,r20,20022bf0 <___vfprintf_internal_r+0x1c68>
20022b44:	00800c04 	movi	r2,48
20022b48:	a5000c04 	addi	r20,r20,48
20022b4c:	d8812045 	stb	r2,1153(sp)
20022b50:	dd012085 	stb	r20,1154(sp)
20022b54:	d8c120c4 	addi	r3,sp,1155
20022b58:	d8811fc4 	addi	r2,sp,1151
20022b5c:	da013217 	ldw	r8,1224(sp)
20022b60:	1885c83a 	sub	r2,r3,r2
20022b64:	d8813515 	stw	r2,1236(sp)
20022b68:	4085883a 	add	r2,r8,r2
20022b6c:	d8812b15 	stw	r2,1196(sp)
20022b70:	00800044 	movi	r2,1
20022b74:	1200610e 	bge	r2,r8,20022cfc <___vfprintf_internal_r+0x1d74>
20022b78:	d8812b17 	ldw	r2,1196(sp)
20022b7c:	10800044 	addi	r2,r2,1
20022b80:	d8812b15 	stw	r2,1196(sp)
20022b84:	d8812815 	stw	r2,1184(sp)
20022b88:	103ee90e 	bge	r2,zero,20022730 <__alt_data_end+0xfffe3330>
20022b8c:	d8012815 	stw	zero,1184(sp)
20022b90:	003ee706 	br	20022730 <__alt_data_end+0xfffe3330>
20022b94:	d8812b17 	ldw	r2,1196(sp)
20022b98:	da013217 	ldw	r8,1224(sp)
20022b9c:	12003716 	blt	r2,r8,20022c7c <___vfprintf_internal_r+0x1cf4>
20022ba0:	8400004c 	andi	r16,r16,1
20022ba4:	80000326 	beq	r16,zero,20022bb4 <___vfprintf_internal_r+0x1c2c>
20022ba8:	d8812b17 	ldw	r2,1196(sp)
20022bac:	10800044 	addi	r2,r2,1
20022bb0:	d8812b15 	stw	r2,1196(sp)
20022bb4:	d8812815 	stw	r2,1184(sp)
20022bb8:	10003716 	blt	r2,zero,20022c98 <___vfprintf_internal_r+0x1d10>
20022bbc:	048019c4 	movi	r18,103
20022bc0:	003edb06 	br	20022730 <__alt_data_end+0xfffe3330>
20022bc4:	d8012815 	stw	zero,1184(sp)
20022bc8:	003b6906 	br	20021970 <__alt_data_end+0xfffe2570>
20022bcc:	e03e901e 	bne	fp,zero,20022610 <__alt_data_end+0xfffe3210>
20022bd0:	07000044 	movi	fp,1
20022bd4:	003e8e06 	br	20022610 <__alt_data_end+0xfffe3210>
20022bd8:	07000184 	movi	fp,6
20022bdc:	003e8c06 	br	20022610 <__alt_data_end+0xfffe3210>
20022be0:	00c00b44 	movi	r3,45
20022be4:	a520003c 	xorhi	r20,r20,32768
20022be8:	d8c12f05 	stb	r3,1212(sp)
20022bec:	003e8c06 	br	20022620 <__alt_data_end+0xfffe3220>
20022bf0:	d8c11f84 	addi	r3,sp,1150
20022bf4:	102f883a 	mov	r23,r2
20022bf8:	4839883a 	mov	fp,r9
20022bfc:	a009883a 	mov	r4,r20
20022c00:	01400284 	movi	r5,10
20022c04:	182d883a 	mov	r22,r3
20022c08:	0020bc40 	call	20020bc4 <__modsi3>
20022c0c:	10800c04 	addi	r2,r2,48
20022c10:	a009883a 	mov	r4,r20
20022c14:	b0800005 	stb	r2,0(r22)
20022c18:	01400284 	movi	r5,10
20022c1c:	0020b740 	call	20020b74 <__divsi3>
20022c20:	1029883a 	mov	r20,r2
20022c24:	b0ffffc4 	addi	r3,r22,-1
20022c28:	b8bff416 	blt	r23,r2,20022bfc <__alt_data_end+0xfffe37fc>
20022c2c:	11400c04 	addi	r5,r2,48
20022c30:	b17fffc5 	stb	r5,-1(r22)
20022c34:	d8811fc4 	addi	r2,sp,1151
20022c38:	e013883a 	mov	r9,fp
20022c3c:	1880482e 	bgeu	r3,r2,20022d60 <___vfprintf_internal_r+0x1dd8>
20022c40:	b007883a 	mov	r3,r22
20022c44:	d9012044 	addi	r4,sp,1153
20022c48:	00000206 	br	20022c54 <___vfprintf_internal_r+0x1ccc>
20022c4c:	19400003 	ldbu	r5,0(r3)
20022c50:	18c00044 	addi	r3,r3,1
20022c54:	21400005 	stb	r5,0(r4)
20022c58:	21000044 	addi	r4,r4,1
20022c5c:	10fffb1e 	bne	r2,r3,20022c4c <__alt_data_end+0xfffe384c>
20022c60:	d8c12004 	addi	r3,sp,1152
20022c64:	1d87c83a 	sub	r3,r3,r22
20022c68:	d9012044 	addi	r4,sp,1153
20022c6c:	20c7883a 	add	r3,r4,r3
20022c70:	003fba06 	br	20022b5c <__alt_data_end+0xfffe375c>
20022c74:	d8c12217 	ldw	r3,1160(sp)
20022c78:	003e9906 	br	200226e0 <__alt_data_end+0xfffe32e0>
20022c7c:	05000b0e 	bge	zero,r20,20022cac <___vfprintf_internal_r+0x1d24>
20022c80:	05000044 	movi	r20,1
20022c84:	da013217 	ldw	r8,1224(sp)
20022c88:	a229883a 	add	r20,r20,r8
20022c8c:	dd012b15 	stw	r20,1196(sp)
20022c90:	dd012815 	stw	r20,1184(sp)
20022c94:	a03fc90e 	bge	r20,zero,20022bbc <__alt_data_end+0xfffe37bc>
20022c98:	d8012815 	stw	zero,1184(sp)
20022c9c:	048019c4 	movi	r18,103
20022ca0:	003ea306 	br	20022730 <__alt_data_end+0xfffe3330>
20022ca4:	e5c00044 	addi	r23,fp,1
20022ca8:	003e6606 	br	20022644 <__alt_data_end+0xfffe3244>
20022cac:	00800084 	movi	r2,2
20022cb0:	1529c83a 	sub	r20,r2,r20
20022cb4:	003ff306 	br	20022c84 <__alt_data_end+0xfffe3884>
20022cb8:	008011c4 	movi	r2,71
20022cbc:	90be7226 	beq	r18,r2,20022688 <__alt_data_end+0xfffe3288>
20022cc0:	003e7306 	br	20022690 <__alt_data_end+0xfffe3290>
20022cc4:	d8812d17 	ldw	r2,1204(sp)
20022cc8:	ac800043 	ldbu	r18,1(r21)
20022ccc:	202b883a 	mov	r21,r4
20022cd0:	17000017 	ldw	fp,0(r2)
20022cd4:	10800104 	addi	r2,r2,4
20022cd8:	d8812d15 	stw	r2,1204(sp)
20022cdc:	e0001b16 	blt	fp,zero,20022d4c <___vfprintf_internal_r+0x1dc4>
20022ce0:	94803fcc 	andi	r18,r18,255
20022ce4:	9480201c 	xori	r18,r18,128
20022ce8:	94bfe004 	addi	r18,r18,-128
20022cec:	00390406 	br	20021100 <__alt_data_end+0xfffe1d00>
20022cf0:	00bfffc4 	movi	r2,-1
20022cf4:	d8812c15 	stw	r2,1200(sp)
20022cf8:	003a2506 	br	20021590 <__alt_data_end+0xfffe2190>
20022cfc:	80a0703a 	and	r16,r16,r2
20022d00:	803f9d1e 	bne	r16,zero,20022b78 <__alt_data_end+0xfffe3778>
20022d04:	d8812b17 	ldw	r2,1196(sp)
20022d08:	d8812815 	stw	r2,1184(sp)
20022d0c:	103e880e 	bge	r2,zero,20022730 <__alt_data_end+0xfffe3330>
20022d10:	003f9e06 	br	20022b8c <__alt_data_end+0xfffe378c>
20022d14:	00800b44 	movi	r2,45
20022d18:	0529c83a 	sub	r20,zero,r20
20022d1c:	d8812005 	stb	r2,1152(sp)
20022d20:	003f8606 	br	20022b3c <__alt_data_end+0xfffe373c>
20022d24:	1007883a 	mov	r3,r2
20022d28:	003e6d06 	br	200226e0 <__alt_data_end+0xfffe32e0>
20022d2c:	e000021e 	bne	fp,zero,20022d38 <___vfprintf_internal_r+0x1db0>
20022d30:	8400004c 	andi	r16,r16,1
20022d34:	80000e26 	beq	r16,zero,20022d70 <___vfprintf_internal_r+0x1de8>
20022d38:	e7000084 	addi	fp,fp,2
20022d3c:	df012b15 	stw	fp,1196(sp)
20022d40:	df012815 	stw	fp,1184(sp)
20022d44:	e03e7a0e 	bge	fp,zero,20022730 <__alt_data_end+0xfffe3330>
20022d48:	003f9006 	br	20022b8c <__alt_data_end+0xfffe378c>
20022d4c:	94803fcc 	andi	r18,r18,255
20022d50:	9480201c 	xori	r18,r18,128
20022d54:	073fffc4 	movi	fp,-1
20022d58:	94bfe004 	addi	r18,r18,-128
20022d5c:	0038e806 	br	20021100 <__alt_data_end+0xfffe1d00>
20022d60:	d8c12044 	addi	r3,sp,1153
20022d64:	003f7d06 	br	20022b5c <__alt_data_end+0xfffe375c>
20022d68:	dd012417 	ldw	r20,1168(sp)
20022d6c:	003f6d06 	br	20022b24 <__alt_data_end+0xfffe3724>
20022d70:	00c00044 	movi	r3,1
20022d74:	d8c12815 	stw	r3,1184(sp)
20022d78:	d8c12b15 	stw	r3,1196(sp)
20022d7c:	003e6c06 	br	20022730 <__alt_data_end+0xfffe3330>

20022d80 <__vfprintf_internal>:
20022d80:	008800f4 	movhi	r2,8195
20022d84:	10ba5704 	addi	r2,r2,-5796
20022d88:	2007883a 	mov	r3,r4
20022d8c:	11000017 	ldw	r4,0(r2)
20022d90:	2805883a 	mov	r2,r5
20022d94:	300f883a 	mov	r7,r6
20022d98:	180b883a 	mov	r5,r3
20022d9c:	100d883a 	mov	r6,r2
20022da0:	0020f881 	jmpi	20020f88 <___vfprintf_internal_r>

20022da4 <__swsetup_r>:
20022da4:	008800f4 	movhi	r2,8195
20022da8:	10ba5704 	addi	r2,r2,-5796
20022dac:	10800017 	ldw	r2,0(r2)
20022db0:	defffd04 	addi	sp,sp,-12
20022db4:	dc400115 	stw	r17,4(sp)
20022db8:	dc000015 	stw	r16,0(sp)
20022dbc:	dfc00215 	stw	ra,8(sp)
20022dc0:	2023883a 	mov	r17,r4
20022dc4:	2821883a 	mov	r16,r5
20022dc8:	10000226 	beq	r2,zero,20022dd4 <__swsetup_r+0x30>
20022dcc:	10c00e17 	ldw	r3,56(r2)
20022dd0:	18003d26 	beq	r3,zero,20022ec8 <__swsetup_r+0x124>
20022dd4:	8080030b 	ldhu	r2,12(r16)
20022dd8:	10c0020c 	andi	r3,r2,8
20022ddc:	18ffffcc 	andi	r3,r3,65535
20022de0:	18e0001c 	xori	r3,r3,32768
20022de4:	18e00004 	addi	r3,r3,-32768
20022de8:	18001226 	beq	r3,zero,20022e34 <__swsetup_r+0x90>
20022dec:	80c00417 	ldw	r3,16(r16)
20022df0:	18001f26 	beq	r3,zero,20022e70 <__swsetup_r+0xcc>
20022df4:	1100004c 	andi	r4,r2,1
20022df8:	2000261e 	bne	r4,zero,20022e94 <__swsetup_r+0xf0>
20022dfc:	1080008c 	andi	r2,r2,2
20022e00:	10bfffcc 	andi	r2,r2,65535
20022e04:	10a0001c 	xori	r2,r2,32768
20022e08:	10a00004 	addi	r2,r2,-32768
20022e0c:	1000311e 	bne	r2,zero,20022ed4 <__swsetup_r+0x130>
20022e10:	80800517 	ldw	r2,20(r16)
20022e14:	80800215 	stw	r2,8(r16)
20022e18:	18002326 	beq	r3,zero,20022ea8 <__swsetup_r+0x104>
20022e1c:	0005883a 	mov	r2,zero
20022e20:	dfc00217 	ldw	ra,8(sp)
20022e24:	dc400117 	ldw	r17,4(sp)
20022e28:	dc000017 	ldw	r16,0(sp)
20022e2c:	dec00304 	addi	sp,sp,12
20022e30:	f800283a 	ret
20022e34:	10c0040c 	andi	r3,r2,16
20022e38:	18ffffcc 	andi	r3,r3,65535
20022e3c:	18e0001c 	xori	r3,r3,32768
20022e40:	18e00004 	addi	r3,r3,-32768
20022e44:	18001e26 	beq	r3,zero,20022ec0 <__swsetup_r+0x11c>
20022e48:	10c0010c 	andi	r3,r2,4
20022e4c:	18ffffcc 	andi	r3,r3,65535
20022e50:	18e0001c 	xori	r3,r3,32768
20022e54:	18e00004 	addi	r3,r3,-32768
20022e58:	1800211e 	bne	r3,zero,20022ee0 <__swsetup_r+0x13c>
20022e5c:	80c00417 	ldw	r3,16(r16)
20022e60:	11400214 	ori	r5,r2,8
20022e64:	8140030d 	sth	r5,12(r16)
20022e68:	2805883a 	mov	r2,r5
20022e6c:	183fe11e 	bne	r3,zero,20022df4 <__alt_data_end+0xfffe39f4>
20022e70:	1140a00c 	andi	r5,r2,640
20022e74:	01008004 	movi	r4,512
20022e78:	293fde26 	beq	r5,r4,20022df4 <__alt_data_end+0xfffe39f4>
20022e7c:	8809883a 	mov	r4,r17
20022e80:	800b883a 	mov	r5,r16
20022e84:	00257580 	call	20025758 <__smakebuf_r>
20022e88:	8080030b 	ldhu	r2,12(r16)
20022e8c:	80c00417 	ldw	r3,16(r16)
20022e90:	003fd806 	br	20022df4 <__alt_data_end+0xfffe39f4>
20022e94:	80800517 	ldw	r2,20(r16)
20022e98:	80000215 	stw	zero,8(r16)
20022e9c:	0085c83a 	sub	r2,zero,r2
20022ea0:	80800615 	stw	r2,24(r16)
20022ea4:	183fdd1e 	bne	r3,zero,20022e1c <__alt_data_end+0xfffe3a1c>
20022ea8:	8080030b 	ldhu	r2,12(r16)
20022eac:	1080200c 	andi	r2,r2,128
20022eb0:	10bfffcc 	andi	r2,r2,65535
20022eb4:	10a0001c 	xori	r2,r2,32768
20022eb8:	10a00004 	addi	r2,r2,-32768
20022ebc:	103fd826 	beq	r2,zero,20022e20 <__alt_data_end+0xfffe3a20>
20022ec0:	00bfffc4 	movi	r2,-1
20022ec4:	003fd606 	br	20022e20 <__alt_data_end+0xfffe3a20>
20022ec8:	1009883a 	mov	r4,r2
20022ecc:	00249e40 	call	200249e4 <__sinit>
20022ed0:	003fc006 	br	20022dd4 <__alt_data_end+0xfffe39d4>
20022ed4:	0005883a 	mov	r2,zero
20022ed8:	80800215 	stw	r2,8(r16)
20022edc:	003fce06 	br	20022e18 <__alt_data_end+0xfffe3a18>
20022ee0:	81400c17 	ldw	r5,48(r16)
20022ee4:	28000626 	beq	r5,zero,20022f00 <__swsetup_r+0x15c>
20022ee8:	80c01004 	addi	r3,r16,64
20022eec:	28c00326 	beq	r5,r3,20022efc <__swsetup_r+0x158>
20022ef0:	8809883a 	mov	r4,r17
20022ef4:	0024d680 	call	20024d68 <_free_r>
20022ef8:	8080030b 	ldhu	r2,12(r16)
20022efc:	80000c15 	stw	zero,48(r16)
20022f00:	80c00417 	ldw	r3,16(r16)
20022f04:	013ff6c4 	movi	r4,-37
20022f08:	2084703a 	and	r2,r4,r2
20022f0c:	80000115 	stw	zero,4(r16)
20022f10:	80c00015 	stw	r3,0(r16)
20022f14:	003fd206 	br	20022e60 <__alt_data_end+0xfffe3a60>

20022f18 <quorem>:
20022f18:	defff704 	addi	sp,sp,-36
20022f1c:	dc400115 	stw	r17,4(sp)
20022f20:	20800417 	ldw	r2,16(r4)
20022f24:	2c400417 	ldw	r17,16(r5)
20022f28:	dd800615 	stw	r22,24(sp)
20022f2c:	dd400515 	stw	r21,20(sp)
20022f30:	dfc00815 	stw	ra,32(sp)
20022f34:	ddc00715 	stw	r23,28(sp)
20022f38:	dd000415 	stw	r20,16(sp)
20022f3c:	dcc00315 	stw	r19,12(sp)
20022f40:	dc800215 	stw	r18,8(sp)
20022f44:	dc000015 	stw	r16,0(sp)
20022f48:	202b883a 	mov	r21,r4
20022f4c:	282d883a 	mov	r22,r5
20022f50:	14407116 	blt	r2,r17,20023118 <quorem+0x200>
20022f54:	88800104 	addi	r2,r17,4
20022f58:	1085883a 	add	r2,r2,r2
20022f5c:	1085883a 	add	r2,r2,r2
20022f60:	28a7883a 	add	r19,r5,r2
20022f64:	2085883a 	add	r2,r4,r2
20022f68:	15c00017 	ldw	r23,0(r2)
20022f6c:	99400017 	ldw	r5,0(r19)
20022f70:	8c7fffc4 	addi	r17,r17,-1
20022f74:	b809883a 	mov	r4,r23
20022f78:	29400044 	addi	r5,r5,1
20022f7c:	0020c200 	call	20020c20 <__udivsi3>
20022f80:	1025883a 	mov	r18,r2
20022f84:	b4000504 	addi	r16,r22,20
20022f88:	ad000504 	addi	r20,r21,20
20022f8c:	10002d26 	beq	r2,zero,20023044 <quorem+0x12c>
20022f90:	800d883a 	mov	r6,r16
20022f94:	a007883a 	mov	r3,r20
20022f98:	000f883a 	mov	r7,zero
20022f9c:	0005883a 	mov	r2,zero
20022fa0:	32c00017 	ldw	r11,0(r6)
20022fa4:	1a400017 	ldw	r9,0(r3)
20022fa8:	31800104 	addi	r6,r6,4
20022fac:	5abfffcc 	andi	r10,r11,65535
20022fb0:	5495383a 	mul	r10,r10,r18
20022fb4:	5816d43a 	srli	r11,r11,16
20022fb8:	4a3fffcc 	andi	r8,r9,65535
20022fbc:	3a95883a 	add	r10,r7,r10
20022fc0:	500ed43a 	srli	r7,r10,16
20022fc4:	5c97383a 	mul	r11,r11,r18
20022fc8:	4085883a 	add	r2,r8,r2
20022fcc:	52bfffcc 	andi	r10,r10,65535
20022fd0:	1291c83a 	sub	r8,r2,r10
20022fd4:	4804d43a 	srli	r2,r9,16
20022fd8:	3acf883a 	add	r7,r7,r11
20022fdc:	4015d43a 	srai	r10,r8,16
20022fe0:	393fffcc 	andi	r4,r7,65535
20022fe4:	1105c83a 	sub	r2,r2,r4
20022fe8:	1285883a 	add	r2,r2,r10
20022fec:	1880008d 	sth	r2,2(r3)
20022ff0:	1a00000d 	sth	r8,0(r3)
20022ff4:	380ed43a 	srli	r7,r7,16
20022ff8:	1005d43a 	srai	r2,r2,16
20022ffc:	18c00104 	addi	r3,r3,4
20023000:	99bfe72e 	bgeu	r19,r6,20022fa0 <__alt_data_end+0xfffe3ba0>
20023004:	b8000f1e 	bne	r23,zero,20023044 <quorem+0x12c>
20023008:	88800144 	addi	r2,r17,5
2002300c:	1085883a 	add	r2,r2,r2
20023010:	1085883a 	add	r2,r2,r2
20023014:	a887883a 	add	r3,r21,r2
20023018:	18bfff04 	addi	r2,r3,-4
2002301c:	a080082e 	bgeu	r20,r2,20023040 <quorem+0x128>
20023020:	18ffff17 	ldw	r3,-4(r3)
20023024:	18000326 	beq	r3,zero,20023034 <quorem+0x11c>
20023028:	00000506 	br	20023040 <quorem+0x128>
2002302c:	10c00017 	ldw	r3,0(r2)
20023030:	1800031e 	bne	r3,zero,20023040 <quorem+0x128>
20023034:	10bfff04 	addi	r2,r2,-4
20023038:	8c7fffc4 	addi	r17,r17,-1
2002303c:	a0bffb36 	bltu	r20,r2,2002302c <__alt_data_end+0xfffe3c2c>
20023040:	ac400415 	stw	r17,16(r21)
20023044:	a809883a 	mov	r4,r21
20023048:	b00b883a 	mov	r5,r22
2002304c:	0026c240 	call	20026c24 <__mcmp>
20023050:	10002516 	blt	r2,zero,200230e8 <quorem+0x1d0>
20023054:	94800044 	addi	r18,r18,1
20023058:	a007883a 	mov	r3,r20
2002305c:	000b883a 	mov	r5,zero
20023060:	1a000017 	ldw	r8,0(r3)
20023064:	81c00017 	ldw	r7,0(r16)
20023068:	84000104 	addi	r16,r16,4
2002306c:	41bfffcc 	andi	r6,r8,65535
20023070:	38bfffcc 	andi	r2,r7,65535
20023074:	314b883a 	add	r5,r6,r5
20023078:	288dc83a 	sub	r6,r5,r2
2002307c:	380ed43a 	srli	r7,r7,16
20023080:	400ad43a 	srli	r5,r8,16
20023084:	3005d43a 	srai	r2,r6,16
20023088:	1980000d 	sth	r6,0(r3)
2002308c:	29cbc83a 	sub	r5,r5,r7
20023090:	288b883a 	add	r5,r5,r2
20023094:	1940008d 	sth	r5,2(r3)
20023098:	280bd43a 	srai	r5,r5,16
2002309c:	18c00104 	addi	r3,r3,4
200230a0:	9c3fef2e 	bgeu	r19,r16,20023060 <__alt_data_end+0xfffe3c60>
200230a4:	88800144 	addi	r2,r17,5
200230a8:	1085883a 	add	r2,r2,r2
200230ac:	1085883a 	add	r2,r2,r2
200230b0:	a885883a 	add	r2,r21,r2
200230b4:	10c00017 	ldw	r3,0(r2)
200230b8:	18000b1e 	bne	r3,zero,200230e8 <quorem+0x1d0>
200230bc:	10ffff04 	addi	r3,r2,-4
200230c0:	a0c0082e 	bgeu	r20,r3,200230e4 <quorem+0x1cc>
200230c4:	10bfff17 	ldw	r2,-4(r2)
200230c8:	10000326 	beq	r2,zero,200230d8 <quorem+0x1c0>
200230cc:	00000506 	br	200230e4 <quorem+0x1cc>
200230d0:	18800017 	ldw	r2,0(r3)
200230d4:	1000031e 	bne	r2,zero,200230e4 <quorem+0x1cc>
200230d8:	18ffff04 	addi	r3,r3,-4
200230dc:	8c7fffc4 	addi	r17,r17,-1
200230e0:	a0fffb36 	bltu	r20,r3,200230d0 <__alt_data_end+0xfffe3cd0>
200230e4:	ac400415 	stw	r17,16(r21)
200230e8:	9005883a 	mov	r2,r18
200230ec:	dfc00817 	ldw	ra,32(sp)
200230f0:	ddc00717 	ldw	r23,28(sp)
200230f4:	dd800617 	ldw	r22,24(sp)
200230f8:	dd400517 	ldw	r21,20(sp)
200230fc:	dd000417 	ldw	r20,16(sp)
20023100:	dcc00317 	ldw	r19,12(sp)
20023104:	dc800217 	ldw	r18,8(sp)
20023108:	dc400117 	ldw	r17,4(sp)
2002310c:	dc000017 	ldw	r16,0(sp)
20023110:	dec00904 	addi	sp,sp,36
20023114:	f800283a 	ret
20023118:	0005883a 	mov	r2,zero
2002311c:	003ff306 	br	200230ec <__alt_data_end+0xfffe3cec>

20023120 <_dtoa_r>:
20023120:	20801017 	ldw	r2,64(r4)
20023124:	deffdf04 	addi	sp,sp,-132
20023128:	dcc01a15 	stw	r19,104(sp)
2002312c:	dc801915 	stw	r18,100(sp)
20023130:	dc401815 	stw	r17,96(sp)
20023134:	dc001715 	stw	r16,92(sp)
20023138:	dfc02015 	stw	ra,128(sp)
2002313c:	df001f15 	stw	fp,124(sp)
20023140:	ddc01e15 	stw	r23,120(sp)
20023144:	dd801d15 	stw	r22,116(sp)
20023148:	dd401c15 	stw	r21,112(sp)
2002314c:	dd001b15 	stw	r20,108(sp)
20023150:	d9400315 	stw	r5,12(sp)
20023154:	d9c00415 	stw	r7,16(sp)
20023158:	2021883a 	mov	r16,r4
2002315c:	3025883a 	mov	r18,r6
20023160:	dcc02317 	ldw	r19,140(sp)
20023164:	3023883a 	mov	r17,r6
20023168:	10000826 	beq	r2,zero,2002318c <_dtoa_r+0x6c>
2002316c:	20c01117 	ldw	r3,68(r4)
20023170:	01800044 	movi	r6,1
20023174:	100b883a 	mov	r5,r2
20023178:	30cc983a 	sll	r6,r6,r3
2002317c:	10c00115 	stw	r3,4(r2)
20023180:	11800215 	stw	r6,8(r2)
20023184:	00264280 	call	20026428 <_Bfree>
20023188:	80001015 	stw	zero,64(r16)
2002318c:	90002f16 	blt	r18,zero,2002324c <_dtoa_r+0x12c>
20023190:	98000015 	stw	zero,0(r19)
20023194:	90dffc2c 	andhi	r3,r18,32752
20023198:	009ffc34 	movhi	r2,32752
2002319c:	18801c26 	beq	r3,r2,20023210 <_dtoa_r+0xf0>
200231a0:	d9000317 	ldw	r4,12(sp)
200231a4:	880b883a 	mov	r5,r17
200231a8:	000d883a 	mov	r6,zero
200231ac:	000f883a 	mov	r7,zero
200231b0:	00298040 	call	20029804 <__nedf2>
200231b4:	10002c1e 	bne	r2,zero,20023268 <_dtoa_r+0x148>
200231b8:	d9002217 	ldw	r4,136(sp)
200231bc:	d9c02417 	ldw	r7,144(sp)
200231c0:	00800044 	movi	r2,1
200231c4:	20800015 	stw	r2,0(r4)
200231c8:	38019426 	beq	r7,zero,2002381c <_dtoa_r+0x6fc>
200231cc:	008800f4 	movhi	r2,8195
200231d0:	10b31844 	addi	r2,r2,-13215
200231d4:	38800015 	stw	r2,0(r7)
200231d8:	15ffffc4 	addi	r23,r2,-1
200231dc:	b805883a 	mov	r2,r23
200231e0:	dfc02017 	ldw	ra,128(sp)
200231e4:	df001f17 	ldw	fp,124(sp)
200231e8:	ddc01e17 	ldw	r23,120(sp)
200231ec:	dd801d17 	ldw	r22,116(sp)
200231f0:	dd401c17 	ldw	r21,112(sp)
200231f4:	dd001b17 	ldw	r20,108(sp)
200231f8:	dcc01a17 	ldw	r19,104(sp)
200231fc:	dc801917 	ldw	r18,100(sp)
20023200:	dc401817 	ldw	r17,96(sp)
20023204:	dc001717 	ldw	r16,92(sp)
20023208:	dec02104 	addi	sp,sp,132
2002320c:	f800283a 	ret
20023210:	d8c02217 	ldw	r3,136(sp)
20023214:	d9000317 	ldw	r4,12(sp)
20023218:	0089c3c4 	movi	r2,9999
2002321c:	18800015 	stw	r2,0(r3)
20023220:	20016c26 	beq	r4,zero,200237d4 <_dtoa_r+0x6b4>
20023224:	05c800f4 	movhi	r23,8195
20023228:	bdf32404 	addi	r23,r23,-13168
2002322c:	d9c02417 	ldw	r7,144(sp)
20023230:	383fea26 	beq	r7,zero,200231dc <__alt_data_end+0xfffe3ddc>
20023234:	b88000c7 	ldb	r2,3(r23)
20023238:	10016d1e 	bne	r2,zero,200237f0 <_dtoa_r+0x6d0>
2002323c:	b88000c4 	addi	r2,r23,3
20023240:	d8c02417 	ldw	r3,144(sp)
20023244:	18800015 	stw	r2,0(r3)
20023248:	003fe406 	br	200231dc <__alt_data_end+0xfffe3ddc>
2002324c:	04600034 	movhi	r17,32768
20023250:	8c7fffc4 	addi	r17,r17,-1
20023254:	9462703a 	and	r17,r18,r17
20023258:	00800044 	movi	r2,1
2002325c:	98800015 	stw	r2,0(r19)
20023260:	8825883a 	mov	r18,r17
20023264:	003fcb06 	br	20023194 <__alt_data_end+0xfffe3d94>
20023268:	d9400317 	ldw	r5,12(sp)
2002326c:	9028d53a 	srli	r20,r18,20
20023270:	d8800204 	addi	r2,sp,8
20023274:	d8800015 	stw	r2,0(sp)
20023278:	8009883a 	mov	r4,r16
2002327c:	880d883a 	mov	r6,r17
20023280:	d9c00104 	addi	r7,sp,4
20023284:	0026fcc0 	call	20026fcc <__d2b>
20023288:	a501ffcc 	andi	r20,r20,2047
2002328c:	1039883a 	mov	fp,r2
20023290:	a001591e 	bne	r20,zero,200237f8 <_dtoa_r+0x6d8>
20023294:	dd400217 	ldw	r21,8(sp)
20023298:	dd000117 	ldw	r20,4(sp)
2002329c:	00befbc4 	movi	r2,-1041
200232a0:	ad29883a 	add	r20,r21,r20
200232a4:	a082d216 	blt	r20,r2,20023df0 <_dtoa_r+0xcd0>
200232a8:	d8c00317 	ldw	r3,12(sp)
200232ac:	013f0384 	movi	r4,-1010
200232b0:	2509c83a 	sub	r4,r4,r20
200232b4:	a0810484 	addi	r2,r20,1042
200232b8:	9124983a 	sll	r18,r18,r4
200232bc:	1884d83a 	srl	r2,r3,r2
200232c0:	9088b03a 	or	r4,r18,r2
200232c4:	0029b1c0 	call	20029b1c <__floatunsidf>
200232c8:	1009883a 	mov	r4,r2
200232cc:	017f8434 	movhi	r5,65040
200232d0:	00800044 	movi	r2,1
200232d4:	194b883a 	add	r5,r3,r5
200232d8:	a53fffc4 	addi	r20,r20,-1
200232dc:	d8800f15 	stw	r2,60(sp)
200232e0:	000d883a 	mov	r6,zero
200232e4:	01cffe34 	movhi	r7,16376
200232e8:	00292b00 	call	200292b0 <__subdf3>
200232ec:	1009883a 	mov	r4,r2
200232f0:	180b883a 	mov	r5,r3
200232f4:	0198dbf4 	movhi	r6,25455
200232f8:	3190d844 	addi	r6,r6,17249
200232fc:	01cff4f4 	movhi	r7,16339
20023300:	39e1e9c4 	addi	r7,r7,-30809
20023304:	00293100 	call	20029310 <__muldf3>
20023308:	180b883a 	mov	r5,r3
2002330c:	01a2d874 	movhi	r6,35681
20023310:	31b22cc4 	addi	r6,r6,-14157
20023314:	01cff1f4 	movhi	r7,16327
20023318:	39e28a04 	addi	r7,r7,-30168
2002331c:	1009883a 	mov	r4,r2
20023320:	002925c0 	call	2002925c <__adddf3>
20023324:	a009883a 	mov	r4,r20
20023328:	1027883a 	mov	r19,r2
2002332c:	1825883a 	mov	r18,r3
20023330:	00299840 	call	20029984 <__floatsidf>
20023334:	1009883a 	mov	r4,r2
20023338:	180b883a 	mov	r5,r3
2002333c:	019427f4 	movhi	r6,20639
20023340:	319e7ec4 	addi	r6,r6,31227
20023344:	01cff4f4 	movhi	r7,16339
20023348:	39d104c4 	addi	r7,r7,17427
2002334c:	00293100 	call	20029310 <__muldf3>
20023350:	9809883a 	mov	r4,r19
20023354:	900b883a 	mov	r5,r18
20023358:	100d883a 	mov	r6,r2
2002335c:	180f883a 	mov	r7,r3
20023360:	002925c0 	call	2002925c <__adddf3>
20023364:	1009883a 	mov	r4,r2
20023368:	180b883a 	mov	r5,r3
2002336c:	1027883a 	mov	r19,r2
20023370:	1825883a 	mov	r18,r3
20023374:	0029a580 	call	20029a58 <__fixdfsi>
20023378:	9809883a 	mov	r4,r19
2002337c:	900b883a 	mov	r5,r18
20023380:	000d883a 	mov	r6,zero
20023384:	000f883a 	mov	r7,zero
20023388:	d8800615 	stw	r2,24(sp)
2002338c:	00299280 	call	20029928 <__ltdf2>
20023390:	10027e16 	blt	r2,zero,20023d8c <_dtoa_r+0xc6c>
20023394:	d8c00617 	ldw	r3,24(sp)
20023398:	00800584 	movi	r2,22
2002339c:	10c26c36 	bltu	r2,r3,20023d50 <_dtoa_r+0xc30>
200233a0:	180490fa 	slli	r2,r3,3
200233a4:	00c800f4 	movhi	r3,8195
200233a8:	18f34a04 	addi	r3,r3,-13016
200233ac:	d9800317 	ldw	r6,12(sp)
200233b0:	1885883a 	add	r2,r3,r2
200233b4:	11000017 	ldw	r4,0(r2)
200233b8:	11400117 	ldw	r5,4(r2)
200233bc:	880f883a 	mov	r7,r17
200233c0:	00298600 	call	20029860 <__gtdf2>
200233c4:	00828f0e 	bge	zero,r2,20023e04 <_dtoa_r+0xce4>
200233c8:	d8800617 	ldw	r2,24(sp)
200233cc:	d8000d15 	stw	zero,52(sp)
200233d0:	10bfffc4 	addi	r2,r2,-1
200233d4:	d8800615 	stw	r2,24(sp)
200233d8:	ad29c83a 	sub	r20,r21,r20
200233dc:	a53fffc4 	addi	r20,r20,-1
200233e0:	a0026616 	blt	r20,zero,20023d7c <_dtoa_r+0xc5c>
200233e4:	dd000715 	stw	r20,28(sp)
200233e8:	d8000815 	stw	zero,32(sp)
200233ec:	d8800617 	ldw	r2,24(sp)
200233f0:	10025a16 	blt	r2,zero,20023d5c <_dtoa_r+0xc3c>
200233f4:	d8c00717 	ldw	r3,28(sp)
200233f8:	d8800b15 	stw	r2,44(sp)
200233fc:	d8000a15 	stw	zero,40(sp)
20023400:	1887883a 	add	r3,r3,r2
20023404:	d8c00715 	stw	r3,28(sp)
20023408:	d9c00417 	ldw	r7,16(sp)
2002340c:	00800244 	movi	r2,9
20023410:	11c10536 	bltu	r2,r7,20023828 <_dtoa_r+0x708>
20023414:	00800144 	movi	r2,5
20023418:	11c4c60e 	bge	r2,r7,20024734 <_dtoa_r+0x1614>
2002341c:	39ffff04 	addi	r7,r7,-4
20023420:	d9c00415 	stw	r7,16(sp)
20023424:	0027883a 	mov	r19,zero
20023428:	d9c00417 	ldw	r7,16(sp)
2002342c:	008000c4 	movi	r2,3
20023430:	3883a226 	beq	r7,r2,200242bc <_dtoa_r+0x119c>
20023434:	11c2bc16 	blt	r2,r7,20023f28 <_dtoa_r+0xe08>
20023438:	00800084 	movi	r2,2
2002343c:	3880fb1e 	bne	r7,r2,2002382c <_dtoa_r+0x70c>
20023440:	d8000c15 	stw	zero,48(sp)
20023444:	d9002117 	ldw	r4,132(sp)
20023448:	0103ae0e 	bge	zero,r4,20024304 <_dtoa_r+0x11e4>
2002344c:	2025883a 	mov	r18,r4
20023450:	d9000e15 	stw	r4,56(sp)
20023454:	d9000915 	stw	r4,36(sp)
20023458:	80001115 	stw	zero,68(r16)
2002345c:	008005c4 	movi	r2,23
20023460:	1484b22e 	bgeu	r2,r18,2002472c <_dtoa_r+0x160c>
20023464:	00c00044 	movi	r3,1
20023468:	00800104 	movi	r2,4
2002346c:	1085883a 	add	r2,r2,r2
20023470:	11000504 	addi	r4,r2,20
20023474:	180b883a 	mov	r5,r3
20023478:	18c00044 	addi	r3,r3,1
2002347c:	913ffb2e 	bgeu	r18,r4,2002346c <__alt_data_end+0xfffe406c>
20023480:	81401115 	stw	r5,68(r16)
20023484:	8009883a 	mov	r4,r16
20023488:	00263800 	call	20026380 <_Balloc>
2002348c:	102f883a 	mov	r23,r2
20023490:	80801015 	stw	r2,64(r16)
20023494:	00800384 	movi	r2,14
20023498:	1480f036 	bltu	r2,r18,2002385c <_dtoa_r+0x73c>
2002349c:	9800ef26 	beq	r19,zero,2002385c <_dtoa_r+0x73c>
200234a0:	d8800617 	ldw	r2,24(sp)
200234a4:	00839c0e 	bge	zero,r2,20024318 <_dtoa_r+0x11f8>
200234a8:	d8c00617 	ldw	r3,24(sp)
200234ac:	108003cc 	andi	r2,r2,15
200234b0:	100490fa 	slli	r2,r2,3
200234b4:	182bd13a 	srai	r21,r3,4
200234b8:	00c800f4 	movhi	r3,8195
200234bc:	18f34a04 	addi	r3,r3,-13016
200234c0:	1885883a 	add	r2,r3,r2
200234c4:	a8c0040c 	andi	r3,r21,16
200234c8:	12800017 	ldw	r10,0(r2)
200234cc:	15800117 	ldw	r22,4(r2)
200234d0:	18038726 	beq	r3,zero,200242f0 <_dtoa_r+0x11d0>
200234d4:	008800f4 	movhi	r2,8195
200234d8:	10b34004 	addi	r2,r2,-13056
200234dc:	11800817 	ldw	r6,32(r2)
200234e0:	11c00917 	ldw	r7,36(r2)
200234e4:	d9000317 	ldw	r4,12(sp)
200234e8:	880b883a 	mov	r5,r17
200234ec:	da801515 	stw	r10,84(sp)
200234f0:	00295f40 	call	200295f4 <__divdf3>
200234f4:	da801517 	ldw	r10,84(sp)
200234f8:	d8801015 	stw	r2,64(sp)
200234fc:	1829883a 	mov	r20,r3
20023500:	ad4003cc 	andi	r21,r21,15
20023504:	048000c4 	movi	r18,3
20023508:	a8001126 	beq	r21,zero,20023550 <_dtoa_r+0x430>
2002350c:	04c800f4 	movhi	r19,8195
20023510:	9cf34004 	addi	r19,r19,-13056
20023514:	5005883a 	mov	r2,r10
20023518:	b007883a 	mov	r3,r22
2002351c:	a980004c 	andi	r6,r21,1
20023520:	1009883a 	mov	r4,r2
20023524:	a82bd07a 	srai	r21,r21,1
20023528:	180b883a 	mov	r5,r3
2002352c:	30000426 	beq	r6,zero,20023540 <_dtoa_r+0x420>
20023530:	99800017 	ldw	r6,0(r19)
20023534:	99c00117 	ldw	r7,4(r19)
20023538:	94800044 	addi	r18,r18,1
2002353c:	00293100 	call	20029310 <__muldf3>
20023540:	9cc00204 	addi	r19,r19,8
20023544:	a83ff51e 	bne	r21,zero,2002351c <__alt_data_end+0xfffe411c>
20023548:	1015883a 	mov	r10,r2
2002354c:	182d883a 	mov	r22,r3
20023550:	d9001017 	ldw	r4,64(sp)
20023554:	a00b883a 	mov	r5,r20
20023558:	500d883a 	mov	r6,r10
2002355c:	b00f883a 	mov	r7,r22
20023560:	00295f40 	call	200295f4 <__divdf3>
20023564:	1027883a 	mov	r19,r2
20023568:	1829883a 	mov	r20,r3
2002356c:	d8c00d17 	ldw	r3,52(sp)
20023570:	18000626 	beq	r3,zero,2002358c <_dtoa_r+0x46c>
20023574:	9809883a 	mov	r4,r19
20023578:	a00b883a 	mov	r5,r20
2002357c:	000d883a 	mov	r6,zero
20023580:	01cffc34 	movhi	r7,16368
20023584:	00299280 	call	20029928 <__ltdf2>
20023588:	10040e16 	blt	r2,zero,200245c4 <_dtoa_r+0x14a4>
2002358c:	9009883a 	mov	r4,r18
20023590:	00299840 	call	20029984 <__floatsidf>
20023594:	1009883a 	mov	r4,r2
20023598:	180b883a 	mov	r5,r3
2002359c:	980d883a 	mov	r6,r19
200235a0:	a00f883a 	mov	r7,r20
200235a4:	00293100 	call	20029310 <__muldf3>
200235a8:	1009883a 	mov	r4,r2
200235ac:	180b883a 	mov	r5,r3
200235b0:	000d883a 	mov	r6,zero
200235b4:	01d00734 	movhi	r7,16412
200235b8:	002925c0 	call	2002925c <__adddf3>
200235bc:	057f3034 	movhi	r21,64704
200235c0:	1d6b883a 	add	r21,r3,r21
200235c4:	d8c00917 	ldw	r3,36(sp)
200235c8:	1025883a 	mov	r18,r2
200235cc:	18031f26 	beq	r3,zero,2002424c <_dtoa_r+0x112c>
200235d0:	d8800617 	ldw	r2,24(sp)
200235d4:	dac00917 	ldw	r11,36(sp)
200235d8:	d8801315 	stw	r2,76(sp)
200235dc:	d8c00c17 	ldw	r3,48(sp)
200235e0:	18039026 	beq	r3,zero,20024424 <_dtoa_r+0x1304>
200235e4:	58bfffc4 	addi	r2,r11,-1
200235e8:	100490fa 	slli	r2,r2,3
200235ec:	00c800f4 	movhi	r3,8195
200235f0:	18f34a04 	addi	r3,r3,-13016
200235f4:	0009883a 	mov	r4,zero
200235f8:	1885883a 	add	r2,r3,r2
200235fc:	11800017 	ldw	r6,0(r2)
20023600:	11c00117 	ldw	r7,4(r2)
20023604:	014ff834 	movhi	r5,16352
20023608:	dac01615 	stw	r11,88(sp)
2002360c:	00295f40 	call	200295f4 <__divdf3>
20023610:	900d883a 	mov	r6,r18
20023614:	a80f883a 	mov	r7,r21
20023618:	1009883a 	mov	r4,r2
2002361c:	180b883a 	mov	r5,r3
20023620:	00292b00 	call	200292b0 <__subdf3>
20023624:	a00b883a 	mov	r5,r20
20023628:	9809883a 	mov	r4,r19
2002362c:	182b883a 	mov	r21,r3
20023630:	d8801015 	stw	r2,64(sp)
20023634:	0029a580 	call	20029a58 <__fixdfsi>
20023638:	1009883a 	mov	r4,r2
2002363c:	d8801515 	stw	r2,84(sp)
20023640:	00299840 	call	20029984 <__floatsidf>
20023644:	9809883a 	mov	r4,r19
20023648:	a00b883a 	mov	r5,r20
2002364c:	100d883a 	mov	r6,r2
20023650:	180f883a 	mov	r7,r3
20023654:	00292b00 	call	200292b0 <__subdf3>
20023658:	da401517 	ldw	r9,84(sp)
2002365c:	d9001017 	ldw	r4,64(sp)
20023660:	a80b883a 	mov	r5,r21
20023664:	4d000c04 	addi	r20,r9,48
20023668:	bd000005 	stb	r20,0(r23)
2002366c:	100d883a 	mov	r6,r2
20023670:	180f883a 	mov	r7,r3
20023674:	bd800044 	addi	r22,r23,1
20023678:	1025883a 	mov	r18,r2
2002367c:	1827883a 	mov	r19,r3
20023680:	00298600 	call	20029860 <__gtdf2>
20023684:	00842216 	blt	zero,r2,20024710 <_dtoa_r+0x15f0>
20023688:	0009883a 	mov	r4,zero
2002368c:	014ffc34 	movhi	r5,16368
20023690:	900d883a 	mov	r6,r18
20023694:	980f883a 	mov	r7,r19
20023698:	00292b00 	call	200292b0 <__subdf3>
2002369c:	d9001017 	ldw	r4,64(sp)
200236a0:	a80b883a 	mov	r5,r21
200236a4:	100d883a 	mov	r6,r2
200236a8:	180f883a 	mov	r7,r3
200236ac:	00298600 	call	20029860 <__gtdf2>
200236b0:	dac01617 	ldw	r11,88(sp)
200236b4:	00841316 	blt	zero,r2,20024704 <_dtoa_r+0x15e4>
200236b8:	00800044 	movi	r2,1
200236bc:	12c0670e 	bge	r2,r11,2002385c <_dtoa_r+0x73c>
200236c0:	bad7883a 	add	r11,r23,r11
200236c4:	df001115 	stw	fp,68(sp)
200236c8:	dc401215 	stw	r17,72(sp)
200236cc:	5839883a 	mov	fp,r11
200236d0:	dc401017 	ldw	r17,64(sp)
200236d4:	00000806 	br	200236f8 <_dtoa_r+0x5d8>
200236d8:	00292b00 	call	200292b0 <__subdf3>
200236dc:	1009883a 	mov	r4,r2
200236e0:	180b883a 	mov	r5,r3
200236e4:	880d883a 	mov	r6,r17
200236e8:	a80f883a 	mov	r7,r21
200236ec:	00299280 	call	20029928 <__ltdf2>
200236f0:	1003ee16 	blt	r2,zero,200246ac <_dtoa_r+0x158c>
200236f4:	b703f126 	beq	r22,fp,200246bc <_dtoa_r+0x159c>
200236f8:	8809883a 	mov	r4,r17
200236fc:	a80b883a 	mov	r5,r21
20023700:	000d883a 	mov	r6,zero
20023704:	01d00934 	movhi	r7,16420
20023708:	00293100 	call	20029310 <__muldf3>
2002370c:	000d883a 	mov	r6,zero
20023710:	01d00934 	movhi	r7,16420
20023714:	9009883a 	mov	r4,r18
20023718:	980b883a 	mov	r5,r19
2002371c:	1023883a 	mov	r17,r2
20023720:	182b883a 	mov	r21,r3
20023724:	00293100 	call	20029310 <__muldf3>
20023728:	180b883a 	mov	r5,r3
2002372c:	1009883a 	mov	r4,r2
20023730:	1825883a 	mov	r18,r3
20023734:	1027883a 	mov	r19,r2
20023738:	0029a580 	call	20029a58 <__fixdfsi>
2002373c:	1009883a 	mov	r4,r2
20023740:	1029883a 	mov	r20,r2
20023744:	00299840 	call	20029984 <__floatsidf>
20023748:	9809883a 	mov	r4,r19
2002374c:	900b883a 	mov	r5,r18
20023750:	100d883a 	mov	r6,r2
20023754:	180f883a 	mov	r7,r3
20023758:	00292b00 	call	200292b0 <__subdf3>
2002375c:	a5000c04 	addi	r20,r20,48
20023760:	b5000005 	stb	r20,0(r22)
20023764:	1009883a 	mov	r4,r2
20023768:	180b883a 	mov	r5,r3
2002376c:	880d883a 	mov	r6,r17
20023770:	a80f883a 	mov	r7,r21
20023774:	1025883a 	mov	r18,r2
20023778:	1827883a 	mov	r19,r3
2002377c:	00299280 	call	20029928 <__ltdf2>
20023780:	b5800044 	addi	r22,r22,1
20023784:	0009883a 	mov	r4,zero
20023788:	014ffc34 	movhi	r5,16368
2002378c:	900d883a 	mov	r6,r18
20023790:	980f883a 	mov	r7,r19
20023794:	103fd00e 	bge	r2,zero,200236d8 <__alt_data_end+0xfffe42d8>
20023798:	d9001317 	ldw	r4,76(sp)
2002379c:	df001117 	ldw	fp,68(sp)
200237a0:	d9000615 	stw	r4,24(sp)
200237a4:	8009883a 	mov	r4,r16
200237a8:	e00b883a 	mov	r5,fp
200237ac:	00264280 	call	20026428 <_Bfree>
200237b0:	d9c00617 	ldw	r7,24(sp)
200237b4:	d8c02217 	ldw	r3,136(sp)
200237b8:	d9002417 	ldw	r4,144(sp)
200237bc:	b0000005 	stb	zero,0(r22)
200237c0:	38800044 	addi	r2,r7,1
200237c4:	18800015 	stw	r2,0(r3)
200237c8:	203e8426 	beq	r4,zero,200231dc <__alt_data_end+0xfffe3ddc>
200237cc:	25800015 	stw	r22,0(r4)
200237d0:	003e8206 	br	200231dc <__alt_data_end+0xfffe3ddc>
200237d4:	00800434 	movhi	r2,16
200237d8:	10bfffc4 	addi	r2,r2,-1
200237dc:	90a4703a 	and	r18,r18,r2
200237e0:	903e901e 	bne	r18,zero,20023224 <__alt_data_end+0xfffe3e24>
200237e4:	05c800f4 	movhi	r23,8195
200237e8:	bdf32104 	addi	r23,r23,-13180
200237ec:	003e8f06 	br	2002322c <__alt_data_end+0xfffe3e2c>
200237f0:	b8800204 	addi	r2,r23,8
200237f4:	003e9206 	br	20023240 <__alt_data_end+0xfffe3e40>
200237f8:	01400434 	movhi	r5,16
200237fc:	297fffc4 	addi	r5,r5,-1
20023800:	894a703a 	and	r5,r17,r5
20023804:	d9000317 	ldw	r4,12(sp)
20023808:	294ffc34 	orhi	r5,r5,16368
2002380c:	a53f0044 	addi	r20,r20,-1023
20023810:	dd400217 	ldw	r21,8(sp)
20023814:	d8000f15 	stw	zero,60(sp)
20023818:	003eb106 	br	200232e0 <__alt_data_end+0xfffe3ee0>
2002381c:	05c800f4 	movhi	r23,8195
20023820:	bdf31804 	addi	r23,r23,-13216
20023824:	003e6d06 	br	200231dc <__alt_data_end+0xfffe3ddc>
20023828:	d8000415 	stw	zero,16(sp)
2002382c:	80001115 	stw	zero,68(r16)
20023830:	8009883a 	mov	r4,r16
20023834:	000b883a 	mov	r5,zero
20023838:	00263800 	call	20026380 <_Balloc>
2002383c:	01ffffc4 	movi	r7,-1
20023840:	102f883a 	mov	r23,r2
20023844:	80801015 	stw	r2,64(r16)
20023848:	00800044 	movi	r2,1
2002384c:	d9c00915 	stw	r7,36(sp)
20023850:	d8002115 	stw	zero,132(sp)
20023854:	d9c00e15 	stw	r7,56(sp)
20023858:	d8800c15 	stw	r2,48(sp)
2002385c:	d8800117 	ldw	r2,4(sp)
20023860:	10008b16 	blt	r2,zero,20023a90 <_dtoa_r+0x970>
20023864:	d9000617 	ldw	r4,24(sp)
20023868:	00c00384 	movi	r3,14
2002386c:	19008816 	blt	r3,r4,20023a90 <_dtoa_r+0x970>
20023870:	200490fa 	slli	r2,r4,3
20023874:	d9c02117 	ldw	r7,132(sp)
20023878:	00c800f4 	movhi	r3,8195
2002387c:	18f34a04 	addi	r3,r3,-13016
20023880:	1885883a 	add	r2,r3,r2
20023884:	14800017 	ldw	r18,0(r2)
20023888:	14c00117 	ldw	r19,4(r2)
2002388c:	3801c916 	blt	r7,zero,20023fb4 <_dtoa_r+0xe94>
20023890:	d9000317 	ldw	r4,12(sp)
20023894:	900d883a 	mov	r6,r18
20023898:	980f883a 	mov	r7,r19
2002389c:	880b883a 	mov	r5,r17
200238a0:	00295f40 	call	200295f4 <__divdf3>
200238a4:	180b883a 	mov	r5,r3
200238a8:	1009883a 	mov	r4,r2
200238ac:	0029a580 	call	20029a58 <__fixdfsi>
200238b0:	1009883a 	mov	r4,r2
200238b4:	102b883a 	mov	r21,r2
200238b8:	00299840 	call	20029984 <__floatsidf>
200238bc:	1009883a 	mov	r4,r2
200238c0:	180b883a 	mov	r5,r3
200238c4:	900d883a 	mov	r6,r18
200238c8:	980f883a 	mov	r7,r19
200238cc:	00293100 	call	20029310 <__muldf3>
200238d0:	d9000317 	ldw	r4,12(sp)
200238d4:	880b883a 	mov	r5,r17
200238d8:	100d883a 	mov	r6,r2
200238dc:	180f883a 	mov	r7,r3
200238e0:	00292b00 	call	200292b0 <__subdf3>
200238e4:	d9c00917 	ldw	r7,36(sp)
200238e8:	1009883a 	mov	r4,r2
200238ec:	a8800c04 	addi	r2,r21,48
200238f0:	b8800005 	stb	r2,0(r23)
200238f4:	01800044 	movi	r6,1
200238f8:	180b883a 	mov	r5,r3
200238fc:	2005883a 	mov	r2,r4
20023900:	bd800044 	addi	r22,r23,1
20023904:	39803726 	beq	r7,r6,200239e4 <_dtoa_r+0x8c4>
20023908:	000d883a 	mov	r6,zero
2002390c:	01d00934 	movhi	r7,16420
20023910:	00293100 	call	20029310 <__muldf3>
20023914:	1009883a 	mov	r4,r2
20023918:	180b883a 	mov	r5,r3
2002391c:	000d883a 	mov	r6,zero
20023920:	000f883a 	mov	r7,zero
20023924:	1029883a 	mov	r20,r2
20023928:	1823883a 	mov	r17,r3
2002392c:	00297a80 	call	200297a8 <__eqdf2>
20023930:	103f9c26 	beq	r2,zero,200237a4 <__alt_data_end+0xfffe43a4>
20023934:	dd400917 	ldw	r21,36(sp)
20023938:	dc000415 	stw	r16,16(sp)
2002393c:	00000906 	br	20023964 <_dtoa_r+0x844>
20023940:	00293100 	call	20029310 <__muldf3>
20023944:	1009883a 	mov	r4,r2
20023948:	180b883a 	mov	r5,r3
2002394c:	000d883a 	mov	r6,zero
20023950:	000f883a 	mov	r7,zero
20023954:	1029883a 	mov	r20,r2
20023958:	1823883a 	mov	r17,r3
2002395c:	00297a80 	call	200297a8 <__eqdf2>
20023960:	10022926 	beq	r2,zero,20024208 <_dtoa_r+0x10e8>
20023964:	900d883a 	mov	r6,r18
20023968:	980f883a 	mov	r7,r19
2002396c:	a009883a 	mov	r4,r20
20023970:	880b883a 	mov	r5,r17
20023974:	00295f40 	call	200295f4 <__divdf3>
20023978:	180b883a 	mov	r5,r3
2002397c:	1009883a 	mov	r4,r2
20023980:	0029a580 	call	20029a58 <__fixdfsi>
20023984:	1009883a 	mov	r4,r2
20023988:	1021883a 	mov	r16,r2
2002398c:	00299840 	call	20029984 <__floatsidf>
20023990:	1009883a 	mov	r4,r2
20023994:	180b883a 	mov	r5,r3
20023998:	900d883a 	mov	r6,r18
2002399c:	980f883a 	mov	r7,r19
200239a0:	00293100 	call	20029310 <__muldf3>
200239a4:	a009883a 	mov	r4,r20
200239a8:	880b883a 	mov	r5,r17
200239ac:	100d883a 	mov	r6,r2
200239b0:	180f883a 	mov	r7,r3
200239b4:	00292b00 	call	200292b0 <__subdf3>
200239b8:	82400c04 	addi	r9,r16,48
200239bc:	b2400005 	stb	r9,0(r22)
200239c0:	b5800044 	addi	r22,r22,1
200239c4:	b5d3c83a 	sub	r9,r22,r23
200239c8:	000d883a 	mov	r6,zero
200239cc:	01d00934 	movhi	r7,16420
200239d0:	1009883a 	mov	r4,r2
200239d4:	180b883a 	mov	r5,r3
200239d8:	aa7fd91e 	bne	r21,r9,20023940 <__alt_data_end+0xfffe4540>
200239dc:	802b883a 	mov	r21,r16
200239e0:	dc000417 	ldw	r16,16(sp)
200239e4:	1009883a 	mov	r4,r2
200239e8:	180b883a 	mov	r5,r3
200239ec:	100d883a 	mov	r6,r2
200239f0:	180f883a 	mov	r7,r3
200239f4:	002925c0 	call	2002925c <__adddf3>
200239f8:	9009883a 	mov	r4,r18
200239fc:	980b883a 	mov	r5,r19
20023a00:	100d883a 	mov	r6,r2
20023a04:	180f883a 	mov	r7,r3
20023a08:	1023883a 	mov	r17,r2
20023a0c:	1829883a 	mov	r20,r3
20023a10:	00299280 	call	20029928 <__ltdf2>
20023a14:	10000816 	blt	r2,zero,20023a38 <_dtoa_r+0x918>
20023a18:	9009883a 	mov	r4,r18
20023a1c:	980b883a 	mov	r5,r19
20023a20:	880d883a 	mov	r6,r17
20023a24:	a00f883a 	mov	r7,r20
20023a28:	00298040 	call	20029804 <__nedf2>
20023a2c:	103f5d1e 	bne	r2,zero,200237a4 <__alt_data_end+0xfffe43a4>
20023a30:	ad40004c 	andi	r21,r21,1
20023a34:	a83f5b26 	beq	r21,zero,200237a4 <__alt_data_end+0xfffe43a4>
20023a38:	b53fffc3 	ldbu	r20,-1(r22)
20023a3c:	b0ffff84 	addi	r3,r22,-2
20023a40:	01400e44 	movi	r5,57
20023a44:	00000306 	br	20023a54 <_dtoa_r+0x934>
20023a48:	1d000003 	ldbu	r20,0(r3)
20023a4c:	102d883a 	mov	r22,r2
20023a50:	18ffffc4 	addi	r3,r3,-1
20023a54:	a1003fcc 	andi	r4,r20,255
20023a58:	2100201c 	xori	r4,r4,128
20023a5c:	213fe004 	addi	r4,r4,-128
20023a60:	b0bfffc4 	addi	r2,r22,-1
20023a64:	2142ca1e 	bne	r4,r5,20024590 <_dtoa_r+0x1470>
20023a68:	b8bff71e 	bne	r23,r2,20023a48 <__alt_data_end+0xfffe4648>
20023a6c:	d8800617 	ldw	r2,24(sp)
20023a70:	05000c44 	movi	r20,49
20023a74:	10800044 	addi	r2,r2,1
20023a78:	d8800615 	stw	r2,24(sp)
20023a7c:	00800c04 	movi	r2,48
20023a80:	b8800005 	stb	r2,0(r23)
20023a84:	b805883a 	mov	r2,r23
20023a88:	15000005 	stb	r20,0(r2)
20023a8c:	003f4506 	br	200237a4 <__alt_data_end+0xfffe43a4>
20023a90:	d9c00c17 	ldw	r7,48(sp)
20023a94:	3800c926 	beq	r7,zero,20023dbc <_dtoa_r+0xc9c>
20023a98:	d9c00417 	ldw	r7,16(sp)
20023a9c:	00c00044 	movi	r3,1
20023aa0:	19c16c0e 	bge	r3,r7,20024054 <_dtoa_r+0xf34>
20023aa4:	d9000917 	ldw	r4,36(sp)
20023aa8:	d9c00a17 	ldw	r7,40(sp)
20023aac:	24ffffc4 	addi	r19,r4,-1
20023ab0:	3cc20716 	blt	r7,r19,200242d0 <_dtoa_r+0x11b0>
20023ab4:	3ce7c83a 	sub	r19,r7,r19
20023ab8:	d9c00917 	ldw	r7,36(sp)
20023abc:	3802ae16 	blt	r7,zero,20024578 <_dtoa_r+0x1458>
20023ac0:	dc800817 	ldw	r18,32(sp)
20023ac4:	d8800917 	ldw	r2,36(sp)
20023ac8:	d8c00817 	ldw	r3,32(sp)
20023acc:	d9c00717 	ldw	r7,28(sp)
20023ad0:	8009883a 	mov	r4,r16
20023ad4:	1887883a 	add	r3,r3,r2
20023ad8:	388f883a 	add	r7,r7,r2
20023adc:	01400044 	movi	r5,1
20023ae0:	d8c00815 	stw	r3,32(sp)
20023ae4:	d9c00715 	stw	r7,28(sp)
20023ae8:	00267800 	call	20026780 <__i2b>
20023aec:	102b883a 	mov	r21,r2
20023af0:	90000a26 	beq	r18,zero,20023b1c <_dtoa_r+0x9fc>
20023af4:	d8800717 	ldw	r2,28(sp)
20023af8:	0080080e 	bge	zero,r2,20023b1c <_dtoa_r+0x9fc>
20023afc:	90812b16 	blt	r18,r2,20023fac <_dtoa_r+0xe8c>
20023b00:	d8c00817 	ldw	r3,32(sp)
20023b04:	d9000717 	ldw	r4,28(sp)
20023b08:	90a5c83a 	sub	r18,r18,r2
20023b0c:	1887c83a 	sub	r3,r3,r2
20023b10:	2089c83a 	sub	r4,r4,r2
20023b14:	d8c00815 	stw	r3,32(sp)
20023b18:	d9000715 	stw	r4,28(sp)
20023b1c:	d9c00a17 	ldw	r7,40(sp)
20023b20:	01c0140e 	bge	zero,r7,20023b74 <_dtoa_r+0xa54>
20023b24:	d8800c17 	ldw	r2,48(sp)
20023b28:	1001de26 	beq	r2,zero,200242a4 <_dtoa_r+0x1184>
20023b2c:	04c00e0e 	bge	zero,r19,20023b68 <_dtoa_r+0xa48>
20023b30:	a80b883a 	mov	r5,r21
20023b34:	8009883a 	mov	r4,r16
20023b38:	980d883a 	mov	r6,r19
20023b3c:	002699c0 	call	2002699c <__pow5mult>
20023b40:	e00d883a 	mov	r6,fp
20023b44:	8009883a 	mov	r4,r16
20023b48:	100b883a 	mov	r5,r2
20023b4c:	102b883a 	mov	r21,r2
20023b50:	00267bc0 	call	200267bc <__multiply>
20023b54:	1029883a 	mov	r20,r2
20023b58:	e00b883a 	mov	r5,fp
20023b5c:	8009883a 	mov	r4,r16
20023b60:	00264280 	call	20026428 <_Bfree>
20023b64:	a039883a 	mov	fp,r20
20023b68:	d8c00a17 	ldw	r3,40(sp)
20023b6c:	1ccdc83a 	sub	r6,r3,r19
20023b70:	3001291e 	bne	r6,zero,20024018 <_dtoa_r+0xef8>
20023b74:	8009883a 	mov	r4,r16
20023b78:	01400044 	movi	r5,1
20023b7c:	00267800 	call	20026780 <__i2b>
20023b80:	d9000b17 	ldw	r4,44(sp)
20023b84:	1029883a 	mov	r20,r2
20023b88:	0100050e 	bge	zero,r4,20023ba0 <_dtoa_r+0xa80>
20023b8c:	d9800b17 	ldw	r6,44(sp)
20023b90:	8009883a 	mov	r4,r16
20023b94:	100b883a 	mov	r5,r2
20023b98:	002699c0 	call	2002699c <__pow5mult>
20023b9c:	1029883a 	mov	r20,r2
20023ba0:	d9c00417 	ldw	r7,16(sp)
20023ba4:	00800044 	movi	r2,1
20023ba8:	11c0f00e 	bge	r2,r7,20023f6c <_dtoa_r+0xe4c>
20023bac:	0023883a 	mov	r17,zero
20023bb0:	d8800b17 	ldw	r2,44(sp)
20023bb4:	1001741e 	bne	r2,zero,20024188 <_dtoa_r+0x1068>
20023bb8:	00800044 	movi	r2,1
20023bbc:	d8c00717 	ldw	r3,28(sp)
20023bc0:	10c5883a 	add	r2,r2,r3
20023bc4:	108007cc 	andi	r2,r2,31
20023bc8:	10008026 	beq	r2,zero,20023dcc <_dtoa_r+0xcac>
20023bcc:	01000804 	movi	r4,32
20023bd0:	2089c83a 	sub	r4,r4,r2
20023bd4:	00c00104 	movi	r3,4
20023bd8:	1902d00e 	bge	r3,r4,2002471c <_dtoa_r+0x15fc>
20023bdc:	d9000817 	ldw	r4,32(sp)
20023be0:	d9c00717 	ldw	r7,28(sp)
20023be4:	00c00704 	movi	r3,28
20023be8:	1885c83a 	sub	r2,r3,r2
20023bec:	2089883a 	add	r4,r4,r2
20023bf0:	388f883a 	add	r7,r7,r2
20023bf4:	d9000815 	stw	r4,32(sp)
20023bf8:	90a5883a 	add	r18,r18,r2
20023bfc:	d9c00715 	stw	r7,28(sp)
20023c00:	d9c00817 	ldw	r7,32(sp)
20023c04:	01c0050e 	bge	zero,r7,20023c1c <_dtoa_r+0xafc>
20023c08:	e00b883a 	mov	r5,fp
20023c0c:	8009883a 	mov	r4,r16
20023c10:	380d883a 	mov	r6,r7
20023c14:	0026ac80 	call	20026ac8 <__lshift>
20023c18:	1039883a 	mov	fp,r2
20023c1c:	d8800717 	ldw	r2,28(sp)
20023c20:	0080050e 	bge	zero,r2,20023c38 <_dtoa_r+0xb18>
20023c24:	a00b883a 	mov	r5,r20
20023c28:	8009883a 	mov	r4,r16
20023c2c:	100d883a 	mov	r6,r2
20023c30:	0026ac80 	call	20026ac8 <__lshift>
20023c34:	1029883a 	mov	r20,r2
20023c38:	d8c00d17 	ldw	r3,52(sp)
20023c3c:	1801401e 	bne	r3,zero,20024140 <_dtoa_r+0x1020>
20023c40:	d8800917 	ldw	r2,36(sp)
20023c44:	00815a0e 	bge	zero,r2,200241b0 <_dtoa_r+0x1090>
20023c48:	d8c00c17 	ldw	r3,48(sp)
20023c4c:	18006f1e 	bne	r3,zero,20023e0c <_dtoa_r+0xcec>
20023c50:	b823883a 	mov	r17,r23
20023c54:	dc800917 	ldw	r18,36(sp)
20023c58:	00000206 	br	20023c64 <_dtoa_r+0xb44>
20023c5c:	00264500 	call	20026450 <__multadd>
20023c60:	1039883a 	mov	fp,r2
20023c64:	e009883a 	mov	r4,fp
20023c68:	a00b883a 	mov	r5,r20
20023c6c:	0022f180 	call	20022f18 <quorem>
20023c70:	10800c04 	addi	r2,r2,48
20023c74:	88800005 	stb	r2,0(r17)
20023c78:	8c400044 	addi	r17,r17,1
20023c7c:	8dc7c83a 	sub	r3,r17,r23
20023c80:	8009883a 	mov	r4,r16
20023c84:	e00b883a 	mov	r5,fp
20023c88:	01800284 	movi	r6,10
20023c8c:	000f883a 	mov	r7,zero
20023c90:	1cbff216 	blt	r3,r18,20023c5c <__alt_data_end+0xfffe485c>
20023c94:	dd800917 	ldw	r22,36(sp)
20023c98:	1007883a 	mov	r3,r2
20023c9c:	05823a0e 	bge	zero,r22,20024588 <_dtoa_r+0x1468>
20023ca0:	bdad883a 	add	r22,r23,r22
20023ca4:	0023883a 	mov	r17,zero
20023ca8:	e00b883a 	mov	r5,fp
20023cac:	01800044 	movi	r6,1
20023cb0:	8009883a 	mov	r4,r16
20023cb4:	d8c01515 	stw	r3,84(sp)
20023cb8:	0026ac80 	call	20026ac8 <__lshift>
20023cbc:	1009883a 	mov	r4,r2
20023cc0:	a00b883a 	mov	r5,r20
20023cc4:	1039883a 	mov	fp,r2
20023cc8:	0026c240 	call	20026c24 <__mcmp>
20023ccc:	d8c01517 	ldw	r3,84(sp)
20023cd0:	0080d60e 	bge	zero,r2,2002402c <_dtoa_r+0xf0c>
20023cd4:	b13fffc3 	ldbu	r4,-1(r22)
20023cd8:	b0ffff84 	addi	r3,r22,-2
20023cdc:	01800e44 	movi	r6,57
20023ce0:	00000306 	br	20023cf0 <_dtoa_r+0xbd0>
20023ce4:	19000003 	ldbu	r4,0(r3)
20023ce8:	102d883a 	mov	r22,r2
20023cec:	18ffffc4 	addi	r3,r3,-1
20023cf0:	21403fcc 	andi	r5,r4,255
20023cf4:	2940201c 	xori	r5,r5,128
20023cf8:	297fe004 	addi	r5,r5,-128
20023cfc:	b0bfffc4 	addi	r2,r22,-1
20023d00:	2981a71e 	bne	r5,r6,200243a0 <_dtoa_r+0x1280>
20023d04:	b8bff71e 	bne	r23,r2,20023ce4 <__alt_data_end+0xfffe48e4>
20023d08:	d8800617 	ldw	r2,24(sp)
20023d0c:	10800044 	addi	r2,r2,1
20023d10:	d8800615 	stw	r2,24(sp)
20023d14:	00800c44 	movi	r2,49
20023d18:	b8800005 	stb	r2,0(r23)
20023d1c:	8009883a 	mov	r4,r16
20023d20:	a00b883a 	mov	r5,r20
20023d24:	00264280 	call	20026428 <_Bfree>
20023d28:	a83e9e26 	beq	r21,zero,200237a4 <__alt_data_end+0xfffe43a4>
20023d2c:	88000426 	beq	r17,zero,20023d40 <_dtoa_r+0xc20>
20023d30:	8d400326 	beq	r17,r21,20023d40 <_dtoa_r+0xc20>
20023d34:	8009883a 	mov	r4,r16
20023d38:	880b883a 	mov	r5,r17
20023d3c:	00264280 	call	20026428 <_Bfree>
20023d40:	8009883a 	mov	r4,r16
20023d44:	a80b883a 	mov	r5,r21
20023d48:	00264280 	call	20026428 <_Bfree>
20023d4c:	003e9506 	br	200237a4 <__alt_data_end+0xfffe43a4>
20023d50:	00c00044 	movi	r3,1
20023d54:	d8c00d15 	stw	r3,52(sp)
20023d58:	003d9f06 	br	200233d8 <__alt_data_end+0xfffe3fd8>
20023d5c:	d9000817 	ldw	r4,32(sp)
20023d60:	d8800617 	ldw	r2,24(sp)
20023d64:	d8000b15 	stw	zero,44(sp)
20023d68:	2089c83a 	sub	r4,r4,r2
20023d6c:	0087c83a 	sub	r3,zero,r2
20023d70:	d9000815 	stw	r4,32(sp)
20023d74:	d8c00a15 	stw	r3,40(sp)
20023d78:	003da306 	br	20023408 <__alt_data_end+0xfffe4008>
20023d7c:	0529c83a 	sub	r20,zero,r20
20023d80:	dd000815 	stw	r20,32(sp)
20023d84:	d8000715 	stw	zero,28(sp)
20023d88:	003d9806 	br	200233ec <__alt_data_end+0xfffe3fec>
20023d8c:	d9000617 	ldw	r4,24(sp)
20023d90:	00299840 	call	20029984 <__floatsidf>
20023d94:	1009883a 	mov	r4,r2
20023d98:	180b883a 	mov	r5,r3
20023d9c:	980d883a 	mov	r6,r19
20023da0:	900f883a 	mov	r7,r18
20023da4:	00297a80 	call	200297a8 <__eqdf2>
20023da8:	103d7a26 	beq	r2,zero,20023394 <__alt_data_end+0xfffe3f94>
20023dac:	d8800617 	ldw	r2,24(sp)
20023db0:	10bfffc4 	addi	r2,r2,-1
20023db4:	d8800615 	stw	r2,24(sp)
20023db8:	003d7606 	br	20023394 <__alt_data_end+0xfffe3f94>
20023dbc:	dcc00a17 	ldw	r19,40(sp)
20023dc0:	dc800817 	ldw	r18,32(sp)
20023dc4:	002b883a 	mov	r21,zero
20023dc8:	003f4906 	br	20023af0 <__alt_data_end+0xfffe46f0>
20023dcc:	00800704 	movi	r2,28
20023dd0:	d8c00817 	ldw	r3,32(sp)
20023dd4:	d9000717 	ldw	r4,28(sp)
20023dd8:	90a5883a 	add	r18,r18,r2
20023ddc:	1887883a 	add	r3,r3,r2
20023de0:	2089883a 	add	r4,r4,r2
20023de4:	d8c00815 	stw	r3,32(sp)
20023de8:	d9000715 	stw	r4,28(sp)
20023dec:	003f8406 	br	20023c00 <__alt_data_end+0xfffe4800>
20023df0:	d9c00317 	ldw	r7,12(sp)
20023df4:	013efb84 	movi	r4,-1042
20023df8:	2509c83a 	sub	r4,r4,r20
20023dfc:	3908983a 	sll	r4,r7,r4
20023e00:	003d3006 	br	200232c4 <__alt_data_end+0xfffe3ec4>
20023e04:	d8000d15 	stw	zero,52(sp)
20023e08:	003d7306 	br	200233d8 <__alt_data_end+0xfffe3fd8>
20023e0c:	0480050e 	bge	zero,r18,20023e24 <_dtoa_r+0xd04>
20023e10:	a80b883a 	mov	r5,r21
20023e14:	8009883a 	mov	r4,r16
20023e18:	900d883a 	mov	r6,r18
20023e1c:	0026ac80 	call	20026ac8 <__lshift>
20023e20:	102b883a 	mov	r21,r2
20023e24:	8801611e 	bne	r17,zero,200243ac <_dtoa_r+0x128c>
20023e28:	a827883a 	mov	r19,r21
20023e2c:	d8c00317 	ldw	r3,12(sp)
20023e30:	d9000917 	ldw	r4,36(sp)
20023e34:	b8bfffc4 	addi	r2,r23,-1
20023e38:	18c0004c 	andi	r3,r3,1
20023e3c:	1105883a 	add	r2,r2,r4
20023e40:	b825883a 	mov	r18,r23
20023e44:	d8800515 	stw	r2,20(sp)
20023e48:	a823883a 	mov	r17,r21
20023e4c:	d8c00315 	stw	r3,12(sp)
20023e50:	ddc00715 	stw	r23,28(sp)
20023e54:	e009883a 	mov	r4,fp
20023e58:	a00b883a 	mov	r5,r20
20023e5c:	0022f180 	call	20022f18 <quorem>
20023e60:	e009883a 	mov	r4,fp
20023e64:	880b883a 	mov	r5,r17
20023e68:	102d883a 	mov	r22,r2
20023e6c:	0026c240 	call	20026c24 <__mcmp>
20023e70:	980d883a 	mov	r6,r19
20023e74:	8009883a 	mov	r4,r16
20023e78:	a00b883a 	mov	r5,r20
20023e7c:	102b883a 	mov	r21,r2
20023e80:	0026c7c0 	call	20026c7c <__mdiff>
20023e84:	100d883a 	mov	r6,r2
20023e88:	10800317 	ldw	r2,12(r2)
20023e8c:	b5c00c04 	addi	r23,r22,48
20023e90:	10008c26 	beq	r2,zero,200240c4 <_dtoa_r+0xfa4>
20023e94:	8009883a 	mov	r4,r16
20023e98:	300b883a 	mov	r5,r6
20023e9c:	00264280 	call	20026428 <_Bfree>
20023ea0:	00800044 	movi	r2,1
20023ea4:	a8007116 	blt	r21,zero,2002406c <_dtoa_r+0xf4c>
20023ea8:	a800041e 	bne	r21,zero,20023ebc <_dtoa_r+0xd9c>
20023eac:	d9c00417 	ldw	r7,16(sp)
20023eb0:	3800021e 	bne	r7,zero,20023ebc <_dtoa_r+0xd9c>
20023eb4:	d8c00317 	ldw	r3,12(sp)
20023eb8:	18006c26 	beq	r3,zero,2002406c <_dtoa_r+0xf4c>
20023ebc:	00814c16 	blt	zero,r2,200243f0 <_dtoa_r+0x12d0>
20023ec0:	d8c00517 	ldw	r3,20(sp)
20023ec4:	95400044 	addi	r21,r18,1
20023ec8:	95c00005 	stb	r23,0(r18)
20023ecc:	a82d883a 	mov	r22,r21
20023ed0:	90c14d26 	beq	r18,r3,20024408 <_dtoa_r+0x12e8>
20023ed4:	e00b883a 	mov	r5,fp
20023ed8:	8009883a 	mov	r4,r16
20023edc:	01800284 	movi	r6,10
20023ee0:	000f883a 	mov	r7,zero
20023ee4:	00264500 	call	20026450 <__multadd>
20023ee8:	1039883a 	mov	fp,r2
20023eec:	8cc08b26 	beq	r17,r19,2002411c <_dtoa_r+0xffc>
20023ef0:	880b883a 	mov	r5,r17
20023ef4:	01800284 	movi	r6,10
20023ef8:	000f883a 	mov	r7,zero
20023efc:	8009883a 	mov	r4,r16
20023f00:	00264500 	call	20026450 <__multadd>
20023f04:	980b883a 	mov	r5,r19
20023f08:	8009883a 	mov	r4,r16
20023f0c:	01800284 	movi	r6,10
20023f10:	000f883a 	mov	r7,zero
20023f14:	1023883a 	mov	r17,r2
20023f18:	00264500 	call	20026450 <__multadd>
20023f1c:	1027883a 	mov	r19,r2
20023f20:	a825883a 	mov	r18,r21
20023f24:	003fcb06 	br	20023e54 <__alt_data_end+0xfffe4a54>
20023f28:	d9c00417 	ldw	r7,16(sp)
20023f2c:	00800104 	movi	r2,4
20023f30:	3880e426 	beq	r7,r2,200242c4 <_dtoa_r+0x11a4>
20023f34:	00800144 	movi	r2,5
20023f38:	38be3c1e 	bne	r7,r2,2002382c <__alt_data_end+0xfffe442c>
20023f3c:	00c00044 	movi	r3,1
20023f40:	d8c00c15 	stw	r3,48(sp)
20023f44:	d9c02117 	ldw	r7,132(sp)
20023f48:	d8800617 	ldw	r2,24(sp)
20023f4c:	388f883a 	add	r7,r7,r2
20023f50:	3c800044 	addi	r18,r7,1
20023f54:	d9c00e15 	stw	r7,56(sp)
20023f58:	dc800915 	stw	r18,36(sp)
20023f5c:	04bd3e16 	blt	zero,r18,20023458 <__alt_data_end+0xfffe4058>
20023f60:	80001115 	stw	zero,68(r16)
20023f64:	000b883a 	mov	r5,zero
20023f68:	003d4606 	br	20023484 <__alt_data_end+0xfffe4084>
20023f6c:	d8c00317 	ldw	r3,12(sp)
20023f70:	183f0e1e 	bne	r3,zero,20023bac <__alt_data_end+0xfffe47ac>
20023f74:	00c00434 	movhi	r3,16
20023f78:	18ffffc4 	addi	r3,r3,-1
20023f7c:	88c6703a 	and	r3,r17,r3
20023f80:	183f0a1e 	bne	r3,zero,20023bac <__alt_data_end+0xfffe47ac>
20023f84:	8c5ffc2c 	andhi	r17,r17,32752
20023f88:	883f0826 	beq	r17,zero,20023bac <__alt_data_end+0xfffe47ac>
20023f8c:	d9000817 	ldw	r4,32(sp)
20023f90:	d9c00717 	ldw	r7,28(sp)
20023f94:	1023883a 	mov	r17,r2
20023f98:	2089883a 	add	r4,r4,r2
20023f9c:	388f883a 	add	r7,r7,r2
20023fa0:	d9000815 	stw	r4,32(sp)
20023fa4:	d9c00715 	stw	r7,28(sp)
20023fa8:	003f0106 	br	20023bb0 <__alt_data_end+0xfffe47b0>
20023fac:	9005883a 	mov	r2,r18
20023fb0:	003ed306 	br	20023b00 <__alt_data_end+0xfffe4700>
20023fb4:	d8800917 	ldw	r2,36(sp)
20023fb8:	00be3516 	blt	zero,r2,20023890 <__alt_data_end+0xfffe4490>
20023fbc:	1000b61e 	bne	r2,zero,20024298 <_dtoa_r+0x1178>
20023fc0:	9009883a 	mov	r4,r18
20023fc4:	980b883a 	mov	r5,r19
20023fc8:	000d883a 	mov	r6,zero
20023fcc:	01d00534 	movhi	r7,16404
20023fd0:	00293100 	call	20029310 <__muldf3>
20023fd4:	d9800317 	ldw	r6,12(sp)
20023fd8:	1009883a 	mov	r4,r2
20023fdc:	180b883a 	mov	r5,r3
20023fe0:	880f883a 	mov	r7,r17
20023fe4:	00298c40 	call	200298c4 <__gedf2>
20023fe8:	0029883a 	mov	r20,zero
20023fec:	002b883a 	mov	r21,zero
20023ff0:	10007e16 	blt	r2,zero,200241ec <_dtoa_r+0x10cc>
20023ff4:	d8802117 	ldw	r2,132(sp)
20023ff8:	b82d883a 	mov	r22,r23
20023ffc:	0084303a 	nor	r2,zero,r2
20024000:	d8800615 	stw	r2,24(sp)
20024004:	8009883a 	mov	r4,r16
20024008:	a00b883a 	mov	r5,r20
2002400c:	00264280 	call	20026428 <_Bfree>
20024010:	a83f4b1e 	bne	r21,zero,20023d40 <__alt_data_end+0xfffe4940>
20024014:	003de306 	br	200237a4 <__alt_data_end+0xfffe43a4>
20024018:	e00b883a 	mov	r5,fp
2002401c:	8009883a 	mov	r4,r16
20024020:	002699c0 	call	2002699c <__pow5mult>
20024024:	1039883a 	mov	fp,r2
20024028:	003ed206 	br	20023b74 <__alt_data_end+0xfffe4774>
2002402c:	1000021e 	bne	r2,zero,20024038 <_dtoa_r+0xf18>
20024030:	18c0004c 	andi	r3,r3,1
20024034:	183f271e 	bne	r3,zero,20023cd4 <__alt_data_end+0xfffe48d4>
20024038:	01000c04 	movi	r4,48
2002403c:	00000106 	br	20024044 <_dtoa_r+0xf24>
20024040:	102d883a 	mov	r22,r2
20024044:	b0bfffc4 	addi	r2,r22,-1
20024048:	10c00007 	ldb	r3,0(r2)
2002404c:	193ffc26 	beq	r3,r4,20024040 <__alt_data_end+0xfffe4c40>
20024050:	003f3206 	br	20023d1c <__alt_data_end+0xfffe491c>
20024054:	d8c00f17 	ldw	r3,60(sp)
20024058:	18015026 	beq	r3,zero,2002459c <_dtoa_r+0x147c>
2002405c:	10810cc4 	addi	r2,r2,1075
20024060:	dcc00a17 	ldw	r19,40(sp)
20024064:	dc800817 	ldw	r18,32(sp)
20024068:	003e9706 	br	20023ac8 <__alt_data_end+0xfffe46c8>
2002406c:	b807883a 	mov	r3,r23
20024070:	182b883a 	mov	r21,r3
20024074:	ddc00717 	ldw	r23,28(sp)
20024078:	00800e0e 	bge	zero,r2,200240b4 <_dtoa_r+0xf94>
2002407c:	e00b883a 	mov	r5,fp
20024080:	01800044 	movi	r6,1
20024084:	8009883a 	mov	r4,r16
20024088:	d8c01515 	stw	r3,84(sp)
2002408c:	0026ac80 	call	20026ac8 <__lshift>
20024090:	1009883a 	mov	r4,r2
20024094:	a00b883a 	mov	r5,r20
20024098:	1039883a 	mov	fp,r2
2002409c:	0026c240 	call	20026c24 <__mcmp>
200240a0:	d8c01517 	ldw	r3,84(sp)
200240a4:	0081880e 	bge	zero,r2,200246c8 <_dtoa_r+0x15a8>
200240a8:	00800e44 	movi	r2,57
200240ac:	b0c00c44 	addi	r3,r22,49
200240b0:	a8816326 	beq	r21,r2,20024640 <_dtoa_r+0x1520>
200240b4:	90c00005 	stb	r3,0(r18)
200240b8:	95800044 	addi	r22,r18,1
200240bc:	982b883a 	mov	r21,r19
200240c0:	003f1606 	br	20023d1c <__alt_data_end+0xfffe491c>
200240c4:	300b883a 	mov	r5,r6
200240c8:	e009883a 	mov	r4,fp
200240cc:	d9801515 	stw	r6,84(sp)
200240d0:	0026c240 	call	20026c24 <__mcmp>
200240d4:	d9801517 	ldw	r6,84(sp)
200240d8:	8009883a 	mov	r4,r16
200240dc:	d8801515 	stw	r2,84(sp)
200240e0:	300b883a 	mov	r5,r6
200240e4:	00264280 	call	20026428 <_Bfree>
200240e8:	d8801517 	ldw	r2,84(sp)
200240ec:	103f6d1e 	bne	r2,zero,20023ea4 <__alt_data_end+0xfffe4aa4>
200240f0:	d9c00417 	ldw	r7,16(sp)
200240f4:	383f6b1e 	bne	r7,zero,20023ea4 <__alt_data_end+0xfffe4aa4>
200240f8:	d8c00317 	ldw	r3,12(sp)
200240fc:	183f691e 	bne	r3,zero,20023ea4 <__alt_data_end+0xfffe4aa4>
20024100:	b807883a 	mov	r3,r23
20024104:	00800e44 	movi	r2,57
20024108:	ddc00717 	ldw	r23,28(sp)
2002410c:	18814c26 	beq	r3,r2,20024640 <_dtoa_r+0x1520>
20024110:	057fe80e 	bge	zero,r21,200240b4 <__alt_data_end+0xfffe4cb4>
20024114:	b0c00c44 	addi	r3,r22,49
20024118:	003fe606 	br	200240b4 <__alt_data_end+0xfffe4cb4>
2002411c:	880b883a 	mov	r5,r17
20024120:	8009883a 	mov	r4,r16
20024124:	01800284 	movi	r6,10
20024128:	000f883a 	mov	r7,zero
2002412c:	00264500 	call	20026450 <__multadd>
20024130:	1023883a 	mov	r17,r2
20024134:	1027883a 	mov	r19,r2
20024138:	a825883a 	mov	r18,r21
2002413c:	003f4506 	br	20023e54 <__alt_data_end+0xfffe4a54>
20024140:	e009883a 	mov	r4,fp
20024144:	a00b883a 	mov	r5,r20
20024148:	0026c240 	call	20026c24 <__mcmp>
2002414c:	103ebc0e 	bge	r2,zero,20023c40 <__alt_data_end+0xfffe4840>
20024150:	e00b883a 	mov	r5,fp
20024154:	8009883a 	mov	r4,r16
20024158:	01800284 	movi	r6,10
2002415c:	000f883a 	mov	r7,zero
20024160:	00264500 	call	20026450 <__multadd>
20024164:	1039883a 	mov	fp,r2
20024168:	d8800617 	ldw	r2,24(sp)
2002416c:	d8c00c17 	ldw	r3,48(sp)
20024170:	10bfffc4 	addi	r2,r2,-1
20024174:	d8800615 	stw	r2,24(sp)
20024178:	1801571e 	bne	r3,zero,200246d8 <_dtoa_r+0x15b8>
2002417c:	d9c00e17 	ldw	r7,56(sp)
20024180:	d9c00915 	stw	r7,36(sp)
20024184:	003eae06 	br	20023c40 <__alt_data_end+0xfffe4840>
20024188:	a0800417 	ldw	r2,16(r20)
2002418c:	10800104 	addi	r2,r2,4
20024190:	1085883a 	add	r2,r2,r2
20024194:	1085883a 	add	r2,r2,r2
20024198:	a085883a 	add	r2,r20,r2
2002419c:	11000017 	ldw	r4,0(r2)
200241a0:	00266680 	call	20026668 <__hi0bits>
200241a4:	00c00804 	movi	r3,32
200241a8:	1885c83a 	sub	r2,r3,r2
200241ac:	003e8306 	br	20023bbc <__alt_data_end+0xfffe47bc>
200241b0:	d9c00417 	ldw	r7,16(sp)
200241b4:	00800084 	movi	r2,2
200241b8:	11fea30e 	bge	r2,r7,20023c48 <__alt_data_end+0xfffe4848>
200241bc:	d8800917 	ldw	r2,36(sp)
200241c0:	103f8c1e 	bne	r2,zero,20023ff4 <__alt_data_end+0xfffe4bf4>
200241c4:	a00b883a 	mov	r5,r20
200241c8:	8009883a 	mov	r4,r16
200241cc:	01800144 	movi	r6,5
200241d0:	000f883a 	mov	r7,zero
200241d4:	00264500 	call	20026450 <__multadd>
200241d8:	e009883a 	mov	r4,fp
200241dc:	100b883a 	mov	r5,r2
200241e0:	1029883a 	mov	r20,r2
200241e4:	0026c240 	call	20026c24 <__mcmp>
200241e8:	00bf820e 	bge	zero,r2,20023ff4 <__alt_data_end+0xfffe4bf4>
200241ec:	00800c44 	movi	r2,49
200241f0:	b8800005 	stb	r2,0(r23)
200241f4:	d8800617 	ldw	r2,24(sp)
200241f8:	bd800044 	addi	r22,r23,1
200241fc:	10800044 	addi	r2,r2,1
20024200:	d8800615 	stw	r2,24(sp)
20024204:	003f7f06 	br	20024004 <__alt_data_end+0xfffe4c04>
20024208:	dc000417 	ldw	r16,16(sp)
2002420c:	003d6506 	br	200237a4 <__alt_data_end+0xfffe43a4>
20024210:	9009883a 	mov	r4,r18
20024214:	00299840 	call	20029984 <__floatsidf>
20024218:	1009883a 	mov	r4,r2
2002421c:	180b883a 	mov	r5,r3
20024220:	980d883a 	mov	r6,r19
20024224:	a00f883a 	mov	r7,r20
20024228:	00293100 	call	20029310 <__muldf3>
2002422c:	1009883a 	mov	r4,r2
20024230:	180b883a 	mov	r5,r3
20024234:	000d883a 	mov	r6,zero
20024238:	01d00734 	movhi	r7,16412
2002423c:	002925c0 	call	2002925c <__adddf3>
20024240:	057f3034 	movhi	r21,64704
20024244:	1025883a 	mov	r18,r2
20024248:	1d6b883a 	add	r21,r3,r21
2002424c:	9809883a 	mov	r4,r19
20024250:	a00b883a 	mov	r5,r20
20024254:	000d883a 	mov	r6,zero
20024258:	01d00534 	movhi	r7,16404
2002425c:	00292b00 	call	200292b0 <__subdf3>
20024260:	1009883a 	mov	r4,r2
20024264:	180b883a 	mov	r5,r3
20024268:	900d883a 	mov	r6,r18
2002426c:	a80f883a 	mov	r7,r21
20024270:	1027883a 	mov	r19,r2
20024274:	1829883a 	mov	r20,r3
20024278:	00298600 	call	20029860 <__gtdf2>
2002427c:	00806616 	blt	zero,r2,20024418 <_dtoa_r+0x12f8>
20024280:	a9e0003c 	xorhi	r7,r21,32768
20024284:	9809883a 	mov	r4,r19
20024288:	a00b883a 	mov	r5,r20
2002428c:	900d883a 	mov	r6,r18
20024290:	00299280 	call	20029928 <__ltdf2>
20024294:	103d710e 	bge	r2,zero,2002385c <__alt_data_end+0xfffe445c>
20024298:	0029883a 	mov	r20,zero
2002429c:	002b883a 	mov	r21,zero
200242a0:	003f5406 	br	20023ff4 <__alt_data_end+0xfffe4bf4>
200242a4:	d9800a17 	ldw	r6,40(sp)
200242a8:	e00b883a 	mov	r5,fp
200242ac:	8009883a 	mov	r4,r16
200242b0:	002699c0 	call	2002699c <__pow5mult>
200242b4:	1039883a 	mov	fp,r2
200242b8:	003e2e06 	br	20023b74 <__alt_data_end+0xfffe4774>
200242bc:	d8000c15 	stw	zero,48(sp)
200242c0:	003f2006 	br	20023f44 <__alt_data_end+0xfffe4b44>
200242c4:	00800044 	movi	r2,1
200242c8:	d8800c15 	stw	r2,48(sp)
200242cc:	003c5d06 	br	20023444 <__alt_data_end+0xfffe4044>
200242d0:	d8c00a17 	ldw	r3,40(sp)
200242d4:	d9000b17 	ldw	r4,44(sp)
200242d8:	dcc00a15 	stw	r19,40(sp)
200242dc:	98c5c83a 	sub	r2,r19,r3
200242e0:	2089883a 	add	r4,r4,r2
200242e4:	d9000b15 	stw	r4,44(sp)
200242e8:	0027883a 	mov	r19,zero
200242ec:	003df206 	br	20023ab8 <__alt_data_end+0xfffe46b8>
200242f0:	d9000317 	ldw	r4,12(sp)
200242f4:	8829883a 	mov	r20,r17
200242f8:	04800084 	movi	r18,2
200242fc:	d9001015 	stw	r4,64(sp)
20024300:	003c8106 	br	20023508 <__alt_data_end+0xfffe4108>
20024304:	04800044 	movi	r18,1
20024308:	dc800e15 	stw	r18,56(sp)
2002430c:	dc800915 	stw	r18,36(sp)
20024310:	dc802115 	stw	r18,132(sp)
20024314:	003f1206 	br	20023f60 <__alt_data_end+0xfffe4b60>
20024318:	d8800617 	ldw	r2,24(sp)
2002431c:	00abc83a 	sub	r21,zero,r2
20024320:	a800a426 	beq	r21,zero,200245b4 <_dtoa_r+0x1494>
20024324:	a88003cc 	andi	r2,r21,15
20024328:	100490fa 	slli	r2,r2,3
2002432c:	00c800f4 	movhi	r3,8195
20024330:	18f34a04 	addi	r3,r3,-13016
20024334:	d9000317 	ldw	r4,12(sp)
20024338:	1885883a 	add	r2,r3,r2
2002433c:	11800017 	ldw	r6,0(r2)
20024340:	11c00117 	ldw	r7,4(r2)
20024344:	a82bd13a 	srai	r21,r21,4
20024348:	880b883a 	mov	r5,r17
2002434c:	00293100 	call	20029310 <__muldf3>
20024350:	1027883a 	mov	r19,r2
20024354:	1829883a 	mov	r20,r3
20024358:	a800e826 	beq	r21,zero,200246fc <_dtoa_r+0x15dc>
2002435c:	058800f4 	movhi	r22,8195
20024360:	b5b34004 	addi	r22,r22,-13056
20024364:	04800084 	movi	r18,2
20024368:	a980004c 	andi	r6,r21,1
2002436c:	1009883a 	mov	r4,r2
20024370:	a82bd07a 	srai	r21,r21,1
20024374:	180b883a 	mov	r5,r3
20024378:	30000426 	beq	r6,zero,2002438c <_dtoa_r+0x126c>
2002437c:	b1800017 	ldw	r6,0(r22)
20024380:	b1c00117 	ldw	r7,4(r22)
20024384:	94800044 	addi	r18,r18,1
20024388:	00293100 	call	20029310 <__muldf3>
2002438c:	b5800204 	addi	r22,r22,8
20024390:	a83ff51e 	bne	r21,zero,20024368 <__alt_data_end+0xfffe4f68>
20024394:	1027883a 	mov	r19,r2
20024398:	1829883a 	mov	r20,r3
2002439c:	003c7306 	br	2002356c <__alt_data_end+0xfffe416c>
200243a0:	21000044 	addi	r4,r4,1
200243a4:	11000005 	stb	r4,0(r2)
200243a8:	003e5c06 	br	20023d1c <__alt_data_end+0xfffe491c>
200243ac:	a9400117 	ldw	r5,4(r21)
200243b0:	8009883a 	mov	r4,r16
200243b4:	00263800 	call	20026380 <_Balloc>
200243b8:	a9800417 	ldw	r6,16(r21)
200243bc:	11000304 	addi	r4,r2,12
200243c0:	a9400304 	addi	r5,r21,12
200243c4:	31800084 	addi	r6,r6,2
200243c8:	318d883a 	add	r6,r6,r6
200243cc:	318d883a 	add	r6,r6,r6
200243d0:	1023883a 	mov	r17,r2
200243d4:	0020c300 	call	20020c30 <memcpy>
200243d8:	8009883a 	mov	r4,r16
200243dc:	880b883a 	mov	r5,r17
200243e0:	01800044 	movi	r6,1
200243e4:	0026ac80 	call	20026ac8 <__lshift>
200243e8:	1027883a 	mov	r19,r2
200243ec:	003e8f06 	br	20023e2c <__alt_data_end+0xfffe4a2c>
200243f0:	b807883a 	mov	r3,r23
200243f4:	00800e44 	movi	r2,57
200243f8:	ddc00717 	ldw	r23,28(sp)
200243fc:	18809026 	beq	r3,r2,20024640 <_dtoa_r+0x1520>
20024400:	18c00044 	addi	r3,r3,1
20024404:	003f2b06 	br	200240b4 <__alt_data_end+0xfffe4cb4>
20024408:	b807883a 	mov	r3,r23
2002440c:	982b883a 	mov	r21,r19
20024410:	ddc00717 	ldw	r23,28(sp)
20024414:	003e2406 	br	20023ca8 <__alt_data_end+0xfffe48a8>
20024418:	0029883a 	mov	r20,zero
2002441c:	002b883a 	mov	r21,zero
20024420:	003f7206 	br	200241ec <__alt_data_end+0xfffe4dec>
20024424:	593fffc4 	addi	r4,r11,-1
20024428:	200490fa 	slli	r2,r4,3
2002442c:	00c800f4 	movhi	r3,8195
20024430:	18f34a04 	addi	r3,r3,-13016
20024434:	d9001015 	stw	r4,64(sp)
20024438:	1885883a 	add	r2,r3,r2
2002443c:	11000017 	ldw	r4,0(r2)
20024440:	11400117 	ldw	r5,4(r2)
20024444:	900d883a 	mov	r6,r18
20024448:	a80f883a 	mov	r7,r21
2002444c:	dac01615 	stw	r11,88(sp)
20024450:	00293100 	call	20029310 <__muldf3>
20024454:	a00b883a 	mov	r5,r20
20024458:	9809883a 	mov	r4,r19
2002445c:	d8c01215 	stw	r3,72(sp)
20024460:	d8801115 	stw	r2,68(sp)
20024464:	0029a580 	call	20029a58 <__fixdfsi>
20024468:	1009883a 	mov	r4,r2
2002446c:	1025883a 	mov	r18,r2
20024470:	00299840 	call	20029984 <__floatsidf>
20024474:	9809883a 	mov	r4,r19
20024478:	a00b883a 	mov	r5,r20
2002447c:	100d883a 	mov	r6,r2
20024480:	180f883a 	mov	r7,r3
20024484:	94800c04 	addi	r18,r18,48
20024488:	00292b00 	call	200292b0 <__subdf3>
2002448c:	bc800005 	stb	r18,0(r23)
20024490:	dac01617 	ldw	r11,88(sp)
20024494:	102b883a 	mov	r21,r2
20024498:	00800044 	movi	r2,1
2002449c:	bd800044 	addi	r22,r23,1
200244a0:	1815883a 	mov	r10,r3
200244a4:	58802226 	beq	r11,r2,20024530 <_dtoa_r+0x1410>
200244a8:	bad7883a 	add	r11,r23,r11
200244ac:	dc001415 	stw	r16,80(sp)
200244b0:	a805883a 	mov	r2,r21
200244b4:	b027883a 	mov	r19,r22
200244b8:	5821883a 	mov	r16,r11
200244bc:	882b883a 	mov	r21,r17
200244c0:	000d883a 	mov	r6,zero
200244c4:	01d00934 	movhi	r7,16420
200244c8:	1009883a 	mov	r4,r2
200244cc:	180b883a 	mov	r5,r3
200244d0:	00293100 	call	20029310 <__muldf3>
200244d4:	180b883a 	mov	r5,r3
200244d8:	1009883a 	mov	r4,r2
200244dc:	1829883a 	mov	r20,r3
200244e0:	1023883a 	mov	r17,r2
200244e4:	0029a580 	call	20029a58 <__fixdfsi>
200244e8:	1009883a 	mov	r4,r2
200244ec:	1025883a 	mov	r18,r2
200244f0:	00299840 	call	20029984 <__floatsidf>
200244f4:	8809883a 	mov	r4,r17
200244f8:	a00b883a 	mov	r5,r20
200244fc:	100d883a 	mov	r6,r2
20024500:	180f883a 	mov	r7,r3
20024504:	94800c04 	addi	r18,r18,48
20024508:	00292b00 	call	200292b0 <__subdf3>
2002450c:	9cc00044 	addi	r19,r19,1
20024510:	9cbfffc5 	stb	r18,-1(r19)
20024514:	9c3fea1e 	bne	r19,r16,200244c0 <__alt_data_end+0xfffe50c0>
20024518:	1815883a 	mov	r10,r3
2002451c:	d8c01017 	ldw	r3,64(sp)
20024520:	dc001417 	ldw	r16,80(sp)
20024524:	a823883a 	mov	r17,r21
20024528:	b0ed883a 	add	r22,r22,r3
2002452c:	102b883a 	mov	r21,r2
20024530:	d9001117 	ldw	r4,68(sp)
20024534:	d9401217 	ldw	r5,72(sp)
20024538:	000d883a 	mov	r6,zero
2002453c:	01cff834 	movhi	r7,16352
20024540:	da801515 	stw	r10,84(sp)
20024544:	002925c0 	call	2002925c <__adddf3>
20024548:	da801517 	ldw	r10,84(sp)
2002454c:	1009883a 	mov	r4,r2
20024550:	180b883a 	mov	r5,r3
20024554:	500f883a 	mov	r7,r10
20024558:	a80d883a 	mov	r6,r21
2002455c:	00299280 	call	20029928 <__ltdf2>
20024560:	da801517 	ldw	r10,84(sp)
20024564:	10003b0e 	bge	r2,zero,20024654 <_dtoa_r+0x1534>
20024568:	d9c01317 	ldw	r7,76(sp)
2002456c:	b53fffc3 	ldbu	r20,-1(r22)
20024570:	d9c00615 	stw	r7,24(sp)
20024574:	003d3106 	br	20023a3c <__alt_data_end+0xfffe463c>
20024578:	d8800817 	ldw	r2,32(sp)
2002457c:	11e5c83a 	sub	r18,r2,r7
20024580:	0005883a 	mov	r2,zero
20024584:	003d5006 	br	20023ac8 <__alt_data_end+0xfffe46c8>
20024588:	05800044 	movi	r22,1
2002458c:	003dc406 	br	20023ca0 <__alt_data_end+0xfffe48a0>
20024590:	a5000044 	addi	r20,r20,1
20024594:	15000005 	stb	r20,0(r2)
20024598:	003c8206 	br	200237a4 <__alt_data_end+0xfffe43a4>
2002459c:	d8800217 	ldw	r2,8(sp)
200245a0:	00c00d84 	movi	r3,54
200245a4:	dcc00a17 	ldw	r19,40(sp)
200245a8:	1885c83a 	sub	r2,r3,r2
200245ac:	dc800817 	ldw	r18,32(sp)
200245b0:	003d4506 	br	20023ac8 <__alt_data_end+0xfffe46c8>
200245b4:	dcc00317 	ldw	r19,12(sp)
200245b8:	8829883a 	mov	r20,r17
200245bc:	04800084 	movi	r18,2
200245c0:	003bea06 	br	2002356c <__alt_data_end+0xfffe416c>
200245c4:	d9000917 	ldw	r4,36(sp)
200245c8:	203f1126 	beq	r4,zero,20024210 <__alt_data_end+0xfffe4e10>
200245cc:	d9c00e17 	ldw	r7,56(sp)
200245d0:	01fca20e 	bge	zero,r7,2002385c <__alt_data_end+0xfffe445c>
200245d4:	a00b883a 	mov	r5,r20
200245d8:	9809883a 	mov	r4,r19
200245dc:	000d883a 	mov	r6,zero
200245e0:	01d00934 	movhi	r7,16420
200245e4:	00293100 	call	20029310 <__muldf3>
200245e8:	91000044 	addi	r4,r18,1
200245ec:	1027883a 	mov	r19,r2
200245f0:	1829883a 	mov	r20,r3
200245f4:	00299840 	call	20029984 <__floatsidf>
200245f8:	9809883a 	mov	r4,r19
200245fc:	a00b883a 	mov	r5,r20
20024600:	100d883a 	mov	r6,r2
20024604:	180f883a 	mov	r7,r3
20024608:	00293100 	call	20029310 <__muldf3>
2002460c:	1009883a 	mov	r4,r2
20024610:	180b883a 	mov	r5,r3
20024614:	000d883a 	mov	r6,zero
20024618:	01d00734 	movhi	r7,16412
2002461c:	002925c0 	call	2002925c <__adddf3>
20024620:	1025883a 	mov	r18,r2
20024624:	d8800617 	ldw	r2,24(sp)
20024628:	057f3034 	movhi	r21,64704
2002462c:	1d6b883a 	add	r21,r3,r21
20024630:	10bfffc4 	addi	r2,r2,-1
20024634:	d8801315 	stw	r2,76(sp)
20024638:	dac00e17 	ldw	r11,56(sp)
2002463c:	003be706 	br	200235dc <__alt_data_end+0xfffe41dc>
20024640:	01000e44 	movi	r4,57
20024644:	91000005 	stb	r4,0(r18)
20024648:	95800044 	addi	r22,r18,1
2002464c:	982b883a 	mov	r21,r19
20024650:	003da106 	br	20023cd8 <__alt_data_end+0xfffe48d8>
20024654:	d9801117 	ldw	r6,68(sp)
20024658:	d9c01217 	ldw	r7,72(sp)
2002465c:	0009883a 	mov	r4,zero
20024660:	014ff834 	movhi	r5,16352
20024664:	da801515 	stw	r10,84(sp)
20024668:	00292b00 	call	200292b0 <__subdf3>
2002466c:	da801517 	ldw	r10,84(sp)
20024670:	1009883a 	mov	r4,r2
20024674:	180b883a 	mov	r5,r3
20024678:	a80d883a 	mov	r6,r21
2002467c:	500f883a 	mov	r7,r10
20024680:	00298600 	call	20029860 <__gtdf2>
20024684:	00bc750e 	bge	zero,r2,2002385c <__alt_data_end+0xfffe445c>
20024688:	01000c04 	movi	r4,48
2002468c:	00000106 	br	20024694 <_dtoa_r+0x1574>
20024690:	102d883a 	mov	r22,r2
20024694:	b0bfffc4 	addi	r2,r22,-1
20024698:	10c00007 	ldb	r3,0(r2)
2002469c:	193ffc26 	beq	r3,r4,20024690 <__alt_data_end+0xfffe5290>
200246a0:	d8801317 	ldw	r2,76(sp)
200246a4:	d8800615 	stw	r2,24(sp)
200246a8:	003c3e06 	br	200237a4 <__alt_data_end+0xfffe43a4>
200246ac:	d9001317 	ldw	r4,76(sp)
200246b0:	df001117 	ldw	fp,68(sp)
200246b4:	d9000615 	stw	r4,24(sp)
200246b8:	003ce006 	br	20023a3c <__alt_data_end+0xfffe463c>
200246bc:	df001117 	ldw	fp,68(sp)
200246c0:	dc401217 	ldw	r17,72(sp)
200246c4:	003c6506 	br	2002385c <__alt_data_end+0xfffe445c>
200246c8:	103e7a1e 	bne	r2,zero,200240b4 <__alt_data_end+0xfffe4cb4>
200246cc:	1880004c 	andi	r2,r3,1
200246d0:	103e7826 	beq	r2,zero,200240b4 <__alt_data_end+0xfffe4cb4>
200246d4:	003e7406 	br	200240a8 <__alt_data_end+0xfffe4ca8>
200246d8:	8009883a 	mov	r4,r16
200246dc:	a80b883a 	mov	r5,r21
200246e0:	01800284 	movi	r6,10
200246e4:	000f883a 	mov	r7,zero
200246e8:	00264500 	call	20026450 <__multadd>
200246ec:	d9000e17 	ldw	r4,56(sp)
200246f0:	102b883a 	mov	r21,r2
200246f4:	d9000915 	stw	r4,36(sp)
200246f8:	003d5106 	br	20023c40 <__alt_data_end+0xfffe4840>
200246fc:	04800084 	movi	r18,2
20024700:	003b9a06 	br	2002356c <__alt_data_end+0xfffe416c>
20024704:	d8c01317 	ldw	r3,76(sp)
20024708:	d8c00615 	stw	r3,24(sp)
2002470c:	003ccb06 	br	20023a3c <__alt_data_end+0xfffe463c>
20024710:	d8c01317 	ldw	r3,76(sp)
20024714:	d8c00615 	stw	r3,24(sp)
20024718:	003c2206 	br	200237a4 <__alt_data_end+0xfffe43a4>
2002471c:	20fd3826 	beq	r4,r3,20023c00 <__alt_data_end+0xfffe4800>
20024720:	00c00f04 	movi	r3,60
20024724:	1885c83a 	sub	r2,r3,r2
20024728:	003da906 	br	20023dd0 <__alt_data_end+0xfffe49d0>
2002472c:	000b883a 	mov	r5,zero
20024730:	003b5406 	br	20023484 <__alt_data_end+0xfffe4084>
20024734:	04c00044 	movi	r19,1
20024738:	003b3b06 	br	20023428 <__alt_data_end+0xfffe4028>

2002473c <_fflush_r>:
2002473c:	defffb04 	addi	sp,sp,-20
20024740:	dcc00315 	stw	r19,12(sp)
20024744:	dc400115 	stw	r17,4(sp)
20024748:	dfc00415 	stw	ra,16(sp)
2002474c:	dc800215 	stw	r18,8(sp)
20024750:	dc000015 	stw	r16,0(sp)
20024754:	2027883a 	mov	r19,r4
20024758:	2823883a 	mov	r17,r5
2002475c:	20000226 	beq	r4,zero,20024768 <_fflush_r+0x2c>
20024760:	20800e17 	ldw	r2,56(r4)
20024764:	10005726 	beq	r2,zero,200248c4 <_fflush_r+0x188>
20024768:	8880030b 	ldhu	r2,12(r17)
2002476c:	10c0020c 	andi	r3,r2,8
20024770:	18ffffcc 	andi	r3,r3,65535
20024774:	18e0001c 	xori	r3,r3,32768
20024778:	18e00004 	addi	r3,r3,-32768
2002477c:	1800311e 	bne	r3,zero,20024844 <_fflush_r+0x108>
20024780:	89000117 	ldw	r4,4(r17)
20024784:	10c20014 	ori	r3,r2,2048
20024788:	88c0030d 	sth	r3,12(r17)
2002478c:	180b883a 	mov	r5,r3
20024790:	0100520e 	bge	zero,r4,200248dc <_fflush_r+0x1a0>
20024794:	88c00a17 	ldw	r3,40(r17)
20024798:	18002226 	beq	r3,zero,20024824 <_fflush_r+0xe8>
2002479c:	1084000c 	andi	r2,r2,4096
200247a0:	10bfffcc 	andi	r2,r2,65535
200247a4:	10a0001c 	xori	r2,r2,32768
200247a8:	10a00004 	addi	r2,r2,-32768
200247ac:	10004e26 	beq	r2,zero,200248e8 <_fflush_r+0x1ac>
200247b0:	8c001417 	ldw	r16,80(r17)
200247b4:	2940010c 	andi	r5,r5,4
200247b8:	297fffcc 	andi	r5,r5,65535
200247bc:	2960001c 	xori	r5,r5,32768
200247c0:	29600004 	addi	r5,r5,-32768
200247c4:	28000626 	beq	r5,zero,200247e0 <_fflush_r+0xa4>
200247c8:	89000117 	ldw	r4,4(r17)
200247cc:	88800c17 	ldw	r2,48(r17)
200247d0:	8121c83a 	sub	r16,r16,r4
200247d4:	10000226 	beq	r2,zero,200247e0 <_fflush_r+0xa4>
200247d8:	88800f17 	ldw	r2,60(r17)
200247dc:	80a1c83a 	sub	r16,r16,r2
200247e0:	89400717 	ldw	r5,28(r17)
200247e4:	9809883a 	mov	r4,r19
200247e8:	800d883a 	mov	r6,r16
200247ec:	000f883a 	mov	r7,zero
200247f0:	183ee83a 	callr	r3
200247f4:	8080281e 	bne	r16,r2,20024898 <_fflush_r+0x15c>
200247f8:	8880030b 	ldhu	r2,12(r17)
200247fc:	88c00417 	ldw	r3,16(r17)
20024800:	88000115 	stw	zero,4(r17)
20024804:	113dffcc 	andi	r4,r2,63487
20024808:	1084000c 	andi	r2,r2,4096
2002480c:	10bfffcc 	andi	r2,r2,65535
20024810:	10a0001c 	xori	r2,r2,32768
20024814:	8900030d 	sth	r4,12(r17)
20024818:	88c00015 	stw	r3,0(r17)
2002481c:	10a00004 	addi	r2,r2,-32768
20024820:	10002c1e 	bne	r2,zero,200248d4 <_fflush_r+0x198>
20024824:	0005883a 	mov	r2,zero
20024828:	dfc00417 	ldw	ra,16(sp)
2002482c:	dcc00317 	ldw	r19,12(sp)
20024830:	dc800217 	ldw	r18,8(sp)
20024834:	dc400117 	ldw	r17,4(sp)
20024838:	dc000017 	ldw	r16,0(sp)
2002483c:	dec00504 	addi	sp,sp,20
20024840:	f800283a 	ret
20024844:	8c800417 	ldw	r18,16(r17)
20024848:	903ff626 	beq	r18,zero,20024824 <__alt_data_end+0xfffe5424>
2002484c:	8c000017 	ldw	r16,0(r17)
20024850:	108000cc 	andi	r2,r2,3
20024854:	8c800015 	stw	r18,0(r17)
20024858:	84a1c83a 	sub	r16,r16,r18
2002485c:	10001b1e 	bne	r2,zero,200248cc <_fflush_r+0x190>
20024860:	88800517 	ldw	r2,20(r17)
20024864:	88800215 	stw	r2,8(r17)
20024868:	04000316 	blt	zero,r16,20024878 <_fflush_r+0x13c>
2002486c:	003fed06 	br	20024824 <__alt_data_end+0xfffe5424>
20024870:	90a5883a 	add	r18,r18,r2
20024874:	043feb0e 	bge	zero,r16,20024824 <__alt_data_end+0xfffe5424>
20024878:	88800917 	ldw	r2,36(r17)
2002487c:	89400717 	ldw	r5,28(r17)
20024880:	800f883a 	mov	r7,r16
20024884:	900d883a 	mov	r6,r18
20024888:	9809883a 	mov	r4,r19
2002488c:	103ee83a 	callr	r2
20024890:	80a1c83a 	sub	r16,r16,r2
20024894:	00bff616 	blt	zero,r2,20024870 <__alt_data_end+0xfffe5470>
20024898:	88c0030b 	ldhu	r3,12(r17)
2002489c:	00bfffc4 	movi	r2,-1
200248a0:	18c01014 	ori	r3,r3,64
200248a4:	88c0030d 	sth	r3,12(r17)
200248a8:	dfc00417 	ldw	ra,16(sp)
200248ac:	dcc00317 	ldw	r19,12(sp)
200248b0:	dc800217 	ldw	r18,8(sp)
200248b4:	dc400117 	ldw	r17,4(sp)
200248b8:	dc000017 	ldw	r16,0(sp)
200248bc:	dec00504 	addi	sp,sp,20
200248c0:	f800283a 	ret
200248c4:	00249e40 	call	200249e4 <__sinit>
200248c8:	003fa706 	br	20024768 <__alt_data_end+0xfffe5368>
200248cc:	0005883a 	mov	r2,zero
200248d0:	003fe406 	br	20024864 <__alt_data_end+0xfffe5464>
200248d4:	8c001415 	stw	r16,80(r17)
200248d8:	003fd206 	br	20024824 <__alt_data_end+0xfffe5424>
200248dc:	88c00f17 	ldw	r3,60(r17)
200248e0:	00ffac16 	blt	zero,r3,20024794 <__alt_data_end+0xfffe5394>
200248e4:	003fcf06 	br	20024824 <__alt_data_end+0xfffe5424>
200248e8:	89400717 	ldw	r5,28(r17)
200248ec:	9809883a 	mov	r4,r19
200248f0:	000d883a 	mov	r6,zero
200248f4:	01c00044 	movi	r7,1
200248f8:	183ee83a 	callr	r3
200248fc:	1021883a 	mov	r16,r2
20024900:	00bfffc4 	movi	r2,-1
20024904:	80800326 	beq	r16,r2,20024914 <_fflush_r+0x1d8>
20024908:	8940030b 	ldhu	r5,12(r17)
2002490c:	88c00a17 	ldw	r3,40(r17)
20024910:	003fa806 	br	200247b4 <__alt_data_end+0xfffe53b4>
20024914:	98c00017 	ldw	r3,0(r19)
20024918:	00800744 	movi	r2,29
2002491c:	18bfde1e 	bne	r3,r2,20024898 <__alt_data_end+0xfffe5498>
20024920:	003fc006 	br	20024824 <__alt_data_end+0xfffe5424>

20024924 <fflush>:
20024924:	200b883a 	mov	r5,r4
20024928:	20000426 	beq	r4,zero,2002493c <fflush+0x18>
2002492c:	008800f4 	movhi	r2,8195
20024930:	10ba5704 	addi	r2,r2,-5796
20024934:	11000017 	ldw	r4,0(r2)
20024938:	002473c1 	jmpi	2002473c <_fflush_r>
2002493c:	008800f4 	movhi	r2,8195
20024940:	10ba5604 	addi	r2,r2,-5800
20024944:	11000017 	ldw	r4,0(r2)
20024948:	014800b4 	movhi	r5,8194
2002494c:	2951cf04 	addi	r5,r5,18236
20024950:	00255c41 	jmpi	200255c4 <_fwalk_reent>

20024954 <__fp_lock>:
20024954:	0005883a 	mov	r2,zero
20024958:	f800283a 	ret

2002495c <__fp_unlock>:
2002495c:	0005883a 	mov	r2,zero
20024960:	f800283a 	ret

20024964 <_cleanup_r>:
20024964:	014800f4 	movhi	r5,8195
20024968:	29606704 	addi	r5,r5,-32356
2002496c:	002551c1 	jmpi	2002551c <_fwalk>

20024970 <__sfmoreglue>:
20024970:	defffc04 	addi	sp,sp,-16
20024974:	dc400115 	stw	r17,4(sp)
20024978:	2c401724 	muli	r17,r5,92
2002497c:	dc800215 	stw	r18,8(sp)
20024980:	2825883a 	mov	r18,r5
20024984:	89400304 	addi	r5,r17,12
20024988:	dc000015 	stw	r16,0(sp)
2002498c:	dfc00315 	stw	ra,12(sp)
20024990:	00259000 	call	20025900 <_malloc_r>
20024994:	1021883a 	mov	r16,r2
20024998:	10000726 	beq	r2,zero,200249b8 <__sfmoreglue+0x48>
2002499c:	11000304 	addi	r4,r2,12
200249a0:	10000015 	stw	zero,0(r2)
200249a4:	14800115 	stw	r18,4(r2)
200249a8:	11000215 	stw	r4,8(r2)
200249ac:	000b883a 	mov	r5,zero
200249b0:	880d883a 	mov	r6,r17
200249b4:	00262a40 	call	200262a4 <memset>
200249b8:	8005883a 	mov	r2,r16
200249bc:	dfc00317 	ldw	ra,12(sp)
200249c0:	dc800217 	ldw	r18,8(sp)
200249c4:	dc400117 	ldw	r17,4(sp)
200249c8:	dc000017 	ldw	r16,0(sp)
200249cc:	dec00404 	addi	sp,sp,16
200249d0:	f800283a 	ret

200249d4 <_cleanup>:
200249d4:	008800f4 	movhi	r2,8195
200249d8:	10ba5604 	addi	r2,r2,-5800
200249dc:	11000017 	ldw	r4,0(r2)
200249e0:	00249641 	jmpi	20024964 <_cleanup_r>

200249e4 <__sinit>:
200249e4:	20800e17 	ldw	r2,56(r4)
200249e8:	1000401e 	bne	r2,zero,20024aec <__sinit+0x108>
200249ec:	21400117 	ldw	r5,4(r4)
200249f0:	018800b4 	movhi	r6,8194
200249f4:	31925904 	addi	r6,r6,18788
200249f8:	20c00217 	ldw	r3,8(r4)
200249fc:	21800f15 	stw	r6,60(r4)
20024a00:	2080bb04 	addi	r2,r4,748
20024a04:	02400044 	movi	r9,1
20024a08:	018000c4 	movi	r6,3
20024a0c:	2180b915 	stw	r6,740(r4)
20024a10:	2080ba15 	stw	r2,744(r4)
20024a14:	22400e15 	stw	r9,56(r4)
20024a18:	20800317 	ldw	r2,12(r4)
20024a1c:	2000b815 	stw	zero,736(r4)
20024a20:	020800b4 	movhi	r8,8194
20024a24:	421ee604 	addi	r8,r8,31640
20024a28:	01c800b4 	movhi	r7,8194
20024a2c:	39defb04 	addi	r7,r7,31724
20024a30:	018800b4 	movhi	r6,8194
20024a34:	319f1d04 	addi	r6,r6,31860
20024a38:	010800b4 	movhi	r4,8194
20024a3c:	211f3404 	addi	r4,r4,31952
20024a40:	02800104 	movi	r10,4
20024a44:	28000015 	stw	zero,0(r5)
20024a48:	28000115 	stw	zero,4(r5)
20024a4c:	28000215 	stw	zero,8(r5)
20024a50:	2a80030d 	sth	r10,12(r5)
20024a54:	2800038d 	sth	zero,14(r5)
20024a58:	28000415 	stw	zero,16(r5)
20024a5c:	28000515 	stw	zero,20(r5)
20024a60:	28000615 	stw	zero,24(r5)
20024a64:	29400715 	stw	r5,28(r5)
20024a68:	2a000815 	stw	r8,32(r5)
20024a6c:	29c00915 	stw	r7,36(r5)
20024a70:	29800a15 	stw	r6,40(r5)
20024a74:	29000b15 	stw	r4,44(r5)
20024a78:	01400284 	movi	r5,10
20024a7c:	18000015 	stw	zero,0(r3)
20024a80:	18000115 	stw	zero,4(r3)
20024a84:	18000215 	stw	zero,8(r3)
20024a88:	1940030d 	sth	r5,12(r3)
20024a8c:	1a40038d 	sth	r9,14(r3)
20024a90:	18000415 	stw	zero,16(r3)
20024a94:	18000515 	stw	zero,20(r3)
20024a98:	18000615 	stw	zero,24(r3)
20024a9c:	18c00715 	stw	r3,28(r3)
20024aa0:	1a000815 	stw	r8,32(r3)
20024aa4:	19c00915 	stw	r7,36(r3)
20024aa8:	19800a15 	stw	r6,40(r3)
20024aac:	19000b15 	stw	r4,44(r3)
20024ab0:	00c00484 	movi	r3,18
20024ab4:	10c0030d 	sth	r3,12(r2)
20024ab8:	00c00084 	movi	r3,2
20024abc:	10000015 	stw	zero,0(r2)
20024ac0:	10000115 	stw	zero,4(r2)
20024ac4:	10000215 	stw	zero,8(r2)
20024ac8:	10c0038d 	sth	r3,14(r2)
20024acc:	10000415 	stw	zero,16(r2)
20024ad0:	10000515 	stw	zero,20(r2)
20024ad4:	10000615 	stw	zero,24(r2)
20024ad8:	10800715 	stw	r2,28(r2)
20024adc:	12000815 	stw	r8,32(r2)
20024ae0:	11c00915 	stw	r7,36(r2)
20024ae4:	11800a15 	stw	r6,40(r2)
20024ae8:	11000b15 	stw	r4,44(r2)
20024aec:	f800283a 	ret

20024af0 <__sfp>:
20024af0:	defffc04 	addi	sp,sp,-16
20024af4:	008800f4 	movhi	r2,8195
20024af8:	10ba5604 	addi	r2,r2,-5800
20024afc:	dc400115 	stw	r17,4(sp)
20024b00:	14400017 	ldw	r17,0(r2)
20024b04:	dc800215 	stw	r18,8(sp)
20024b08:	dfc00315 	stw	ra,12(sp)
20024b0c:	88800e17 	ldw	r2,56(r17)
20024b10:	dc000015 	stw	r16,0(sp)
20024b14:	2025883a 	mov	r18,r4
20024b18:	10002826 	beq	r2,zero,20024bbc <__sfp+0xcc>
20024b1c:	8c40b804 	addi	r17,r17,736
20024b20:	043fffc4 	movi	r16,-1
20024b24:	89400117 	ldw	r5,4(r17)
20024b28:	88800217 	ldw	r2,8(r17)
20024b2c:	297fffc4 	addi	r5,r5,-1
20024b30:	28000a16 	blt	r5,zero,20024b5c <__sfp+0x6c>
20024b34:	10c0030f 	ldh	r3,12(r2)
20024b38:	18000c26 	beq	r3,zero,20024b6c <__sfp+0x7c>
20024b3c:	10c01a04 	addi	r3,r2,104
20024b40:	00000206 	br	20024b4c <__sfp+0x5c>
20024b44:	19bfe90f 	ldh	r6,-92(r3)
20024b48:	30000826 	beq	r6,zero,20024b6c <__sfp+0x7c>
20024b4c:	297fffc4 	addi	r5,r5,-1
20024b50:	18bffd04 	addi	r2,r3,-12
20024b54:	18c01704 	addi	r3,r3,92
20024b58:	2c3ffa1e 	bne	r5,r16,20024b44 <__alt_data_end+0xfffe5744>
20024b5c:	88800017 	ldw	r2,0(r17)
20024b60:	10001926 	beq	r2,zero,20024bc8 <__sfp+0xd8>
20024b64:	1023883a 	mov	r17,r2
20024b68:	003fee06 	br	20024b24 <__alt_data_end+0xfffe5724>
20024b6c:	00ffffc4 	movi	r3,-1
20024b70:	10c0038d 	sth	r3,14(r2)
20024b74:	00c00044 	movi	r3,1
20024b78:	10c0030d 	sth	r3,12(r2)
20024b7c:	10000015 	stw	zero,0(r2)
20024b80:	10000215 	stw	zero,8(r2)
20024b84:	10000115 	stw	zero,4(r2)
20024b88:	10000415 	stw	zero,16(r2)
20024b8c:	10000515 	stw	zero,20(r2)
20024b90:	10000615 	stw	zero,24(r2)
20024b94:	10000c15 	stw	zero,48(r2)
20024b98:	10000d15 	stw	zero,52(r2)
20024b9c:	10001115 	stw	zero,68(r2)
20024ba0:	10001215 	stw	zero,72(r2)
20024ba4:	dfc00317 	ldw	ra,12(sp)
20024ba8:	dc800217 	ldw	r18,8(sp)
20024bac:	dc400117 	ldw	r17,4(sp)
20024bb0:	dc000017 	ldw	r16,0(sp)
20024bb4:	dec00404 	addi	sp,sp,16
20024bb8:	f800283a 	ret
20024bbc:	8809883a 	mov	r4,r17
20024bc0:	00249e40 	call	200249e4 <__sinit>
20024bc4:	003fd506 	br	20024b1c <__alt_data_end+0xfffe571c>
20024bc8:	9009883a 	mov	r4,r18
20024bcc:	01400104 	movi	r5,4
20024bd0:	00249700 	call	20024970 <__sfmoreglue>
20024bd4:	88800015 	stw	r2,0(r17)
20024bd8:	103fe21e 	bne	r2,zero,20024b64 <__alt_data_end+0xfffe5764>
20024bdc:	00800304 	movi	r2,12
20024be0:	90800015 	stw	r2,0(r18)
20024be4:	0005883a 	mov	r2,zero
20024be8:	003fee06 	br	20024ba4 <__alt_data_end+0xfffe57a4>

20024bec <__sfp_lock_acquire>:
20024bec:	f800283a 	ret

20024bf0 <__sfp_lock_release>:
20024bf0:	f800283a 	ret

20024bf4 <__sinit_lock_acquire>:
20024bf4:	f800283a 	ret

20024bf8 <__sinit_lock_release>:
20024bf8:	f800283a 	ret

20024bfc <__fp_lock_all>:
20024bfc:	008800f4 	movhi	r2,8195
20024c00:	10ba5704 	addi	r2,r2,-5796
20024c04:	11000017 	ldw	r4,0(r2)
20024c08:	014800b4 	movhi	r5,8194
20024c0c:	29525504 	addi	r5,r5,18772
20024c10:	002551c1 	jmpi	2002551c <_fwalk>

20024c14 <__fp_unlock_all>:
20024c14:	008800f4 	movhi	r2,8195
20024c18:	10ba5704 	addi	r2,r2,-5796
20024c1c:	11000017 	ldw	r4,0(r2)
20024c20:	014800b4 	movhi	r5,8194
20024c24:	29525704 	addi	r5,r5,18780
20024c28:	002551c1 	jmpi	2002551c <_fwalk>

20024c2c <_malloc_trim_r>:
20024c2c:	defffb04 	addi	sp,sp,-20
20024c30:	dcc00315 	stw	r19,12(sp)
20024c34:	dc800215 	stw	r18,8(sp)
20024c38:	dc400115 	stw	r17,4(sp)
20024c3c:	dc000015 	stw	r16,0(sp)
20024c40:	2827883a 	mov	r19,r5
20024c44:	dfc00415 	stw	ra,16(sp)
20024c48:	044800f4 	movhi	r17,8195
20024c4c:	8c74d204 	addi	r17,r17,-11448
20024c50:	2021883a 	mov	r16,r4
20024c54:	002a75c0 	call	2002a75c <__malloc_lock>
20024c58:	88800217 	ldw	r2,8(r17)
20024c5c:	14800117 	ldw	r18,4(r2)
20024c60:	00bfff04 	movi	r2,-4
20024c64:	90a4703a 	and	r18,r18,r2
20024c68:	9083fbc4 	addi	r2,r18,4079
20024c6c:	14e7c83a 	sub	r19,r2,r19
20024c70:	9826d33a 	srli	r19,r19,12
20024c74:	0083ffc4 	movi	r2,4095
20024c78:	9cffffc4 	addi	r19,r19,-1
20024c7c:	9826933a 	slli	r19,r19,12
20024c80:	14c0060e 	bge	r2,r19,20024c9c <_malloc_trim_r+0x70>
20024c84:	8009883a 	mov	r4,r16
20024c88:	000b883a 	mov	r5,zero
20024c8c:	0027b340 	call	20027b34 <_sbrk_r>
20024c90:	88c00217 	ldw	r3,8(r17)
20024c94:	1c87883a 	add	r3,r3,r18
20024c98:	10c00a26 	beq	r2,r3,20024cc4 <_malloc_trim_r+0x98>
20024c9c:	8009883a 	mov	r4,r16
20024ca0:	002a77c0 	call	2002a77c <__malloc_unlock>
20024ca4:	0005883a 	mov	r2,zero
20024ca8:	dfc00417 	ldw	ra,16(sp)
20024cac:	dcc00317 	ldw	r19,12(sp)
20024cb0:	dc800217 	ldw	r18,8(sp)
20024cb4:	dc400117 	ldw	r17,4(sp)
20024cb8:	dc000017 	ldw	r16,0(sp)
20024cbc:	dec00504 	addi	sp,sp,20
20024cc0:	f800283a 	ret
20024cc4:	8009883a 	mov	r4,r16
20024cc8:	04cbc83a 	sub	r5,zero,r19
20024ccc:	0027b340 	call	20027b34 <_sbrk_r>
20024cd0:	00ffffc4 	movi	r3,-1
20024cd4:	10c01326 	beq	r2,r3,20024d24 <_malloc_trim_r+0xf8>
20024cd8:	008800f4 	movhi	r2,8195
20024cdc:	10810804 	addi	r2,r2,1056
20024ce0:	11000017 	ldw	r4,0(r2)
20024ce4:	88c00217 	ldw	r3,8(r17)
20024ce8:	94e5c83a 	sub	r18,r18,r19
20024cec:	94800054 	ori	r18,r18,1
20024cf0:	24e7c83a 	sub	r19,r4,r19
20024cf4:	1c800115 	stw	r18,4(r3)
20024cf8:	8009883a 	mov	r4,r16
20024cfc:	14c00015 	stw	r19,0(r2)
20024d00:	002a77c0 	call	2002a77c <__malloc_unlock>
20024d04:	00800044 	movi	r2,1
20024d08:	dfc00417 	ldw	ra,16(sp)
20024d0c:	dcc00317 	ldw	r19,12(sp)
20024d10:	dc800217 	ldw	r18,8(sp)
20024d14:	dc400117 	ldw	r17,4(sp)
20024d18:	dc000017 	ldw	r16,0(sp)
20024d1c:	dec00504 	addi	sp,sp,20
20024d20:	f800283a 	ret
20024d24:	8009883a 	mov	r4,r16
20024d28:	000b883a 	mov	r5,zero
20024d2c:	0027b340 	call	20027b34 <_sbrk_r>
20024d30:	88c00217 	ldw	r3,8(r17)
20024d34:	014003c4 	movi	r5,15
20024d38:	10c9c83a 	sub	r4,r2,r3
20024d3c:	293fd70e 	bge	r5,r4,20024c9c <__alt_data_end+0xfffe589c>
20024d40:	014800f4 	movhi	r5,8195
20024d44:	297a5904 	addi	r5,r5,-5788
20024d48:	29400017 	ldw	r5,0(r5)
20024d4c:	21000054 	ori	r4,r4,1
20024d50:	19000115 	stw	r4,4(r3)
20024d54:	1145c83a 	sub	r2,r2,r5
20024d58:	014800f4 	movhi	r5,8195
20024d5c:	29410804 	addi	r5,r5,1056
20024d60:	28800015 	stw	r2,0(r5)
20024d64:	003fcd06 	br	20024c9c <__alt_data_end+0xfffe589c>

20024d68 <_free_r>:
20024d68:	defffd04 	addi	sp,sp,-12
20024d6c:	dc400115 	stw	r17,4(sp)
20024d70:	dc000015 	stw	r16,0(sp)
20024d74:	dfc00215 	stw	ra,8(sp)
20024d78:	2821883a 	mov	r16,r5
20024d7c:	2023883a 	mov	r17,r4
20024d80:	28004b26 	beq	r5,zero,20024eb0 <_free_r+0x148>
20024d84:	002a75c0 	call	2002a75c <__malloc_lock>
20024d88:	823fff17 	ldw	r8,-4(r16)
20024d8c:	00bfff84 	movi	r2,-2
20024d90:	81bffe04 	addi	r6,r16,-8
20024d94:	4084703a 	and	r2,r8,r2
20024d98:	3087883a 	add	r3,r6,r2
20024d9c:	014800f4 	movhi	r5,8195
20024da0:	2974d204 	addi	r5,r5,-11448
20024da4:	1a400117 	ldw	r9,4(r3)
20024da8:	29000217 	ldw	r4,8(r5)
20024dac:	01ffff04 	movi	r7,-4
20024db0:	49ce703a 	and	r7,r9,r7
20024db4:	20c06526 	beq	r4,r3,20024f4c <_free_r+0x1e4>
20024db8:	19c00115 	stw	r7,4(r3)
20024dbc:	4200004c 	andi	r8,r8,1
20024dc0:	40003026 	beq	r8,zero,20024e84 <_free_r+0x11c>
20024dc4:	0009883a 	mov	r4,zero
20024dc8:	19d1883a 	add	r8,r3,r7
20024dcc:	42000117 	ldw	r8,4(r8)
20024dd0:	4200004c 	andi	r8,r8,1
20024dd4:	4000061e 	bne	r8,zero,20024df0 <_free_r+0x88>
20024dd8:	11c5883a 	add	r2,r2,r7
20024ddc:	19c00217 	ldw	r7,8(r3)
20024de0:	20004e26 	beq	r4,zero,20024f1c <_free_r+0x1b4>
20024de4:	18c00317 	ldw	r3,12(r3)
20024de8:	38c00315 	stw	r3,12(r7)
20024dec:	19c00215 	stw	r7,8(r3)
20024df0:	11c00054 	ori	r7,r2,1
20024df4:	3087883a 	add	r3,r6,r2
20024df8:	31c00115 	stw	r7,4(r6)
20024dfc:	18800015 	stw	r2,0(r3)
20024e00:	20001a1e 	bne	r4,zero,20024e6c <_free_r+0x104>
20024e04:	00c07fc4 	movi	r3,511
20024e08:	18802e2e 	bgeu	r3,r2,20024ec4 <_free_r+0x15c>
20024e0c:	1006d27a 	srli	r3,r2,9
20024e10:	01000104 	movi	r4,4
20024e14:	20c06636 	bltu	r4,r3,20024fb0 <_free_r+0x248>
20024e18:	1008d1ba 	srli	r4,r2,6
20024e1c:	21000e04 	addi	r4,r4,56
20024e20:	210f883a 	add	r7,r4,r4
20024e24:	39cf883a 	add	r7,r7,r7
20024e28:	39cf883a 	add	r7,r7,r7
20024e2c:	29cf883a 	add	r7,r5,r7
20024e30:	38c00217 	ldw	r3,8(r7)
20024e34:	014800f4 	movhi	r5,8195
20024e38:	2974d204 	addi	r5,r5,-11448
20024e3c:	19c06126 	beq	r3,r7,20024fc4 <_free_r+0x25c>
20024e40:	013fff04 	movi	r4,-4
20024e44:	19400117 	ldw	r5,4(r3)
20024e48:	290a703a 	and	r5,r5,r4
20024e4c:	1140022e 	bgeu	r2,r5,20024e58 <_free_r+0xf0>
20024e50:	18c00217 	ldw	r3,8(r3)
20024e54:	38fffb1e 	bne	r7,r3,20024e44 <__alt_data_end+0xfffe5a44>
20024e58:	18800317 	ldw	r2,12(r3)
20024e5c:	30800315 	stw	r2,12(r6)
20024e60:	30c00215 	stw	r3,8(r6)
20024e64:	11800215 	stw	r6,8(r2)
20024e68:	19800315 	stw	r6,12(r3)
20024e6c:	8809883a 	mov	r4,r17
20024e70:	dfc00217 	ldw	ra,8(sp)
20024e74:	dc400117 	ldw	r17,4(sp)
20024e78:	dc000017 	ldw	r16,0(sp)
20024e7c:	dec00304 	addi	sp,sp,12
20024e80:	002a77c1 	jmpi	2002a77c <__malloc_unlock>
20024e84:	813ffe17 	ldw	r4,-8(r16)
20024e88:	2a400204 	addi	r9,r5,8
20024e8c:	310dc83a 	sub	r6,r6,r4
20024e90:	32000217 	ldw	r8,8(r6)
20024e94:	1105883a 	add	r2,r2,r4
20024e98:	42404326 	beq	r8,r9,20024fa8 <_free_r+0x240>
20024e9c:	32400317 	ldw	r9,12(r6)
20024ea0:	0009883a 	mov	r4,zero
20024ea4:	42400315 	stw	r9,12(r8)
20024ea8:	4a000215 	stw	r8,8(r9)
20024eac:	003fc606 	br	20024dc8 <__alt_data_end+0xfffe59c8>
20024eb0:	dfc00217 	ldw	ra,8(sp)
20024eb4:	dc400117 	ldw	r17,4(sp)
20024eb8:	dc000017 	ldw	r16,0(sp)
20024ebc:	dec00304 	addi	sp,sp,12
20024ec0:	f800283a 	ret
20024ec4:	1004d0fa 	srli	r2,r2,3
20024ec8:	02000044 	movi	r8,1
20024ecc:	29c00117 	ldw	r7,4(r5)
20024ed0:	1087883a 	add	r3,r2,r2
20024ed4:	18c7883a 	add	r3,r3,r3
20024ed8:	1005d0ba 	srai	r2,r2,2
20024edc:	18c7883a 	add	r3,r3,r3
20024ee0:	28c7883a 	add	r3,r5,r3
20024ee4:	19000217 	ldw	r4,8(r3)
20024ee8:	4084983a 	sll	r2,r8,r2
20024eec:	30c00315 	stw	r3,12(r6)
20024ef0:	31000215 	stw	r4,8(r6)
20024ef4:	11c4b03a 	or	r2,r2,r7
20024ef8:	21800315 	stw	r6,12(r4)
20024efc:	8809883a 	mov	r4,r17
20024f00:	28800115 	stw	r2,4(r5)
20024f04:	19800215 	stw	r6,8(r3)
20024f08:	dfc00217 	ldw	ra,8(sp)
20024f0c:	dc400117 	ldw	r17,4(sp)
20024f10:	dc000017 	ldw	r16,0(sp)
20024f14:	dec00304 	addi	sp,sp,12
20024f18:	002a77c1 	jmpi	2002a77c <__malloc_unlock>
20024f1c:	020800f4 	movhi	r8,8195
20024f20:	4234d404 	addi	r8,r8,-11440
20024f24:	3a3faf1e 	bne	r7,r8,20024de4 <__alt_data_end+0xfffe59e4>
20024f28:	29800515 	stw	r6,20(r5)
20024f2c:	29800415 	stw	r6,16(r5)
20024f30:	11000054 	ori	r4,r2,1
20024f34:	3087883a 	add	r3,r6,r2
20024f38:	31c00315 	stw	r7,12(r6)
20024f3c:	31c00215 	stw	r7,8(r6)
20024f40:	31000115 	stw	r4,4(r6)
20024f44:	18800015 	stw	r2,0(r3)
20024f48:	003fc806 	br	20024e6c <__alt_data_end+0xfffe5a6c>
20024f4c:	4200004c 	andi	r8,r8,1
20024f50:	3885883a 	add	r2,r7,r2
20024f54:	4000071e 	bne	r8,zero,20024f74 <_free_r+0x20c>
20024f58:	81fffe17 	ldw	r7,-8(r16)
20024f5c:	31cdc83a 	sub	r6,r6,r7
20024f60:	30c00317 	ldw	r3,12(r6)
20024f64:	31000217 	ldw	r4,8(r6)
20024f68:	11c5883a 	add	r2,r2,r7
20024f6c:	20c00315 	stw	r3,12(r4)
20024f70:	19000215 	stw	r4,8(r3)
20024f74:	00c800f4 	movhi	r3,8195
20024f78:	18fa5a04 	addi	r3,r3,-5784
20024f7c:	18c00017 	ldw	r3,0(r3)
20024f80:	11000054 	ori	r4,r2,1
20024f84:	31000115 	stw	r4,4(r6)
20024f88:	29800215 	stw	r6,8(r5)
20024f8c:	10ffb736 	bltu	r2,r3,20024e6c <__alt_data_end+0xfffe5a6c>
20024f90:	008800f4 	movhi	r2,8195
20024f94:	10810004 	addi	r2,r2,1024
20024f98:	11400017 	ldw	r5,0(r2)
20024f9c:	8809883a 	mov	r4,r17
20024fa0:	0024c2c0 	call	20024c2c <_malloc_trim_r>
20024fa4:	003fb106 	br	20024e6c <__alt_data_end+0xfffe5a6c>
20024fa8:	01000044 	movi	r4,1
20024fac:	003f8606 	br	20024dc8 <__alt_data_end+0xfffe59c8>
20024fb0:	01000504 	movi	r4,20
20024fb4:	20c00b36 	bltu	r4,r3,20024fe4 <_free_r+0x27c>
20024fb8:	190016c4 	addi	r4,r3,91
20024fbc:	210f883a 	add	r7,r4,r4
20024fc0:	003f9806 	br	20024e24 <__alt_data_end+0xfffe5a24>
20024fc4:	2009d0ba 	srai	r4,r4,2
20024fc8:	00800044 	movi	r2,1
20024fcc:	29c00117 	ldw	r7,4(r5)
20024fd0:	1108983a 	sll	r4,r2,r4
20024fd4:	1805883a 	mov	r2,r3
20024fd8:	21c8b03a 	or	r4,r4,r7
20024fdc:	29000115 	stw	r4,4(r5)
20024fe0:	003f9e06 	br	20024e5c <__alt_data_end+0xfffe5a5c>
20024fe4:	01001504 	movi	r4,84
20024fe8:	20c00436 	bltu	r4,r3,20024ffc <_free_r+0x294>
20024fec:	1008d33a 	srli	r4,r2,12
20024ff0:	21001b84 	addi	r4,r4,110
20024ff4:	210f883a 	add	r7,r4,r4
20024ff8:	003f8a06 	br	20024e24 <__alt_data_end+0xfffe5a24>
20024ffc:	01005504 	movi	r4,340
20025000:	20c00436 	bltu	r4,r3,20025014 <_free_r+0x2ac>
20025004:	1008d3fa 	srli	r4,r2,15
20025008:	21001dc4 	addi	r4,r4,119
2002500c:	210f883a 	add	r7,r4,r4
20025010:	003f8406 	br	20024e24 <__alt_data_end+0xfffe5a24>
20025014:	01015504 	movi	r4,1364
20025018:	20c00436 	bltu	r4,r3,2002502c <_free_r+0x2c4>
2002501c:	1008d4ba 	srli	r4,r2,18
20025020:	21001f04 	addi	r4,r4,124
20025024:	210f883a 	add	r7,r4,r4
20025028:	003f7e06 	br	20024e24 <__alt_data_end+0xfffe5a24>
2002502c:	01c03f04 	movi	r7,252
20025030:	01001f84 	movi	r4,126
20025034:	003f7b06 	br	20024e24 <__alt_data_end+0xfffe5a24>

20025038 <__sfvwrite_r>:
20025038:	30800217 	ldw	r2,8(r6)
2002503c:	defff504 	addi	sp,sp,-44
20025040:	dd400615 	stw	r21,24(sp)
20025044:	dd000515 	stw	r20,20(sp)
20025048:	dc000115 	stw	r16,4(sp)
2002504c:	dfc00a15 	stw	ra,40(sp)
20025050:	df000915 	stw	fp,36(sp)
20025054:	ddc00815 	stw	r23,32(sp)
20025058:	dd800715 	stw	r22,28(sp)
2002505c:	dcc00415 	stw	r19,16(sp)
20025060:	dc800315 	stw	r18,12(sp)
20025064:	dc400215 	stw	r17,8(sp)
20025068:	3029883a 	mov	r20,r6
2002506c:	202b883a 	mov	r21,r4
20025070:	2821883a 	mov	r16,r5
20025074:	10002126 	beq	r2,zero,200250fc <__sfvwrite_r+0xc4>
20025078:	2880030b 	ldhu	r2,12(r5)
2002507c:	10c0020c 	andi	r3,r2,8
20025080:	18ffffcc 	andi	r3,r3,65535
20025084:	18e0001c 	xori	r3,r3,32768
20025088:	18e00004 	addi	r3,r3,-32768
2002508c:	18002826 	beq	r3,zero,20025130 <__sfvwrite_r+0xf8>
20025090:	28c00417 	ldw	r3,16(r5)
20025094:	18002626 	beq	r3,zero,20025130 <__sfvwrite_r+0xf8>
20025098:	10c0008c 	andi	r3,r2,2
2002509c:	18ffffcc 	andi	r3,r3,65535
200250a0:	18e0001c 	xori	r3,r3,32768
200250a4:	18e00004 	addi	r3,r3,-32768
200250a8:	a4400017 	ldw	r17,0(r20)
200250ac:	18002b26 	beq	r3,zero,2002515c <__sfvwrite_r+0x124>
200250b0:	0027883a 	mov	r19,zero
200250b4:	0025883a 	mov	r18,zero
200250b8:	05810004 	movi	r22,1024
200250bc:	980d883a 	mov	r6,r19
200250c0:	a809883a 	mov	r4,r21
200250c4:	90004f26 	beq	r18,zero,20025204 <__sfvwrite_r+0x1cc>
200250c8:	900f883a 	mov	r7,r18
200250cc:	81400717 	ldw	r5,28(r16)
200250d0:	b480012e 	bgeu	r22,r18,200250d8 <__sfvwrite_r+0xa0>
200250d4:	01c10004 	movi	r7,1024
200250d8:	80800917 	ldw	r2,36(r16)
200250dc:	103ee83a 	callr	r2
200250e0:	0080540e 	bge	zero,r2,20025234 <__sfvwrite_r+0x1fc>
200250e4:	a0c00217 	ldw	r3,8(r20)
200250e8:	98a7883a 	add	r19,r19,r2
200250ec:	90a5c83a 	sub	r18,r18,r2
200250f0:	1885c83a 	sub	r2,r3,r2
200250f4:	a0800215 	stw	r2,8(r20)
200250f8:	103ff01e 	bne	r2,zero,200250bc <__alt_data_end+0xfffe5cbc>
200250fc:	0005883a 	mov	r2,zero
20025100:	dfc00a17 	ldw	ra,40(sp)
20025104:	df000917 	ldw	fp,36(sp)
20025108:	ddc00817 	ldw	r23,32(sp)
2002510c:	dd800717 	ldw	r22,28(sp)
20025110:	dd400617 	ldw	r21,24(sp)
20025114:	dd000517 	ldw	r20,20(sp)
20025118:	dcc00417 	ldw	r19,16(sp)
2002511c:	dc800317 	ldw	r18,12(sp)
20025120:	dc400217 	ldw	r17,8(sp)
20025124:	dc000117 	ldw	r16,4(sp)
20025128:	dec00b04 	addi	sp,sp,44
2002512c:	f800283a 	ret
20025130:	a809883a 	mov	r4,r21
20025134:	800b883a 	mov	r5,r16
20025138:	0022da40 	call	20022da4 <__swsetup_r>
2002513c:	1000f01e 	bne	r2,zero,20025500 <__sfvwrite_r+0x4c8>
20025140:	8080030b 	ldhu	r2,12(r16)
20025144:	a4400017 	ldw	r17,0(r20)
20025148:	10c0008c 	andi	r3,r2,2
2002514c:	18ffffcc 	andi	r3,r3,65535
20025150:	18e0001c 	xori	r3,r3,32768
20025154:	18e00004 	addi	r3,r3,-32768
20025158:	183fd51e 	bne	r3,zero,200250b0 <__alt_data_end+0xfffe5cb0>
2002515c:	10c0004c 	andi	r3,r2,1
20025160:	002d883a 	mov	r22,zero
20025164:	1800381e 	bne	r3,zero,20025248 <__sfvwrite_r+0x210>
20025168:	0025883a 	mov	r18,zero
2002516c:	90002126 	beq	r18,zero,200251f4 <__sfvwrite_r+0x1bc>
20025170:	10c0800c 	andi	r3,r2,512
20025174:	18ffffcc 	andi	r3,r3,65535
20025178:	18e0001c 	xori	r3,r3,32768
2002517c:	18e00004 	addi	r3,r3,-32768
20025180:	84c00217 	ldw	r19,8(r16)
20025184:	18006b26 	beq	r3,zero,20025334 <__sfvwrite_r+0x2fc>
20025188:	980f883a 	mov	r7,r19
2002518c:	94c08636 	bltu	r18,r19,200253a8 <__sfvwrite_r+0x370>
20025190:	10c1200c 	andi	r3,r2,1152
20025194:	18009f1e 	bne	r3,zero,20025414 <__sfvwrite_r+0x3dc>
20025198:	81000017 	ldw	r4,0(r16)
2002519c:	982f883a 	mov	r23,r19
200251a0:	9039883a 	mov	fp,r18
200251a4:	9027883a 	mov	r19,r18
200251a8:	380d883a 	mov	r6,r7
200251ac:	b00b883a 	mov	r5,r22
200251b0:	d9c00015 	stw	r7,0(sp)
200251b4:	002617c0 	call	2002617c <memmove>
200251b8:	d9c00017 	ldw	r7,0(sp)
200251bc:	81000217 	ldw	r4,8(r16)
200251c0:	80800017 	ldw	r2,0(r16)
200251c4:	25efc83a 	sub	r23,r4,r23
200251c8:	11cf883a 	add	r7,r2,r7
200251cc:	85c00215 	stw	r23,8(r16)
200251d0:	81c00015 	stw	r7,0(r16)
200251d4:	a0800217 	ldw	r2,8(r20)
200251d8:	b72d883a 	add	r22,r22,fp
200251dc:	9725c83a 	sub	r18,r18,fp
200251e0:	14e7c83a 	sub	r19,r2,r19
200251e4:	a4c00215 	stw	r19,8(r20)
200251e8:	983fc426 	beq	r19,zero,200250fc <__alt_data_end+0xfffe5cfc>
200251ec:	8080030b 	ldhu	r2,12(r16)
200251f0:	903fdf1e 	bne	r18,zero,20025170 <__alt_data_end+0xfffe5d70>
200251f4:	8d800017 	ldw	r22,0(r17)
200251f8:	8c800117 	ldw	r18,4(r17)
200251fc:	8c400204 	addi	r17,r17,8
20025200:	003fda06 	br	2002516c <__alt_data_end+0xfffe5d6c>
20025204:	8cc00017 	ldw	r19,0(r17)
20025208:	8c800117 	ldw	r18,4(r17)
2002520c:	8c400204 	addi	r17,r17,8
20025210:	003faa06 	br	200250bc <__alt_data_end+0xfffe5cbc>
20025214:	00274d40 	call	200274d4 <_realloc_r>
20025218:	102f883a 	mov	r23,r2
2002521c:	10009f1e 	bne	r2,zero,2002549c <__sfvwrite_r+0x464>
20025220:	81400417 	ldw	r5,16(r16)
20025224:	a809883a 	mov	r4,r21
20025228:	0024d680 	call	20024d68 <_free_r>
2002522c:	00800304 	movi	r2,12
20025230:	a8800015 	stw	r2,0(r21)
20025234:	80c0030b 	ldhu	r3,12(r16)
20025238:	00bfffc4 	movi	r2,-1
2002523c:	18c01014 	ori	r3,r3,64
20025240:	80c0030d 	sth	r3,12(r16)
20025244:	003fae06 	br	20025100 <__alt_data_end+0xfffe5d00>
20025248:	0007883a 	mov	r3,zero
2002524c:	0039883a 	mov	fp,zero
20025250:	0025883a 	mov	r18,zero
20025254:	90001e26 	beq	r18,zero,200252d0 <__sfvwrite_r+0x298>
20025258:	18006526 	beq	r3,zero,200253f0 <__sfvwrite_r+0x3b8>
2002525c:	b02f883a 	mov	r23,r22
20025260:	9580012e 	bgeu	r18,r22,20025268 <__sfvwrite_r+0x230>
20025264:	902f883a 	mov	r23,r18
20025268:	81000017 	ldw	r4,0(r16)
2002526c:	80800417 	ldw	r2,16(r16)
20025270:	84c00217 	ldw	r19,8(r16)
20025274:	81c00517 	ldw	r7,20(r16)
20025278:	1100022e 	bgeu	r2,r4,20025284 <__sfvwrite_r+0x24c>
2002527c:	99e7883a 	add	r19,r19,r7
20025280:	9dc01816 	blt	r19,r23,200252e4 <__sfvwrite_r+0x2ac>
20025284:	b9c03b16 	blt	r23,r7,20025374 <__sfvwrite_r+0x33c>
20025288:	80800917 	ldw	r2,36(r16)
2002528c:	81400717 	ldw	r5,28(r16)
20025290:	a809883a 	mov	r4,r21
20025294:	d8c00015 	stw	r3,0(sp)
20025298:	e00d883a 	mov	r6,fp
2002529c:	103ee83a 	callr	r2
200252a0:	1027883a 	mov	r19,r2
200252a4:	d8c00017 	ldw	r3,0(sp)
200252a8:	00bfe20e 	bge	zero,r2,20025234 <__alt_data_end+0xfffe5e34>
200252ac:	b4edc83a 	sub	r22,r22,r19
200252b0:	b0001a26 	beq	r22,zero,2002531c <__sfvwrite_r+0x2e4>
200252b4:	a0800217 	ldw	r2,8(r20)
200252b8:	e4f9883a 	add	fp,fp,r19
200252bc:	94e5c83a 	sub	r18,r18,r19
200252c0:	14e7c83a 	sub	r19,r2,r19
200252c4:	a4c00215 	stw	r19,8(r20)
200252c8:	983f8c26 	beq	r19,zero,200250fc <__alt_data_end+0xfffe5cfc>
200252cc:	903fe21e 	bne	r18,zero,20025258 <__alt_data_end+0xfffe5e58>
200252d0:	8f000017 	ldw	fp,0(r17)
200252d4:	8c800117 	ldw	r18,4(r17)
200252d8:	0007883a 	mov	r3,zero
200252dc:	8c400204 	addi	r17,r17,8
200252e0:	003fdc06 	br	20025254 <__alt_data_end+0xfffe5e54>
200252e4:	e00b883a 	mov	r5,fp
200252e8:	980d883a 	mov	r6,r19
200252ec:	d8c00015 	stw	r3,0(sp)
200252f0:	002617c0 	call	2002617c <memmove>
200252f4:	80800017 	ldw	r2,0(r16)
200252f8:	a809883a 	mov	r4,r21
200252fc:	800b883a 	mov	r5,r16
20025300:	14c5883a 	add	r2,r2,r19
20025304:	80800015 	stw	r2,0(r16)
20025308:	002473c0 	call	2002473c <_fflush_r>
2002530c:	d8c00017 	ldw	r3,0(sp)
20025310:	103fc81e 	bne	r2,zero,20025234 <__alt_data_end+0xfffe5e34>
20025314:	b4edc83a 	sub	r22,r22,r19
20025318:	b03fe61e 	bne	r22,zero,200252b4 <__alt_data_end+0xfffe5eb4>
2002531c:	a809883a 	mov	r4,r21
20025320:	800b883a 	mov	r5,r16
20025324:	002473c0 	call	2002473c <_fflush_r>
20025328:	103fc21e 	bne	r2,zero,20025234 <__alt_data_end+0xfffe5e34>
2002532c:	0007883a 	mov	r3,zero
20025330:	003fe006 	br	200252b4 <__alt_data_end+0xfffe5eb4>
20025334:	81000017 	ldw	r4,0(r16)
20025338:	80800417 	ldw	r2,16(r16)
2002533c:	1100022e 	bgeu	r2,r4,20025348 <__sfvwrite_r+0x310>
20025340:	9839883a 	mov	fp,r19
20025344:	9c806036 	bltu	r19,r18,200254c8 <__sfvwrite_r+0x490>
20025348:	81c00517 	ldw	r7,20(r16)
2002534c:	91c01c36 	bltu	r18,r7,200253c0 <__sfvwrite_r+0x388>
20025350:	80800917 	ldw	r2,36(r16)
20025354:	81400717 	ldw	r5,28(r16)
20025358:	a809883a 	mov	r4,r21
2002535c:	b00d883a 	mov	r6,r22
20025360:	103ee83a 	callr	r2
20025364:	1027883a 	mov	r19,r2
20025368:	00bfb20e 	bge	zero,r2,20025234 <__alt_data_end+0xfffe5e34>
2002536c:	1039883a 	mov	fp,r2
20025370:	003f9806 	br	200251d4 <__alt_data_end+0xfffe5dd4>
20025374:	b80d883a 	mov	r6,r23
20025378:	e00b883a 	mov	r5,fp
2002537c:	d8c00015 	stw	r3,0(sp)
20025380:	002617c0 	call	2002617c <memmove>
20025384:	80800217 	ldw	r2,8(r16)
20025388:	81000017 	ldw	r4,0(r16)
2002538c:	b827883a 	mov	r19,r23
20025390:	15c5c83a 	sub	r2,r2,r23
20025394:	25ef883a 	add	r23,r4,r23
20025398:	80800215 	stw	r2,8(r16)
2002539c:	85c00015 	stw	r23,0(r16)
200253a0:	d8c00017 	ldw	r3,0(sp)
200253a4:	003fc106 	br	200252ac <__alt_data_end+0xfffe5eac>
200253a8:	81000017 	ldw	r4,0(r16)
200253ac:	902f883a 	mov	r23,r18
200253b0:	9039883a 	mov	fp,r18
200253b4:	9027883a 	mov	r19,r18
200253b8:	900f883a 	mov	r7,r18
200253bc:	003f7a06 	br	200251a8 <__alt_data_end+0xfffe5da8>
200253c0:	b00b883a 	mov	r5,r22
200253c4:	900d883a 	mov	r6,r18
200253c8:	002617c0 	call	2002617c <memmove>
200253cc:	80c00217 	ldw	r3,8(r16)
200253d0:	80800017 	ldw	r2,0(r16)
200253d4:	9027883a 	mov	r19,r18
200253d8:	1c87c83a 	sub	r3,r3,r18
200253dc:	1485883a 	add	r2,r2,r18
200253e0:	80c00215 	stw	r3,8(r16)
200253e4:	80800015 	stw	r2,0(r16)
200253e8:	9039883a 	mov	fp,r18
200253ec:	003f7906 	br	200251d4 <__alt_data_end+0xfffe5dd4>
200253f0:	e009883a 	mov	r4,fp
200253f4:	01400284 	movi	r5,10
200253f8:	900d883a 	mov	r6,r18
200253fc:	00260840 	call	20026084 <memchr>
20025400:	10003c26 	beq	r2,zero,200254f4 <__sfvwrite_r+0x4bc>
20025404:	15800044 	addi	r22,r2,1
20025408:	b72dc83a 	sub	r22,r22,fp
2002540c:	00c00044 	movi	r3,1
20025410:	003f9206 	br	2002525c <__alt_data_end+0xfffe5e5c>
20025414:	81000517 	ldw	r4,20(r16)
20025418:	81400417 	ldw	r5,16(r16)
2002541c:	80c00017 	ldw	r3,0(r16)
20025420:	210d883a 	add	r6,r4,r4
20025424:	3109883a 	add	r4,r6,r4
20025428:	2026d7fa 	srli	r19,r4,31
2002542c:	1979c83a 	sub	fp,r3,r5
20025430:	e1800044 	addi	r6,fp,1
20025434:	9909883a 	add	r4,r19,r4
20025438:	2027d07a 	srai	r19,r4,1
2002543c:	3489883a 	add	r4,r6,r18
20025440:	980d883a 	mov	r6,r19
20025444:	9900022e 	bgeu	r19,r4,20025450 <__sfvwrite_r+0x418>
20025448:	2027883a 	mov	r19,r4
2002544c:	200d883a 	mov	r6,r4
20025450:	1081000c 	andi	r2,r2,1024
20025454:	10bfffcc 	andi	r2,r2,65535
20025458:	10a0001c 	xori	r2,r2,32768
2002545c:	10a00004 	addi	r2,r2,-32768
20025460:	a809883a 	mov	r4,r21
20025464:	103f6b26 	beq	r2,zero,20025214 <__alt_data_end+0xfffe5e14>
20025468:	300b883a 	mov	r5,r6
2002546c:	00259000 	call	20025900 <_malloc_r>
20025470:	102f883a 	mov	r23,r2
20025474:	103f6d26 	beq	r2,zero,2002522c <__alt_data_end+0xfffe5e2c>
20025478:	81400417 	ldw	r5,16(r16)
2002547c:	1009883a 	mov	r4,r2
20025480:	e00d883a 	mov	r6,fp
20025484:	0020c300 	call	20020c30 <memcpy>
20025488:	8080030b 	ldhu	r2,12(r16)
2002548c:	00fedfc4 	movi	r3,-1153
20025490:	10c4703a 	and	r2,r2,r3
20025494:	10802014 	ori	r2,r2,128
20025498:	8080030d 	sth	r2,12(r16)
2002549c:	bf09883a 	add	r4,r23,fp
200254a0:	9f07c83a 	sub	r3,r19,fp
200254a4:	85c00415 	stw	r23,16(r16)
200254a8:	84c00515 	stw	r19,20(r16)
200254ac:	81000015 	stw	r4,0(r16)
200254b0:	902f883a 	mov	r23,r18
200254b4:	80c00215 	stw	r3,8(r16)
200254b8:	9039883a 	mov	fp,r18
200254bc:	9027883a 	mov	r19,r18
200254c0:	900f883a 	mov	r7,r18
200254c4:	003f3806 	br	200251a8 <__alt_data_end+0xfffe5da8>
200254c8:	b00b883a 	mov	r5,r22
200254cc:	980d883a 	mov	r6,r19
200254d0:	002617c0 	call	2002617c <memmove>
200254d4:	80800017 	ldw	r2,0(r16)
200254d8:	a809883a 	mov	r4,r21
200254dc:	800b883a 	mov	r5,r16
200254e0:	14c5883a 	add	r2,r2,r19
200254e4:	80800015 	stw	r2,0(r16)
200254e8:	002473c0 	call	2002473c <_fflush_r>
200254ec:	103f3926 	beq	r2,zero,200251d4 <__alt_data_end+0xfffe5dd4>
200254f0:	003f5006 	br	20025234 <__alt_data_end+0xfffe5e34>
200254f4:	95800044 	addi	r22,r18,1
200254f8:	00c00044 	movi	r3,1
200254fc:	003f5706 	br	2002525c <__alt_data_end+0xfffe5e5c>
20025500:	80c0030b 	ldhu	r3,12(r16)
20025504:	00bfffc4 	movi	r2,-1
20025508:	18c01014 	ori	r3,r3,64
2002550c:	80c0030d 	sth	r3,12(r16)
20025510:	00c00244 	movi	r3,9
20025514:	a8c00015 	stw	r3,0(r21)
20025518:	003ef906 	br	20025100 <__alt_data_end+0xfffe5d00>

2002551c <_fwalk>:
2002551c:	defff904 	addi	sp,sp,-28
20025520:	dcc00315 	stw	r19,12(sp)
20025524:	24c0b804 	addi	r19,r4,736
20025528:	dd400515 	stw	r21,20(sp)
2002552c:	dd000415 	stw	r20,16(sp)
20025530:	dfc00615 	stw	ra,24(sp)
20025534:	dc800215 	stw	r18,8(sp)
20025538:	dc400115 	stw	r17,4(sp)
2002553c:	dc000015 	stw	r16,0(sp)
20025540:	282b883a 	mov	r21,r5
20025544:	0029883a 	mov	r20,zero
20025548:	0024bec0 	call	20024bec <__sfp_lock_acquire>
2002554c:	98001226 	beq	r19,zero,20025598 <_fwalk+0x7c>
20025550:	04bfffc4 	movi	r18,-1
20025554:	9c400117 	ldw	r17,4(r19)
20025558:	9c000217 	ldw	r16,8(r19)
2002555c:	8c7fffc4 	addi	r17,r17,-1
20025560:	88000b16 	blt	r17,zero,20025590 <_fwalk+0x74>
20025564:	84000304 	addi	r16,r16,12
20025568:	80c0000f 	ldh	r3,0(r16)
2002556c:	8c7fffc4 	addi	r17,r17,-1
20025570:	813ffd04 	addi	r4,r16,-12
20025574:	18000426 	beq	r3,zero,20025588 <_fwalk+0x6c>
20025578:	80c0008f 	ldh	r3,2(r16)
2002557c:	1c800226 	beq	r3,r18,20025588 <_fwalk+0x6c>
20025580:	a83ee83a 	callr	r21
20025584:	a0a8b03a 	or	r20,r20,r2
20025588:	84001704 	addi	r16,r16,92
2002558c:	8cbff61e 	bne	r17,r18,20025568 <__alt_data_end+0xfffe6168>
20025590:	9cc00017 	ldw	r19,0(r19)
20025594:	983fef1e 	bne	r19,zero,20025554 <__alt_data_end+0xfffe6154>
20025598:	0024bf00 	call	20024bf0 <__sfp_lock_release>
2002559c:	a005883a 	mov	r2,r20
200255a0:	dfc00617 	ldw	ra,24(sp)
200255a4:	dd400517 	ldw	r21,20(sp)
200255a8:	dd000417 	ldw	r20,16(sp)
200255ac:	dcc00317 	ldw	r19,12(sp)
200255b0:	dc800217 	ldw	r18,8(sp)
200255b4:	dc400117 	ldw	r17,4(sp)
200255b8:	dc000017 	ldw	r16,0(sp)
200255bc:	dec00704 	addi	sp,sp,28
200255c0:	f800283a 	ret

200255c4 <_fwalk_reent>:
200255c4:	defff804 	addi	sp,sp,-32
200255c8:	dcc00315 	stw	r19,12(sp)
200255cc:	24c0b804 	addi	r19,r4,736
200255d0:	dd800615 	stw	r22,24(sp)
200255d4:	dd400515 	stw	r21,20(sp)
200255d8:	dd000415 	stw	r20,16(sp)
200255dc:	dfc00715 	stw	ra,28(sp)
200255e0:	dc800215 	stw	r18,8(sp)
200255e4:	dc400115 	stw	r17,4(sp)
200255e8:	dc000015 	stw	r16,0(sp)
200255ec:	2029883a 	mov	r20,r4
200255f0:	282b883a 	mov	r21,r5
200255f4:	002d883a 	mov	r22,zero
200255f8:	0024bec0 	call	20024bec <__sfp_lock_acquire>
200255fc:	98001326 	beq	r19,zero,2002564c <_fwalk_reent+0x88>
20025600:	04bfffc4 	movi	r18,-1
20025604:	9c400117 	ldw	r17,4(r19)
20025608:	9c000217 	ldw	r16,8(r19)
2002560c:	8c7fffc4 	addi	r17,r17,-1
20025610:	88000c16 	blt	r17,zero,20025644 <_fwalk_reent+0x80>
20025614:	84000304 	addi	r16,r16,12
20025618:	80c0000f 	ldh	r3,0(r16)
2002561c:	8c7fffc4 	addi	r17,r17,-1
20025620:	817ffd04 	addi	r5,r16,-12
20025624:	18000526 	beq	r3,zero,2002563c <_fwalk_reent+0x78>
20025628:	80c0008f 	ldh	r3,2(r16)
2002562c:	a009883a 	mov	r4,r20
20025630:	1c800226 	beq	r3,r18,2002563c <_fwalk_reent+0x78>
20025634:	a83ee83a 	callr	r21
20025638:	b0acb03a 	or	r22,r22,r2
2002563c:	84001704 	addi	r16,r16,92
20025640:	8cbff51e 	bne	r17,r18,20025618 <__alt_data_end+0xfffe6218>
20025644:	9cc00017 	ldw	r19,0(r19)
20025648:	983fee1e 	bne	r19,zero,20025604 <__alt_data_end+0xfffe6204>
2002564c:	0024bf00 	call	20024bf0 <__sfp_lock_release>
20025650:	b005883a 	mov	r2,r22
20025654:	dfc00717 	ldw	ra,28(sp)
20025658:	dd800617 	ldw	r22,24(sp)
2002565c:	dd400517 	ldw	r21,20(sp)
20025660:	dd000417 	ldw	r20,16(sp)
20025664:	dcc00317 	ldw	r19,12(sp)
20025668:	dc800217 	ldw	r18,8(sp)
2002566c:	dc400117 	ldw	r17,4(sp)
20025670:	dc000017 	ldw	r16,0(sp)
20025674:	dec00804 	addi	sp,sp,32
20025678:	f800283a 	ret

2002567c <_setlocale_r>:
2002567c:	defffc04 	addi	sp,sp,-16
20025680:	dc800215 	stw	r18,8(sp)
20025684:	dc400115 	stw	r17,4(sp)
20025688:	dc000015 	stw	r16,0(sp)
2002568c:	dfc00315 	stw	ra,12(sp)
20025690:	3021883a 	mov	r16,r6
20025694:	2023883a 	mov	r17,r4
20025698:	2825883a 	mov	r18,r5
2002569c:	30001626 	beq	r6,zero,200256f8 <_setlocale_r+0x7c>
200256a0:	3009883a 	mov	r4,r6
200256a4:	014800f4 	movhi	r5,8195
200256a8:	29732504 	addi	r5,r5,-13164
200256ac:	0027cd80 	call	20027cd8 <strcmp>
200256b0:	10000a1e 	bne	r2,zero,200256dc <_setlocale_r+0x60>
200256b4:	8c800c15 	stw	r18,48(r17)
200256b8:	8c000d15 	stw	r16,52(r17)
200256bc:	008800f4 	movhi	r2,8195
200256c0:	10b32504 	addi	r2,r2,-13164
200256c4:	dfc00317 	ldw	ra,12(sp)
200256c8:	dc800217 	ldw	r18,8(sp)
200256cc:	dc400117 	ldw	r17,4(sp)
200256d0:	dc000017 	ldw	r16,0(sp)
200256d4:	dec00404 	addi	sp,sp,16
200256d8:	f800283a 	ret
200256dc:	8009883a 	mov	r4,r16
200256e0:	014800f4 	movhi	r5,8195
200256e4:	29731004 	addi	r5,r5,-13248
200256e8:	0027cd80 	call	20027cd8 <strcmp>
200256ec:	103ff126 	beq	r2,zero,200256b4 <__alt_data_end+0xfffe62b4>
200256f0:	0005883a 	mov	r2,zero
200256f4:	003ff306 	br	200256c4 <__alt_data_end+0xfffe62c4>
200256f8:	008800f4 	movhi	r2,8195
200256fc:	10b32504 	addi	r2,r2,-13164
20025700:	dfc00317 	ldw	ra,12(sp)
20025704:	dc800217 	ldw	r18,8(sp)
20025708:	dc400117 	ldw	r17,4(sp)
2002570c:	dc000017 	ldw	r16,0(sp)
20025710:	dec00404 	addi	sp,sp,16
20025714:	f800283a 	ret

20025718 <__locale_charset>:
20025718:	008800f4 	movhi	r2,8195
2002571c:	10b32604 	addi	r2,r2,-13160
20025720:	f800283a 	ret

20025724 <_localeconv_r>:
20025724:	008800f4 	movhi	r2,8195
20025728:	10b32a04 	addi	r2,r2,-13144
2002572c:	f800283a 	ret

20025730 <setlocale>:
20025730:	00c800f4 	movhi	r3,8195
20025734:	18fa5704 	addi	r3,r3,-5796
20025738:	2005883a 	mov	r2,r4
2002573c:	19000017 	ldw	r4,0(r3)
20025740:	280d883a 	mov	r6,r5
20025744:	100b883a 	mov	r5,r2
20025748:	002567c1 	jmpi	2002567c <_setlocale_r>

2002574c <localeconv>:
2002574c:	008800f4 	movhi	r2,8195
20025750:	10b32a04 	addi	r2,r2,-13144
20025754:	f800283a 	ret

20025758 <__smakebuf_r>:
20025758:	2880030b 	ldhu	r2,12(r5)
2002575c:	deffed04 	addi	sp,sp,-76
20025760:	dc401015 	stw	r17,64(sp)
20025764:	10c0008c 	andi	r3,r2,2
20025768:	18ffffcc 	andi	r3,r3,65535
2002576c:	18e0001c 	xori	r3,r3,32768
20025770:	dc000f15 	stw	r16,60(sp)
20025774:	dfc01215 	stw	ra,72(sp)
20025778:	dc801115 	stw	r18,68(sp)
2002577c:	18e00004 	addi	r3,r3,-32768
20025780:	2821883a 	mov	r16,r5
20025784:	2023883a 	mov	r17,r4
20025788:	1800381e 	bne	r3,zero,2002586c <__smakebuf_r+0x114>
2002578c:	2940038f 	ldh	r5,14(r5)
20025790:	28002d16 	blt	r5,zero,20025848 <__smakebuf_r+0xf0>
20025794:	d80d883a 	mov	r6,sp
20025798:	00281b00 	call	200281b0 <_fstat_r>
2002579c:	10002916 	blt	r2,zero,20025844 <__smakebuf_r+0xec>
200257a0:	d8800117 	ldw	r2,4(sp)
200257a4:	00e00014 	movui	r3,32768
200257a8:	10bc000c 	andi	r2,r2,61440
200257ac:	10c03c26 	beq	r2,r3,200258a0 <__smakebuf_r+0x148>
200257b0:	80c0030b 	ldhu	r3,12(r16)
200257b4:	18c20014 	ori	r3,r3,2048
200257b8:	80c0030d 	sth	r3,12(r16)
200257bc:	00c80004 	movi	r3,8192
200257c0:	10c00c1e 	bne	r2,r3,200257f4 <__smakebuf_r+0x9c>
200257c4:	8140038f 	ldh	r5,14(r16)
200257c8:	8809883a 	mov	r4,r17
200257cc:	00282180 	call	20028218 <_isatty_r>
200257d0:	10000826 	beq	r2,zero,200257f4 <__smakebuf_r+0x9c>
200257d4:	80c0030b 	ldhu	r3,12(r16)
200257d8:	808010c4 	addi	r2,r16,67
200257dc:	80800015 	stw	r2,0(r16)
200257e0:	18c00054 	ori	r3,r3,1
200257e4:	80800415 	stw	r2,16(r16)
200257e8:	00800044 	movi	r2,1
200257ec:	80c0030d 	sth	r3,12(r16)
200257f0:	80800515 	stw	r2,20(r16)
200257f4:	04810004 	movi	r18,1024
200257f8:	8809883a 	mov	r4,r17
200257fc:	900b883a 	mov	r5,r18
20025800:	00259000 	call	20025900 <_malloc_r>
20025804:	10003026 	beq	r2,zero,200258c8 <__smakebuf_r+0x170>
20025808:	80c0030b 	ldhu	r3,12(r16)
2002580c:	010800b4 	movhi	r4,8194
20025810:	21125904 	addi	r4,r4,18788
20025814:	89000f15 	stw	r4,60(r17)
20025818:	18c02014 	ori	r3,r3,128
2002581c:	80c0030d 	sth	r3,12(r16)
20025820:	80800015 	stw	r2,0(r16)
20025824:	80800415 	stw	r2,16(r16)
20025828:	84800515 	stw	r18,20(r16)
2002582c:	dfc01217 	ldw	ra,72(sp)
20025830:	dc801117 	ldw	r18,68(sp)
20025834:	dc401017 	ldw	r17,64(sp)
20025838:	dc000f17 	ldw	r16,60(sp)
2002583c:	dec01304 	addi	sp,sp,76
20025840:	f800283a 	ret
20025844:	8080030b 	ldhu	r2,12(r16)
20025848:	10c0200c 	andi	r3,r2,128
2002584c:	18ffffcc 	andi	r3,r3,65535
20025850:	18e0001c 	xori	r3,r3,32768
20025854:	18e00004 	addi	r3,r3,-32768
20025858:	18000f1e 	bne	r3,zero,20025898 <__smakebuf_r+0x140>
2002585c:	04810004 	movi	r18,1024
20025860:	10820014 	ori	r2,r2,2048
20025864:	8080030d 	sth	r2,12(r16)
20025868:	003fe306 	br	200257f8 <__alt_data_end+0xfffe63f8>
2002586c:	288010c4 	addi	r2,r5,67
20025870:	28800015 	stw	r2,0(r5)
20025874:	28800415 	stw	r2,16(r5)
20025878:	00800044 	movi	r2,1
2002587c:	28800515 	stw	r2,20(r5)
20025880:	dfc01217 	ldw	ra,72(sp)
20025884:	dc801117 	ldw	r18,68(sp)
20025888:	dc401017 	ldw	r17,64(sp)
2002588c:	dc000f17 	ldw	r16,60(sp)
20025890:	dec01304 	addi	sp,sp,76
20025894:	f800283a 	ret
20025898:	04801004 	movi	r18,64
2002589c:	003ff006 	br	20025860 <__alt_data_end+0xfffe6460>
200258a0:	81000a17 	ldw	r4,40(r16)
200258a4:	00c800b4 	movhi	r3,8194
200258a8:	18df1d04 	addi	r3,r3,31860
200258ac:	20ffc01e 	bne	r4,r3,200257b0 <__alt_data_end+0xfffe63b0>
200258b0:	8080030b 	ldhu	r2,12(r16)
200258b4:	00c10004 	movi	r3,1024
200258b8:	80c01315 	stw	r3,76(r16)
200258bc:	10c4b03a 	or	r2,r2,r3
200258c0:	8080030d 	sth	r2,12(r16)
200258c4:	003fcb06 	br	200257f4 <__alt_data_end+0xfffe63f4>
200258c8:	8080030b 	ldhu	r2,12(r16)
200258cc:	10c0800c 	andi	r3,r2,512
200258d0:	18ffffcc 	andi	r3,r3,65535
200258d4:	18e0001c 	xori	r3,r3,32768
200258d8:	18e00004 	addi	r3,r3,-32768
200258dc:	183fd31e 	bne	r3,zero,2002582c <__alt_data_end+0xfffe642c>
200258e0:	10800094 	ori	r2,r2,2
200258e4:	80c010c4 	addi	r3,r16,67
200258e8:	8080030d 	sth	r2,12(r16)
200258ec:	00800044 	movi	r2,1
200258f0:	80c00015 	stw	r3,0(r16)
200258f4:	80c00415 	stw	r3,16(r16)
200258f8:	80800515 	stw	r2,20(r16)
200258fc:	003fcb06 	br	2002582c <__alt_data_end+0xfffe642c>

20025900 <_malloc_r>:
20025900:	defff604 	addi	sp,sp,-40
20025904:	dc800215 	stw	r18,8(sp)
20025908:	dfc00915 	stw	ra,36(sp)
2002590c:	df000815 	stw	fp,32(sp)
20025910:	ddc00715 	stw	r23,28(sp)
20025914:	dd800615 	stw	r22,24(sp)
20025918:	dd400515 	stw	r21,20(sp)
2002591c:	dd000415 	stw	r20,16(sp)
20025920:	dcc00315 	stw	r19,12(sp)
20025924:	dc400115 	stw	r17,4(sp)
20025928:	dc000015 	stw	r16,0(sp)
2002592c:	288002c4 	addi	r2,r5,11
20025930:	00c00584 	movi	r3,22
20025934:	2025883a 	mov	r18,r4
20025938:	18802b2e 	bgeu	r3,r2,200259e8 <_malloc_r+0xe8>
2002593c:	047ffe04 	movi	r17,-8
20025940:	1462703a 	and	r17,r2,r17
20025944:	88002a16 	blt	r17,zero,200259f0 <_malloc_r+0xf0>
20025948:	89402936 	bltu	r17,r5,200259f0 <_malloc_r+0xf0>
2002594c:	9009883a 	mov	r4,r18
20025950:	002a75c0 	call	2002a75c <__malloc_lock>
20025954:	00807dc4 	movi	r2,503
20025958:	14402936 	bltu	r2,r17,20025a00 <_malloc_r+0x100>
2002595c:	8808d0fa 	srli	r4,r17,3
20025960:	04c800f4 	movhi	r19,8195
20025964:	9cf4d204 	addi	r19,r19,-11448
20025968:	2105883a 	add	r2,r4,r4
2002596c:	1085883a 	add	r2,r2,r2
20025970:	1085883a 	add	r2,r2,r2
20025974:	9885883a 	add	r2,r19,r2
20025978:	14000317 	ldw	r16,12(r2)
2002597c:	80815526 	beq	r16,r2,20025ed4 <_malloc_r+0x5d4>
20025980:	81000117 	ldw	r4,4(r16)
20025984:	00bfff04 	movi	r2,-4
20025988:	80c00317 	ldw	r3,12(r16)
2002598c:	2084703a 	and	r2,r4,r2
20025990:	8085883a 	add	r2,r16,r2
20025994:	11800117 	ldw	r6,4(r2)
20025998:	81400217 	ldw	r5,8(r16)
2002599c:	9009883a 	mov	r4,r18
200259a0:	31800054 	ori	r6,r6,1
200259a4:	11800115 	stw	r6,4(r2)
200259a8:	28c00315 	stw	r3,12(r5)
200259ac:	19400215 	stw	r5,8(r3)
200259b0:	002a77c0 	call	2002a77c <__malloc_unlock>
200259b4:	80800204 	addi	r2,r16,8
200259b8:	dfc00917 	ldw	ra,36(sp)
200259bc:	df000817 	ldw	fp,32(sp)
200259c0:	ddc00717 	ldw	r23,28(sp)
200259c4:	dd800617 	ldw	r22,24(sp)
200259c8:	dd400517 	ldw	r21,20(sp)
200259cc:	dd000417 	ldw	r20,16(sp)
200259d0:	dcc00317 	ldw	r19,12(sp)
200259d4:	dc800217 	ldw	r18,8(sp)
200259d8:	dc400117 	ldw	r17,4(sp)
200259dc:	dc000017 	ldw	r16,0(sp)
200259e0:	dec00a04 	addi	sp,sp,40
200259e4:	f800283a 	ret
200259e8:	04400404 	movi	r17,16
200259ec:	897fd72e 	bgeu	r17,r5,2002594c <__alt_data_end+0xfffe654c>
200259f0:	00800304 	movi	r2,12
200259f4:	90800015 	stw	r2,0(r18)
200259f8:	0005883a 	mov	r2,zero
200259fc:	003fee06 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025a00:	8808d27a 	srli	r4,r17,9
20025a04:	20007126 	beq	r4,zero,20025bcc <_malloc_r+0x2cc>
20025a08:	00800104 	movi	r2,4
20025a0c:	1100eb36 	bltu	r2,r4,20025dbc <_malloc_r+0x4bc>
20025a10:	8808d1ba 	srli	r4,r17,6
20025a14:	21000e04 	addi	r4,r4,56
20025a18:	210b883a 	add	r5,r4,r4
20025a1c:	294b883a 	add	r5,r5,r5
20025a20:	294b883a 	add	r5,r5,r5
20025a24:	04c800f4 	movhi	r19,8195
20025a28:	9cf4d204 	addi	r19,r19,-11448
20025a2c:	994b883a 	add	r5,r19,r5
20025a30:	2c000317 	ldw	r16,12(r5)
20025a34:	2c000e26 	beq	r5,r16,20025a70 <_malloc_r+0x170>
20025a38:	80c00117 	ldw	r3,4(r16)
20025a3c:	01ffff04 	movi	r7,-4
20025a40:	018003c4 	movi	r6,15
20025a44:	19c6703a 	and	r3,r3,r7
20025a48:	1c45c83a 	sub	r2,r3,r17
20025a4c:	30800716 	blt	r6,r2,20025a6c <_malloc_r+0x16c>
20025a50:	1000610e 	bge	r2,zero,20025bd8 <_malloc_r+0x2d8>
20025a54:	84000317 	ldw	r16,12(r16)
20025a58:	2c000526 	beq	r5,r16,20025a70 <_malloc_r+0x170>
20025a5c:	80c00117 	ldw	r3,4(r16)
20025a60:	19c6703a 	and	r3,r3,r7
20025a64:	1c45c83a 	sub	r2,r3,r17
20025a68:	30bff90e 	bge	r6,r2,20025a50 <__alt_data_end+0xfffe6650>
20025a6c:	213fffc4 	addi	r4,r4,-1
20025a70:	21000044 	addi	r4,r4,1
20025a74:	9c000417 	ldw	r16,16(r19)
20025a78:	00c800f4 	movhi	r3,8195
20025a7c:	18f4d204 	addi	r3,r3,-11448
20025a80:	1a400204 	addi	r9,r3,8
20025a84:	8240ff26 	beq	r16,r9,20025e84 <_malloc_r+0x584>
20025a88:	81400117 	ldw	r5,4(r16)
20025a8c:	00bfff04 	movi	r2,-4
20025a90:	018003c4 	movi	r6,15
20025a94:	2884703a 	and	r2,r5,r2
20025a98:	144bc83a 	sub	r5,r2,r17
20025a9c:	3140ea16 	blt	r6,r5,20025e48 <_malloc_r+0x548>
20025aa0:	1a400515 	stw	r9,20(r3)
20025aa4:	1a400415 	stw	r9,16(r3)
20025aa8:	2800570e 	bge	r5,zero,20025c08 <_malloc_r+0x308>
20025aac:	01407fc4 	movi	r5,511
20025ab0:	2880ca36 	bltu	r5,r2,20025ddc <_malloc_r+0x4dc>
20025ab4:	1004d0fa 	srli	r2,r2,3
20025ab8:	02000044 	movi	r8,1
20025abc:	19c00117 	ldw	r7,4(r3)
20025ac0:	108b883a 	add	r5,r2,r2
20025ac4:	294b883a 	add	r5,r5,r5
20025ac8:	1005d0ba 	srai	r2,r2,2
20025acc:	294b883a 	add	r5,r5,r5
20025ad0:	28cb883a 	add	r5,r5,r3
20025ad4:	29800217 	ldw	r6,8(r5)
20025ad8:	4084983a 	sll	r2,r8,r2
20025adc:	81400315 	stw	r5,12(r16)
20025ae0:	81800215 	stw	r6,8(r16)
20025ae4:	11c4b03a 	or	r2,r2,r7
20025ae8:	18800115 	stw	r2,4(r3)
20025aec:	2c000215 	stw	r16,8(r5)
20025af0:	34000315 	stw	r16,12(r6)
20025af4:	200bd0ba 	srai	r5,r4,2
20025af8:	00c00044 	movi	r3,1
20025afc:	194a983a 	sll	r5,r3,r5
20025b00:	11404936 	bltu	r2,r5,20025c28 <_malloc_r+0x328>
20025b04:	1146703a 	and	r3,r2,r5
20025b08:	18000a1e 	bne	r3,zero,20025b34 <_malloc_r+0x234>
20025b0c:	00ffff04 	movi	r3,-4
20025b10:	294b883a 	add	r5,r5,r5
20025b14:	20c8703a 	and	r4,r4,r3
20025b18:	1146703a 	and	r3,r2,r5
20025b1c:	21000104 	addi	r4,r4,4
20025b20:	1800041e 	bne	r3,zero,20025b34 <_malloc_r+0x234>
20025b24:	294b883a 	add	r5,r5,r5
20025b28:	1146703a 	and	r3,r2,r5
20025b2c:	21000104 	addi	r4,r4,4
20025b30:	183ffc26 	beq	r3,zero,20025b24 <__alt_data_end+0xfffe6724>
20025b34:	023fff04 	movi	r8,-4
20025b38:	01c003c4 	movi	r7,15
20025b3c:	2105883a 	add	r2,r4,r4
20025b40:	1085883a 	add	r2,r2,r2
20025b44:	1085883a 	add	r2,r2,r2
20025b48:	9899883a 	add	r12,r19,r2
20025b4c:	62800304 	addi	r10,r12,12
20025b50:	2017883a 	mov	r11,r4
20025b54:	54000017 	ldw	r16,0(r10)
20025b58:	51bffd04 	addi	r6,r10,-12
20025b5c:	8180041e 	bne	r16,r6,20025b70 <_malloc_r+0x270>
20025b60:	0000ca06 	br	20025e8c <_malloc_r+0x58c>
20025b64:	10001c0e 	bge	r2,zero,20025bd8 <_malloc_r+0x2d8>
20025b68:	84000317 	ldw	r16,12(r16)
20025b6c:	8180c726 	beq	r16,r6,20025e8c <_malloc_r+0x58c>
20025b70:	80c00117 	ldw	r3,4(r16)
20025b74:	1a06703a 	and	r3,r3,r8
20025b78:	1c45c83a 	sub	r2,r3,r17
20025b7c:	38bff90e 	bge	r7,r2,20025b64 <__alt_data_end+0xfffe6764>
20025b80:	81000317 	ldw	r4,12(r16)
20025b84:	81400217 	ldw	r5,8(r16)
20025b88:	8447883a 	add	r3,r16,r17
20025b8c:	8c400054 	ori	r17,r17,1
20025b90:	29000315 	stw	r4,12(r5)
20025b94:	21400215 	stw	r5,8(r4)
20025b98:	84400115 	stw	r17,4(r16)
20025b9c:	1889883a 	add	r4,r3,r2
20025ba0:	11400054 	ori	r5,r2,1
20025ba4:	98c00515 	stw	r3,20(r19)
20025ba8:	98c00415 	stw	r3,16(r19)
20025bac:	20800015 	stw	r2,0(r4)
20025bb0:	1a400315 	stw	r9,12(r3)
20025bb4:	1a400215 	stw	r9,8(r3)
20025bb8:	19400115 	stw	r5,4(r3)
20025bbc:	9009883a 	mov	r4,r18
20025bc0:	002a77c0 	call	2002a77c <__malloc_unlock>
20025bc4:	80800204 	addi	r2,r16,8
20025bc8:	003f7b06 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025bcc:	8808d0fa 	srli	r4,r17,3
20025bd0:	210b883a 	add	r5,r4,r4
20025bd4:	003f9106 	br	20025a1c <__alt_data_end+0xfffe661c>
20025bd8:	80c7883a 	add	r3,r16,r3
20025bdc:	19400117 	ldw	r5,4(r3)
20025be0:	80800317 	ldw	r2,12(r16)
20025be4:	81000217 	ldw	r4,8(r16)
20025be8:	29400054 	ori	r5,r5,1
20025bec:	19400115 	stw	r5,4(r3)
20025bf0:	20800315 	stw	r2,12(r4)
20025bf4:	11000215 	stw	r4,8(r2)
20025bf8:	9009883a 	mov	r4,r18
20025bfc:	002a77c0 	call	2002a77c <__malloc_unlock>
20025c00:	80800204 	addi	r2,r16,8
20025c04:	003f6c06 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025c08:	8085883a 	add	r2,r16,r2
20025c0c:	10c00117 	ldw	r3,4(r2)
20025c10:	9009883a 	mov	r4,r18
20025c14:	18c00054 	ori	r3,r3,1
20025c18:	10c00115 	stw	r3,4(r2)
20025c1c:	002a77c0 	call	2002a77c <__malloc_unlock>
20025c20:	80800204 	addi	r2,r16,8
20025c24:	003f6406 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025c28:	9c000217 	ldw	r16,8(r19)
20025c2c:	00bfff04 	movi	r2,-4
20025c30:	85400117 	ldw	r21,4(r16)
20025c34:	a8aa703a 	and	r21,r21,r2
20025c38:	ac400336 	bltu	r21,r17,20025c48 <_malloc_r+0x348>
20025c3c:	ac45c83a 	sub	r2,r21,r17
20025c40:	00c003c4 	movi	r3,15
20025c44:	18805316 	blt	r3,r2,20025d94 <_malloc_r+0x494>
20025c48:	d5e6aa17 	ldw	r23,-25944(gp)
20025c4c:	d0e00317 	ldw	r3,-32756(gp)
20025c50:	00bfffc4 	movi	r2,-1
20025c54:	8579883a 	add	fp,r16,r21
20025c58:	8def883a 	add	r23,r17,r23
20025c5c:	1880d226 	beq	r3,r2,20025fa8 <_malloc_r+0x6a8>
20025c60:	bdc403c4 	addi	r23,r23,4111
20025c64:	00bc0004 	movi	r2,-4096
20025c68:	b8ae703a 	and	r23,r23,r2
20025c6c:	9009883a 	mov	r4,r18
20025c70:	b80b883a 	mov	r5,r23
20025c74:	0027b340 	call	20027b34 <_sbrk_r>
20025c78:	1029883a 	mov	r20,r2
20025c7c:	00bfffc4 	movi	r2,-1
20025c80:	a080d126 	beq	r20,r2,20025fc8 <_malloc_r+0x6c8>
20025c84:	a7009f36 	bltu	r20,fp,20025f04 <_malloc_r+0x604>
20025c88:	058800f4 	movhi	r22,8195
20025c8c:	b5810804 	addi	r22,r22,1056
20025c90:	b0800017 	ldw	r2,0(r22)
20025c94:	b885883a 	add	r2,r23,r2
20025c98:	b0800015 	stw	r2,0(r22)
20025c9c:	e500cf26 	beq	fp,r20,20025fdc <_malloc_r+0x6dc>
20025ca0:	d1200317 	ldw	r4,-32756(gp)
20025ca4:	00ffffc4 	movi	r3,-1
20025ca8:	20c0e026 	beq	r4,r3,2002602c <_malloc_r+0x72c>
20025cac:	a739c83a 	sub	fp,r20,fp
20025cb0:	1705883a 	add	r2,r2,fp
20025cb4:	b0800015 	stw	r2,0(r22)
20025cb8:	a08001cc 	andi	r2,r20,7
20025cbc:	1000a526 	beq	r2,zero,20025f54 <_malloc_r+0x654>
20025cc0:	a0a9c83a 	sub	r20,r20,r2
20025cc4:	00c40204 	movi	r3,4104
20025cc8:	a5000204 	addi	r20,r20,8
20025ccc:	1885c83a 	sub	r2,r3,r2
20025cd0:	a5c7883a 	add	r3,r20,r23
20025cd4:	18c3ffcc 	andi	r3,r3,4095
20025cd8:	10efc83a 	sub	r23,r2,r3
20025cdc:	9009883a 	mov	r4,r18
20025ce0:	b80b883a 	mov	r5,r23
20025ce4:	0027b340 	call	20027b34 <_sbrk_r>
20025ce8:	00ffffc4 	movi	r3,-1
20025cec:	10c0cc26 	beq	r2,r3,20026020 <_malloc_r+0x720>
20025cf0:	1505c83a 	sub	r2,r2,r20
20025cf4:	b887883a 	add	r3,r23,r2
20025cf8:	18c00054 	ori	r3,r3,1
20025cfc:	b0800017 	ldw	r2,0(r22)
20025d00:	9d000215 	stw	r20,8(r19)
20025d04:	a0c00115 	stw	r3,4(r20)
20025d08:	b885883a 	add	r2,r23,r2
20025d0c:	b0800015 	stw	r2,0(r22)
20025d10:	84c00e26 	beq	r16,r19,20025d4c <_malloc_r+0x44c>
20025d14:	00c003c4 	movi	r3,15
20025d18:	1d40902e 	bgeu	r3,r21,20025f5c <_malloc_r+0x65c>
20025d1c:	ad7ffd04 	addi	r21,r21,-12
20025d20:	013ffe04 	movi	r4,-8
20025d24:	a908703a 	and	r4,r21,r4
20025d28:	810b883a 	add	r5,r16,r4
20025d2c:	01800144 	movi	r6,5
20025d30:	29800115 	stw	r6,4(r5)
20025d34:	29800215 	stw	r6,8(r5)
20025d38:	81400117 	ldw	r5,4(r16)
20025d3c:	2940004c 	andi	r5,r5,1
20025d40:	214ab03a 	or	r5,r4,r5
20025d44:	81400115 	stw	r5,4(r16)
20025d48:	1900ae36 	bltu	r3,r4,20026004 <_malloc_r+0x704>
20025d4c:	d0e6a917 	ldw	r3,-25948(gp)
20025d50:	1880012e 	bgeu	r3,r2,20025d58 <_malloc_r+0x458>
20025d54:	d0a6a915 	stw	r2,-25948(gp)
20025d58:	d0e6a817 	ldw	r3,-25952(gp)
20025d5c:	9c000217 	ldw	r16,8(r19)
20025d60:	1880012e 	bgeu	r3,r2,20025d68 <_malloc_r+0x468>
20025d64:	d0a6a815 	stw	r2,-25952(gp)
20025d68:	80c00117 	ldw	r3,4(r16)
20025d6c:	00bfff04 	movi	r2,-4
20025d70:	1886703a 	and	r3,r3,r2
20025d74:	1c45c83a 	sub	r2,r3,r17
20025d78:	1c400236 	bltu	r3,r17,20025d84 <_malloc_r+0x484>
20025d7c:	00c003c4 	movi	r3,15
20025d80:	18800416 	blt	r3,r2,20025d94 <_malloc_r+0x494>
20025d84:	9009883a 	mov	r4,r18
20025d88:	002a77c0 	call	2002a77c <__malloc_unlock>
20025d8c:	0005883a 	mov	r2,zero
20025d90:	003f0906 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025d94:	88c00054 	ori	r3,r17,1
20025d98:	10800054 	ori	r2,r2,1
20025d9c:	80c00115 	stw	r3,4(r16)
20025da0:	8463883a 	add	r17,r16,r17
20025da4:	88800115 	stw	r2,4(r17)
20025da8:	9009883a 	mov	r4,r18
20025dac:	9c400215 	stw	r17,8(r19)
20025db0:	002a77c0 	call	2002a77c <__malloc_unlock>
20025db4:	80800204 	addi	r2,r16,8
20025db8:	003eff06 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025dbc:	00800504 	movi	r2,20
20025dc0:	1100492e 	bgeu	r2,r4,20025ee8 <_malloc_r+0x5e8>
20025dc4:	00801504 	movi	r2,84
20025dc8:	11005c36 	bltu	r2,r4,20025f3c <_malloc_r+0x63c>
20025dcc:	8808d33a 	srli	r4,r17,12
20025dd0:	21001b84 	addi	r4,r4,110
20025dd4:	210b883a 	add	r5,r4,r4
20025dd8:	003f1006 	br	20025a1c <__alt_data_end+0xfffe661c>
20025ddc:	1006d27a 	srli	r3,r2,9
20025de0:	01400104 	movi	r5,4
20025de4:	28c0432e 	bgeu	r5,r3,20025ef4 <_malloc_r+0x5f4>
20025de8:	01400504 	movi	r5,20
20025dec:	28c07036 	bltu	r5,r3,20025fb0 <_malloc_r+0x6b0>
20025df0:	194016c4 	addi	r5,r3,91
20025df4:	294d883a 	add	r6,r5,r5
20025df8:	318d883a 	add	r6,r6,r6
20025dfc:	318d883a 	add	r6,r6,r6
20025e00:	998d883a 	add	r6,r19,r6
20025e04:	30c00217 	ldw	r3,8(r6)
20025e08:	01c800f4 	movhi	r7,8195
20025e0c:	39f4d204 	addi	r7,r7,-11448
20025e10:	19805726 	beq	r3,r6,20025f70 <_malloc_r+0x670>
20025e14:	01ffff04 	movi	r7,-4
20025e18:	19400117 	ldw	r5,4(r3)
20025e1c:	29ca703a 	and	r5,r5,r7
20025e20:	1140022e 	bgeu	r2,r5,20025e2c <_malloc_r+0x52c>
20025e24:	18c00217 	ldw	r3,8(r3)
20025e28:	30fffb1e 	bne	r6,r3,20025e18 <__alt_data_end+0xfffe6a18>
20025e2c:	19400317 	ldw	r5,12(r3)
20025e30:	98800117 	ldw	r2,4(r19)
20025e34:	81400315 	stw	r5,12(r16)
20025e38:	80c00215 	stw	r3,8(r16)
20025e3c:	2c000215 	stw	r16,8(r5)
20025e40:	1c000315 	stw	r16,12(r3)
20025e44:	003f2b06 	br	20025af4 <__alt_data_end+0xfffe66f4>
20025e48:	8445883a 	add	r2,r16,r17
20025e4c:	8c400054 	ori	r17,r17,1
20025e50:	18800515 	stw	r2,20(r3)
20025e54:	18800415 	stw	r2,16(r3)
20025e58:	29000054 	ori	r4,r5,1
20025e5c:	1147883a 	add	r3,r2,r5
20025e60:	84400115 	stw	r17,4(r16)
20025e64:	11000115 	stw	r4,4(r2)
20025e68:	12400315 	stw	r9,12(r2)
20025e6c:	12400215 	stw	r9,8(r2)
20025e70:	19400015 	stw	r5,0(r3)
20025e74:	9009883a 	mov	r4,r18
20025e78:	002a77c0 	call	2002a77c <__malloc_unlock>
20025e7c:	80800204 	addi	r2,r16,8
20025e80:	003ecd06 	br	200259b8 <__alt_data_end+0xfffe65b8>
20025e84:	18800117 	ldw	r2,4(r3)
20025e88:	003f1a06 	br	20025af4 <__alt_data_end+0xfffe66f4>
20025e8c:	5ac00044 	addi	r11,r11,1
20025e90:	588000cc 	andi	r2,r11,3
20025e94:	52800204 	addi	r10,r10,8
20025e98:	103f2e1e 	bne	r2,zero,20025b54 <__alt_data_end+0xfffe6754>
20025e9c:	20c000cc 	andi	r3,r4,3
20025ea0:	60bffe04 	addi	r2,r12,-8
20025ea4:	18006f26 	beq	r3,zero,20026064 <_malloc_r+0x764>
20025ea8:	63000017 	ldw	r12,0(r12)
20025eac:	213fffc4 	addi	r4,r4,-1
20025eb0:	60bffa26 	beq	r12,r2,20025e9c <__alt_data_end+0xfffe6a9c>
20025eb4:	98800117 	ldw	r2,4(r19)
20025eb8:	294b883a 	add	r5,r5,r5
20025ebc:	117f5a36 	bltu	r2,r5,20025c28 <__alt_data_end+0xfffe6828>
20025ec0:	283f5926 	beq	r5,zero,20025c28 <__alt_data_end+0xfffe6828>
20025ec4:	1146703a 	and	r3,r2,r5
20025ec8:	18001626 	beq	r3,zero,20025f24 <_malloc_r+0x624>
20025ecc:	5809883a 	mov	r4,r11
20025ed0:	003f1a06 	br	20025b3c <__alt_data_end+0xfffe673c>
20025ed4:	80800204 	addi	r2,r16,8
20025ed8:	84000517 	ldw	r16,20(r16)
20025edc:	143ea81e 	bne	r2,r16,20025980 <__alt_data_end+0xfffe6580>
20025ee0:	21000084 	addi	r4,r4,2
20025ee4:	003ee306 	br	20025a74 <__alt_data_end+0xfffe6674>
20025ee8:	210016c4 	addi	r4,r4,91
20025eec:	210b883a 	add	r5,r4,r4
20025ef0:	003eca06 	br	20025a1c <__alt_data_end+0xfffe661c>
20025ef4:	100ad1ba 	srli	r5,r2,6
20025ef8:	29400e04 	addi	r5,r5,56
20025efc:	294d883a 	add	r6,r5,r5
20025f00:	003fbd06 	br	20025df8 <__alt_data_end+0xfffe69f8>
20025f04:	84ff6026 	beq	r16,r19,20025c88 <__alt_data_end+0xfffe6888>
20025f08:	008800f4 	movhi	r2,8195
20025f0c:	10b4d204 	addi	r2,r2,-11448
20025f10:	14000217 	ldw	r16,8(r2)
20025f14:	00bfff04 	movi	r2,-4
20025f18:	80c00117 	ldw	r3,4(r16)
20025f1c:	1886703a 	and	r3,r3,r2
20025f20:	003f9406 	br	20025d74 <__alt_data_end+0xfffe6974>
20025f24:	294b883a 	add	r5,r5,r5
20025f28:	1146703a 	and	r3,r2,r5
20025f2c:	5ac00104 	addi	r11,r11,4
20025f30:	183ffc26 	beq	r3,zero,20025f24 <__alt_data_end+0xfffe6b24>
20025f34:	5809883a 	mov	r4,r11
20025f38:	003f0006 	br	20025b3c <__alt_data_end+0xfffe673c>
20025f3c:	00805504 	movi	r2,340
20025f40:	11001336 	bltu	r2,r4,20025f90 <_malloc_r+0x690>
20025f44:	8808d3fa 	srli	r4,r17,15
20025f48:	21001dc4 	addi	r4,r4,119
20025f4c:	210b883a 	add	r5,r4,r4
20025f50:	003eb206 	br	20025a1c <__alt_data_end+0xfffe661c>
20025f54:	00840004 	movi	r2,4096
20025f58:	003f5d06 	br	20025cd0 <__alt_data_end+0xfffe68d0>
20025f5c:	00800044 	movi	r2,1
20025f60:	a0800115 	stw	r2,4(r20)
20025f64:	a021883a 	mov	r16,r20
20025f68:	0007883a 	mov	r3,zero
20025f6c:	003f8106 	br	20025d74 <__alt_data_end+0xfffe6974>
20025f70:	280bd0ba 	srai	r5,r5,2
20025f74:	01800044 	movi	r6,1
20025f78:	38800117 	ldw	r2,4(r7)
20025f7c:	314c983a 	sll	r6,r6,r5
20025f80:	180b883a 	mov	r5,r3
20025f84:	3084b03a 	or	r2,r6,r2
20025f88:	38800115 	stw	r2,4(r7)
20025f8c:	003fa906 	br	20025e34 <__alt_data_end+0xfffe6a34>
20025f90:	00815504 	movi	r2,1364
20025f94:	11001836 	bltu	r2,r4,20025ff8 <_malloc_r+0x6f8>
20025f98:	8808d4ba 	srli	r4,r17,18
20025f9c:	21001f04 	addi	r4,r4,124
20025fa0:	210b883a 	add	r5,r4,r4
20025fa4:	003e9d06 	br	20025a1c <__alt_data_end+0xfffe661c>
20025fa8:	bdc00404 	addi	r23,r23,16
20025fac:	003f2f06 	br	20025c6c <__alt_data_end+0xfffe686c>
20025fb0:	01401504 	movi	r5,84
20025fb4:	28c01f36 	bltu	r5,r3,20026034 <_malloc_r+0x734>
20025fb8:	100ad33a 	srli	r5,r2,12
20025fbc:	29401b84 	addi	r5,r5,110
20025fc0:	294d883a 	add	r6,r5,r5
20025fc4:	003f8c06 	br	20025df8 <__alt_data_end+0xfffe69f8>
20025fc8:	9c000217 	ldw	r16,8(r19)
20025fcc:	00bfff04 	movi	r2,-4
20025fd0:	80c00117 	ldw	r3,4(r16)
20025fd4:	1886703a 	and	r3,r3,r2
20025fd8:	003f6606 	br	20025d74 <__alt_data_end+0xfffe6974>
20025fdc:	e0c3ffcc 	andi	r3,fp,4095
20025fe0:	183f2f1e 	bne	r3,zero,20025ca0 <__alt_data_end+0xfffe68a0>
20025fe4:	98c00217 	ldw	r3,8(r19)
20025fe8:	bd49883a 	add	r4,r23,r21
20025fec:	21000054 	ori	r4,r4,1
20025ff0:	19000115 	stw	r4,4(r3)
20025ff4:	003f5506 	br	20025d4c <__alt_data_end+0xfffe694c>
20025ff8:	01403f04 	movi	r5,252
20025ffc:	01001f84 	movi	r4,126
20026000:	003e8606 	br	20025a1c <__alt_data_end+0xfffe661c>
20026004:	9009883a 	mov	r4,r18
20026008:	81400204 	addi	r5,r16,8
2002600c:	0024d680 	call	20024d68 <_free_r>
20026010:	008800f4 	movhi	r2,8195
20026014:	10810804 	addi	r2,r2,1056
20026018:	10800017 	ldw	r2,0(r2)
2002601c:	003f4b06 	br	20025d4c <__alt_data_end+0xfffe694c>
20026020:	00c00044 	movi	r3,1
20026024:	002f883a 	mov	r23,zero
20026028:	003f3406 	br	20025cfc <__alt_data_end+0xfffe68fc>
2002602c:	d5200315 	stw	r20,-32756(gp)
20026030:	003f2106 	br	20025cb8 <__alt_data_end+0xfffe68b8>
20026034:	01405504 	movi	r5,340
20026038:	28c00436 	bltu	r5,r3,2002604c <_malloc_r+0x74c>
2002603c:	100ad3fa 	srli	r5,r2,15
20026040:	29401dc4 	addi	r5,r5,119
20026044:	294d883a 	add	r6,r5,r5
20026048:	003f6b06 	br	20025df8 <__alt_data_end+0xfffe69f8>
2002604c:	01415504 	movi	r5,1364
20026050:	28c00936 	bltu	r5,r3,20026078 <_malloc_r+0x778>
20026054:	100ad4ba 	srli	r5,r2,18
20026058:	29401f04 	addi	r5,r5,124
2002605c:	294d883a 	add	r6,r5,r5
20026060:	003f6506 	br	20025df8 <__alt_data_end+0xfffe69f8>
20026064:	98800117 	ldw	r2,4(r19)
20026068:	0146303a 	nor	r3,zero,r5
2002606c:	1884703a 	and	r2,r3,r2
20026070:	98800115 	stw	r2,4(r19)
20026074:	003f9006 	br	20025eb8 <__alt_data_end+0xfffe6ab8>
20026078:	01803f04 	movi	r6,252
2002607c:	01401f84 	movi	r5,126
20026080:	003f5d06 	br	20025df8 <__alt_data_end+0xfffe69f8>

20026084 <memchr>:
20026084:	008000c4 	movi	r2,3
20026088:	29403fcc 	andi	r5,r5,255
2002608c:	1180282e 	bgeu	r2,r6,20026130 <memchr+0xac>
20026090:	2086703a 	and	r3,r4,r2
20026094:	1800351e 	bne	r3,zero,2002616c <memchr+0xe8>
20026098:	2816923a 	slli	r11,r5,8
2002609c:	2093883a 	add	r9,r4,r2
200260a0:	22000084 	addi	r8,r4,2
200260a4:	5957883a 	add	r11,r11,r5
200260a8:	5816923a 	slli	r11,r11,8
200260ac:	20c00044 	addi	r3,r4,1
200260b0:	037fbff4 	movhi	r13,65279
200260b4:	6b7fbfc4 	addi	r13,r13,-257
200260b8:	5957883a 	add	r11,r11,r5
200260bc:	5816923a 	slli	r11,r11,8
200260c0:	03202074 	movhi	r12,32897
200260c4:	63202004 	addi	r12,r12,-32640
200260c8:	101d883a 	mov	r14,r2
200260cc:	5957883a 	add	r11,r11,r5
200260d0:	21c00017 	ldw	r7,0(r4)
200260d4:	31bfff04 	addi	r6,r6,-4
200260d8:	1805883a 	mov	r2,r3
200260dc:	3acef03a 	xor	r7,r7,r11
200260e0:	3b55883a 	add	r10,r7,r13
200260e4:	01ce303a 	nor	r7,zero,r7
200260e8:	51ce703a 	and	r7,r10,r7
200260ec:	3b0e703a 	and	r7,r7,r12
200260f0:	38000a26 	beq	r7,zero,2002611c <memchr+0x98>
200260f4:	21c00003 	ldbu	r7,0(r4)
200260f8:	39401e26 	beq	r7,r5,20026174 <memchr+0xf0>
200260fc:	19c00003 	ldbu	r7,0(r3)
20026100:	39401926 	beq	r7,r5,20026168 <memchr+0xe4>
20026104:	41c00003 	ldbu	r7,0(r8)
20026108:	4005883a 	mov	r2,r8
2002610c:	39401626 	beq	r7,r5,20026168 <memchr+0xe4>
20026110:	49c00003 	ldbu	r7,0(r9)
20026114:	4805883a 	mov	r2,r9
20026118:	39401326 	beq	r7,r5,20026168 <memchr+0xe4>
2002611c:	21000104 	addi	r4,r4,4
20026120:	4a400104 	addi	r9,r9,4
20026124:	42000104 	addi	r8,r8,4
20026128:	18c00104 	addi	r3,r3,4
2002612c:	71bfe836 	bltu	r14,r6,200260d0 <__alt_data_end+0xfffe6cd0>
20026130:	2005883a 	mov	r2,r4
20026134:	30000a26 	beq	r6,zero,20026160 <memchr+0xdc>
20026138:	10c00003 	ldbu	r3,0(r2)
2002613c:	19400a26 	beq	r3,r5,20026168 <memchr+0xe4>
20026140:	10c00044 	addi	r3,r2,1
20026144:	118d883a 	add	r6,r2,r6
20026148:	00000306 	br	20026158 <memchr+0xd4>
2002614c:	11000003 	ldbu	r4,0(r2)
20026150:	18c00044 	addi	r3,r3,1
20026154:	21400426 	beq	r4,r5,20026168 <memchr+0xe4>
20026158:	1805883a 	mov	r2,r3
2002615c:	19bffb1e 	bne	r3,r6,2002614c <__alt_data_end+0xfffe6d4c>
20026160:	0005883a 	mov	r2,zero
20026164:	f800283a 	ret
20026168:	f800283a 	ret
2002616c:	2005883a 	mov	r2,r4
20026170:	003ff106 	br	20026138 <__alt_data_end+0xfffe6d38>
20026174:	2005883a 	mov	r2,r4
20026178:	f800283a 	ret

2002617c <memmove>:
2002617c:	2005883a 	mov	r2,r4
20026180:	300f883a 	mov	r7,r6
20026184:	29000b2e 	bgeu	r5,r4,200261b4 <memmove+0x38>
20026188:	2987883a 	add	r3,r5,r6
2002618c:	20c0092e 	bgeu	r4,r3,200261b4 <memmove+0x38>
20026190:	218b883a 	add	r5,r4,r6
20026194:	198fc83a 	sub	r7,r3,r6
20026198:	30003f26 	beq	r6,zero,20026298 <memmove+0x11c>
2002619c:	18ffffc4 	addi	r3,r3,-1
200261a0:	19000003 	ldbu	r4,0(r3)
200261a4:	297fffc4 	addi	r5,r5,-1
200261a8:	29000005 	stb	r4,0(r5)
200261ac:	19fffb1e 	bne	r3,r7,2002619c <__alt_data_end+0xfffe6d9c>
200261b0:	f800283a 	ret
200261b4:	00c003c4 	movi	r3,15
200261b8:	1980382e 	bgeu	r3,r6,2002629c <memmove+0x120>
200261bc:	2886b03a 	or	r3,r5,r2
200261c0:	18c000cc 	andi	r3,r3,3
200261c4:	1800351e 	bne	r3,zero,2002629c <memmove+0x120>
200261c8:	327ffc04 	addi	r9,r6,-16
200261cc:	4812d13a 	srli	r9,r9,4
200261d0:	12000404 	addi	r8,r2,16
200261d4:	1007883a 	mov	r3,r2
200261d8:	4808913a 	slli	r4,r9,4
200261dc:	280f883a 	mov	r7,r5
200261e0:	4111883a 	add	r8,r8,r4
200261e4:	39000017 	ldw	r4,0(r7)
200261e8:	18c00404 	addi	r3,r3,16
200261ec:	39c00404 	addi	r7,r7,16
200261f0:	193ffc15 	stw	r4,-16(r3)
200261f4:	393ffd17 	ldw	r4,-12(r7)
200261f8:	193ffd15 	stw	r4,-12(r3)
200261fc:	393ffe17 	ldw	r4,-8(r7)
20026200:	193ffe15 	stw	r4,-8(r3)
20026204:	393fff17 	ldw	r4,-4(r7)
20026208:	193fff15 	stw	r4,-4(r3)
2002620c:	1a3ff51e 	bne	r3,r8,200261e4 <__alt_data_end+0xfffe6de4>
20026210:	49000044 	addi	r4,r9,1
20026214:	2008913a 	slli	r4,r4,4
20026218:	31c003cc 	andi	r7,r6,15
2002621c:	1107883a 	add	r3,r2,r4
20026220:	290b883a 	add	r5,r5,r4
20026224:	010000c4 	movi	r4,3
20026228:	21c0142e 	bgeu	r4,r7,2002627c <memmove+0x100>
2002622c:	39ffff04 	addi	r7,r7,-4
20026230:	3814d0ba 	srli	r10,r7,2
20026234:	1a400104 	addi	r9,r3,4
20026238:	180d883a 	mov	r6,r3
2002623c:	5289883a 	add	r4,r10,r10
20026240:	2109883a 	add	r4,r4,r4
20026244:	4913883a 	add	r9,r9,r4
20026248:	2809883a 	mov	r4,r5
2002624c:	22000017 	ldw	r8,0(r4)
20026250:	31800104 	addi	r6,r6,4
20026254:	21000104 	addi	r4,r4,4
20026258:	323fff15 	stw	r8,-4(r6)
2002625c:	327ffb1e 	bne	r6,r9,2002624c <__alt_data_end+0xfffe6e4c>
20026260:	51000044 	addi	r4,r10,1
20026264:	52bfff24 	muli	r10,r10,-4
20026268:	2109883a 	add	r4,r4,r4
2002626c:	2109883a 	add	r4,r4,r4
20026270:	51cf883a 	add	r7,r10,r7
20026274:	290b883a 	add	r5,r5,r4
20026278:	1907883a 	add	r3,r3,r4
2002627c:	38000626 	beq	r7,zero,20026298 <memmove+0x11c>
20026280:	19cf883a 	add	r7,r3,r7
20026284:	29800003 	ldbu	r6,0(r5)
20026288:	18c00044 	addi	r3,r3,1
2002628c:	29400044 	addi	r5,r5,1
20026290:	19bfffc5 	stb	r6,-1(r3)
20026294:	19fffb1e 	bne	r3,r7,20026284 <__alt_data_end+0xfffe6e84>
20026298:	f800283a 	ret
2002629c:	1007883a 	mov	r3,r2
200262a0:	003ff606 	br	2002627c <__alt_data_end+0xfffe6e7c>

200262a4 <memset>:
200262a4:	00c000c4 	movi	r3,3
200262a8:	2005883a 	mov	r2,r4
200262ac:	29403fcc 	andi	r5,r5,255
200262b0:	19802d2e 	bgeu	r3,r6,20026368 <memset+0xc4>
200262b4:	20c6703a 	and	r3,r4,r3
200262b8:	18002e1e 	bne	r3,zero,20026374 <memset+0xd0>
200262bc:	2806923a 	slli	r3,r5,8
200262c0:	010003c4 	movi	r4,15
200262c4:	3011883a 	mov	r8,r6
200262c8:	1946b03a 	or	r3,r3,r5
200262cc:	180e943a 	slli	r7,r3,16
200262d0:	38ceb03a 	or	r7,r7,r3
200262d4:	1007883a 	mov	r3,r2
200262d8:	21800f2e 	bgeu	r4,r6,20026318 <memset+0x74>
200262dc:	19c00015 	stw	r7,0(r3)
200262e0:	19c00115 	stw	r7,4(r3)
200262e4:	19c00215 	stw	r7,8(r3)
200262e8:	19c00315 	stw	r7,12(r3)
200262ec:	423ffc04 	addi	r8,r8,-16
200262f0:	18c00404 	addi	r3,r3,16
200262f4:	223ff936 	bltu	r4,r8,200262dc <__alt_data_end+0xfffe6edc>
200262f8:	30fffc04 	addi	r3,r6,-16
200262fc:	1806d13a 	srli	r3,r3,4
20026300:	318003cc 	andi	r6,r6,15
20026304:	010000c4 	movi	r4,3
20026308:	18c00044 	addi	r3,r3,1
2002630c:	1806913a 	slli	r3,r3,4
20026310:	10c7883a 	add	r3,r2,r3
20026314:	21800e2e 	bgeu	r4,r6,20026350 <memset+0xac>
20026318:	1813883a 	mov	r9,r3
2002631c:	3011883a 	mov	r8,r6
20026320:	010000c4 	movi	r4,3
20026324:	49c00015 	stw	r7,0(r9)
20026328:	423fff04 	addi	r8,r8,-4
2002632c:	4a400104 	addi	r9,r9,4
20026330:	223ffc36 	bltu	r4,r8,20026324 <__alt_data_end+0xfffe6f24>
20026334:	313fff04 	addi	r4,r6,-4
20026338:	2008d0ba 	srli	r4,r4,2
2002633c:	318000cc 	andi	r6,r6,3
20026340:	21000044 	addi	r4,r4,1
20026344:	2109883a 	add	r4,r4,r4
20026348:	2109883a 	add	r4,r4,r4
2002634c:	1907883a 	add	r3,r3,r4
20026350:	30000a26 	beq	r6,zero,2002637c <memset+0xd8>
20026354:	198d883a 	add	r6,r3,r6
20026358:	19400005 	stb	r5,0(r3)
2002635c:	18c00044 	addi	r3,r3,1
20026360:	19bffd1e 	bne	r3,r6,20026358 <__alt_data_end+0xfffe6f58>
20026364:	f800283a 	ret
20026368:	2007883a 	mov	r3,r4
2002636c:	303ff91e 	bne	r6,zero,20026354 <__alt_data_end+0xfffe6f54>
20026370:	00000206 	br	2002637c <memset+0xd8>
20026374:	2007883a 	mov	r3,r4
20026378:	003ff606 	br	20026354 <__alt_data_end+0xfffe6f54>
2002637c:	f800283a 	ret

20026380 <_Balloc>:
20026380:	20801317 	ldw	r2,76(r4)
20026384:	defffc04 	addi	sp,sp,-16
20026388:	dc400115 	stw	r17,4(sp)
2002638c:	dc000015 	stw	r16,0(sp)
20026390:	dfc00315 	stw	ra,12(sp)
20026394:	dc800215 	stw	r18,8(sp)
20026398:	2023883a 	mov	r17,r4
2002639c:	2821883a 	mov	r16,r5
200263a0:	10000f26 	beq	r2,zero,200263e0 <_Balloc+0x60>
200263a4:	8407883a 	add	r3,r16,r16
200263a8:	18c7883a 	add	r3,r3,r3
200263ac:	10c7883a 	add	r3,r2,r3
200263b0:	18800017 	ldw	r2,0(r3)
200263b4:	10001126 	beq	r2,zero,200263fc <_Balloc+0x7c>
200263b8:	11000017 	ldw	r4,0(r2)
200263bc:	19000015 	stw	r4,0(r3)
200263c0:	10000415 	stw	zero,16(r2)
200263c4:	10000315 	stw	zero,12(r2)
200263c8:	dfc00317 	ldw	ra,12(sp)
200263cc:	dc800217 	ldw	r18,8(sp)
200263d0:	dc400117 	ldw	r17,4(sp)
200263d4:	dc000017 	ldw	r16,0(sp)
200263d8:	dec00404 	addi	sp,sp,16
200263dc:	f800283a 	ret
200263e0:	01400104 	movi	r5,4
200263e4:	01800404 	movi	r6,16
200263e8:	0027f400 	call	20027f40 <_calloc_r>
200263ec:	88801315 	stw	r2,76(r17)
200263f0:	103fec1e 	bne	r2,zero,200263a4 <__alt_data_end+0xfffe6fa4>
200263f4:	0005883a 	mov	r2,zero
200263f8:	003ff306 	br	200263c8 <__alt_data_end+0xfffe6fc8>
200263fc:	01400044 	movi	r5,1
20026400:	2c24983a 	sll	r18,r5,r16
20026404:	8809883a 	mov	r4,r17
20026408:	91800144 	addi	r6,r18,5
2002640c:	318d883a 	add	r6,r6,r6
20026410:	318d883a 	add	r6,r6,r6
20026414:	0027f400 	call	20027f40 <_calloc_r>
20026418:	103ff626 	beq	r2,zero,200263f4 <__alt_data_end+0xfffe6ff4>
2002641c:	14000115 	stw	r16,4(r2)
20026420:	14800215 	stw	r18,8(r2)
20026424:	003fe606 	br	200263c0 <__alt_data_end+0xfffe6fc0>

20026428 <_Bfree>:
20026428:	28000826 	beq	r5,zero,2002644c <_Bfree+0x24>
2002642c:	28c00117 	ldw	r3,4(r5)
20026430:	20801317 	ldw	r2,76(r4)
20026434:	18c7883a 	add	r3,r3,r3
20026438:	18c7883a 	add	r3,r3,r3
2002643c:	10c5883a 	add	r2,r2,r3
20026440:	10c00017 	ldw	r3,0(r2)
20026444:	28c00015 	stw	r3,0(r5)
20026448:	11400015 	stw	r5,0(r2)
2002644c:	f800283a 	ret

20026450 <__multadd>:
20026450:	defffa04 	addi	sp,sp,-24
20026454:	dc000115 	stw	r16,4(sp)
20026458:	2c000417 	ldw	r16,16(r5)
2002645c:	dc800315 	stw	r18,12(sp)
20026460:	dc400215 	stw	r17,8(sp)
20026464:	dfc00515 	stw	ra,20(sp)
20026468:	dcc00415 	stw	r19,16(sp)
2002646c:	2823883a 	mov	r17,r5
20026470:	2025883a 	mov	r18,r4
20026474:	28c00504 	addi	r3,r5,20
20026478:	0011883a 	mov	r8,zero
2002647c:	1a800017 	ldw	r10,0(r3)
20026480:	18c00104 	addi	r3,r3,4
20026484:	42000044 	addi	r8,r8,1
20026488:	527fffcc 	andi	r9,r10,65535
2002648c:	4993383a 	mul	r9,r9,r6
20026490:	5014d43a 	srli	r10,r10,16
20026494:	49d3883a 	add	r9,r9,r7
20026498:	480ed43a 	srli	r7,r9,16
2002649c:	5195383a 	mul	r10,r10,r6
200264a0:	4a7fffcc 	andi	r9,r9,65535
200264a4:	3a8f883a 	add	r7,r7,r10
200264a8:	3814943a 	slli	r10,r7,16
200264ac:	380ed43a 	srli	r7,r7,16
200264b0:	5253883a 	add	r9,r10,r9
200264b4:	1a7fff15 	stw	r9,-4(r3)
200264b8:	443ff016 	blt	r8,r16,2002647c <__alt_data_end+0xfffe707c>
200264bc:	38000926 	beq	r7,zero,200264e4 <__multadd+0x94>
200264c0:	88800217 	ldw	r2,8(r17)
200264c4:	80800f0e 	bge	r16,r2,20026504 <__multadd+0xb4>
200264c8:	80800144 	addi	r2,r16,5
200264cc:	1085883a 	add	r2,r2,r2
200264d0:	1085883a 	add	r2,r2,r2
200264d4:	8885883a 	add	r2,r17,r2
200264d8:	84000044 	addi	r16,r16,1
200264dc:	11c00015 	stw	r7,0(r2)
200264e0:	8c000415 	stw	r16,16(r17)
200264e4:	8805883a 	mov	r2,r17
200264e8:	dfc00517 	ldw	ra,20(sp)
200264ec:	dcc00417 	ldw	r19,16(sp)
200264f0:	dc800317 	ldw	r18,12(sp)
200264f4:	dc400217 	ldw	r17,8(sp)
200264f8:	dc000117 	ldw	r16,4(sp)
200264fc:	dec00604 	addi	sp,sp,24
20026500:	f800283a 	ret
20026504:	89400117 	ldw	r5,4(r17)
20026508:	9009883a 	mov	r4,r18
2002650c:	d9c00015 	stw	r7,0(sp)
20026510:	29400044 	addi	r5,r5,1
20026514:	00263800 	call	20026380 <_Balloc>
20026518:	89800417 	ldw	r6,16(r17)
2002651c:	89400304 	addi	r5,r17,12
20026520:	11000304 	addi	r4,r2,12
20026524:	31800084 	addi	r6,r6,2
20026528:	318d883a 	add	r6,r6,r6
2002652c:	318d883a 	add	r6,r6,r6
20026530:	1027883a 	mov	r19,r2
20026534:	0020c300 	call	20020c30 <memcpy>
20026538:	88c00117 	ldw	r3,4(r17)
2002653c:	90801317 	ldw	r2,76(r18)
20026540:	d9c00017 	ldw	r7,0(sp)
20026544:	18c7883a 	add	r3,r3,r3
20026548:	18c7883a 	add	r3,r3,r3
2002654c:	10c5883a 	add	r2,r2,r3
20026550:	10c00017 	ldw	r3,0(r2)
20026554:	88c00015 	stw	r3,0(r17)
20026558:	14400015 	stw	r17,0(r2)
2002655c:	9823883a 	mov	r17,r19
20026560:	003fd906 	br	200264c8 <__alt_data_end+0xfffe70c8>

20026564 <__s2b>:
20026564:	defff904 	addi	sp,sp,-28
20026568:	dd000415 	stw	r20,16(sp)
2002656c:	dc400115 	stw	r17,4(sp)
20026570:	2829883a 	mov	r20,r5
20026574:	2023883a 	mov	r17,r4
20026578:	01400244 	movi	r5,9
2002657c:	39000204 	addi	r4,r7,8
20026580:	dcc00315 	stw	r19,12(sp)
20026584:	dc800215 	stw	r18,8(sp)
20026588:	dfc00615 	stw	ra,24(sp)
2002658c:	dd400515 	stw	r21,20(sp)
20026590:	dc000015 	stw	r16,0(sp)
20026594:	3825883a 	mov	r18,r7
20026598:	3027883a 	mov	r19,r6
2002659c:	0020b740 	call	20020b74 <__divsi3>
200265a0:	00c00044 	movi	r3,1
200265a4:	000b883a 	mov	r5,zero
200265a8:	1880030e 	bge	r3,r2,200265b8 <__s2b+0x54>
200265ac:	18c7883a 	add	r3,r3,r3
200265b0:	29400044 	addi	r5,r5,1
200265b4:	18bffd16 	blt	r3,r2,200265ac <__alt_data_end+0xfffe71ac>
200265b8:	8809883a 	mov	r4,r17
200265bc:	00263800 	call	20026380 <_Balloc>
200265c0:	d8c00717 	ldw	r3,28(sp)
200265c4:	10c00515 	stw	r3,20(r2)
200265c8:	00c00044 	movi	r3,1
200265cc:	10c00415 	stw	r3,16(r2)
200265d0:	00c00244 	movi	r3,9
200265d4:	1cc0210e 	bge	r3,r19,2002665c <__s2b+0xf8>
200265d8:	a0eb883a 	add	r21,r20,r3
200265dc:	a821883a 	mov	r16,r21
200265e0:	a4e9883a 	add	r20,r20,r19
200265e4:	81c00007 	ldb	r7,0(r16)
200265e8:	8809883a 	mov	r4,r17
200265ec:	84000044 	addi	r16,r16,1
200265f0:	100b883a 	mov	r5,r2
200265f4:	01800284 	movi	r6,10
200265f8:	39fff404 	addi	r7,r7,-48
200265fc:	00264500 	call	20026450 <__multadd>
20026600:	853ff81e 	bne	r16,r20,200265e4 <__alt_data_end+0xfffe71e4>
20026604:	ace1883a 	add	r16,r21,r19
20026608:	843ffe04 	addi	r16,r16,-8
2002660c:	9c800a0e 	bge	r19,r18,20026638 <__s2b+0xd4>
20026610:	94e5c83a 	sub	r18,r18,r19
20026614:	84a5883a 	add	r18,r16,r18
20026618:	81c00007 	ldb	r7,0(r16)
2002661c:	8809883a 	mov	r4,r17
20026620:	84000044 	addi	r16,r16,1
20026624:	100b883a 	mov	r5,r2
20026628:	01800284 	movi	r6,10
2002662c:	39fff404 	addi	r7,r7,-48
20026630:	00264500 	call	20026450 <__multadd>
20026634:	84bff81e 	bne	r16,r18,20026618 <__alt_data_end+0xfffe7218>
20026638:	dfc00617 	ldw	ra,24(sp)
2002663c:	dd400517 	ldw	r21,20(sp)
20026640:	dd000417 	ldw	r20,16(sp)
20026644:	dcc00317 	ldw	r19,12(sp)
20026648:	dc800217 	ldw	r18,8(sp)
2002664c:	dc400117 	ldw	r17,4(sp)
20026650:	dc000017 	ldw	r16,0(sp)
20026654:	dec00704 	addi	sp,sp,28
20026658:	f800283a 	ret
2002665c:	a4000284 	addi	r16,r20,10
20026660:	1827883a 	mov	r19,r3
20026664:	003fe906 	br	2002660c <__alt_data_end+0xfffe720c>

20026668 <__hi0bits>:
20026668:	20bfffec 	andhi	r2,r4,65535
2002666c:	1000141e 	bne	r2,zero,200266c0 <__hi0bits+0x58>
20026670:	2008943a 	slli	r4,r4,16
20026674:	00800404 	movi	r2,16
20026678:	20ffc02c 	andhi	r3,r4,65280
2002667c:	1800021e 	bne	r3,zero,20026688 <__hi0bits+0x20>
20026680:	2008923a 	slli	r4,r4,8
20026684:	10800204 	addi	r2,r2,8
20026688:	20fc002c 	andhi	r3,r4,61440
2002668c:	1800021e 	bne	r3,zero,20026698 <__hi0bits+0x30>
20026690:	2008913a 	slli	r4,r4,4
20026694:	10800104 	addi	r2,r2,4
20026698:	20f0002c 	andhi	r3,r4,49152
2002669c:	1800031e 	bne	r3,zero,200266ac <__hi0bits+0x44>
200266a0:	2109883a 	add	r4,r4,r4
200266a4:	10800084 	addi	r2,r2,2
200266a8:	2109883a 	add	r4,r4,r4
200266ac:	20000316 	blt	r4,zero,200266bc <__hi0bits+0x54>
200266b0:	2110002c 	andhi	r4,r4,16384
200266b4:	2000041e 	bne	r4,zero,200266c8 <__hi0bits+0x60>
200266b8:	00800804 	movi	r2,32
200266bc:	f800283a 	ret
200266c0:	0005883a 	mov	r2,zero
200266c4:	003fec06 	br	20026678 <__alt_data_end+0xfffe7278>
200266c8:	10800044 	addi	r2,r2,1
200266cc:	f800283a 	ret

200266d0 <__lo0bits>:
200266d0:	20c00017 	ldw	r3,0(r4)
200266d4:	188001cc 	andi	r2,r3,7
200266d8:	10000826 	beq	r2,zero,200266fc <__lo0bits+0x2c>
200266dc:	1880004c 	andi	r2,r3,1
200266e0:	1000211e 	bne	r2,zero,20026768 <__lo0bits+0x98>
200266e4:	1880008c 	andi	r2,r3,2
200266e8:	1000211e 	bne	r2,zero,20026770 <__lo0bits+0xa0>
200266ec:	1806d0ba 	srli	r3,r3,2
200266f0:	00800084 	movi	r2,2
200266f4:	20c00015 	stw	r3,0(r4)
200266f8:	f800283a 	ret
200266fc:	18bfffcc 	andi	r2,r3,65535
20026700:	10001326 	beq	r2,zero,20026750 <__lo0bits+0x80>
20026704:	0005883a 	mov	r2,zero
20026708:	19403fcc 	andi	r5,r3,255
2002670c:	2800021e 	bne	r5,zero,20026718 <__lo0bits+0x48>
20026710:	1806d23a 	srli	r3,r3,8
20026714:	10800204 	addi	r2,r2,8
20026718:	194003cc 	andi	r5,r3,15
2002671c:	2800021e 	bne	r5,zero,20026728 <__lo0bits+0x58>
20026720:	1806d13a 	srli	r3,r3,4
20026724:	10800104 	addi	r2,r2,4
20026728:	194000cc 	andi	r5,r3,3
2002672c:	2800021e 	bne	r5,zero,20026738 <__lo0bits+0x68>
20026730:	1806d0ba 	srli	r3,r3,2
20026734:	10800084 	addi	r2,r2,2
20026738:	1940004c 	andi	r5,r3,1
2002673c:	2800081e 	bne	r5,zero,20026760 <__lo0bits+0x90>
20026740:	1806d07a 	srli	r3,r3,1
20026744:	1800051e 	bne	r3,zero,2002675c <__lo0bits+0x8c>
20026748:	00800804 	movi	r2,32
2002674c:	f800283a 	ret
20026750:	1806d43a 	srli	r3,r3,16
20026754:	00800404 	movi	r2,16
20026758:	003feb06 	br	20026708 <__alt_data_end+0xfffe7308>
2002675c:	10800044 	addi	r2,r2,1
20026760:	20c00015 	stw	r3,0(r4)
20026764:	f800283a 	ret
20026768:	0005883a 	mov	r2,zero
2002676c:	f800283a 	ret
20026770:	1806d07a 	srli	r3,r3,1
20026774:	00800044 	movi	r2,1
20026778:	20c00015 	stw	r3,0(r4)
2002677c:	f800283a 	ret

20026780 <__i2b>:
20026780:	defffd04 	addi	sp,sp,-12
20026784:	dc000015 	stw	r16,0(sp)
20026788:	04000044 	movi	r16,1
2002678c:	dc400115 	stw	r17,4(sp)
20026790:	2823883a 	mov	r17,r5
20026794:	800b883a 	mov	r5,r16
20026798:	dfc00215 	stw	ra,8(sp)
2002679c:	00263800 	call	20026380 <_Balloc>
200267a0:	14400515 	stw	r17,20(r2)
200267a4:	14000415 	stw	r16,16(r2)
200267a8:	dfc00217 	ldw	ra,8(sp)
200267ac:	dc400117 	ldw	r17,4(sp)
200267b0:	dc000017 	ldw	r16,0(sp)
200267b4:	dec00304 	addi	sp,sp,12
200267b8:	f800283a 	ret

200267bc <__multiply>:
200267bc:	defffa04 	addi	sp,sp,-24
200267c0:	dcc00315 	stw	r19,12(sp)
200267c4:	dc400115 	stw	r17,4(sp)
200267c8:	34c00417 	ldw	r19,16(r6)
200267cc:	2c400417 	ldw	r17,16(r5)
200267d0:	dd000415 	stw	r20,16(sp)
200267d4:	dc800215 	stw	r18,8(sp)
200267d8:	dfc00515 	stw	ra,20(sp)
200267dc:	dc000015 	stw	r16,0(sp)
200267e0:	2825883a 	mov	r18,r5
200267e4:	3029883a 	mov	r20,r6
200267e8:	8cc0050e 	bge	r17,r19,20026800 <__multiply+0x44>
200267ec:	8807883a 	mov	r3,r17
200267f0:	3025883a 	mov	r18,r6
200267f4:	9823883a 	mov	r17,r19
200267f8:	2829883a 	mov	r20,r5
200267fc:	1827883a 	mov	r19,r3
20026800:	90800217 	ldw	r2,8(r18)
20026804:	8ce1883a 	add	r16,r17,r19
20026808:	91400117 	ldw	r5,4(r18)
2002680c:	1400010e 	bge	r2,r16,20026814 <__multiply+0x58>
20026810:	29400044 	addi	r5,r5,1
20026814:	00263800 	call	20026380 <_Balloc>
20026818:	83c00144 	addi	r15,r16,5
2002681c:	7bdf883a 	add	r15,r15,r15
20026820:	7bdf883a 	add	r15,r15,r15
20026824:	13800504 	addi	r14,r2,20
20026828:	13df883a 	add	r15,r2,r15
2002682c:	7007883a 	mov	r3,r14
20026830:	73c0032e 	bgeu	r14,r15,20026840 <__multiply+0x84>
20026834:	18000015 	stw	zero,0(r3)
20026838:	18c00104 	addi	r3,r3,4
2002683c:	1bfffd36 	bltu	r3,r15,20026834 <__alt_data_end+0xfffe7434>
20026840:	99800144 	addi	r6,r19,5
20026844:	8b000144 	addi	r12,r17,5
20026848:	318d883a 	add	r6,r6,r6
2002684c:	6319883a 	add	r12,r12,r12
20026850:	318d883a 	add	r6,r6,r6
20026854:	6319883a 	add	r12,r12,r12
20026858:	a3400504 	addi	r13,r20,20
2002685c:	a18d883a 	add	r6,r20,r6
20026860:	94400504 	addi	r17,r18,20
20026864:	9319883a 	add	r12,r18,r12
20026868:	6980392e 	bgeu	r13,r6,20026950 <__multiply+0x194>
2002686c:	6a800017 	ldw	r10,0(r13)
20026870:	52ffffcc 	andi	r11,r10,65535
20026874:	58001826 	beq	r11,zero,200268d8 <__multiply+0x11c>
20026878:	7007883a 	mov	r3,r14
2002687c:	8809883a 	mov	r4,r17
20026880:	000b883a 	mov	r5,zero
20026884:	22400017 	ldw	r9,0(r4)
20026888:	1a000017 	ldw	r8,0(r3)
2002688c:	21000104 	addi	r4,r4,4
20026890:	49ffffcc 	andi	r7,r9,65535
20026894:	3acf383a 	mul	r7,r7,r11
20026898:	4812d43a 	srli	r9,r9,16
2002689c:	42bfffcc 	andi	r10,r8,65535
200268a0:	3a8f883a 	add	r7,r7,r10
200268a4:	394f883a 	add	r7,r7,r5
200268a8:	4010d43a 	srli	r8,r8,16
200268ac:	4acb383a 	mul	r5,r9,r11
200268b0:	3814d43a 	srli	r10,r7,16
200268b4:	19c0000d 	sth	r7,0(r3)
200268b8:	2a0b883a 	add	r5,r5,r8
200268bc:	2a8b883a 	add	r5,r5,r10
200268c0:	1940008d 	sth	r5,2(r3)
200268c4:	280ad43a 	srli	r5,r5,16
200268c8:	18c00104 	addi	r3,r3,4
200268cc:	233fed36 	bltu	r4,r12,20026884 <__alt_data_end+0xfffe7484>
200268d0:	19400015 	stw	r5,0(r3)
200268d4:	6a800017 	ldw	r10,0(r13)
200268d8:	5014d43a 	srli	r10,r10,16
200268dc:	50001926 	beq	r10,zero,20026944 <__multiply+0x188>
200268e0:	71400017 	ldw	r5,0(r14)
200268e4:	7007883a 	mov	r3,r14
200268e8:	8809883a 	mov	r4,r17
200268ec:	280f883a 	mov	r7,r5
200268f0:	0017883a 	mov	r11,zero
200268f4:	22400017 	ldw	r9,0(r4)
200268f8:	380ed43a 	srli	r7,r7,16
200268fc:	1940000d 	sth	r5,0(r3)
20026900:	4a3fffcc 	andi	r8,r9,65535
20026904:	4291383a 	mul	r8,r8,r10
20026908:	4812d43a 	srli	r9,r9,16
2002690c:	18c00104 	addi	r3,r3,4
20026910:	41d1883a 	add	r8,r8,r7
20026914:	19c00017 	ldw	r7,0(r3)
20026918:	42d1883a 	add	r8,r8,r11
2002691c:	4a93383a 	mul	r9,r9,r10
20026920:	1a3fff8d 	sth	r8,-2(r3)
20026924:	4010d43a 	srli	r8,r8,16
20026928:	397fffcc 	andi	r5,r7,65535
2002692c:	2a4b883a 	add	r5,r5,r9
20026930:	2a0b883a 	add	r5,r5,r8
20026934:	21000104 	addi	r4,r4,4
20026938:	2816d43a 	srli	r11,r5,16
2002693c:	233fed36 	bltu	r4,r12,200268f4 <__alt_data_end+0xfffe74f4>
20026940:	19400015 	stw	r5,0(r3)
20026944:	6b400104 	addi	r13,r13,4
20026948:	73800104 	addi	r14,r14,4
2002694c:	69bfc736 	bltu	r13,r6,2002686c <__alt_data_end+0xfffe746c>
20026950:	0400090e 	bge	zero,r16,20026978 <__multiply+0x1bc>
20026954:	78ffff17 	ldw	r3,-4(r15)
20026958:	7bffff04 	addi	r15,r15,-4
2002695c:	18000326 	beq	r3,zero,2002696c <__multiply+0x1b0>
20026960:	00000506 	br	20026978 <__multiply+0x1bc>
20026964:	78c00017 	ldw	r3,0(r15)
20026968:	1800031e 	bne	r3,zero,20026978 <__multiply+0x1bc>
2002696c:	843fffc4 	addi	r16,r16,-1
20026970:	7bffff04 	addi	r15,r15,-4
20026974:	803ffb1e 	bne	r16,zero,20026964 <__alt_data_end+0xfffe7564>
20026978:	14000415 	stw	r16,16(r2)
2002697c:	dfc00517 	ldw	ra,20(sp)
20026980:	dd000417 	ldw	r20,16(sp)
20026984:	dcc00317 	ldw	r19,12(sp)
20026988:	dc800217 	ldw	r18,8(sp)
2002698c:	dc400117 	ldw	r17,4(sp)
20026990:	dc000017 	ldw	r16,0(sp)
20026994:	dec00604 	addi	sp,sp,24
20026998:	f800283a 	ret

2002699c <__pow5mult>:
2002699c:	defffb04 	addi	sp,sp,-20
200269a0:	dcc00315 	stw	r19,12(sp)
200269a4:	dc800215 	stw	r18,8(sp)
200269a8:	dc000015 	stw	r16,0(sp)
200269ac:	dfc00415 	stw	ra,16(sp)
200269b0:	dc400115 	stw	r17,4(sp)
200269b4:	308000cc 	andi	r2,r6,3
200269b8:	3021883a 	mov	r16,r6
200269bc:	2027883a 	mov	r19,r4
200269c0:	2825883a 	mov	r18,r5
200269c4:	10002e1e 	bne	r2,zero,20026a80 <__pow5mult+0xe4>
200269c8:	8021d0ba 	srai	r16,r16,2
200269cc:	80001a26 	beq	r16,zero,20026a38 <__pow5mult+0x9c>
200269d0:	9c401217 	ldw	r17,72(r19)
200269d4:	8800061e 	bne	r17,zero,200269f0 <__pow5mult+0x54>
200269d8:	00003406 	br	20026aac <__pow5mult+0x110>
200269dc:	8021d07a 	srai	r16,r16,1
200269e0:	80001526 	beq	r16,zero,20026a38 <__pow5mult+0x9c>
200269e4:	88c00017 	ldw	r3,0(r17)
200269e8:	18001b26 	beq	r3,zero,20026a58 <__pow5mult+0xbc>
200269ec:	1823883a 	mov	r17,r3
200269f0:	80c0004c 	andi	r3,r16,1
200269f4:	183ff926 	beq	r3,zero,200269dc <__alt_data_end+0xfffe75dc>
200269f8:	900b883a 	mov	r5,r18
200269fc:	880d883a 	mov	r6,r17
20026a00:	9809883a 	mov	r4,r19
20026a04:	00267bc0 	call	200267bc <__multiply>
20026a08:	90001b26 	beq	r18,zero,20026a78 <__pow5mult+0xdc>
20026a0c:	91000117 	ldw	r4,4(r18)
20026a10:	98c01317 	ldw	r3,76(r19)
20026a14:	8021d07a 	srai	r16,r16,1
20026a18:	2109883a 	add	r4,r4,r4
20026a1c:	2109883a 	add	r4,r4,r4
20026a20:	1907883a 	add	r3,r3,r4
20026a24:	19000017 	ldw	r4,0(r3)
20026a28:	91000015 	stw	r4,0(r18)
20026a2c:	1c800015 	stw	r18,0(r3)
20026a30:	1025883a 	mov	r18,r2
20026a34:	803feb1e 	bne	r16,zero,200269e4 <__alt_data_end+0xfffe75e4>
20026a38:	9005883a 	mov	r2,r18
20026a3c:	dfc00417 	ldw	ra,16(sp)
20026a40:	dcc00317 	ldw	r19,12(sp)
20026a44:	dc800217 	ldw	r18,8(sp)
20026a48:	dc400117 	ldw	r17,4(sp)
20026a4c:	dc000017 	ldw	r16,0(sp)
20026a50:	dec00504 	addi	sp,sp,20
20026a54:	f800283a 	ret
20026a58:	880b883a 	mov	r5,r17
20026a5c:	880d883a 	mov	r6,r17
20026a60:	9809883a 	mov	r4,r19
20026a64:	00267bc0 	call	200267bc <__multiply>
20026a68:	88800015 	stw	r2,0(r17)
20026a6c:	10000015 	stw	zero,0(r2)
20026a70:	1023883a 	mov	r17,r2
20026a74:	003fde06 	br	200269f0 <__alt_data_end+0xfffe75f0>
20026a78:	1025883a 	mov	r18,r2
20026a7c:	003fd706 	br	200269dc <__alt_data_end+0xfffe75dc>
20026a80:	10bfffc4 	addi	r2,r2,-1
20026a84:	1085883a 	add	r2,r2,r2
20026a88:	00c800f4 	movhi	r3,8195
20026a8c:	18f37c04 	addi	r3,r3,-12816
20026a90:	1085883a 	add	r2,r2,r2
20026a94:	1885883a 	add	r2,r3,r2
20026a98:	11800017 	ldw	r6,0(r2)
20026a9c:	000f883a 	mov	r7,zero
20026aa0:	00264500 	call	20026450 <__multadd>
20026aa4:	1025883a 	mov	r18,r2
20026aa8:	003fc706 	br	200269c8 <__alt_data_end+0xfffe75c8>
20026aac:	9809883a 	mov	r4,r19
20026ab0:	01409c44 	movi	r5,625
20026ab4:	00267800 	call	20026780 <__i2b>
20026ab8:	98801215 	stw	r2,72(r19)
20026abc:	1023883a 	mov	r17,r2
20026ac0:	10000015 	stw	zero,0(r2)
20026ac4:	003fca06 	br	200269f0 <__alt_data_end+0xfffe75f0>

20026ac8 <__lshift>:
20026ac8:	defff904 	addi	sp,sp,-28
20026acc:	dd400515 	stw	r21,20(sp)
20026ad0:	dc400115 	stw	r17,4(sp)
20026ad4:	2d400417 	ldw	r21,16(r5)
20026ad8:	3023d17a 	srai	r17,r6,5
20026adc:	28800217 	ldw	r2,8(r5)
20026ae0:	dd000415 	stw	r20,16(sp)
20026ae4:	8d6b883a 	add	r21,r17,r21
20026ae8:	dcc00315 	stw	r19,12(sp)
20026aec:	dc800215 	stw	r18,8(sp)
20026af0:	dc000015 	stw	r16,0(sp)
20026af4:	dfc00615 	stw	ra,24(sp)
20026af8:	ac000044 	addi	r16,r21,1
20026afc:	2825883a 	mov	r18,r5
20026b00:	3029883a 	mov	r20,r6
20026b04:	2027883a 	mov	r19,r4
20026b08:	29400117 	ldw	r5,4(r5)
20026b0c:	1400030e 	bge	r2,r16,20026b1c <__lshift+0x54>
20026b10:	1085883a 	add	r2,r2,r2
20026b14:	29400044 	addi	r5,r5,1
20026b18:	143ffd16 	blt	r2,r16,20026b10 <__alt_data_end+0xfffe7710>
20026b1c:	9809883a 	mov	r4,r19
20026b20:	00263800 	call	20026380 <_Balloc>
20026b24:	10c00504 	addi	r3,r2,20
20026b28:	0440090e 	bge	zero,r17,20026b50 <__lshift+0x88>
20026b2c:	000f883a 	mov	r7,zero
20026b30:	18000015 	stw	zero,0(r3)
20026b34:	39c00044 	addi	r7,r7,1
20026b38:	18c00104 	addi	r3,r3,4
20026b3c:	3c7ffc1e 	bne	r7,r17,20026b30 <__alt_data_end+0xfffe7730>
20026b40:	38c00144 	addi	r3,r7,5
20026b44:	18c7883a 	add	r3,r3,r3
20026b48:	18c7883a 	add	r3,r3,r3
20026b4c:	10c7883a 	add	r3,r2,r3
20026b50:	92000417 	ldw	r8,16(r18)
20026b54:	a18007cc 	andi	r6,r20,31
20026b58:	91c00504 	addi	r7,r18,20
20026b5c:	42000144 	addi	r8,r8,5
20026b60:	4211883a 	add	r8,r8,r8
20026b64:	4211883a 	add	r8,r8,r8
20026b68:	9211883a 	add	r8,r18,r8
20026b6c:	30002226 	beq	r6,zero,20026bf8 <__lshift+0x130>
20026b70:	02800804 	movi	r10,32
20026b74:	5195c83a 	sub	r10,r10,r6
20026b78:	000b883a 	mov	r5,zero
20026b7c:	3a400017 	ldw	r9,0(r7)
20026b80:	18c00104 	addi	r3,r3,4
20026b84:	39c00104 	addi	r7,r7,4
20026b88:	4992983a 	sll	r9,r9,r6
20026b8c:	2a4ab03a 	or	r5,r5,r9
20026b90:	197fff15 	stw	r5,-4(r3)
20026b94:	397fff17 	ldw	r5,-4(r7)
20026b98:	2a8ad83a 	srl	r5,r5,r10
20026b9c:	3a3ff736 	bltu	r7,r8,20026b7c <__alt_data_end+0xfffe777c>
20026ba0:	19400015 	stw	r5,0(r3)
20026ba4:	28000126 	beq	r5,zero,20026bac <__lshift+0xe4>
20026ba8:	ac000084 	addi	r16,r21,2
20026bac:	91000117 	ldw	r4,4(r18)
20026bb0:	98c01317 	ldw	r3,76(r19)
20026bb4:	843fffc4 	addi	r16,r16,-1
20026bb8:	2109883a 	add	r4,r4,r4
20026bbc:	2109883a 	add	r4,r4,r4
20026bc0:	1907883a 	add	r3,r3,r4
20026bc4:	19000017 	ldw	r4,0(r3)
20026bc8:	14000415 	stw	r16,16(r2)
20026bcc:	91000015 	stw	r4,0(r18)
20026bd0:	1c800015 	stw	r18,0(r3)
20026bd4:	dfc00617 	ldw	ra,24(sp)
20026bd8:	dd400517 	ldw	r21,20(sp)
20026bdc:	dd000417 	ldw	r20,16(sp)
20026be0:	dcc00317 	ldw	r19,12(sp)
20026be4:	dc800217 	ldw	r18,8(sp)
20026be8:	dc400117 	ldw	r17,4(sp)
20026bec:	dc000017 	ldw	r16,0(sp)
20026bf0:	dec00704 	addi	sp,sp,28
20026bf4:	f800283a 	ret
20026bf8:	39400017 	ldw	r5,0(r7)
20026bfc:	18c00104 	addi	r3,r3,4
20026c00:	39c00104 	addi	r7,r7,4
20026c04:	197fff15 	stw	r5,-4(r3)
20026c08:	3a3fe82e 	bgeu	r7,r8,20026bac <__alt_data_end+0xfffe77ac>
20026c0c:	39400017 	ldw	r5,0(r7)
20026c10:	18c00104 	addi	r3,r3,4
20026c14:	39c00104 	addi	r7,r7,4
20026c18:	197fff15 	stw	r5,-4(r3)
20026c1c:	3a3ff636 	bltu	r7,r8,20026bf8 <__alt_data_end+0xfffe77f8>
20026c20:	003fe206 	br	20026bac <__alt_data_end+0xfffe77ac>

20026c24 <__mcmp>:
20026c24:	20800417 	ldw	r2,16(r4)
20026c28:	28c00417 	ldw	r3,16(r5)
20026c2c:	10c5c83a 	sub	r2,r2,r3
20026c30:	10000f1e 	bne	r2,zero,20026c70 <__mcmp+0x4c>
20026c34:	18c00144 	addi	r3,r3,5
20026c38:	18c7883a 	add	r3,r3,r3
20026c3c:	18c7883a 	add	r3,r3,r3
20026c40:	21c00504 	addi	r7,r4,20
20026c44:	28cb883a 	add	r5,r5,r3
20026c48:	20c9883a 	add	r4,r4,r3
20026c4c:	213fff04 	addi	r4,r4,-4
20026c50:	297fff04 	addi	r5,r5,-4
20026c54:	21800017 	ldw	r6,0(r4)
20026c58:	28c00017 	ldw	r3,0(r5)
20026c5c:	30c0021e 	bne	r6,r3,20026c68 <__mcmp+0x44>
20026c60:	393ffa36 	bltu	r7,r4,20026c4c <__alt_data_end+0xfffe784c>
20026c64:	f800283a 	ret
20026c68:	30c00236 	bltu	r6,r3,20026c74 <__mcmp+0x50>
20026c6c:	00800044 	movi	r2,1
20026c70:	f800283a 	ret
20026c74:	00bfffc4 	movi	r2,-1
20026c78:	f800283a 	ret

20026c7c <__mdiff>:
20026c7c:	defffb04 	addi	sp,sp,-20
20026c80:	dc000015 	stw	r16,0(sp)
20026c84:	2821883a 	mov	r16,r5
20026c88:	dc800215 	stw	r18,8(sp)
20026c8c:	300b883a 	mov	r5,r6
20026c90:	2025883a 	mov	r18,r4
20026c94:	8009883a 	mov	r4,r16
20026c98:	dc400115 	stw	r17,4(sp)
20026c9c:	dfc00415 	stw	ra,16(sp)
20026ca0:	dcc00315 	stw	r19,12(sp)
20026ca4:	3023883a 	mov	r17,r6
20026ca8:	0026c240 	call	20026c24 <__mcmp>
20026cac:	10005026 	beq	r2,zero,20026df0 <__mdiff+0x174>
20026cb0:	10004a16 	blt	r2,zero,20026ddc <__mdiff+0x160>
20026cb4:	0027883a 	mov	r19,zero
20026cb8:	81400117 	ldw	r5,4(r16)
20026cbc:	9009883a 	mov	r4,r18
20026cc0:	00263800 	call	20026380 <_Balloc>
20026cc4:	82400417 	ldw	r9,16(r16)
20026cc8:	89800417 	ldw	r6,16(r17)
20026ccc:	14c00315 	stw	r19,12(r2)
20026cd0:	4b800144 	addi	r14,r9,5
20026cd4:	31800144 	addi	r6,r6,5
20026cd8:	739d883a 	add	r14,r14,r14
20026cdc:	318d883a 	add	r6,r6,r6
20026ce0:	739d883a 	add	r14,r14,r14
20026ce4:	318d883a 	add	r6,r6,r6
20026ce8:	81c00504 	addi	r7,r16,20
20026cec:	839d883a 	add	r14,r16,r14
20026cf0:	8a000504 	addi	r8,r17,20
20026cf4:	898d883a 	add	r6,r17,r6
20026cf8:	10c00504 	addi	r3,r2,20
20026cfc:	0009883a 	mov	r4,zero
20026d00:	3b000017 	ldw	r12,0(r7)
20026d04:	42c00017 	ldw	r11,0(r8)
20026d08:	42000104 	addi	r8,r8,4
20026d0c:	62bfffcc 	andi	r10,r12,65535
20026d10:	5b7fffcc 	andi	r13,r11,65535
20026d14:	5109883a 	add	r4,r10,r4
20026d18:	2355c83a 	sub	r10,r4,r13
20026d1c:	5816d43a 	srli	r11,r11,16
20026d20:	6008d43a 	srli	r4,r12,16
20026d24:	501bd43a 	srai	r13,r10,16
20026d28:	1a80000d 	sth	r10,0(r3)
20026d2c:	22c9c83a 	sub	r4,r4,r11
20026d30:	2349883a 	add	r4,r4,r13
20026d34:	1900008d 	sth	r4,2(r3)
20026d38:	39c00104 	addi	r7,r7,4
20026d3c:	2009d43a 	srai	r4,r4,16
20026d40:	18c00104 	addi	r3,r3,4
20026d44:	41bfee36 	bltu	r8,r6,20026d00 <__alt_data_end+0xfffe7900>
20026d48:	180b883a 	mov	r5,r3
20026d4c:	3815883a 	mov	r10,r7
20026d50:	3b80132e 	bgeu	r7,r14,20026da0 <__mdiff+0x124>
20026d54:	3a000017 	ldw	r8,0(r7)
20026d58:	18c00104 	addi	r3,r3,4
20026d5c:	39c00104 	addi	r7,r7,4
20026d60:	41bfffcc 	andi	r6,r8,65535
20026d64:	310d883a 	add	r6,r6,r4
20026d68:	3009d43a 	srai	r4,r6,16
20026d6c:	4010d43a 	srli	r8,r8,16
20026d70:	19bfff0d 	sth	r6,-4(r3)
20026d74:	2209883a 	add	r4,r4,r8
20026d78:	193fff8d 	sth	r4,-2(r3)
20026d7c:	2009d43a 	srai	r4,r4,16
20026d80:	3bbff436 	bltu	r7,r14,20026d54 <__alt_data_end+0xfffe7954>
20026d84:	0286303a 	nor	r3,zero,r10
20026d88:	1b87883a 	add	r3,r3,r14
20026d8c:	1806d0ba 	srli	r3,r3,2
20026d90:	18c00044 	addi	r3,r3,1
20026d94:	18c7883a 	add	r3,r3,r3
20026d98:	18c7883a 	add	r3,r3,r3
20026d9c:	28c7883a 	add	r3,r5,r3
20026da0:	193fff17 	ldw	r4,-4(r3)
20026da4:	18ffff04 	addi	r3,r3,-4
20026da8:	2000041e 	bne	r4,zero,20026dbc <__mdiff+0x140>
20026dac:	18ffff04 	addi	r3,r3,-4
20026db0:	19000017 	ldw	r4,0(r3)
20026db4:	4a7fffc4 	addi	r9,r9,-1
20026db8:	203ffc26 	beq	r4,zero,20026dac <__alt_data_end+0xfffe79ac>
20026dbc:	12400415 	stw	r9,16(r2)
20026dc0:	dfc00417 	ldw	ra,16(sp)
20026dc4:	dcc00317 	ldw	r19,12(sp)
20026dc8:	dc800217 	ldw	r18,8(sp)
20026dcc:	dc400117 	ldw	r17,4(sp)
20026dd0:	dc000017 	ldw	r16,0(sp)
20026dd4:	dec00504 	addi	sp,sp,20
20026dd8:	f800283a 	ret
20026ddc:	8005883a 	mov	r2,r16
20026de0:	04c00044 	movi	r19,1
20026de4:	8821883a 	mov	r16,r17
20026de8:	1023883a 	mov	r17,r2
20026dec:	003fb206 	br	20026cb8 <__alt_data_end+0xfffe78b8>
20026df0:	9009883a 	mov	r4,r18
20026df4:	000b883a 	mov	r5,zero
20026df8:	00263800 	call	20026380 <_Balloc>
20026dfc:	00c00044 	movi	r3,1
20026e00:	10c00415 	stw	r3,16(r2)
20026e04:	10000515 	stw	zero,20(r2)
20026e08:	dfc00417 	ldw	ra,16(sp)
20026e0c:	dcc00317 	ldw	r19,12(sp)
20026e10:	dc800217 	ldw	r18,8(sp)
20026e14:	dc400117 	ldw	r17,4(sp)
20026e18:	dc000017 	ldw	r16,0(sp)
20026e1c:	dec00504 	addi	sp,sp,20
20026e20:	f800283a 	ret

20026e24 <__ulp>:
20026e24:	295ffc2c 	andhi	r5,r5,32752
20026e28:	00bf3034 	movhi	r2,64704
20026e2c:	2887883a 	add	r3,r5,r2
20026e30:	00c0020e 	bge	zero,r3,20026e3c <__ulp+0x18>
20026e34:	0005883a 	mov	r2,zero
20026e38:	f800283a 	ret
20026e3c:	00c7c83a 	sub	r3,zero,r3
20026e40:	1805d53a 	srai	r2,r3,20
20026e44:	00c004c4 	movi	r3,19
20026e48:	18800a0e 	bge	r3,r2,20026e74 <__ulp+0x50>
20026e4c:	01000c84 	movi	r4,50
20026e50:	0007883a 	mov	r3,zero
20026e54:	20800516 	blt	r4,r2,20026e6c <__ulp+0x48>
20026e58:	01000cc4 	movi	r4,51
20026e5c:	2085c83a 	sub	r2,r4,r2
20026e60:	01000044 	movi	r4,1
20026e64:	2084983a 	sll	r2,r4,r2
20026e68:	f800283a 	ret
20026e6c:	00800044 	movi	r2,1
20026e70:	f800283a 	ret
20026e74:	00c00234 	movhi	r3,8
20026e78:	1887d83a 	sra	r3,r3,r2
20026e7c:	0005883a 	mov	r2,zero
20026e80:	f800283a 	ret

20026e84 <__b2d>:
20026e84:	defffa04 	addi	sp,sp,-24
20026e88:	dc000015 	stw	r16,0(sp)
20026e8c:	24000417 	ldw	r16,16(r4)
20026e90:	dc400115 	stw	r17,4(sp)
20026e94:	dcc00315 	stw	r19,12(sp)
20026e98:	84000144 	addi	r16,r16,5
20026e9c:	8421883a 	add	r16,r16,r16
20026ea0:	8421883a 	add	r16,r16,r16
20026ea4:	2421883a 	add	r16,r4,r16
20026ea8:	847fff17 	ldw	r17,-4(r16)
20026eac:	24c00504 	addi	r19,r4,20
20026eb0:	dd000415 	stw	r20,16(sp)
20026eb4:	8809883a 	mov	r4,r17
20026eb8:	dc800215 	stw	r18,8(sp)
20026ebc:	2829883a 	mov	r20,r5
20026ec0:	dfc00515 	stw	ra,20(sp)
20026ec4:	00266680 	call	20026668 <__hi0bits>
20026ec8:	00c00804 	movi	r3,32
20026ecc:	1887c83a 	sub	r3,r3,r2
20026ed0:	a0c00015 	stw	r3,0(r20)
20026ed4:	00c00284 	movi	r3,10
20026ed8:	84bfff04 	addi	r18,r16,-4
20026edc:	18801216 	blt	r3,r2,20026f28 <__b2d+0xa4>
20026ee0:	010002c4 	movi	r4,11
20026ee4:	2089c83a 	sub	r4,r4,r2
20026ee8:	8906d83a 	srl	r3,r17,r4
20026eec:	18cffc34 	orhi	r3,r3,16368
20026ef0:	9c80322e 	bgeu	r19,r18,20026fbc <__b2d+0x138>
20026ef4:	817ffe17 	ldw	r5,-8(r16)
20026ef8:	2908d83a 	srl	r4,r5,r4
20026efc:	10800544 	addi	r2,r2,21
20026f00:	88a2983a 	sll	r17,r17,r2
20026f04:	2444b03a 	or	r2,r4,r17
20026f08:	dfc00517 	ldw	ra,20(sp)
20026f0c:	dd000417 	ldw	r20,16(sp)
20026f10:	dcc00317 	ldw	r19,12(sp)
20026f14:	dc800217 	ldw	r18,8(sp)
20026f18:	dc400117 	ldw	r17,4(sp)
20026f1c:	dc000017 	ldw	r16,0(sp)
20026f20:	dec00604 	addi	sp,sp,24
20026f24:	f800283a 	ret
20026f28:	9c801636 	bltu	r19,r18,20026f84 <__b2d+0x100>
20026f2c:	113ffd44 	addi	r4,r2,-11
20026f30:	000b883a 	mov	r5,zero
20026f34:	20001726 	beq	r4,zero,20026f94 <__b2d+0x110>
20026f38:	00c00ac4 	movi	r3,43
20026f3c:	1885c83a 	sub	r2,r3,r2
20026f40:	8906983a 	sll	r3,r17,r4
20026f44:	288cd83a 	srl	r6,r5,r2
20026f48:	18cffc34 	orhi	r3,r3,16368
20026f4c:	1986b03a 	or	r3,r3,r6
20026f50:	9c801c2e 	bgeu	r19,r18,20026fc4 <__b2d+0x140>
20026f54:	91bfff17 	ldw	r6,-4(r18)
20026f58:	3084d83a 	srl	r2,r6,r2
20026f5c:	2908983a 	sll	r4,r5,r4
20026f60:	1104b03a 	or	r2,r2,r4
20026f64:	dfc00517 	ldw	ra,20(sp)
20026f68:	dd000417 	ldw	r20,16(sp)
20026f6c:	dcc00317 	ldw	r19,12(sp)
20026f70:	dc800217 	ldw	r18,8(sp)
20026f74:	dc400117 	ldw	r17,4(sp)
20026f78:	dc000017 	ldw	r16,0(sp)
20026f7c:	dec00604 	addi	sp,sp,24
20026f80:	f800283a 	ret
20026f84:	113ffd44 	addi	r4,r2,-11
20026f88:	84bffe04 	addi	r18,r16,-8
20026f8c:	817ffe17 	ldw	r5,-8(r16)
20026f90:	203fe91e 	bne	r4,zero,20026f38 <__alt_data_end+0xfffe7b38>
20026f94:	88cffc34 	orhi	r3,r17,16368
20026f98:	2805883a 	mov	r2,r5
20026f9c:	dfc00517 	ldw	ra,20(sp)
20026fa0:	dd000417 	ldw	r20,16(sp)
20026fa4:	dcc00317 	ldw	r19,12(sp)
20026fa8:	dc800217 	ldw	r18,8(sp)
20026fac:	dc400117 	ldw	r17,4(sp)
20026fb0:	dc000017 	ldw	r16,0(sp)
20026fb4:	dec00604 	addi	sp,sp,24
20026fb8:	f800283a 	ret
20026fbc:	0009883a 	mov	r4,zero
20026fc0:	003fce06 	br	20026efc <__alt_data_end+0xfffe7afc>
20026fc4:	0005883a 	mov	r2,zero
20026fc8:	003fe406 	br	20026f5c <__alt_data_end+0xfffe7b5c>

20026fcc <__d2b>:
20026fcc:	defff804 	addi	sp,sp,-32
20026fd0:	dc400315 	stw	r17,12(sp)
20026fd4:	3023883a 	mov	r17,r6
20026fd8:	dc800415 	stw	r18,16(sp)
20026fdc:	8824907a 	slli	r18,r17,1
20026fe0:	dcc00515 	stw	r19,20(sp)
20026fe4:	2827883a 	mov	r19,r5
20026fe8:	9024d57a 	srli	r18,r18,21
20026fec:	01400044 	movi	r5,1
20026ff0:	dd000615 	stw	r20,24(sp)
20026ff4:	dc000215 	stw	r16,8(sp)
20026ff8:	dfc00715 	stw	ra,28(sp)
20026ffc:	3829883a 	mov	r20,r7
20027000:	00263800 	call	20026380 <_Balloc>
20027004:	1021883a 	mov	r16,r2
20027008:	00800434 	movhi	r2,16
2002700c:	10bfffc4 	addi	r2,r2,-1
20027010:	88a2703a 	and	r17,r17,r2
20027014:	90000126 	beq	r18,zero,2002701c <__d2b+0x50>
20027018:	8c400434 	orhi	r17,r17,16
2002701c:	dc400015 	stw	r17,0(sp)
20027020:	98002226 	beq	r19,zero,200270ac <__d2b+0xe0>
20027024:	d9000104 	addi	r4,sp,4
20027028:	dcc00115 	stw	r19,4(sp)
2002702c:	00266d00 	call	200266d0 <__lo0bits>
20027030:	d8c00017 	ldw	r3,0(sp)
20027034:	10002d1e 	bne	r2,zero,200270ec <__d2b+0x120>
20027038:	d9000117 	ldw	r4,4(sp)
2002703c:	81000515 	stw	r4,20(r16)
20027040:	1823003a 	cmpeq	r17,r3,zero
20027044:	01000084 	movi	r4,2
20027048:	2463c83a 	sub	r17,r4,r17
2002704c:	80c00615 	stw	r3,24(r16)
20027050:	84400415 	stw	r17,16(r16)
20027054:	90001d1e 	bne	r18,zero,200270cc <__d2b+0x100>
20027058:	88c00104 	addi	r3,r17,4
2002705c:	18c7883a 	add	r3,r3,r3
20027060:	18c7883a 	add	r3,r3,r3
20027064:	80c7883a 	add	r3,r16,r3
20027068:	19000017 	ldw	r4,0(r3)
2002706c:	10bef384 	addi	r2,r2,-1074
20027070:	a0800015 	stw	r2,0(r20)
20027074:	00266680 	call	20026668 <__hi0bits>
20027078:	8822917a 	slli	r17,r17,5
2002707c:	d8c00817 	ldw	r3,32(sp)
20027080:	8885c83a 	sub	r2,r17,r2
20027084:	18800015 	stw	r2,0(r3)
20027088:	8005883a 	mov	r2,r16
2002708c:	dfc00717 	ldw	ra,28(sp)
20027090:	dd000617 	ldw	r20,24(sp)
20027094:	dcc00517 	ldw	r19,20(sp)
20027098:	dc800417 	ldw	r18,16(sp)
2002709c:	dc400317 	ldw	r17,12(sp)
200270a0:	dc000217 	ldw	r16,8(sp)
200270a4:	dec00804 	addi	sp,sp,32
200270a8:	f800283a 	ret
200270ac:	d809883a 	mov	r4,sp
200270b0:	00266d00 	call	200266d0 <__lo0bits>
200270b4:	d8c00017 	ldw	r3,0(sp)
200270b8:	04400044 	movi	r17,1
200270bc:	84400415 	stw	r17,16(r16)
200270c0:	80c00515 	stw	r3,20(r16)
200270c4:	10800804 	addi	r2,r2,32
200270c8:	903fe326 	beq	r18,zero,20027058 <__alt_data_end+0xfffe7c58>
200270cc:	00c00d44 	movi	r3,53
200270d0:	94bef344 	addi	r18,r18,-1075
200270d4:	90a5883a 	add	r18,r18,r2
200270d8:	1885c83a 	sub	r2,r3,r2
200270dc:	d8c00817 	ldw	r3,32(sp)
200270e0:	a4800015 	stw	r18,0(r20)
200270e4:	18800015 	stw	r2,0(r3)
200270e8:	003fe706 	br	20027088 <__alt_data_end+0xfffe7c88>
200270ec:	01000804 	movi	r4,32
200270f0:	2089c83a 	sub	r4,r4,r2
200270f4:	1908983a 	sll	r4,r3,r4
200270f8:	d9400117 	ldw	r5,4(sp)
200270fc:	1886d83a 	srl	r3,r3,r2
20027100:	2148b03a 	or	r4,r4,r5
20027104:	81000515 	stw	r4,20(r16)
20027108:	d8c00015 	stw	r3,0(sp)
2002710c:	003fcc06 	br	20027040 <__alt_data_end+0xfffe7c40>

20027110 <__ratio>:
20027110:	defff904 	addi	sp,sp,-28
20027114:	dc400315 	stw	r17,12(sp)
20027118:	2823883a 	mov	r17,r5
2002711c:	d9400104 	addi	r5,sp,4
20027120:	dfc00615 	stw	ra,24(sp)
20027124:	dcc00515 	stw	r19,20(sp)
20027128:	dc800415 	stw	r18,16(sp)
2002712c:	2027883a 	mov	r19,r4
20027130:	dc000215 	stw	r16,8(sp)
20027134:	0026e840 	call	20026e84 <__b2d>
20027138:	8809883a 	mov	r4,r17
2002713c:	d80b883a 	mov	r5,sp
20027140:	1025883a 	mov	r18,r2
20027144:	1821883a 	mov	r16,r3
20027148:	0026e840 	call	20026e84 <__b2d>
2002714c:	99400417 	ldw	r5,16(r19)
20027150:	89000417 	ldw	r4,16(r17)
20027154:	d9800117 	ldw	r6,4(sp)
20027158:	2909c83a 	sub	r4,r5,r4
2002715c:	d9400017 	ldw	r5,0(sp)
20027160:	2008917a 	slli	r4,r4,5
20027164:	314bc83a 	sub	r5,r6,r5
20027168:	290b883a 	add	r5,r5,r4
2002716c:	01400e0e 	bge	zero,r5,200271a8 <__ratio+0x98>
20027170:	280a953a 	slli	r5,r5,20
20027174:	2c21883a 	add	r16,r5,r16
20027178:	9009883a 	mov	r4,r18
2002717c:	800b883a 	mov	r5,r16
20027180:	100d883a 	mov	r6,r2
20027184:	180f883a 	mov	r7,r3
20027188:	00295f40 	call	200295f4 <__divdf3>
2002718c:	dfc00617 	ldw	ra,24(sp)
20027190:	dcc00517 	ldw	r19,20(sp)
20027194:	dc800417 	ldw	r18,16(sp)
20027198:	dc400317 	ldw	r17,12(sp)
2002719c:	dc000217 	ldw	r16,8(sp)
200271a0:	dec00704 	addi	sp,sp,28
200271a4:	f800283a 	ret
200271a8:	280a953a 	slli	r5,r5,20
200271ac:	1947c83a 	sub	r3,r3,r5
200271b0:	003ff106 	br	20027178 <__alt_data_end+0xfffe7d78>

200271b4 <_mprec_log10>:
200271b4:	defffe04 	addi	sp,sp,-8
200271b8:	dc000015 	stw	r16,0(sp)
200271bc:	dfc00115 	stw	ra,4(sp)
200271c0:	008005c4 	movi	r2,23
200271c4:	2021883a 	mov	r16,r4
200271c8:	11000d0e 	bge	r2,r4,20027200 <_mprec_log10+0x4c>
200271cc:	0005883a 	mov	r2,zero
200271d0:	00cffc34 	movhi	r3,16368
200271d4:	843fffc4 	addi	r16,r16,-1
200271d8:	1009883a 	mov	r4,r2
200271dc:	180b883a 	mov	r5,r3
200271e0:	000d883a 	mov	r6,zero
200271e4:	01d00934 	movhi	r7,16420
200271e8:	00293100 	call	20029310 <__muldf3>
200271ec:	803ff91e 	bne	r16,zero,200271d4 <__alt_data_end+0xfffe7dd4>
200271f0:	dfc00117 	ldw	ra,4(sp)
200271f4:	dc000017 	ldw	r16,0(sp)
200271f8:	dec00204 	addi	sp,sp,8
200271fc:	f800283a 	ret
20027200:	202090fa 	slli	r16,r4,3
20027204:	008800f4 	movhi	r2,8195
20027208:	10b34a04 	addi	r2,r2,-13016
2002720c:	1421883a 	add	r16,r2,r16
20027210:	80800017 	ldw	r2,0(r16)
20027214:	80c00117 	ldw	r3,4(r16)
20027218:	dfc00117 	ldw	ra,4(sp)
2002721c:	dc000017 	ldw	r16,0(sp)
20027220:	dec00204 	addi	sp,sp,8
20027224:	f800283a 	ret

20027228 <__copybits>:
20027228:	297fffc4 	addi	r5,r5,-1
2002722c:	31c00417 	ldw	r7,16(r6)
20027230:	2811d17a 	srai	r8,r5,5
20027234:	30800504 	addi	r2,r6,20
20027238:	39c00144 	addi	r7,r7,5
2002723c:	42000044 	addi	r8,r8,1
20027240:	39cf883a 	add	r7,r7,r7
20027244:	4211883a 	add	r8,r8,r8
20027248:	39cf883a 	add	r7,r7,r7
2002724c:	4211883a 	add	r8,r8,r8
20027250:	31cf883a 	add	r7,r6,r7
20027254:	2211883a 	add	r8,r4,r8
20027258:	11c00d2e 	bgeu	r2,r7,20027290 <__copybits+0x68>
2002725c:	2007883a 	mov	r3,r4
20027260:	11400017 	ldw	r5,0(r2)
20027264:	18c00104 	addi	r3,r3,4
20027268:	10800104 	addi	r2,r2,4
2002726c:	197fff15 	stw	r5,-4(r3)
20027270:	11fffb36 	bltu	r2,r7,20027260 <__alt_data_end+0xfffe7e60>
20027274:	3985c83a 	sub	r2,r7,r6
20027278:	10bffac4 	addi	r2,r2,-21
2002727c:	1004d0ba 	srli	r2,r2,2
20027280:	10800044 	addi	r2,r2,1
20027284:	1085883a 	add	r2,r2,r2
20027288:	1085883a 	add	r2,r2,r2
2002728c:	2089883a 	add	r4,r4,r2
20027290:	2200032e 	bgeu	r4,r8,200272a0 <__copybits+0x78>
20027294:	20000015 	stw	zero,0(r4)
20027298:	21000104 	addi	r4,r4,4
2002729c:	223ffd36 	bltu	r4,r8,20027294 <__alt_data_end+0xfffe7e94>
200272a0:	f800283a 	ret

200272a4 <__any_on>:
200272a4:	21800417 	ldw	r6,16(r4)
200272a8:	2805d17a 	srai	r2,r5,5
200272ac:	20c00504 	addi	r3,r4,20
200272b0:	30800f0e 	bge	r6,r2,200272f0 <__any_on+0x4c>
200272b4:	3005883a 	mov	r2,r6
200272b8:	10800144 	addi	r2,r2,5
200272bc:	1085883a 	add	r2,r2,r2
200272c0:	1085883a 	add	r2,r2,r2
200272c4:	2089883a 	add	r4,r4,r2
200272c8:	1900152e 	bgeu	r3,r4,20027320 <__any_on+0x7c>
200272cc:	20bfff17 	ldw	r2,-4(r4)
200272d0:	213fff04 	addi	r4,r4,-4
200272d4:	1000041e 	bne	r2,zero,200272e8 <__any_on+0x44>
200272d8:	1900112e 	bgeu	r3,r4,20027320 <__any_on+0x7c>
200272dc:	213fff04 	addi	r4,r4,-4
200272e0:	20800017 	ldw	r2,0(r4)
200272e4:	103ffc26 	beq	r2,zero,200272d8 <__alt_data_end+0xfffe7ed8>
200272e8:	00800044 	movi	r2,1
200272ec:	f800283a 	ret
200272f0:	11bff10e 	bge	r2,r6,200272b8 <__alt_data_end+0xfffe7eb8>
200272f4:	294007cc 	andi	r5,r5,31
200272f8:	283fef26 	beq	r5,zero,200272b8 <__alt_data_end+0xfffe7eb8>
200272fc:	11800144 	addi	r6,r2,5
20027300:	318d883a 	add	r6,r6,r6
20027304:	318d883a 	add	r6,r6,r6
20027308:	218d883a 	add	r6,r4,r6
2002730c:	31800017 	ldw	r6,0(r6)
20027310:	314ed83a 	srl	r7,r6,r5
20027314:	394a983a 	sll	r5,r7,r5
20027318:	29bff31e 	bne	r5,r6,200272e8 <__alt_data_end+0xfffe7ee8>
2002731c:	003fe606 	br	200272b8 <__alt_data_end+0xfffe7eb8>
20027320:	0005883a 	mov	r2,zero
20027324:	f800283a 	ret

20027328 <_putc_r>:
20027328:	defffc04 	addi	sp,sp,-16
2002732c:	dc000215 	stw	r16,8(sp)
20027330:	dfc00315 	stw	ra,12(sp)
20027334:	2021883a 	mov	r16,r4
20027338:	20000226 	beq	r4,zero,20027344 <_putc_r+0x1c>
2002733c:	20800e17 	ldw	r2,56(r4)
20027340:	10001d26 	beq	r2,zero,200273b8 <_putc_r+0x90>
20027344:	30800217 	ldw	r2,8(r6)
20027348:	10bfffc4 	addi	r2,r2,-1
2002734c:	30800215 	stw	r2,8(r6)
20027350:	10000a16 	blt	r2,zero,2002737c <_putc_r+0x54>
20027354:	30800017 	ldw	r2,0(r6)
20027358:	11400005 	stb	r5,0(r2)
2002735c:	30800017 	ldw	r2,0(r6)
20027360:	10c00044 	addi	r3,r2,1
20027364:	10800003 	ldbu	r2,0(r2)
20027368:	30c00015 	stw	r3,0(r6)
2002736c:	dfc00317 	ldw	ra,12(sp)
20027370:	dc000217 	ldw	r16,8(sp)
20027374:	dec00404 	addi	sp,sp,16
20027378:	f800283a 	ret
2002737c:	30c00617 	ldw	r3,24(r6)
20027380:	10c01316 	blt	r2,r3,200273d0 <_putc_r+0xa8>
20027384:	30800017 	ldw	r2,0(r6)
20027388:	01000284 	movi	r4,10
2002738c:	11400005 	stb	r5,0(r2)
20027390:	30c00017 	ldw	r3,0(r6)
20027394:	19400003 	ldbu	r5,0(r3)
20027398:	29000d26 	beq	r5,r4,200273d0 <_putc_r+0xa8>
2002739c:	18c00044 	addi	r3,r3,1
200273a0:	2805883a 	mov	r2,r5
200273a4:	30c00015 	stw	r3,0(r6)
200273a8:	dfc00317 	ldw	ra,12(sp)
200273ac:	dc000217 	ldw	r16,8(sp)
200273b0:	dec00404 	addi	sp,sp,16
200273b4:	f800283a 	ret
200273b8:	d9400015 	stw	r5,0(sp)
200273bc:	d9800115 	stw	r6,4(sp)
200273c0:	00249e40 	call	200249e4 <__sinit>
200273c4:	d9800117 	ldw	r6,4(sp)
200273c8:	d9400017 	ldw	r5,0(sp)
200273cc:	003fdd06 	br	20027344 <__alt_data_end+0xfffe7f44>
200273d0:	8009883a 	mov	r4,r16
200273d4:	dfc00317 	ldw	ra,12(sp)
200273d8:	dc000217 	ldw	r16,8(sp)
200273dc:	dec00404 	addi	sp,sp,16
200273e0:	0027d7c1 	jmpi	20027d7c <__swbuf_r>

200273e4 <putc>:
200273e4:	defffc04 	addi	sp,sp,-16
200273e8:	dc400115 	stw	r17,4(sp)
200273ec:	044800f4 	movhi	r17,8195
200273f0:	8c7a5704 	addi	r17,r17,-5796
200273f4:	88800017 	ldw	r2,0(r17)
200273f8:	dc800215 	stw	r18,8(sp)
200273fc:	dc000015 	stw	r16,0(sp)
20027400:	dfc00315 	stw	ra,12(sp)
20027404:	2025883a 	mov	r18,r4
20027408:	2821883a 	mov	r16,r5
2002740c:	10000226 	beq	r2,zero,20027418 <putc+0x34>
20027410:	10c00e17 	ldw	r3,56(r2)
20027414:	18002126 	beq	r3,zero,2002749c <putc+0xb8>
20027418:	80800217 	ldw	r2,8(r16)
2002741c:	10bfffc4 	addi	r2,r2,-1
20027420:	80800215 	stw	r2,8(r16)
20027424:	10000c16 	blt	r2,zero,20027458 <putc+0x74>
20027428:	80800017 	ldw	r2,0(r16)
2002742c:	14800005 	stb	r18,0(r2)
20027430:	80800017 	ldw	r2,0(r16)
20027434:	10c00044 	addi	r3,r2,1
20027438:	10800003 	ldbu	r2,0(r2)
2002743c:	80c00015 	stw	r3,0(r16)
20027440:	dfc00317 	ldw	ra,12(sp)
20027444:	dc800217 	ldw	r18,8(sp)
20027448:	dc400117 	ldw	r17,4(sp)
2002744c:	dc000017 	ldw	r16,0(sp)
20027450:	dec00404 	addi	sp,sp,16
20027454:	f800283a 	ret
20027458:	80c00617 	ldw	r3,24(r16)
2002745c:	10c01216 	blt	r2,r3,200274a8 <putc+0xc4>
20027460:	80800017 	ldw	r2,0(r16)
20027464:	01000284 	movi	r4,10
20027468:	14800005 	stb	r18,0(r2)
2002746c:	80c00017 	ldw	r3,0(r16)
20027470:	19400003 	ldbu	r5,0(r3)
20027474:	29001526 	beq	r5,r4,200274cc <putc+0xe8>
20027478:	18c00044 	addi	r3,r3,1
2002747c:	2805883a 	mov	r2,r5
20027480:	80c00015 	stw	r3,0(r16)
20027484:	dfc00317 	ldw	ra,12(sp)
20027488:	dc800217 	ldw	r18,8(sp)
2002748c:	dc400117 	ldw	r17,4(sp)
20027490:	dc000017 	ldw	r16,0(sp)
20027494:	dec00404 	addi	sp,sp,16
20027498:	f800283a 	ret
2002749c:	1009883a 	mov	r4,r2
200274a0:	00249e40 	call	200249e4 <__sinit>
200274a4:	003fdc06 	br	20027418 <__alt_data_end+0xfffe8018>
200274a8:	89000017 	ldw	r4,0(r17)
200274ac:	900b883a 	mov	r5,r18
200274b0:	800d883a 	mov	r6,r16
200274b4:	dfc00317 	ldw	ra,12(sp)
200274b8:	dc800217 	ldw	r18,8(sp)
200274bc:	dc400117 	ldw	r17,4(sp)
200274c0:	dc000017 	ldw	r16,0(sp)
200274c4:	dec00404 	addi	sp,sp,16
200274c8:	0027d7c1 	jmpi	20027d7c <__swbuf_r>
200274cc:	89000017 	ldw	r4,0(r17)
200274d0:	003ff706 	br	200274b0 <__alt_data_end+0xfffe80b0>

200274d4 <_realloc_r>:
200274d4:	defff504 	addi	sp,sp,-44
200274d8:	dd400615 	stw	r21,24(sp)
200274dc:	dc800315 	stw	r18,12(sp)
200274e0:	dc000115 	stw	r16,4(sp)
200274e4:	dfc00a15 	stw	ra,40(sp)
200274e8:	df000915 	stw	fp,36(sp)
200274ec:	ddc00815 	stw	r23,32(sp)
200274f0:	dd800715 	stw	r22,28(sp)
200274f4:	dd000515 	stw	r20,20(sp)
200274f8:	dcc00415 	stw	r19,16(sp)
200274fc:	dc400215 	stw	r17,8(sp)
20027500:	2821883a 	mov	r16,r5
20027504:	202b883a 	mov	r21,r4
20027508:	3025883a 	mov	r18,r6
2002750c:	28009626 	beq	r5,zero,20027768 <_realloc_r+0x294>
20027510:	002a75c0 	call	2002a75c <__malloc_lock>
20027514:	80bfff17 	ldw	r2,-4(r16)
20027518:	04ffff04 	movi	r19,-4
2002751c:	90c002c4 	addi	r3,r18,11
20027520:	01000584 	movi	r4,22
20027524:	85bffe04 	addi	r22,r16,-8
20027528:	14e6703a 	and	r19,r2,r19
2002752c:	20c0372e 	bgeu	r4,r3,2002760c <_realloc_r+0x138>
20027530:	047ffe04 	movi	r17,-8
20027534:	1c62703a 	and	r17,r3,r17
20027538:	8807883a 	mov	r3,r17
2002753c:	88005a16 	blt	r17,zero,200276a8 <_realloc_r+0x1d4>
20027540:	8c805936 	bltu	r17,r18,200276a8 <_realloc_r+0x1d4>
20027544:	98c0340e 	bge	r19,r3,20027618 <_realloc_r+0x144>
20027548:	070800f4 	movhi	fp,8195
2002754c:	e734d204 	addi	fp,fp,-11448
20027550:	e1400217 	ldw	r5,8(fp)
20027554:	b4c9883a 	add	r4,r22,r19
20027558:	29009026 	beq	r5,r4,2002779c <_realloc_r+0x2c8>
2002755c:	21800117 	ldw	r6,4(r4)
20027560:	01ffff84 	movi	r7,-2
20027564:	31ce703a 	and	r7,r6,r7
20027568:	21cf883a 	add	r7,r4,r7
2002756c:	39c00117 	ldw	r7,4(r7)
20027570:	39c0004c 	andi	r7,r7,1
20027574:	38004326 	beq	r7,zero,20027684 <_realloc_r+0x1b0>
20027578:	000d883a 	mov	r6,zero
2002757c:	0009883a 	mov	r4,zero
20027580:	1080004c 	andi	r2,r2,1
20027584:	10005a1e 	bne	r2,zero,200276f0 <_realloc_r+0x21c>
20027588:	85fffe17 	ldw	r23,-8(r16)
2002758c:	00bfff04 	movi	r2,-4
20027590:	b5efc83a 	sub	r23,r22,r23
20027594:	b9c00117 	ldw	r7,4(r23)
20027598:	388e703a 	and	r7,r7,r2
2002759c:	3ccf883a 	add	r7,r7,r19
200275a0:	20005226 	beq	r4,zero,200276ec <_realloc_r+0x218>
200275a4:	31e9883a 	add	r20,r6,r7
200275a8:	2140c726 	beq	r4,r5,200278c8 <_realloc_r+0x3f4>
200275ac:	a0c04f16 	blt	r20,r3,200276ec <_realloc_r+0x218>
200275b0:	20800317 	ldw	r2,12(r4)
200275b4:	20c00217 	ldw	r3,8(r4)
200275b8:	99bfff04 	addi	r6,r19,-4
200275bc:	01000904 	movi	r4,36
200275c0:	18800315 	stw	r2,12(r3)
200275c4:	10c00215 	stw	r3,8(r2)
200275c8:	b8c00217 	ldw	r3,8(r23)
200275cc:	b8800317 	ldw	r2,12(r23)
200275d0:	bc800204 	addi	r18,r23,8
200275d4:	18800315 	stw	r2,12(r3)
200275d8:	10c00215 	stw	r3,8(r2)
200275dc:	2180ed36 	bltu	r4,r6,20027994 <_realloc_r+0x4c0>
200275e0:	008004c4 	movi	r2,19
200275e4:	11809b2e 	bgeu	r2,r6,20027854 <_realloc_r+0x380>
200275e8:	80800017 	ldw	r2,0(r16)
200275ec:	b8800215 	stw	r2,8(r23)
200275f0:	80800117 	ldw	r2,4(r16)
200275f4:	b8800315 	stw	r2,12(r23)
200275f8:	008006c4 	movi	r2,27
200275fc:	1180f936 	bltu	r2,r6,200279e4 <_realloc_r+0x510>
20027600:	b8800404 	addi	r2,r23,16
20027604:	80c00204 	addi	r3,r16,8
20027608:	00009406 	br	2002785c <_realloc_r+0x388>
2002760c:	00c00404 	movi	r3,16
20027610:	1823883a 	mov	r17,r3
20027614:	003fca06 	br	20027540 <__alt_data_end+0xfffe8140>
20027618:	9829883a 	mov	r20,r19
2002761c:	a447c83a 	sub	r3,r20,r17
20027620:	010003c4 	movi	r4,15
20027624:	1080004c 	andi	r2,r2,1
20027628:	20c02336 	bltu	r4,r3,200276b8 <_realloc_r+0x1e4>
2002762c:	1504b03a 	or	r2,r2,r20
20027630:	b0800115 	stw	r2,4(r22)
20027634:	b52d883a 	add	r22,r22,r20
20027638:	b0800117 	ldw	r2,4(r22)
2002763c:	10800054 	ori	r2,r2,1
20027640:	b0800115 	stw	r2,4(r22)
20027644:	a809883a 	mov	r4,r21
20027648:	002a77c0 	call	2002a77c <__malloc_unlock>
2002764c:	8025883a 	mov	r18,r16
20027650:	9005883a 	mov	r2,r18
20027654:	dfc00a17 	ldw	ra,40(sp)
20027658:	df000917 	ldw	fp,36(sp)
2002765c:	ddc00817 	ldw	r23,32(sp)
20027660:	dd800717 	ldw	r22,28(sp)
20027664:	dd400617 	ldw	r21,24(sp)
20027668:	dd000517 	ldw	r20,20(sp)
2002766c:	dcc00417 	ldw	r19,16(sp)
20027670:	dc800317 	ldw	r18,12(sp)
20027674:	dc400217 	ldw	r17,8(sp)
20027678:	dc000117 	ldw	r16,4(sp)
2002767c:	dec00b04 	addi	sp,sp,44
20027680:	f800283a 	ret
20027684:	01ffff04 	movi	r7,-4
20027688:	31cc703a 	and	r6,r6,r7
2002768c:	34e9883a 	add	r20,r6,r19
20027690:	a0ffbb16 	blt	r20,r3,20027580 <__alt_data_end+0xfffe8180>
20027694:	20c00317 	ldw	r3,12(r4)
20027698:	21000217 	ldw	r4,8(r4)
2002769c:	20c00315 	stw	r3,12(r4)
200276a0:	19000215 	stw	r4,8(r3)
200276a4:	003fdd06 	br	2002761c <__alt_data_end+0xfffe821c>
200276a8:	00800304 	movi	r2,12
200276ac:	a8800015 	stw	r2,0(r21)
200276b0:	0025883a 	mov	r18,zero
200276b4:	003fe606 	br	20027650 <__alt_data_end+0xfffe8250>
200276b8:	1444b03a 	or	r2,r2,r17
200276bc:	b0800115 	stw	r2,4(r22)
200276c0:	b44b883a 	add	r5,r22,r17
200276c4:	18800054 	ori	r2,r3,1
200276c8:	28800115 	stw	r2,4(r5)
200276cc:	28c7883a 	add	r3,r5,r3
200276d0:	18800117 	ldw	r2,4(r3)
200276d4:	a809883a 	mov	r4,r21
200276d8:	29400204 	addi	r5,r5,8
200276dc:	10800054 	ori	r2,r2,1
200276e0:	18800115 	stw	r2,4(r3)
200276e4:	0024d680 	call	20024d68 <_free_r>
200276e8:	003fd606 	br	20027644 <__alt_data_end+0xfffe8244>
200276ec:	38c0330e 	bge	r7,r3,200277bc <_realloc_r+0x2e8>
200276f0:	900b883a 	mov	r5,r18
200276f4:	a809883a 	mov	r4,r21
200276f8:	00259000 	call	20025900 <_malloc_r>
200276fc:	1025883a 	mov	r18,r2
20027700:	10001626 	beq	r2,zero,2002775c <_realloc_r+0x288>
20027704:	80bfff17 	ldw	r2,-4(r16)
20027708:	00ffff84 	movi	r3,-2
2002770c:	913ffe04 	addi	r4,r18,-8
20027710:	10c6703a 	and	r3,r2,r3
20027714:	b0c7883a 	add	r3,r22,r3
20027718:	20c09926 	beq	r4,r3,20027980 <_realloc_r+0x4ac>
2002771c:	99bfff04 	addi	r6,r19,-4
20027720:	00800904 	movi	r2,36
20027724:	11806436 	bltu	r2,r6,200278b8 <_realloc_r+0x3e4>
20027728:	00c004c4 	movi	r3,19
2002772c:	19804036 	bltu	r3,r6,20027830 <_realloc_r+0x35c>
20027730:	9005883a 	mov	r2,r18
20027734:	8007883a 	mov	r3,r16
20027738:	19000017 	ldw	r4,0(r3)
2002773c:	11000015 	stw	r4,0(r2)
20027740:	19000117 	ldw	r4,4(r3)
20027744:	11000115 	stw	r4,4(r2)
20027748:	18c00217 	ldw	r3,8(r3)
2002774c:	10c00215 	stw	r3,8(r2)
20027750:	a809883a 	mov	r4,r21
20027754:	800b883a 	mov	r5,r16
20027758:	0024d680 	call	20024d68 <_free_r>
2002775c:	a809883a 	mov	r4,r21
20027760:	002a77c0 	call	2002a77c <__malloc_unlock>
20027764:	003fba06 	br	20027650 <__alt_data_end+0xfffe8250>
20027768:	300b883a 	mov	r5,r6
2002776c:	dfc00a17 	ldw	ra,40(sp)
20027770:	df000917 	ldw	fp,36(sp)
20027774:	ddc00817 	ldw	r23,32(sp)
20027778:	dd800717 	ldw	r22,28(sp)
2002777c:	dd400617 	ldw	r21,24(sp)
20027780:	dd000517 	ldw	r20,20(sp)
20027784:	dcc00417 	ldw	r19,16(sp)
20027788:	dc800317 	ldw	r18,12(sp)
2002778c:	dc400217 	ldw	r17,8(sp)
20027790:	dc000117 	ldw	r16,4(sp)
20027794:	dec00b04 	addi	sp,sp,44
20027798:	00259001 	jmpi	20025900 <_malloc_r>
2002779c:	29800117 	ldw	r6,4(r5)
200277a0:	013fff04 	movi	r4,-4
200277a4:	89c00404 	addi	r7,r17,16
200277a8:	310c703a 	and	r6,r6,r4
200277ac:	34c9883a 	add	r4,r6,r19
200277b0:	21c0340e 	bge	r4,r7,20027884 <_realloc_r+0x3b0>
200277b4:	2809883a 	mov	r4,r5
200277b8:	003f7106 	br	20027580 <__alt_data_end+0xfffe8180>
200277bc:	b8800317 	ldw	r2,12(r23)
200277c0:	b8c00217 	ldw	r3,8(r23)
200277c4:	99bfff04 	addi	r6,r19,-4
200277c8:	01000904 	movi	r4,36
200277cc:	18800315 	stw	r2,12(r3)
200277d0:	10c00215 	stw	r3,8(r2)
200277d4:	bc800204 	addi	r18,r23,8
200277d8:	21807836 	bltu	r4,r6,200279bc <_realloc_r+0x4e8>
200277dc:	008004c4 	movi	r2,19
200277e0:	1180732e 	bgeu	r2,r6,200279b0 <_realloc_r+0x4dc>
200277e4:	80800017 	ldw	r2,0(r16)
200277e8:	b8800215 	stw	r2,8(r23)
200277ec:	80800117 	ldw	r2,4(r16)
200277f0:	b8800315 	stw	r2,12(r23)
200277f4:	008006c4 	movi	r2,27
200277f8:	11808936 	bltu	r2,r6,20027a20 <_realloc_r+0x54c>
200277fc:	b8800404 	addi	r2,r23,16
20027800:	80c00204 	addi	r3,r16,8
20027804:	19000017 	ldw	r4,0(r3)
20027808:	9021883a 	mov	r16,r18
2002780c:	3829883a 	mov	r20,r7
20027810:	11000015 	stw	r4,0(r2)
20027814:	19000117 	ldw	r4,4(r3)
20027818:	b82d883a 	mov	r22,r23
2002781c:	11000115 	stw	r4,4(r2)
20027820:	18c00217 	ldw	r3,8(r3)
20027824:	10c00215 	stw	r3,8(r2)
20027828:	b8800117 	ldw	r2,4(r23)
2002782c:	003f7b06 	br	2002761c <__alt_data_end+0xfffe821c>
20027830:	80c00017 	ldw	r3,0(r16)
20027834:	90c00015 	stw	r3,0(r18)
20027838:	80c00117 	ldw	r3,4(r16)
2002783c:	90c00115 	stw	r3,4(r18)
20027840:	00c006c4 	movi	r3,27
20027844:	19804636 	bltu	r3,r6,20027960 <_realloc_r+0x48c>
20027848:	90800204 	addi	r2,r18,8
2002784c:	80c00204 	addi	r3,r16,8
20027850:	003fb906 	br	20027738 <__alt_data_end+0xfffe8338>
20027854:	9005883a 	mov	r2,r18
20027858:	8007883a 	mov	r3,r16
2002785c:	19000017 	ldw	r4,0(r3)
20027860:	9021883a 	mov	r16,r18
20027864:	b82d883a 	mov	r22,r23
20027868:	11000015 	stw	r4,0(r2)
2002786c:	19000117 	ldw	r4,4(r3)
20027870:	11000115 	stw	r4,4(r2)
20027874:	18c00217 	ldw	r3,8(r3)
20027878:	10c00215 	stw	r3,8(r2)
2002787c:	b8800117 	ldw	r2,4(r23)
20027880:	003f6606 	br	2002761c <__alt_data_end+0xfffe821c>
20027884:	2445c83a 	sub	r2,r4,r17
20027888:	b46d883a 	add	r22,r22,r17
2002788c:	10800054 	ori	r2,r2,1
20027890:	b0800115 	stw	r2,4(r22)
20027894:	80bfff17 	ldw	r2,-4(r16)
20027898:	a809883a 	mov	r4,r21
2002789c:	e5800215 	stw	r22,8(fp)
200278a0:	1080004c 	andi	r2,r2,1
200278a4:	88a2b03a 	or	r17,r17,r2
200278a8:	847fff15 	stw	r17,-4(r16)
200278ac:	002a77c0 	call	2002a77c <__malloc_unlock>
200278b0:	8025883a 	mov	r18,r16
200278b4:	003f6606 	br	20027650 <__alt_data_end+0xfffe8250>
200278b8:	9009883a 	mov	r4,r18
200278bc:	800b883a 	mov	r5,r16
200278c0:	002617c0 	call	2002617c <memmove>
200278c4:	003fa206 	br	20027750 <__alt_data_end+0xfffe8350>
200278c8:	88800404 	addi	r2,r17,16
200278cc:	a0bf8716 	blt	r20,r2,200276ec <__alt_data_end+0xfffe82ec>
200278d0:	b8800317 	ldw	r2,12(r23)
200278d4:	b8c00217 	ldw	r3,8(r23)
200278d8:	99bfff04 	addi	r6,r19,-4
200278dc:	01000904 	movi	r4,36
200278e0:	18800315 	stw	r2,12(r3)
200278e4:	10c00215 	stw	r3,8(r2)
200278e8:	bc800204 	addi	r18,r23,8
200278ec:	21806536 	bltu	r4,r6,20027a84 <_realloc_r+0x5b0>
200278f0:	008004c4 	movi	r2,19
200278f4:	1180592e 	bgeu	r2,r6,20027a5c <_realloc_r+0x588>
200278f8:	80800017 	ldw	r2,0(r16)
200278fc:	b8800215 	stw	r2,8(r23)
20027900:	80800117 	ldw	r2,4(r16)
20027904:	b8800315 	stw	r2,12(r23)
20027908:	008006c4 	movi	r2,27
2002790c:	11806136 	bltu	r2,r6,20027a94 <_realloc_r+0x5c0>
20027910:	b8800404 	addi	r2,r23,16
20027914:	80c00204 	addi	r3,r16,8
20027918:	19000017 	ldw	r4,0(r3)
2002791c:	11000015 	stw	r4,0(r2)
20027920:	19000117 	ldw	r4,4(r3)
20027924:	11000115 	stw	r4,4(r2)
20027928:	18c00217 	ldw	r3,8(r3)
2002792c:	10c00215 	stw	r3,8(r2)
20027930:	a447c83a 	sub	r3,r20,r17
20027934:	bc45883a 	add	r2,r23,r17
20027938:	18c00054 	ori	r3,r3,1
2002793c:	10c00115 	stw	r3,4(r2)
20027940:	b8c00117 	ldw	r3,4(r23)
20027944:	e0800215 	stw	r2,8(fp)
20027948:	a809883a 	mov	r4,r21
2002794c:	1880004c 	andi	r2,r3,1
20027950:	88a2b03a 	or	r17,r17,r2
20027954:	bc400115 	stw	r17,4(r23)
20027958:	002a77c0 	call	2002a77c <__malloc_unlock>
2002795c:	003f3c06 	br	20027650 <__alt_data_end+0xfffe8250>
20027960:	80c00217 	ldw	r3,8(r16)
20027964:	90c00215 	stw	r3,8(r18)
20027968:	80c00317 	ldw	r3,12(r16)
2002796c:	90c00315 	stw	r3,12(r18)
20027970:	30802426 	beq	r6,r2,20027a04 <_realloc_r+0x530>
20027974:	90800404 	addi	r2,r18,16
20027978:	80c00404 	addi	r3,r16,16
2002797c:	003f6e06 	br	20027738 <__alt_data_end+0xfffe8338>
20027980:	953fff17 	ldw	r20,-4(r18)
20027984:	00ffff04 	movi	r3,-4
20027988:	a0e8703a 	and	r20,r20,r3
2002798c:	a4e9883a 	add	r20,r20,r19
20027990:	003f2206 	br	2002761c <__alt_data_end+0xfffe821c>
20027994:	800b883a 	mov	r5,r16
20027998:	9009883a 	mov	r4,r18
2002799c:	002617c0 	call	2002617c <memmove>
200279a0:	9021883a 	mov	r16,r18
200279a4:	b8800117 	ldw	r2,4(r23)
200279a8:	b82d883a 	mov	r22,r23
200279ac:	003f1b06 	br	2002761c <__alt_data_end+0xfffe821c>
200279b0:	9005883a 	mov	r2,r18
200279b4:	8007883a 	mov	r3,r16
200279b8:	003f9206 	br	20027804 <__alt_data_end+0xfffe8404>
200279bc:	800b883a 	mov	r5,r16
200279c0:	9009883a 	mov	r4,r18
200279c4:	d9c00015 	stw	r7,0(sp)
200279c8:	002617c0 	call	2002617c <memmove>
200279cc:	d9c00017 	ldw	r7,0(sp)
200279d0:	9021883a 	mov	r16,r18
200279d4:	b8800117 	ldw	r2,4(r23)
200279d8:	3829883a 	mov	r20,r7
200279dc:	b82d883a 	mov	r22,r23
200279e0:	003f0e06 	br	2002761c <__alt_data_end+0xfffe821c>
200279e4:	80800217 	ldw	r2,8(r16)
200279e8:	b8800415 	stw	r2,16(r23)
200279ec:	80800317 	ldw	r2,12(r16)
200279f0:	b8800515 	stw	r2,20(r23)
200279f4:	31001226 	beq	r6,r4,20027a40 <_realloc_r+0x56c>
200279f8:	b8800604 	addi	r2,r23,24
200279fc:	80c00404 	addi	r3,r16,16
20027a00:	003f9606 	br	2002785c <__alt_data_end+0xfffe845c>
20027a04:	81000417 	ldw	r4,16(r16)
20027a08:	90800604 	addi	r2,r18,24
20027a0c:	80c00604 	addi	r3,r16,24
20027a10:	91000415 	stw	r4,16(r18)
20027a14:	81000517 	ldw	r4,20(r16)
20027a18:	91000515 	stw	r4,20(r18)
20027a1c:	003f4606 	br	20027738 <__alt_data_end+0xfffe8338>
20027a20:	80800217 	ldw	r2,8(r16)
20027a24:	b8800415 	stw	r2,16(r23)
20027a28:	80800317 	ldw	r2,12(r16)
20027a2c:	b8800515 	stw	r2,20(r23)
20027a30:	31000d26 	beq	r6,r4,20027a68 <_realloc_r+0x594>
20027a34:	b8800604 	addi	r2,r23,24
20027a38:	80c00404 	addi	r3,r16,16
20027a3c:	003f7106 	br	20027804 <__alt_data_end+0xfffe8404>
20027a40:	81000417 	ldw	r4,16(r16)
20027a44:	b8800804 	addi	r2,r23,32
20027a48:	80c00604 	addi	r3,r16,24
20027a4c:	b9000615 	stw	r4,24(r23)
20027a50:	81000517 	ldw	r4,20(r16)
20027a54:	b9000715 	stw	r4,28(r23)
20027a58:	003f8006 	br	2002785c <__alt_data_end+0xfffe845c>
20027a5c:	9005883a 	mov	r2,r18
20027a60:	8007883a 	mov	r3,r16
20027a64:	003fac06 	br	20027918 <__alt_data_end+0xfffe8518>
20027a68:	81000417 	ldw	r4,16(r16)
20027a6c:	b8800804 	addi	r2,r23,32
20027a70:	80c00604 	addi	r3,r16,24
20027a74:	b9000615 	stw	r4,24(r23)
20027a78:	81000517 	ldw	r4,20(r16)
20027a7c:	b9000715 	stw	r4,28(r23)
20027a80:	003f6006 	br	20027804 <__alt_data_end+0xfffe8404>
20027a84:	9009883a 	mov	r4,r18
20027a88:	800b883a 	mov	r5,r16
20027a8c:	002617c0 	call	2002617c <memmove>
20027a90:	003fa706 	br	20027930 <__alt_data_end+0xfffe8530>
20027a94:	80800217 	ldw	r2,8(r16)
20027a98:	b8800415 	stw	r2,16(r23)
20027a9c:	80800317 	ldw	r2,12(r16)
20027aa0:	b8800515 	stw	r2,20(r23)
20027aa4:	31000326 	beq	r6,r4,20027ab4 <_realloc_r+0x5e0>
20027aa8:	b8800604 	addi	r2,r23,24
20027aac:	80c00404 	addi	r3,r16,16
20027ab0:	003f9906 	br	20027918 <__alt_data_end+0xfffe8518>
20027ab4:	81000417 	ldw	r4,16(r16)
20027ab8:	b8800804 	addi	r2,r23,32
20027abc:	80c00604 	addi	r3,r16,24
20027ac0:	b9000615 	stw	r4,24(r23)
20027ac4:	81000517 	ldw	r4,20(r16)
20027ac8:	b9000715 	stw	r4,28(r23)
20027acc:	003f9206 	br	20027918 <__alt_data_end+0xfffe8518>

20027ad0 <__isinfd>:
20027ad0:	0105c83a 	sub	r2,zero,r4
20027ad4:	1108b03a 	or	r4,r2,r4
20027ad8:	2004d7fa 	srli	r2,r4,31
20027adc:	00e00034 	movhi	r3,32768
20027ae0:	18ffffc4 	addi	r3,r3,-1
20027ae4:	28ca703a 	and	r5,r5,r3
20027ae8:	1144b03a 	or	r2,r2,r5
20027aec:	00dffc34 	movhi	r3,32752
20027af0:	1885c83a 	sub	r2,r3,r2
20027af4:	0087c83a 	sub	r3,zero,r2
20027af8:	1884b03a 	or	r2,r3,r2
20027afc:	1005d7fa 	srai	r2,r2,31
20027b00:	10800044 	addi	r2,r2,1
20027b04:	f800283a 	ret

20027b08 <__isnand>:
20027b08:	0105c83a 	sub	r2,zero,r4
20027b0c:	1108b03a 	or	r4,r2,r4
20027b10:	2004d7fa 	srli	r2,r4,31
20027b14:	00e00034 	movhi	r3,32768
20027b18:	18ffffc4 	addi	r3,r3,-1
20027b1c:	28ca703a 	and	r5,r5,r3
20027b20:	1144b03a 	or	r2,r2,r5
20027b24:	00dffc34 	movhi	r3,32752
20027b28:	1885c83a 	sub	r2,r3,r2
20027b2c:	1004d7fa 	srli	r2,r2,31
20027b30:	f800283a 	ret

20027b34 <_sbrk_r>:
20027b34:	defffd04 	addi	sp,sp,-12
20027b38:	dc400115 	stw	r17,4(sp)
20027b3c:	dc000015 	stw	r16,0(sp)
20027b40:	2023883a 	mov	r17,r4
20027b44:	040800f4 	movhi	r16,8195
20027b48:	84010104 	addi	r16,r16,1028
20027b4c:	2809883a 	mov	r4,r5
20027b50:	dfc00215 	stw	ra,8(sp)
20027b54:	80000015 	stw	zero,0(r16)
20027b58:	002a93c0 	call	2002a93c <sbrk>
20027b5c:	00ffffc4 	movi	r3,-1
20027b60:	10c00526 	beq	r2,r3,20027b78 <_sbrk_r+0x44>
20027b64:	dfc00217 	ldw	ra,8(sp)
20027b68:	dc400117 	ldw	r17,4(sp)
20027b6c:	dc000017 	ldw	r16,0(sp)
20027b70:	dec00304 	addi	sp,sp,12
20027b74:	f800283a 	ret
20027b78:	80c00017 	ldw	r3,0(r16)
20027b7c:	183ff926 	beq	r3,zero,20027b64 <__alt_data_end+0xfffe8764>
20027b80:	88c00015 	stw	r3,0(r17)
20027b84:	dfc00217 	ldw	ra,8(sp)
20027b88:	dc400117 	ldw	r17,4(sp)
20027b8c:	dc000017 	ldw	r16,0(sp)
20027b90:	dec00304 	addi	sp,sp,12
20027b94:	f800283a 	ret

20027b98 <__sread>:
20027b98:	defffe04 	addi	sp,sp,-8
20027b9c:	dc000015 	stw	r16,0(sp)
20027ba0:	2821883a 	mov	r16,r5
20027ba4:	2940038f 	ldh	r5,14(r5)
20027ba8:	dfc00115 	stw	ra,4(sp)
20027bac:	00282e80 	call	200282e8 <_read_r>
20027bb0:	10000716 	blt	r2,zero,20027bd0 <__sread+0x38>
20027bb4:	80c01417 	ldw	r3,80(r16)
20027bb8:	1887883a 	add	r3,r3,r2
20027bbc:	80c01415 	stw	r3,80(r16)
20027bc0:	dfc00117 	ldw	ra,4(sp)
20027bc4:	dc000017 	ldw	r16,0(sp)
20027bc8:	dec00204 	addi	sp,sp,8
20027bcc:	f800283a 	ret
20027bd0:	80c0030b 	ldhu	r3,12(r16)
20027bd4:	18fbffcc 	andi	r3,r3,61439
20027bd8:	80c0030d 	sth	r3,12(r16)
20027bdc:	dfc00117 	ldw	ra,4(sp)
20027be0:	dc000017 	ldw	r16,0(sp)
20027be4:	dec00204 	addi	sp,sp,8
20027be8:	f800283a 	ret

20027bec <__swrite>:
20027bec:	2880030b 	ldhu	r2,12(r5)
20027bf0:	defffb04 	addi	sp,sp,-20
20027bf4:	dcc00315 	stw	r19,12(sp)
20027bf8:	10c0400c 	andi	r3,r2,256
20027bfc:	18ffffcc 	andi	r3,r3,65535
20027c00:	18e0001c 	xori	r3,r3,32768
20027c04:	dc800215 	stw	r18,8(sp)
20027c08:	dc400115 	stw	r17,4(sp)
20027c0c:	dc000015 	stw	r16,0(sp)
20027c10:	dfc00415 	stw	ra,16(sp)
20027c14:	18e00004 	addi	r3,r3,-32768
20027c18:	2821883a 	mov	r16,r5
20027c1c:	2027883a 	mov	r19,r4
20027c20:	3025883a 	mov	r18,r6
20027c24:	3823883a 	mov	r17,r7
20027c28:	18000526 	beq	r3,zero,20027c40 <__swrite+0x54>
20027c2c:	2940038f 	ldh	r5,14(r5)
20027c30:	000d883a 	mov	r6,zero
20027c34:	01c00084 	movi	r7,2
20027c38:	002827c0 	call	2002827c <_lseek_r>
20027c3c:	8080030b 	ldhu	r2,12(r16)
20027c40:	8140038f 	ldh	r5,14(r16)
20027c44:	10bbffcc 	andi	r2,r2,61439
20027c48:	9809883a 	mov	r4,r19
20027c4c:	900d883a 	mov	r6,r18
20027c50:	880f883a 	mov	r7,r17
20027c54:	8080030d 	sth	r2,12(r16)
20027c58:	dfc00417 	ldw	ra,16(sp)
20027c5c:	dcc00317 	ldw	r19,12(sp)
20027c60:	dc800217 	ldw	r18,8(sp)
20027c64:	dc400117 	ldw	r17,4(sp)
20027c68:	dc000017 	ldw	r16,0(sp)
20027c6c:	dec00504 	addi	sp,sp,20
20027c70:	0027ed41 	jmpi	20027ed4 <_write_r>

20027c74 <__sseek>:
20027c74:	defffe04 	addi	sp,sp,-8
20027c78:	dc000015 	stw	r16,0(sp)
20027c7c:	2821883a 	mov	r16,r5
20027c80:	2940038f 	ldh	r5,14(r5)
20027c84:	dfc00115 	stw	ra,4(sp)
20027c88:	002827c0 	call	2002827c <_lseek_r>
20027c8c:	00ffffc4 	movi	r3,-1
20027c90:	10c00826 	beq	r2,r3,20027cb4 <__sseek+0x40>
20027c94:	80c0030b 	ldhu	r3,12(r16)
20027c98:	80801415 	stw	r2,80(r16)
20027c9c:	18c40014 	ori	r3,r3,4096
20027ca0:	80c0030d 	sth	r3,12(r16)
20027ca4:	dfc00117 	ldw	ra,4(sp)
20027ca8:	dc000017 	ldw	r16,0(sp)
20027cac:	dec00204 	addi	sp,sp,8
20027cb0:	f800283a 	ret
20027cb4:	80c0030b 	ldhu	r3,12(r16)
20027cb8:	18fbffcc 	andi	r3,r3,61439
20027cbc:	80c0030d 	sth	r3,12(r16)
20027cc0:	dfc00117 	ldw	ra,4(sp)
20027cc4:	dc000017 	ldw	r16,0(sp)
20027cc8:	dec00204 	addi	sp,sp,8
20027ccc:	f800283a 	ret

20027cd0 <__sclose>:
20027cd0:	2940038f 	ldh	r5,14(r5)
20027cd4:	0027ffc1 	jmpi	20027ffc <_close_r>

20027cd8 <strcmp>:
20027cd8:	2904b03a 	or	r2,r5,r4
20027cdc:	108000cc 	andi	r2,r2,3
20027ce0:	1000171e 	bne	r2,zero,20027d40 <strcmp+0x68>
20027ce4:	20800017 	ldw	r2,0(r4)
20027ce8:	28c00017 	ldw	r3,0(r5)
20027cec:	10c0141e 	bne	r2,r3,20027d40 <strcmp+0x68>
20027cf0:	027fbff4 	movhi	r9,65279
20027cf4:	4a7fbfc4 	addi	r9,r9,-257
20027cf8:	1247883a 	add	r3,r2,r9
20027cfc:	0084303a 	nor	r2,zero,r2
20027d00:	1884703a 	and	r2,r3,r2
20027d04:	02202074 	movhi	r8,32897
20027d08:	42202004 	addi	r8,r8,-32640
20027d0c:	1204703a 	and	r2,r2,r8
20027d10:	10000226 	beq	r2,zero,20027d1c <strcmp+0x44>
20027d14:	00001706 	br	20027d74 <strcmp+0x9c>
20027d18:	3000161e 	bne	r6,zero,20027d74 <strcmp+0x9c>
20027d1c:	21000104 	addi	r4,r4,4
20027d20:	20800017 	ldw	r2,0(r4)
20027d24:	29400104 	addi	r5,r5,4
20027d28:	28c00017 	ldw	r3,0(r5)
20027d2c:	124f883a 	add	r7,r2,r9
20027d30:	008c303a 	nor	r6,zero,r2
20027d34:	398c703a 	and	r6,r7,r6
20027d38:	320c703a 	and	r6,r6,r8
20027d3c:	10fff626 	beq	r2,r3,20027d18 <__alt_data_end+0xfffe8918>
20027d40:	20800007 	ldb	r2,0(r4)
20027d44:	1000051e 	bne	r2,zero,20027d5c <strcmp+0x84>
20027d48:	00000606 	br	20027d64 <strcmp+0x8c>
20027d4c:	21000044 	addi	r4,r4,1
20027d50:	20800007 	ldb	r2,0(r4)
20027d54:	29400044 	addi	r5,r5,1
20027d58:	10000226 	beq	r2,zero,20027d64 <strcmp+0x8c>
20027d5c:	28c00007 	ldb	r3,0(r5)
20027d60:	10fffa26 	beq	r2,r3,20027d4c <__alt_data_end+0xfffe894c>
20027d64:	20c00003 	ldbu	r3,0(r4)
20027d68:	28800003 	ldbu	r2,0(r5)
20027d6c:	1885c83a 	sub	r2,r3,r2
20027d70:	f800283a 	ret
20027d74:	0005883a 	mov	r2,zero
20027d78:	f800283a 	ret

20027d7c <__swbuf_r>:
20027d7c:	defffc04 	addi	sp,sp,-16
20027d80:	dc800215 	stw	r18,8(sp)
20027d84:	dc400115 	stw	r17,4(sp)
20027d88:	dc000015 	stw	r16,0(sp)
20027d8c:	dfc00315 	stw	ra,12(sp)
20027d90:	2023883a 	mov	r17,r4
20027d94:	2825883a 	mov	r18,r5
20027d98:	3021883a 	mov	r16,r6
20027d9c:	20000226 	beq	r4,zero,20027da8 <__swbuf_r+0x2c>
20027da0:	20800e17 	ldw	r2,56(r4)
20027da4:	10003b26 	beq	r2,zero,20027e94 <__swbuf_r+0x118>
20027da8:	8080030b 	ldhu	r2,12(r16)
20027dac:	80c00617 	ldw	r3,24(r16)
20027db0:	1080020c 	andi	r2,r2,8
20027db4:	10bfffcc 	andi	r2,r2,65535
20027db8:	10a0001c 	xori	r2,r2,32768
20027dbc:	80c00215 	stw	r3,8(r16)
20027dc0:	10a00004 	addi	r2,r2,-32768
20027dc4:	10002226 	beq	r2,zero,20027e50 <__swbuf_r+0xd4>
20027dc8:	80800417 	ldw	r2,16(r16)
20027dcc:	10002026 	beq	r2,zero,20027e50 <__swbuf_r+0xd4>
20027dd0:	80c00017 	ldw	r3,0(r16)
20027dd4:	81000517 	ldw	r4,20(r16)
20027dd8:	94803fcc 	andi	r18,r18,255
20027ddc:	1885c83a 	sub	r2,r3,r2
20027de0:	1100250e 	bge	r2,r4,20027e78 <__swbuf_r+0xfc>
20027de4:	10800044 	addi	r2,r2,1
20027de8:	81400217 	ldw	r5,8(r16)
20027dec:	19000044 	addi	r4,r3,1
20027df0:	297fffc4 	addi	r5,r5,-1
20027df4:	81400215 	stw	r5,8(r16)
20027df8:	1c800005 	stb	r18,0(r3)
20027dfc:	80c00517 	ldw	r3,20(r16)
20027e00:	81000015 	stw	r4,0(r16)
20027e04:	18800c26 	beq	r3,r2,20027e38 <__swbuf_r+0xbc>
20027e08:	8080030b 	ldhu	r2,12(r16)
20027e0c:	1080004c 	andi	r2,r2,1
20027e10:	10000226 	beq	r2,zero,20027e1c <__swbuf_r+0xa0>
20027e14:	00800284 	movi	r2,10
20027e18:	90800726 	beq	r18,r2,20027e38 <__swbuf_r+0xbc>
20027e1c:	9005883a 	mov	r2,r18
20027e20:	dfc00317 	ldw	ra,12(sp)
20027e24:	dc800217 	ldw	r18,8(sp)
20027e28:	dc400117 	ldw	r17,4(sp)
20027e2c:	dc000017 	ldw	r16,0(sp)
20027e30:	dec00404 	addi	sp,sp,16
20027e34:	f800283a 	ret
20027e38:	8809883a 	mov	r4,r17
20027e3c:	800b883a 	mov	r5,r16
20027e40:	002473c0 	call	2002473c <_fflush_r>
20027e44:	103ff526 	beq	r2,zero,20027e1c <__alt_data_end+0xfffe8a1c>
20027e48:	04bfffc4 	movi	r18,-1
20027e4c:	003ff306 	br	20027e1c <__alt_data_end+0xfffe8a1c>
20027e50:	8809883a 	mov	r4,r17
20027e54:	800b883a 	mov	r5,r16
20027e58:	0022da40 	call	20022da4 <__swsetup_r>
20027e5c:	10000f1e 	bne	r2,zero,20027e9c <__swbuf_r+0x120>
20027e60:	80800417 	ldw	r2,16(r16)
20027e64:	80c00017 	ldw	r3,0(r16)
20027e68:	81000517 	ldw	r4,20(r16)
20027e6c:	94803fcc 	andi	r18,r18,255
20027e70:	1885c83a 	sub	r2,r3,r2
20027e74:	113fdb16 	blt	r2,r4,20027de4 <__alt_data_end+0xfffe89e4>
20027e78:	8809883a 	mov	r4,r17
20027e7c:	800b883a 	mov	r5,r16
20027e80:	002473c0 	call	2002473c <_fflush_r>
20027e84:	103ff01e 	bne	r2,zero,20027e48 <__alt_data_end+0xfffe8a48>
20027e88:	80c00017 	ldw	r3,0(r16)
20027e8c:	00800044 	movi	r2,1
20027e90:	003fd506 	br	20027de8 <__alt_data_end+0xfffe89e8>
20027e94:	00249e40 	call	200249e4 <__sinit>
20027e98:	003fc306 	br	20027da8 <__alt_data_end+0xfffe89a8>
20027e9c:	8080030b 	ldhu	r2,12(r16)
20027ea0:	04bfffc4 	movi	r18,-1
20027ea4:	10801014 	ori	r2,r2,64
20027ea8:	8080030d 	sth	r2,12(r16)
20027eac:	00800244 	movi	r2,9
20027eb0:	88800015 	stw	r2,0(r17)
20027eb4:	003fd906 	br	20027e1c <__alt_data_end+0xfffe8a1c>

20027eb8 <__swbuf>:
20027eb8:	00c800f4 	movhi	r3,8195
20027ebc:	18fa5704 	addi	r3,r3,-5796
20027ec0:	2005883a 	mov	r2,r4
20027ec4:	19000017 	ldw	r4,0(r3)
20027ec8:	280d883a 	mov	r6,r5
20027ecc:	100b883a 	mov	r5,r2
20027ed0:	0027d7c1 	jmpi	20027d7c <__swbuf_r>

20027ed4 <_write_r>:
20027ed4:	defffd04 	addi	sp,sp,-12
20027ed8:	dc400115 	stw	r17,4(sp)
20027edc:	dc000015 	stw	r16,0(sp)
20027ee0:	2023883a 	mov	r17,r4
20027ee4:	040800f4 	movhi	r16,8195
20027ee8:	84010104 	addi	r16,r16,1028
20027eec:	2809883a 	mov	r4,r5
20027ef0:	300b883a 	mov	r5,r6
20027ef4:	380d883a 	mov	r6,r7
20027ef8:	dfc00215 	stw	ra,8(sp)
20027efc:	80000015 	stw	zero,0(r16)
20027f00:	002ac080 	call	2002ac08 <write>
20027f04:	00ffffc4 	movi	r3,-1
20027f08:	10c00526 	beq	r2,r3,20027f20 <_write_r+0x4c>
20027f0c:	dfc00217 	ldw	ra,8(sp)
20027f10:	dc400117 	ldw	r17,4(sp)
20027f14:	dc000017 	ldw	r16,0(sp)
20027f18:	dec00304 	addi	sp,sp,12
20027f1c:	f800283a 	ret
20027f20:	80c00017 	ldw	r3,0(r16)
20027f24:	183ff926 	beq	r3,zero,20027f0c <__alt_data_end+0xfffe8b0c>
20027f28:	88c00015 	stw	r3,0(r17)
20027f2c:	dfc00217 	ldw	ra,8(sp)
20027f30:	dc400117 	ldw	r17,4(sp)
20027f34:	dc000017 	ldw	r16,0(sp)
20027f38:	dec00304 	addi	sp,sp,12
20027f3c:	f800283a 	ret

20027f40 <_calloc_r>:
20027f40:	314b383a 	mul	r5,r6,r5
20027f44:	defffe04 	addi	sp,sp,-8
20027f48:	dc000015 	stw	r16,0(sp)
20027f4c:	dfc00115 	stw	ra,4(sp)
20027f50:	00259000 	call	20025900 <_malloc_r>
20027f54:	1021883a 	mov	r16,r2
20027f58:	10000c26 	beq	r2,zero,20027f8c <_calloc_r+0x4c>
20027f5c:	11bfff17 	ldw	r6,-4(r2)
20027f60:	00ffff04 	movi	r3,-4
20027f64:	00800904 	movi	r2,36
20027f68:	30cc703a 	and	r6,r6,r3
20027f6c:	30cd883a 	add	r6,r6,r3
20027f70:	11801436 	bltu	r2,r6,20027fc4 <_calloc_r+0x84>
20027f74:	00c004c4 	movi	r3,19
20027f78:	19800936 	bltu	r3,r6,20027fa0 <_calloc_r+0x60>
20027f7c:	8005883a 	mov	r2,r16
20027f80:	10000015 	stw	zero,0(r2)
20027f84:	10000115 	stw	zero,4(r2)
20027f88:	10000215 	stw	zero,8(r2)
20027f8c:	8005883a 	mov	r2,r16
20027f90:	dfc00117 	ldw	ra,4(sp)
20027f94:	dc000017 	ldw	r16,0(sp)
20027f98:	dec00204 	addi	sp,sp,8
20027f9c:	f800283a 	ret
20027fa0:	80000015 	stw	zero,0(r16)
20027fa4:	80000115 	stw	zero,4(r16)
20027fa8:	00c006c4 	movi	r3,27
20027fac:	19800d2e 	bgeu	r3,r6,20027fe4 <_calloc_r+0xa4>
20027fb0:	80000215 	stw	zero,8(r16)
20027fb4:	80000315 	stw	zero,12(r16)
20027fb8:	30800c26 	beq	r6,r2,20027fec <_calloc_r+0xac>
20027fbc:	80800404 	addi	r2,r16,16
20027fc0:	003fef06 	br	20027f80 <__alt_data_end+0xfffe8b80>
20027fc4:	8009883a 	mov	r4,r16
20027fc8:	000b883a 	mov	r5,zero
20027fcc:	00262a40 	call	200262a4 <memset>
20027fd0:	8005883a 	mov	r2,r16
20027fd4:	dfc00117 	ldw	ra,4(sp)
20027fd8:	dc000017 	ldw	r16,0(sp)
20027fdc:	dec00204 	addi	sp,sp,8
20027fe0:	f800283a 	ret
20027fe4:	80800204 	addi	r2,r16,8
20027fe8:	003fe506 	br	20027f80 <__alt_data_end+0xfffe8b80>
20027fec:	80000415 	stw	zero,16(r16)
20027ff0:	80000515 	stw	zero,20(r16)
20027ff4:	80800604 	addi	r2,r16,24
20027ff8:	003fe106 	br	20027f80 <__alt_data_end+0xfffe8b80>

20027ffc <_close_r>:
20027ffc:	defffd04 	addi	sp,sp,-12
20028000:	dc400115 	stw	r17,4(sp)
20028004:	dc000015 	stw	r16,0(sp)
20028008:	2023883a 	mov	r17,r4
2002800c:	040800f4 	movhi	r16,8195
20028010:	84010104 	addi	r16,r16,1028
20028014:	2809883a 	mov	r4,r5
20028018:	dfc00215 	stw	ra,8(sp)
2002801c:	80000015 	stw	zero,0(r16)
20028020:	002a1b40 	call	2002a1b4 <close>
20028024:	00ffffc4 	movi	r3,-1
20028028:	10c00526 	beq	r2,r3,20028040 <_close_r+0x44>
2002802c:	dfc00217 	ldw	ra,8(sp)
20028030:	dc400117 	ldw	r17,4(sp)
20028034:	dc000017 	ldw	r16,0(sp)
20028038:	dec00304 	addi	sp,sp,12
2002803c:	f800283a 	ret
20028040:	80c00017 	ldw	r3,0(r16)
20028044:	183ff926 	beq	r3,zero,2002802c <__alt_data_end+0xfffe8c2c>
20028048:	88c00015 	stw	r3,0(r17)
2002804c:	dfc00217 	ldw	ra,8(sp)
20028050:	dc400117 	ldw	r17,4(sp)
20028054:	dc000017 	ldw	r16,0(sp)
20028058:	dec00304 	addi	sp,sp,12
2002805c:	f800283a 	ret

20028060 <_fclose_r>:
20028060:	defffc04 	addi	sp,sp,-16
20028064:	dc400115 	stw	r17,4(sp)
20028068:	dc000015 	stw	r16,0(sp)
2002806c:	dfc00315 	stw	ra,12(sp)
20028070:	dc800215 	stw	r18,8(sp)
20028074:	2821883a 	mov	r16,r5
20028078:	2023883a 	mov	r17,r4
2002807c:	28003426 	beq	r5,zero,20028150 <_fclose_r+0xf0>
20028080:	0024bec0 	call	20024bec <__sfp_lock_acquire>
20028084:	88000226 	beq	r17,zero,20028090 <_fclose_r+0x30>
20028088:	88800e17 	ldw	r2,56(r17)
2002808c:	10003826 	beq	r2,zero,20028170 <_fclose_r+0x110>
20028090:	8080030f 	ldh	r2,12(r16)
20028094:	10002526 	beq	r2,zero,2002812c <_fclose_r+0xcc>
20028098:	8809883a 	mov	r4,r17
2002809c:	800b883a 	mov	r5,r16
200280a0:	002473c0 	call	2002473c <_fflush_r>
200280a4:	1025883a 	mov	r18,r2
200280a8:	80800b17 	ldw	r2,44(r16)
200280ac:	10000426 	beq	r2,zero,200280c0 <_fclose_r+0x60>
200280b0:	81400717 	ldw	r5,28(r16)
200280b4:	8809883a 	mov	r4,r17
200280b8:	103ee83a 	callr	r2
200280bc:	10003516 	blt	r2,zero,20028194 <_fclose_r+0x134>
200280c0:	8080030b 	ldhu	r2,12(r16)
200280c4:	1080200c 	andi	r2,r2,128
200280c8:	10bfffcc 	andi	r2,r2,65535
200280cc:	10a0001c 	xori	r2,r2,32768
200280d0:	10a00004 	addi	r2,r2,-32768
200280d4:	10002b1e 	bne	r2,zero,20028184 <_fclose_r+0x124>
200280d8:	81400c17 	ldw	r5,48(r16)
200280dc:	28000526 	beq	r5,zero,200280f4 <_fclose_r+0x94>
200280e0:	80801004 	addi	r2,r16,64
200280e4:	28800226 	beq	r5,r2,200280f0 <_fclose_r+0x90>
200280e8:	8809883a 	mov	r4,r17
200280ec:	0024d680 	call	20024d68 <_free_r>
200280f0:	80000c15 	stw	zero,48(r16)
200280f4:	81401117 	ldw	r5,68(r16)
200280f8:	28000326 	beq	r5,zero,20028108 <_fclose_r+0xa8>
200280fc:	8809883a 	mov	r4,r17
20028100:	0024d680 	call	20024d68 <_free_r>
20028104:	80001115 	stw	zero,68(r16)
20028108:	8000030d 	sth	zero,12(r16)
2002810c:	0024bf00 	call	20024bf0 <__sfp_lock_release>
20028110:	9005883a 	mov	r2,r18
20028114:	dfc00317 	ldw	ra,12(sp)
20028118:	dc800217 	ldw	r18,8(sp)
2002811c:	dc400117 	ldw	r17,4(sp)
20028120:	dc000017 	ldw	r16,0(sp)
20028124:	dec00404 	addi	sp,sp,16
20028128:	f800283a 	ret
2002812c:	0024bf00 	call	20024bf0 <__sfp_lock_release>
20028130:	0025883a 	mov	r18,zero
20028134:	9005883a 	mov	r2,r18
20028138:	dfc00317 	ldw	ra,12(sp)
2002813c:	dc800217 	ldw	r18,8(sp)
20028140:	dc400117 	ldw	r17,4(sp)
20028144:	dc000017 	ldw	r16,0(sp)
20028148:	dec00404 	addi	sp,sp,16
2002814c:	f800283a 	ret
20028150:	0025883a 	mov	r18,zero
20028154:	9005883a 	mov	r2,r18
20028158:	dfc00317 	ldw	ra,12(sp)
2002815c:	dc800217 	ldw	r18,8(sp)
20028160:	dc400117 	ldw	r17,4(sp)
20028164:	dc000017 	ldw	r16,0(sp)
20028168:	dec00404 	addi	sp,sp,16
2002816c:	f800283a 	ret
20028170:	8809883a 	mov	r4,r17
20028174:	00249e40 	call	200249e4 <__sinit>
20028178:	8080030f 	ldh	r2,12(r16)
2002817c:	103fc61e 	bne	r2,zero,20028098 <__alt_data_end+0xfffe8c98>
20028180:	003fea06 	br	2002812c <__alt_data_end+0xfffe8d2c>
20028184:	81400417 	ldw	r5,16(r16)
20028188:	8809883a 	mov	r4,r17
2002818c:	0024d680 	call	20024d68 <_free_r>
20028190:	003fd106 	br	200280d8 <__alt_data_end+0xfffe8cd8>
20028194:	04bfffc4 	movi	r18,-1
20028198:	003fc906 	br	200280c0 <__alt_data_end+0xfffe8cc0>

2002819c <fclose>:
2002819c:	008800f4 	movhi	r2,8195
200281a0:	10ba5704 	addi	r2,r2,-5796
200281a4:	200b883a 	mov	r5,r4
200281a8:	11000017 	ldw	r4,0(r2)
200281ac:	00280601 	jmpi	20028060 <_fclose_r>

200281b0 <_fstat_r>:
200281b0:	defffd04 	addi	sp,sp,-12
200281b4:	dc400115 	stw	r17,4(sp)
200281b8:	dc000015 	stw	r16,0(sp)
200281bc:	2023883a 	mov	r17,r4
200281c0:	040800f4 	movhi	r16,8195
200281c4:	84010104 	addi	r16,r16,1028
200281c8:	2809883a 	mov	r4,r5
200281cc:	300b883a 	mov	r5,r6
200281d0:	dfc00215 	stw	ra,8(sp)
200281d4:	80000015 	stw	zero,0(r16)
200281d8:	002a33c0 	call	2002a33c <fstat>
200281dc:	00ffffc4 	movi	r3,-1
200281e0:	10c00526 	beq	r2,r3,200281f8 <_fstat_r+0x48>
200281e4:	dfc00217 	ldw	ra,8(sp)
200281e8:	dc400117 	ldw	r17,4(sp)
200281ec:	dc000017 	ldw	r16,0(sp)
200281f0:	dec00304 	addi	sp,sp,12
200281f4:	f800283a 	ret
200281f8:	80c00017 	ldw	r3,0(r16)
200281fc:	183ff926 	beq	r3,zero,200281e4 <__alt_data_end+0xfffe8de4>
20028200:	88c00015 	stw	r3,0(r17)
20028204:	dfc00217 	ldw	ra,8(sp)
20028208:	dc400117 	ldw	r17,4(sp)
2002820c:	dc000017 	ldw	r16,0(sp)
20028210:	dec00304 	addi	sp,sp,12
20028214:	f800283a 	ret

20028218 <_isatty_r>:
20028218:	defffd04 	addi	sp,sp,-12
2002821c:	dc400115 	stw	r17,4(sp)
20028220:	dc000015 	stw	r16,0(sp)
20028224:	2023883a 	mov	r17,r4
20028228:	040800f4 	movhi	r16,8195
2002822c:	84010104 	addi	r16,r16,1028
20028230:	2809883a 	mov	r4,r5
20028234:	dfc00215 	stw	ra,8(sp)
20028238:	80000015 	stw	zero,0(r16)
2002823c:	002a4380 	call	2002a438 <isatty>
20028240:	00ffffc4 	movi	r3,-1
20028244:	10c00526 	beq	r2,r3,2002825c <_isatty_r+0x44>
20028248:	dfc00217 	ldw	ra,8(sp)
2002824c:	dc400117 	ldw	r17,4(sp)
20028250:	dc000017 	ldw	r16,0(sp)
20028254:	dec00304 	addi	sp,sp,12
20028258:	f800283a 	ret
2002825c:	80c00017 	ldw	r3,0(r16)
20028260:	183ff926 	beq	r3,zero,20028248 <__alt_data_end+0xfffe8e48>
20028264:	88c00015 	stw	r3,0(r17)
20028268:	dfc00217 	ldw	ra,8(sp)
2002826c:	dc400117 	ldw	r17,4(sp)
20028270:	dc000017 	ldw	r16,0(sp)
20028274:	dec00304 	addi	sp,sp,12
20028278:	f800283a 	ret

2002827c <_lseek_r>:
2002827c:	defffd04 	addi	sp,sp,-12
20028280:	dc400115 	stw	r17,4(sp)
20028284:	dc000015 	stw	r16,0(sp)
20028288:	2023883a 	mov	r17,r4
2002828c:	040800f4 	movhi	r16,8195
20028290:	84010104 	addi	r16,r16,1028
20028294:	2809883a 	mov	r4,r5
20028298:	300b883a 	mov	r5,r6
2002829c:	380d883a 	mov	r6,r7
200282a0:	dfc00215 	stw	ra,8(sp)
200282a4:	80000015 	stw	zero,0(r16)
200282a8:	002a6140 	call	2002a614 <lseek>
200282ac:	00ffffc4 	movi	r3,-1
200282b0:	10c00526 	beq	r2,r3,200282c8 <_lseek_r+0x4c>
200282b4:	dfc00217 	ldw	ra,8(sp)
200282b8:	dc400117 	ldw	r17,4(sp)
200282bc:	dc000017 	ldw	r16,0(sp)
200282c0:	dec00304 	addi	sp,sp,12
200282c4:	f800283a 	ret
200282c8:	80c00017 	ldw	r3,0(r16)
200282cc:	183ff926 	beq	r3,zero,200282b4 <__alt_data_end+0xfffe8eb4>
200282d0:	88c00015 	stw	r3,0(r17)
200282d4:	dfc00217 	ldw	ra,8(sp)
200282d8:	dc400117 	ldw	r17,4(sp)
200282dc:	dc000017 	ldw	r16,0(sp)
200282e0:	dec00304 	addi	sp,sp,12
200282e4:	f800283a 	ret

200282e8 <_read_r>:
200282e8:	defffd04 	addi	sp,sp,-12
200282ec:	dc400115 	stw	r17,4(sp)
200282f0:	dc000015 	stw	r16,0(sp)
200282f4:	2023883a 	mov	r17,r4
200282f8:	040800f4 	movhi	r16,8195
200282fc:	84010104 	addi	r16,r16,1028
20028300:	2809883a 	mov	r4,r5
20028304:	300b883a 	mov	r5,r6
20028308:	380d883a 	mov	r6,r7
2002830c:	dfc00215 	stw	ra,8(sp)
20028310:	80000015 	stw	zero,0(r16)
20028314:	002a7ec0 	call	2002a7ec <read>
20028318:	00ffffc4 	movi	r3,-1
2002831c:	10c00526 	beq	r2,r3,20028334 <_read_r+0x4c>
20028320:	dfc00217 	ldw	ra,8(sp)
20028324:	dc400117 	ldw	r17,4(sp)
20028328:	dc000017 	ldw	r16,0(sp)
2002832c:	dec00304 	addi	sp,sp,12
20028330:	f800283a 	ret
20028334:	80c00017 	ldw	r3,0(r16)
20028338:	183ff926 	beq	r3,zero,20028320 <__alt_data_end+0xfffe8f20>
2002833c:	88c00015 	stw	r3,0(r17)
20028340:	dfc00217 	ldw	ra,8(sp)
20028344:	dc400117 	ldw	r17,4(sp)
20028348:	dc000017 	ldw	r16,0(sp)
2002834c:	dec00304 	addi	sp,sp,12
20028350:	f800283a 	ret

20028354 <__muldi3>:
20028354:	20bfffcc 	andi	r2,r4,65535
20028358:	2010d43a 	srli	r8,r4,16
2002835c:	30ffffcc 	andi	r3,r6,65535
20028360:	3014d43a 	srli	r10,r6,16
20028364:	1893383a 	mul	r9,r3,r2
20028368:	1a07383a 	mul	r3,r3,r8
2002836c:	5085383a 	mul	r2,r10,r2
20028370:	4816d43a 	srli	r11,r9,16
20028374:	5211383a 	mul	r8,r10,r8
20028378:	1885883a 	add	r2,r3,r2
2002837c:	12c5883a 	add	r2,r2,r11
20028380:	10c0022e 	bgeu	r2,r3,2002838c <__muldi3+0x38>
20028384:	00c00074 	movhi	r3,1
20028388:	40d1883a 	add	r8,r8,r3
2002838c:	1014d43a 	srli	r10,r2,16
20028390:	21c9383a 	mul	r4,r4,r7
20028394:	314d383a 	mul	r6,r6,r5
20028398:	1004943a 	slli	r2,r2,16
2002839c:	4291883a 	add	r8,r8,r10
200283a0:	4a7fffcc 	andi	r9,r9,65535
200283a4:	2187883a 	add	r3,r4,r6
200283a8:	1245883a 	add	r2,r2,r9
200283ac:	1a07883a 	add	r3,r3,r8
200283b0:	f800283a 	ret

200283b4 <__udivdi3>:
200283b4:	defff504 	addi	sp,sp,-44
200283b8:	dd000515 	stw	r20,20(sp)
200283bc:	dcc00415 	stw	r19,16(sp)
200283c0:	dc800315 	stw	r18,12(sp)
200283c4:	dc400215 	stw	r17,8(sp)
200283c8:	dc000115 	stw	r16,4(sp)
200283cc:	dfc00a15 	stw	ra,40(sp)
200283d0:	df000915 	stw	fp,36(sp)
200283d4:	ddc00815 	stw	r23,32(sp)
200283d8:	dd800715 	stw	r22,28(sp)
200283dc:	dd400615 	stw	r21,24(sp)
200283e0:	2025883a 	mov	r18,r4
200283e4:	2823883a 	mov	r17,r5
200283e8:	3021883a 	mov	r16,r6
200283ec:	2027883a 	mov	r19,r4
200283f0:	2829883a 	mov	r20,r5
200283f4:	3800401e 	bne	r7,zero,200284f8 <__udivdi3+0x144>
200283f8:	2980602e 	bgeu	r5,r6,2002857c <__udivdi3+0x1c8>
200283fc:	00bfffd4 	movui	r2,65535
20028400:	1180aa36 	bltu	r2,r6,200286ac <__udivdi3+0x2f8>
20028404:	00803fc4 	movi	r2,255
20028408:	11814436 	bltu	r2,r6,2002891c <__udivdi3+0x568>
2002840c:	0005883a 	mov	r2,zero
20028410:	0007883a 	mov	r3,zero
20028414:	3084d83a 	srl	r2,r6,r2
20028418:	010800f4 	movhi	r4,8195
2002841c:	21338404 	addi	r4,r4,-12784
20028420:	2085883a 	add	r2,r4,r2
20028424:	10800003 	ldbu	r2,0(r2)
20028428:	10c7883a 	add	r3,r2,r3
2002842c:	00800804 	movi	r2,32
20028430:	10c5c83a 	sub	r2,r2,r3
20028434:	10000526 	beq	r2,zero,2002844c <__udivdi3+0x98>
20028438:	88a2983a 	sll	r17,r17,r2
2002843c:	90c6d83a 	srl	r3,r18,r3
20028440:	30a0983a 	sll	r16,r6,r2
20028444:	90a6983a 	sll	r19,r18,r2
20028448:	88e8b03a 	or	r20,r17,r3
2002844c:	8022d43a 	srli	r17,r16,16
20028450:	a009883a 	mov	r4,r20
20028454:	857fffcc 	andi	r21,r16,65535
20028458:	880b883a 	mov	r5,r17
2002845c:	0020c280 	call	20020c28 <__umodsi3>
20028460:	a009883a 	mov	r4,r20
20028464:	880b883a 	mov	r5,r17
20028468:	102d883a 	mov	r22,r2
2002846c:	0020c200 	call	20020c20 <__udivsi3>
20028470:	b02c943a 	slli	r22,r22,16
20028474:	9806d43a 	srli	r3,r19,16
20028478:	1549383a 	mul	r4,r2,r21
2002847c:	1025883a 	mov	r18,r2
20028480:	b0c6b03a 	or	r3,r22,r3
20028484:	1900052e 	bgeu	r3,r4,2002849c <__udivdi3+0xe8>
20028488:	1c07883a 	add	r3,r3,r16
2002848c:	10bfffc4 	addi	r2,r2,-1
20028490:	1c000136 	bltu	r3,r16,20028498 <__udivdi3+0xe4>
20028494:	19013636 	bltu	r3,r4,20028970 <__udivdi3+0x5bc>
20028498:	1025883a 	mov	r18,r2
2002849c:	1929c83a 	sub	r20,r3,r4
200284a0:	a009883a 	mov	r4,r20
200284a4:	880b883a 	mov	r5,r17
200284a8:	0020c280 	call	20020c28 <__umodsi3>
200284ac:	102d883a 	mov	r22,r2
200284b0:	a009883a 	mov	r4,r20
200284b4:	880b883a 	mov	r5,r17
200284b8:	0020c200 	call	20020c20 <__udivsi3>
200284bc:	b02c943a 	slli	r22,r22,16
200284c0:	156b383a 	mul	r21,r2,r21
200284c4:	9cffffcc 	andi	r19,r19,65535
200284c8:	b4e6b03a 	or	r19,r22,r19
200284cc:	1009883a 	mov	r4,r2
200284d0:	9d40052e 	bgeu	r19,r21,200284e8 <__udivdi3+0x134>
200284d4:	9c27883a 	add	r19,r19,r16
200284d8:	10bfffc4 	addi	r2,r2,-1
200284dc:	9c00f736 	bltu	r19,r16,200288bc <__udivdi3+0x508>
200284e0:	9d40f62e 	bgeu	r19,r21,200288bc <__udivdi3+0x508>
200284e4:	213fff84 	addi	r4,r4,-2
200284e8:	9004943a 	slli	r2,r18,16
200284ec:	0007883a 	mov	r3,zero
200284f0:	2084b03a 	or	r2,r4,r2
200284f4:	00001506 	br	2002854c <__udivdi3+0x198>
200284f8:	29c06536 	bltu	r5,r7,20028690 <__udivdi3+0x2dc>
200284fc:	00bfffd4 	movui	r2,65535
20028500:	11c0652e 	bgeu	r2,r7,20028698 <__udivdi3+0x2e4>
20028504:	00804034 	movhi	r2,256
20028508:	10bfffc4 	addi	r2,r2,-1
2002850c:	11c0f736 	bltu	r2,r7,200288ec <__udivdi3+0x538>
20028510:	00c00404 	movi	r3,16
20028514:	180b883a 	mov	r5,r3
20028518:	38c6d83a 	srl	r3,r7,r3
2002851c:	010800f4 	movhi	r4,8195
20028520:	21338404 	addi	r4,r4,-12784
20028524:	04000804 	movi	r16,32
20028528:	20c7883a 	add	r3,r4,r3
2002852c:	18800003 	ldbu	r2,0(r3)
20028530:	1145883a 	add	r2,r2,r5
20028534:	80a1c83a 	sub	r16,r16,r2
20028538:	8000691e 	bne	r16,zero,200286e0 <__udivdi3+0x32c>
2002853c:	0007883a 	mov	r3,zero
20028540:	3c406536 	bltu	r7,r17,200286d8 <__udivdi3+0x324>
20028544:	9180642e 	bgeu	r18,r6,200286d8 <__udivdi3+0x324>
20028548:	0005883a 	mov	r2,zero
2002854c:	dfc00a17 	ldw	ra,40(sp)
20028550:	df000917 	ldw	fp,36(sp)
20028554:	ddc00817 	ldw	r23,32(sp)
20028558:	dd800717 	ldw	r22,28(sp)
2002855c:	dd400617 	ldw	r21,24(sp)
20028560:	dd000517 	ldw	r20,20(sp)
20028564:	dcc00417 	ldw	r19,16(sp)
20028568:	dc800317 	ldw	r18,12(sp)
2002856c:	dc400217 	ldw	r17,8(sp)
20028570:	dc000117 	ldw	r16,4(sp)
20028574:	dec00b04 	addi	sp,sp,44
20028578:	f800283a 	ret
2002857c:	3000041e 	bne	r6,zero,20028590 <__udivdi3+0x1dc>
20028580:	01000044 	movi	r4,1
20028584:	000b883a 	mov	r5,zero
20028588:	0020c200 	call	20020c20 <__udivsi3>
2002858c:	1021883a 	mov	r16,r2
20028590:	00bfffd4 	movui	r2,65535
20028594:	14004b2e 	bgeu	r2,r16,200286c4 <__udivdi3+0x310>
20028598:	00804034 	movhi	r2,256
2002859c:	10bfffc4 	addi	r2,r2,-1
200285a0:	1400d836 	bltu	r2,r16,20028904 <__udivdi3+0x550>
200285a4:	00800404 	movi	r2,16
200285a8:	1007883a 	mov	r3,r2
200285ac:	8084d83a 	srl	r2,r16,r2
200285b0:	010800f4 	movhi	r4,8195
200285b4:	21338404 	addi	r4,r4,-12784
200285b8:	2085883a 	add	r2,r4,r2
200285bc:	10800003 	ldbu	r2,0(r2)
200285c0:	10c7883a 	add	r3,r2,r3
200285c4:	00800804 	movi	r2,32
200285c8:	10c5c83a 	sub	r2,r2,r3
200285cc:	1000891e 	bne	r2,zero,200287f4 <__udivdi3+0x440>
200285d0:	8028d43a 	srli	r20,r16,16
200285d4:	8c23c83a 	sub	r17,r17,r16
200285d8:	84bfffcc 	andi	r18,r16,65535
200285dc:	00c00044 	movi	r3,1
200285e0:	8809883a 	mov	r4,r17
200285e4:	a00b883a 	mov	r5,r20
200285e8:	d8c00015 	stw	r3,0(sp)
200285ec:	0020c280 	call	20020c28 <__umodsi3>
200285f0:	8809883a 	mov	r4,r17
200285f4:	a00b883a 	mov	r5,r20
200285f8:	102b883a 	mov	r21,r2
200285fc:	0020c200 	call	20020c20 <__udivsi3>
20028600:	a82a943a 	slli	r21,r21,16
20028604:	9808d43a 	srli	r4,r19,16
20028608:	148b383a 	mul	r5,r2,r18
2002860c:	1023883a 	mov	r17,r2
20028610:	a908b03a 	or	r4,r21,r4
20028614:	d8c00017 	ldw	r3,0(sp)
20028618:	2140052e 	bgeu	r4,r5,20028630 <__udivdi3+0x27c>
2002861c:	2409883a 	add	r4,r4,r16
20028620:	10bfffc4 	addi	r2,r2,-1
20028624:	24000136 	bltu	r4,r16,2002862c <__udivdi3+0x278>
20028628:	2140ce36 	bltu	r4,r5,20028964 <__udivdi3+0x5b0>
2002862c:	1023883a 	mov	r17,r2
20028630:	216bc83a 	sub	r21,r4,r5
20028634:	a809883a 	mov	r4,r21
20028638:	a00b883a 	mov	r5,r20
2002863c:	d8c00015 	stw	r3,0(sp)
20028640:	0020c280 	call	20020c28 <__umodsi3>
20028644:	102d883a 	mov	r22,r2
20028648:	a809883a 	mov	r4,r21
2002864c:	a00b883a 	mov	r5,r20
20028650:	0020c200 	call	20020c20 <__udivsi3>
20028654:	b02c943a 	slli	r22,r22,16
20028658:	14a5383a 	mul	r18,r2,r18
2002865c:	9cffffcc 	andi	r19,r19,65535
20028660:	b4e6b03a 	or	r19,r22,r19
20028664:	1009883a 	mov	r4,r2
20028668:	d8c00017 	ldw	r3,0(sp)
2002866c:	9c80052e 	bgeu	r19,r18,20028684 <__udivdi3+0x2d0>
20028670:	9c27883a 	add	r19,r19,r16
20028674:	10bfffc4 	addi	r2,r2,-1
20028678:	9c009236 	bltu	r19,r16,200288c4 <__udivdi3+0x510>
2002867c:	9c80912e 	bgeu	r19,r18,200288c4 <__udivdi3+0x510>
20028680:	213fff84 	addi	r4,r4,-2
20028684:	8804943a 	slli	r2,r17,16
20028688:	2084b03a 	or	r2,r4,r2
2002868c:	003faf06 	br	2002854c <__alt_data_end+0xfffe914c>
20028690:	0007883a 	mov	r3,zero
20028694:	003fac06 	br	20028548 <__alt_data_end+0xfffe9148>
20028698:	00803fc4 	movi	r2,255
2002869c:	11c09636 	bltu	r2,r7,200288f8 <__udivdi3+0x544>
200286a0:	0007883a 	mov	r3,zero
200286a4:	000b883a 	mov	r5,zero
200286a8:	003f9b06 	br	20028518 <__alt_data_end+0xfffe9118>
200286ac:	00804034 	movhi	r2,256
200286b0:	10bfffc4 	addi	r2,r2,-1
200286b4:	11809636 	bltu	r2,r6,20028910 <__udivdi3+0x55c>
200286b8:	00800404 	movi	r2,16
200286bc:	1007883a 	mov	r3,r2
200286c0:	003f5406 	br	20028414 <__alt_data_end+0xfffe9014>
200286c4:	00803fc4 	movi	r2,255
200286c8:	14009736 	bltu	r2,r16,20028928 <__udivdi3+0x574>
200286cc:	0005883a 	mov	r2,zero
200286d0:	0007883a 	mov	r3,zero
200286d4:	003fb506 	br	200285ac <__alt_data_end+0xfffe91ac>
200286d8:	00800044 	movi	r2,1
200286dc:	003f9b06 	br	2002854c <__alt_data_end+0xfffe914c>
200286e0:	3086d83a 	srl	r3,r6,r2
200286e4:	3c0e983a 	sll	r7,r7,r16
200286e8:	88aad83a 	srl	r21,r17,r2
200286ec:	9084d83a 	srl	r2,r18,r2
200286f0:	38e6b03a 	or	r19,r7,r3
200286f4:	9828d43a 	srli	r20,r19,16
200286f8:	8c22983a 	sll	r17,r17,r16
200286fc:	a809883a 	mov	r4,r21
20028700:	a00b883a 	mov	r5,r20
20028704:	342c983a 	sll	r22,r6,r16
20028708:	88a2b03a 	or	r17,r17,r2
2002870c:	0020c280 	call	20020c28 <__umodsi3>
20028710:	a809883a 	mov	r4,r21
20028714:	a00b883a 	mov	r5,r20
20028718:	1039883a 	mov	fp,r2
2002871c:	0020c200 	call	20020c20 <__udivsi3>
20028720:	102b883a 	mov	r21,r2
20028724:	9dffffcc 	andi	r23,r19,65535
20028728:	e008943a 	slli	r4,fp,16
2002872c:	8804d43a 	srli	r2,r17,16
20028730:	adcd383a 	mul	r6,r21,r23
20028734:	2088b03a 	or	r4,r4,r2
20028738:	2180042e 	bgeu	r4,r6,2002874c <__udivdi3+0x398>
2002873c:	24c9883a 	add	r4,r4,r19
20028740:	a8bfffc4 	addi	r2,r21,-1
20028744:	24c07f2e 	bgeu	r4,r19,20028944 <__udivdi3+0x590>
20028748:	102b883a 	mov	r21,r2
2002874c:	21b9c83a 	sub	fp,r4,r6
20028750:	e009883a 	mov	r4,fp
20028754:	a00b883a 	mov	r5,r20
20028758:	0020c280 	call	20020c28 <__umodsi3>
2002875c:	e009883a 	mov	r4,fp
20028760:	a00b883a 	mov	r5,r20
20028764:	d8800015 	stw	r2,0(sp)
20028768:	0020c200 	call	20020c20 <__udivsi3>
2002876c:	d8c00017 	ldw	r3,0(sp)
20028770:	15cb383a 	mul	r5,r2,r23
20028774:	8c7fffcc 	andi	r17,r17,65535
20028778:	1806943a 	slli	r3,r3,16
2002877c:	1009883a 	mov	r4,r2
20028780:	1c46b03a 	or	r3,r3,r17
20028784:	1940042e 	bgeu	r3,r5,20028798 <__udivdi3+0x3e4>
20028788:	1cc7883a 	add	r3,r3,r19
2002878c:	10bfffc4 	addi	r2,r2,-1
20028790:	1cc0682e 	bgeu	r3,r19,20028934 <__udivdi3+0x580>
20028794:	1009883a 	mov	r4,r2
20028798:	a804943a 	slli	r2,r21,16
2002879c:	b1ffffcc 	andi	r7,r22,65535
200287a0:	b02cd43a 	srli	r22,r22,16
200287a4:	2084b03a 	or	r2,r4,r2
200287a8:	113fffcc 	andi	r4,r2,65535
200287ac:	100cd43a 	srli	r6,r2,16
200287b0:	21d1383a 	mul	r8,r4,r7
200287b4:	2589383a 	mul	r4,r4,r22
200287b8:	31cf383a 	mul	r7,r6,r7
200287bc:	4012d43a 	srli	r9,r8,16
200287c0:	1947c83a 	sub	r3,r3,r5
200287c4:	3909883a 	add	r4,r7,r4
200287c8:	2249883a 	add	r4,r4,r9
200287cc:	35ad383a 	mul	r22,r6,r22
200287d0:	21c0022e 	bgeu	r4,r7,200287dc <__udivdi3+0x428>
200287d4:	01400074 	movhi	r5,1
200287d8:	b16d883a 	add	r22,r22,r5
200287dc:	200ad43a 	srli	r5,r4,16
200287e0:	b16d883a 	add	r22,r22,r5
200287e4:	1d803e36 	bltu	r3,r22,200288e0 <__udivdi3+0x52c>
200287e8:	1d803826 	beq	r3,r22,200288cc <__udivdi3+0x518>
200287ec:	0007883a 	mov	r3,zero
200287f0:	003f5606 	br	2002854c <__alt_data_end+0xfffe914c>
200287f4:	80a0983a 	sll	r16,r16,r2
200287f8:	88ead83a 	srl	r21,r17,r3
200287fc:	90c6d83a 	srl	r3,r18,r3
20028800:	8028d43a 	srli	r20,r16,16
20028804:	88a2983a 	sll	r17,r17,r2
20028808:	a809883a 	mov	r4,r21
2002880c:	a00b883a 	mov	r5,r20
20028810:	88ecb03a 	or	r22,r17,r3
20028814:	90a6983a 	sll	r19,r18,r2
20028818:	0020c280 	call	20020c28 <__umodsi3>
2002881c:	a809883a 	mov	r4,r21
20028820:	a00b883a 	mov	r5,r20
20028824:	1023883a 	mov	r17,r2
20028828:	0020c200 	call	20020c20 <__udivsi3>
2002882c:	102b883a 	mov	r21,r2
20028830:	84bfffcc 	andi	r18,r16,65535
20028834:	8808943a 	slli	r4,r17,16
20028838:	b004d43a 	srli	r2,r22,16
2002883c:	ac87383a 	mul	r3,r21,r18
20028840:	2088b03a 	or	r4,r4,r2
20028844:	20c0062e 	bgeu	r4,r3,20028860 <__udivdi3+0x4ac>
20028848:	2409883a 	add	r4,r4,r16
2002884c:	a8bfffc4 	addi	r2,r21,-1
20028850:	24004236 	bltu	r4,r16,2002895c <__udivdi3+0x5a8>
20028854:	20c0412e 	bgeu	r4,r3,2002895c <__udivdi3+0x5a8>
20028858:	ad7fff84 	addi	r21,r21,-2
2002885c:	2409883a 	add	r4,r4,r16
20028860:	20efc83a 	sub	r23,r4,r3
20028864:	b809883a 	mov	r4,r23
20028868:	a00b883a 	mov	r5,r20
2002886c:	0020c280 	call	20020c28 <__umodsi3>
20028870:	1023883a 	mov	r17,r2
20028874:	a00b883a 	mov	r5,r20
20028878:	b809883a 	mov	r4,r23
2002887c:	0020c200 	call	20020c20 <__udivsi3>
20028880:	8822943a 	slli	r17,r17,16
20028884:	148b383a 	mul	r5,r2,r18
20028888:	b5bfffcc 	andi	r22,r22,65535
2002888c:	8da2b03a 	or	r17,r17,r22
20028890:	8940062e 	bgeu	r17,r5,200288ac <__udivdi3+0x4f8>
20028894:	8c23883a 	add	r17,r17,r16
20028898:	10ffffc4 	addi	r3,r2,-1
2002889c:	8c002d36 	bltu	r17,r16,20028954 <__udivdi3+0x5a0>
200288a0:	89402c2e 	bgeu	r17,r5,20028954 <__udivdi3+0x5a0>
200288a4:	10bfff84 	addi	r2,r2,-2
200288a8:	8c23883a 	add	r17,r17,r16
200288ac:	a806943a 	slli	r3,r21,16
200288b0:	8963c83a 	sub	r17,r17,r5
200288b4:	10c6b03a 	or	r3,r2,r3
200288b8:	003f4906 	br	200285e0 <__alt_data_end+0xfffe91e0>
200288bc:	1009883a 	mov	r4,r2
200288c0:	003f0906 	br	200284e8 <__alt_data_end+0xfffe90e8>
200288c4:	1009883a 	mov	r4,r2
200288c8:	003f6e06 	br	20028684 <__alt_data_end+0xfffe9284>
200288cc:	2008943a 	slli	r4,r4,16
200288d0:	9420983a 	sll	r16,r18,r16
200288d4:	423fffcc 	andi	r8,r8,65535
200288d8:	2209883a 	add	r4,r4,r8
200288dc:	813fc32e 	bgeu	r16,r4,200287ec <__alt_data_end+0xfffe93ec>
200288e0:	10bfffc4 	addi	r2,r2,-1
200288e4:	0007883a 	mov	r3,zero
200288e8:	003f1806 	br	2002854c <__alt_data_end+0xfffe914c>
200288ec:	00c00604 	movi	r3,24
200288f0:	180b883a 	mov	r5,r3
200288f4:	003f0806 	br	20028518 <__alt_data_end+0xfffe9118>
200288f8:	00c00204 	movi	r3,8
200288fc:	180b883a 	mov	r5,r3
20028900:	003f0506 	br	20028518 <__alt_data_end+0xfffe9118>
20028904:	00800604 	movi	r2,24
20028908:	1007883a 	mov	r3,r2
2002890c:	003f2706 	br	200285ac <__alt_data_end+0xfffe91ac>
20028910:	00800604 	movi	r2,24
20028914:	1007883a 	mov	r3,r2
20028918:	003ebe06 	br	20028414 <__alt_data_end+0xfffe9014>
2002891c:	00800204 	movi	r2,8
20028920:	1007883a 	mov	r3,r2
20028924:	003ebb06 	br	20028414 <__alt_data_end+0xfffe9014>
20028928:	00800204 	movi	r2,8
2002892c:	1007883a 	mov	r3,r2
20028930:	003f1e06 	br	200285ac <__alt_data_end+0xfffe91ac>
20028934:	197f972e 	bgeu	r3,r5,20028794 <__alt_data_end+0xfffe9394>
20028938:	213fff84 	addi	r4,r4,-2
2002893c:	1cc7883a 	add	r3,r3,r19
20028940:	003f9506 	br	20028798 <__alt_data_end+0xfffe9398>
20028944:	21bf802e 	bgeu	r4,r6,20028748 <__alt_data_end+0xfffe9348>
20028948:	ad7fff84 	addi	r21,r21,-2
2002894c:	24c9883a 	add	r4,r4,r19
20028950:	003f7e06 	br	2002874c <__alt_data_end+0xfffe934c>
20028954:	1805883a 	mov	r2,r3
20028958:	003fd406 	br	200288ac <__alt_data_end+0xfffe94ac>
2002895c:	102b883a 	mov	r21,r2
20028960:	003fbf06 	br	20028860 <__alt_data_end+0xfffe9460>
20028964:	8c7fff84 	addi	r17,r17,-2
20028968:	2409883a 	add	r4,r4,r16
2002896c:	003f3006 	br	20028630 <__alt_data_end+0xfffe9230>
20028970:	94bfff84 	addi	r18,r18,-2
20028974:	1c07883a 	add	r3,r3,r16
20028978:	003ec806 	br	2002849c <__alt_data_end+0xfffe909c>

2002897c <__umoddi3>:
2002897c:	defff504 	addi	sp,sp,-44
20028980:	dd000515 	stw	r20,20(sp)
20028984:	dcc00415 	stw	r19,16(sp)
20028988:	dc800315 	stw	r18,12(sp)
2002898c:	dc400215 	stw	r17,8(sp)
20028990:	dc000115 	stw	r16,4(sp)
20028994:	dfc00a15 	stw	ra,40(sp)
20028998:	df000915 	stw	fp,36(sp)
2002899c:	ddc00815 	stw	r23,32(sp)
200289a0:	dd800715 	stw	r22,28(sp)
200289a4:	dd400615 	stw	r21,24(sp)
200289a8:	2025883a 	mov	r18,r4
200289ac:	2823883a 	mov	r17,r5
200289b0:	3021883a 	mov	r16,r6
200289b4:	2027883a 	mov	r19,r4
200289b8:	2829883a 	mov	r20,r5
200289bc:	3800351e 	bne	r7,zero,20028a94 <__umoddi3+0x118>
200289c0:	29804d2e 	bgeu	r5,r6,20028af8 <__umoddi3+0x17c>
200289c4:	00bfffd4 	movui	r2,65535
200289c8:	11809a36 	bltu	r2,r6,20028c34 <__umoddi3+0x2b8>
200289cc:	00803fc4 	movi	r2,255
200289d0:	11813936 	bltu	r2,r6,20028eb8 <__umoddi3+0x53c>
200289d4:	0005883a 	mov	r2,zero
200289d8:	0009883a 	mov	r4,zero
200289dc:	3084d83a 	srl	r2,r6,r2
200289e0:	00c800f4 	movhi	r3,8195
200289e4:	18f38404 	addi	r3,r3,-12784
200289e8:	05400804 	movi	r21,32
200289ec:	1885883a 	add	r2,r3,r2
200289f0:	10800003 	ldbu	r2,0(r2)
200289f4:	1109883a 	add	r4,r2,r4
200289f8:	a92bc83a 	sub	r21,r21,r4
200289fc:	a800ec26 	beq	r21,zero,20028db0 <__umoddi3+0x434>
20028a00:	8d62983a 	sll	r17,r17,r21
20028a04:	9108d83a 	srl	r4,r18,r4
20028a08:	3560983a 	sll	r16,r6,r21
20028a0c:	9566983a 	sll	r19,r18,r21
20028a10:	8928b03a 	or	r20,r17,r4
20028a14:	8022d43a 	srli	r17,r16,16
20028a18:	a009883a 	mov	r4,r20
20028a1c:	84bfffcc 	andi	r18,r16,65535
20028a20:	880b883a 	mov	r5,r17
20028a24:	0020c280 	call	20020c28 <__umodsi3>
20028a28:	a009883a 	mov	r4,r20
20028a2c:	880b883a 	mov	r5,r17
20028a30:	102d883a 	mov	r22,r2
20028a34:	0020c200 	call	20020c20 <__udivsi3>
20028a38:	b02c943a 	slli	r22,r22,16
20028a3c:	9806d43a 	srli	r3,r19,16
20028a40:	1485383a 	mul	r2,r2,r18
20028a44:	b0c6b03a 	or	r3,r22,r3
20028a48:	1880042e 	bgeu	r3,r2,20028a5c <__umoddi3+0xe0>
20028a4c:	1c07883a 	add	r3,r3,r16
20028a50:	1c000236 	bltu	r3,r16,20028a5c <__umoddi3+0xe0>
20028a54:	1880012e 	bgeu	r3,r2,20028a5c <__umoddi3+0xe0>
20028a58:	1c07883a 	add	r3,r3,r16
20028a5c:	18a9c83a 	sub	r20,r3,r2
20028a60:	a009883a 	mov	r4,r20
20028a64:	880b883a 	mov	r5,r17
20028a68:	0020c280 	call	20020c28 <__umodsi3>
20028a6c:	102d883a 	mov	r22,r2
20028a70:	a009883a 	mov	r4,r20
20028a74:	880b883a 	mov	r5,r17
20028a78:	0020c200 	call	20020c20 <__udivsi3>
20028a7c:	b02c943a 	slli	r22,r22,16
20028a80:	1485383a 	mul	r2,r2,r18
20028a84:	9cffffcc 	andi	r19,r19,65535
20028a88:	b4e6b03a 	or	r19,r22,r19
20028a8c:	9880522e 	bgeu	r19,r2,20028bd8 <__umoddi3+0x25c>
20028a90:	00004d06 	br	20028bc8 <__umoddi3+0x24c>
20028a94:	29c05436 	bltu	r5,r7,20028be8 <__umoddi3+0x26c>
20028a98:	00bfffd4 	movui	r2,65535
20028a9c:	11c0602e 	bgeu	r2,r7,20028c20 <__umoddi3+0x2a4>
20028aa0:	00804034 	movhi	r2,256
20028aa4:	10bfffc4 	addi	r2,r2,-1
20028aa8:	11c0f736 	bltu	r2,r7,20028e88 <__umoddi3+0x50c>
20028aac:	00c00404 	movi	r3,16
20028ab0:	1827883a 	mov	r19,r3
20028ab4:	38c6d83a 	srl	r3,r7,r3
20028ab8:	010800f4 	movhi	r4,8195
20028abc:	21338404 	addi	r4,r4,-12784
20028ac0:	04000804 	movi	r16,32
20028ac4:	20c7883a 	add	r3,r4,r3
20028ac8:	18800003 	ldbu	r2,0(r3)
20028acc:	14e7883a 	add	r19,r2,r19
20028ad0:	84e1c83a 	sub	r16,r16,r19
20028ad4:	8000621e 	bne	r16,zero,20028c60 <__umoddi3+0x2e4>
20028ad8:	3c400136 	bltu	r7,r17,20028ae0 <__umoddi3+0x164>
20028adc:	91810336 	bltu	r18,r6,20028eec <__umoddi3+0x570>
20028ae0:	9185c83a 	sub	r2,r18,r6
20028ae4:	89e3c83a 	sub	r17,r17,r7
20028ae8:	90a5803a 	cmpltu	r18,r18,r2
20028aec:	8ca9c83a 	sub	r20,r17,r18
20028af0:	a007883a 	mov	r3,r20
20028af4:	00003e06 	br	20028bf0 <__umoddi3+0x274>
20028af8:	3000041e 	bne	r6,zero,20028b0c <__umoddi3+0x190>
20028afc:	01000044 	movi	r4,1
20028b00:	000b883a 	mov	r5,zero
20028b04:	0020c200 	call	20020c20 <__udivsi3>
20028b08:	1021883a 	mov	r16,r2
20028b0c:	00bfffd4 	movui	r2,65535
20028b10:	14004e2e 	bgeu	r2,r16,20028c4c <__umoddi3+0x2d0>
20028b14:	00804034 	movhi	r2,256
20028b18:	10bfffc4 	addi	r2,r2,-1
20028b1c:	1400e336 	bltu	r2,r16,20028eac <__umoddi3+0x530>
20028b20:	00800404 	movi	r2,16
20028b24:	1007883a 	mov	r3,r2
20028b28:	8084d83a 	srl	r2,r16,r2
20028b2c:	010800f4 	movhi	r4,8195
20028b30:	21338404 	addi	r4,r4,-12784
20028b34:	05400804 	movi	r21,32
20028b38:	2085883a 	add	r2,r4,r2
20028b3c:	10800003 	ldbu	r2,0(r2)
20028b40:	10c7883a 	add	r3,r2,r3
20028b44:	a8ebc83a 	sub	r21,r21,r3
20028b48:	a8009b1e 	bne	r21,zero,20028db8 <__umoddi3+0x43c>
20028b4c:	8028d43a 	srli	r20,r16,16
20028b50:	8c23c83a 	sub	r17,r17,r16
20028b54:	85bfffcc 	andi	r22,r16,65535
20028b58:	8809883a 	mov	r4,r17
20028b5c:	a00b883a 	mov	r5,r20
20028b60:	0020c280 	call	20020c28 <__umodsi3>
20028b64:	8809883a 	mov	r4,r17
20028b68:	a00b883a 	mov	r5,r20
20028b6c:	1025883a 	mov	r18,r2
20028b70:	0020c200 	call	20020c20 <__udivsi3>
20028b74:	9024943a 	slli	r18,r18,16
20028b78:	9806d43a 	srli	r3,r19,16
20028b7c:	1585383a 	mul	r2,r2,r22
20028b80:	90c6b03a 	or	r3,r18,r3
20028b84:	1880032e 	bgeu	r3,r2,20028b94 <__umoddi3+0x218>
20028b88:	1c07883a 	add	r3,r3,r16
20028b8c:	1c000136 	bltu	r3,r16,20028b94 <__umoddi3+0x218>
20028b90:	1880d436 	bltu	r3,r2,20028ee4 <__umoddi3+0x568>
20028b94:	18a3c83a 	sub	r17,r3,r2
20028b98:	8809883a 	mov	r4,r17
20028b9c:	a00b883a 	mov	r5,r20
20028ba0:	0020c280 	call	20020c28 <__umodsi3>
20028ba4:	1025883a 	mov	r18,r2
20028ba8:	8809883a 	mov	r4,r17
20028bac:	a00b883a 	mov	r5,r20
20028bb0:	0020c200 	call	20020c20 <__udivsi3>
20028bb4:	9024943a 	slli	r18,r18,16
20028bb8:	1585383a 	mul	r2,r2,r22
20028bbc:	9cffffcc 	andi	r19,r19,65535
20028bc0:	94e6b03a 	or	r19,r18,r19
20028bc4:	9880042e 	bgeu	r19,r2,20028bd8 <__umoddi3+0x25c>
20028bc8:	9c27883a 	add	r19,r19,r16
20028bcc:	9c000236 	bltu	r19,r16,20028bd8 <__umoddi3+0x25c>
20028bd0:	9880012e 	bgeu	r19,r2,20028bd8 <__umoddi3+0x25c>
20028bd4:	9c27883a 	add	r19,r19,r16
20028bd8:	98a7c83a 	sub	r19,r19,r2
20028bdc:	9d44d83a 	srl	r2,r19,r21
20028be0:	0007883a 	mov	r3,zero
20028be4:	00000206 	br	20028bf0 <__umoddi3+0x274>
20028be8:	2005883a 	mov	r2,r4
20028bec:	2807883a 	mov	r3,r5
20028bf0:	dfc00a17 	ldw	ra,40(sp)
20028bf4:	df000917 	ldw	fp,36(sp)
20028bf8:	ddc00817 	ldw	r23,32(sp)
20028bfc:	dd800717 	ldw	r22,28(sp)
20028c00:	dd400617 	ldw	r21,24(sp)
20028c04:	dd000517 	ldw	r20,20(sp)
20028c08:	dcc00417 	ldw	r19,16(sp)
20028c0c:	dc800317 	ldw	r18,12(sp)
20028c10:	dc400217 	ldw	r17,8(sp)
20028c14:	dc000117 	ldw	r16,4(sp)
20028c18:	dec00b04 	addi	sp,sp,44
20028c1c:	f800283a 	ret
20028c20:	00803fc4 	movi	r2,255
20028c24:	11c09536 	bltu	r2,r7,20028e7c <__umoddi3+0x500>
20028c28:	0007883a 	mov	r3,zero
20028c2c:	0027883a 	mov	r19,zero
20028c30:	003fa006 	br	20028ab4 <__alt_data_end+0xfffe96b4>
20028c34:	00804034 	movhi	r2,256
20028c38:	10bfffc4 	addi	r2,r2,-1
20028c3c:	11809536 	bltu	r2,r6,20028e94 <__umoddi3+0x518>
20028c40:	00800404 	movi	r2,16
20028c44:	1009883a 	mov	r4,r2
20028c48:	003f6406 	br	200289dc <__alt_data_end+0xfffe95dc>
20028c4c:	00803fc4 	movi	r2,255
20028c50:	14009336 	bltu	r2,r16,20028ea0 <__umoddi3+0x524>
20028c54:	0005883a 	mov	r2,zero
20028c58:	0007883a 	mov	r3,zero
20028c5c:	003fb206 	br	20028b28 <__alt_data_end+0xfffe9728>
20028c60:	34c4d83a 	srl	r2,r6,r19
20028c64:	3c0e983a 	sll	r7,r7,r16
20028c68:	8ceed83a 	srl	r23,r17,r19
20028c6c:	8c22983a 	sll	r17,r17,r16
20028c70:	38a8b03a 	or	r20,r7,r2
20028c74:	a02ad43a 	srli	r21,r20,16
20028c78:	94c4d83a 	srl	r2,r18,r19
20028c7c:	b809883a 	mov	r4,r23
20028c80:	a80b883a 	mov	r5,r21
20028c84:	88a2b03a 	or	r17,r17,r2
20028c88:	342c983a 	sll	r22,r6,r16
20028c8c:	0020c280 	call	20020c28 <__umodsi3>
20028c90:	b809883a 	mov	r4,r23
20028c94:	a80b883a 	mov	r5,r21
20028c98:	d8800015 	stw	r2,0(sp)
20028c9c:	0020c200 	call	20020c20 <__udivsi3>
20028ca0:	d8c00017 	ldw	r3,0(sp)
20028ca4:	102f883a 	mov	r23,r2
20028ca8:	a73fffcc 	andi	fp,r20,65535
20028cac:	180a943a 	slli	r5,r3,16
20028cb0:	8804d43a 	srli	r2,r17,16
20028cb4:	bf09383a 	mul	r4,r23,fp
20028cb8:	9424983a 	sll	r18,r18,r16
20028cbc:	288ab03a 	or	r5,r5,r2
20028cc0:	2900042e 	bgeu	r5,r4,20028cd4 <__umoddi3+0x358>
20028cc4:	2d0b883a 	add	r5,r5,r20
20028cc8:	b8bfffc4 	addi	r2,r23,-1
20028ccc:	2d00812e 	bgeu	r5,r20,20028ed4 <__umoddi3+0x558>
20028cd0:	102f883a 	mov	r23,r2
20028cd4:	2907c83a 	sub	r3,r5,r4
20028cd8:	1809883a 	mov	r4,r3
20028cdc:	a80b883a 	mov	r5,r21
20028ce0:	d8c00015 	stw	r3,0(sp)
20028ce4:	0020c280 	call	20020c28 <__umodsi3>
20028ce8:	d8c00017 	ldw	r3,0(sp)
20028cec:	a80b883a 	mov	r5,r21
20028cf0:	d8800015 	stw	r2,0(sp)
20028cf4:	1809883a 	mov	r4,r3
20028cf8:	0020c200 	call	20020c20 <__udivsi3>
20028cfc:	d9800017 	ldw	r6,0(sp)
20028d00:	8c7fffcc 	andi	r17,r17,65535
20028d04:	3008943a 	slli	r4,r6,16
20028d08:	170d383a 	mul	r6,r2,fp
20028d0c:	2448b03a 	or	r4,r4,r17
20028d10:	2180042e 	bgeu	r4,r6,20028d24 <__umoddi3+0x3a8>
20028d14:	2509883a 	add	r4,r4,r20
20028d18:	10ffffc4 	addi	r3,r2,-1
20028d1c:	2500692e 	bgeu	r4,r20,20028ec4 <__umoddi3+0x548>
20028d20:	1805883a 	mov	r2,r3
20028d24:	b82e943a 	slli	r23,r23,16
20028d28:	b010d43a 	srli	r8,r22,16
20028d2c:	b1ffffcc 	andi	r7,r22,65535
20028d30:	15eeb03a 	or	r23,r2,r23
20028d34:	b8bfffcc 	andi	r2,r23,65535
20028d38:	b82ed43a 	srli	r23,r23,16
20028d3c:	11c7383a 	mul	r3,r2,r7
20028d40:	1205383a 	mul	r2,r2,r8
20028d44:	b9cf383a 	mul	r7,r23,r7
20028d48:	400b883a 	mov	r5,r8
20028d4c:	1810d43a 	srli	r8,r3,16
20028d50:	3885883a 	add	r2,r7,r2
20028d54:	2189c83a 	sub	r4,r4,r6
20028d58:	1205883a 	add	r2,r2,r8
20028d5c:	b94b383a 	mul	r5,r23,r5
20028d60:	11c0022e 	bgeu	r2,r7,20028d6c <__umoddi3+0x3f0>
20028d64:	01800074 	movhi	r6,1
20028d68:	298b883a 	add	r5,r5,r6
20028d6c:	100cd43a 	srli	r6,r2,16
20028d70:	1004943a 	slli	r2,r2,16
20028d74:	18ffffcc 	andi	r3,r3,65535
20028d78:	298b883a 	add	r5,r5,r6
20028d7c:	10c5883a 	add	r2,r2,r3
20028d80:	21403836 	bltu	r4,r5,20028e64 <__umoddi3+0x4e8>
20028d84:	21405c26 	beq	r4,r5,20028ef8 <__umoddi3+0x57c>
20028d88:	2147c83a 	sub	r3,r4,r5
20028d8c:	102d883a 	mov	r22,r2
20028d90:	95adc83a 	sub	r22,r18,r22
20028d94:	95a5803a 	cmpltu	r18,r18,r22
20028d98:	1c87c83a 	sub	r3,r3,r18
20028d9c:	1cc4983a 	sll	r2,r3,r19
20028da0:	b42cd83a 	srl	r22,r22,r16
20028da4:	1c06d83a 	srl	r3,r3,r16
20028da8:	1584b03a 	or	r2,r2,r22
20028dac:	003f9006 	br	20028bf0 <__alt_data_end+0xfffe97f0>
20028db0:	002b883a 	mov	r21,zero
20028db4:	003f1706 	br	20028a14 <__alt_data_end+0xfffe9614>
20028db8:	8560983a 	sll	r16,r16,r21
20028dbc:	88e6d83a 	srl	r19,r17,r3
20028dc0:	90c6d83a 	srl	r3,r18,r3
20028dc4:	8028d43a 	srli	r20,r16,16
20028dc8:	8d62983a 	sll	r17,r17,r21
20028dcc:	9809883a 	mov	r4,r19
20028dd0:	a00b883a 	mov	r5,r20
20028dd4:	88eeb03a 	or	r23,r17,r3
20028dd8:	0020c280 	call	20020c28 <__umodsi3>
20028ddc:	9809883a 	mov	r4,r19
20028de0:	a00b883a 	mov	r5,r20
20028de4:	1023883a 	mov	r17,r2
20028de8:	0020c200 	call	20020c20 <__udivsi3>
20028dec:	85bfffcc 	andi	r22,r16,65535
20028df0:	880a943a 	slli	r5,r17,16
20028df4:	b806d43a 	srli	r3,r23,16
20028df8:	1585383a 	mul	r2,r2,r22
20028dfc:	9566983a 	sll	r19,r18,r21
20028e00:	28cab03a 	or	r5,r5,r3
20028e04:	2880042e 	bgeu	r5,r2,20028e18 <__umoddi3+0x49c>
20028e08:	2c0b883a 	add	r5,r5,r16
20028e0c:	2c000236 	bltu	r5,r16,20028e18 <__umoddi3+0x49c>
20028e10:	2880012e 	bgeu	r5,r2,20028e18 <__umoddi3+0x49c>
20028e14:	2c0b883a 	add	r5,r5,r16
20028e18:	28a5c83a 	sub	r18,r5,r2
20028e1c:	9009883a 	mov	r4,r18
20028e20:	a00b883a 	mov	r5,r20
20028e24:	0020c280 	call	20020c28 <__umodsi3>
20028e28:	1023883a 	mov	r17,r2
20028e2c:	9009883a 	mov	r4,r18
20028e30:	a00b883a 	mov	r5,r20
20028e34:	0020c200 	call	20020c20 <__udivsi3>
20028e38:	8822943a 	slli	r17,r17,16
20028e3c:	1585383a 	mul	r2,r2,r22
20028e40:	bdffffcc 	andi	r23,r23,65535
20028e44:	8de2b03a 	or	r17,r17,r23
20028e48:	8880042e 	bgeu	r17,r2,20028e5c <__umoddi3+0x4e0>
20028e4c:	8c23883a 	add	r17,r17,r16
20028e50:	8c000236 	bltu	r17,r16,20028e5c <__umoddi3+0x4e0>
20028e54:	8880012e 	bgeu	r17,r2,20028e5c <__umoddi3+0x4e0>
20028e58:	8c23883a 	add	r17,r17,r16
20028e5c:	88a3c83a 	sub	r17,r17,r2
20028e60:	003f3d06 	br	20028b58 <__alt_data_end+0xfffe9758>
20028e64:	15adc83a 	sub	r22,r2,r22
20028e68:	2d07c83a 	sub	r3,r5,r20
20028e6c:	1585803a 	cmpltu	r2,r2,r22
20028e70:	1887c83a 	sub	r3,r3,r2
20028e74:	20c7c83a 	sub	r3,r4,r3
20028e78:	003fc506 	br	20028d90 <__alt_data_end+0xfffe9990>
20028e7c:	00c00204 	movi	r3,8
20028e80:	1827883a 	mov	r19,r3
20028e84:	003f0b06 	br	20028ab4 <__alt_data_end+0xfffe96b4>
20028e88:	00c00604 	movi	r3,24
20028e8c:	1827883a 	mov	r19,r3
20028e90:	003f0806 	br	20028ab4 <__alt_data_end+0xfffe96b4>
20028e94:	00800604 	movi	r2,24
20028e98:	1009883a 	mov	r4,r2
20028e9c:	003ecf06 	br	200289dc <__alt_data_end+0xfffe95dc>
20028ea0:	00800204 	movi	r2,8
20028ea4:	1007883a 	mov	r3,r2
20028ea8:	003f1f06 	br	20028b28 <__alt_data_end+0xfffe9728>
20028eac:	00800604 	movi	r2,24
20028eb0:	1007883a 	mov	r3,r2
20028eb4:	003f1c06 	br	20028b28 <__alt_data_end+0xfffe9728>
20028eb8:	00800204 	movi	r2,8
20028ebc:	1009883a 	mov	r4,r2
20028ec0:	003ec606 	br	200289dc <__alt_data_end+0xfffe95dc>
20028ec4:	21bf962e 	bgeu	r4,r6,20028d20 <__alt_data_end+0xfffe9920>
20028ec8:	10bfff84 	addi	r2,r2,-2
20028ecc:	2509883a 	add	r4,r4,r20
20028ed0:	003f9406 	br	20028d24 <__alt_data_end+0xfffe9924>
20028ed4:	293f7e2e 	bgeu	r5,r4,20028cd0 <__alt_data_end+0xfffe98d0>
20028ed8:	bdffff84 	addi	r23,r23,-2
20028edc:	2d0b883a 	add	r5,r5,r20
20028ee0:	003f7c06 	br	20028cd4 <__alt_data_end+0xfffe98d4>
20028ee4:	1c07883a 	add	r3,r3,r16
20028ee8:	003f2a06 	br	20028b94 <__alt_data_end+0xfffe9794>
20028eec:	9005883a 	mov	r2,r18
20028ef0:	a007883a 	mov	r3,r20
20028ef4:	003f3e06 	br	20028bf0 <__alt_data_end+0xfffe97f0>
20028ef8:	90bfda36 	bltu	r18,r2,20028e64 <__alt_data_end+0xfffe9a64>
20028efc:	102d883a 	mov	r22,r2
20028f00:	0007883a 	mov	r3,zero
20028f04:	003fa206 	br	20028d90 <__alt_data_end+0xfffe9990>

20028f08 <_fpadd_parts>:
20028f08:	2005883a 	mov	r2,r4
20028f0c:	21000017 	ldw	r4,0(r4)
20028f10:	01c00044 	movi	r7,1
20028f14:	3900622e 	bgeu	r7,r4,200290a0 <_fpadd_parts+0x198>
20028f18:	28c00017 	ldw	r3,0(r5)
20028f1c:	38c05f2e 	bgeu	r7,r3,2002909c <_fpadd_parts+0x194>
20028f20:	01c00104 	movi	r7,4
20028f24:	21c0c626 	beq	r4,r7,20029240 <_fpadd_parts+0x338>
20028f28:	19c05c26 	beq	r3,r7,2002909c <_fpadd_parts+0x194>
20028f2c:	01c00084 	movi	r7,2
20028f30:	19c06b26 	beq	r3,r7,200290e0 <_fpadd_parts+0x1d8>
20028f34:	21c05926 	beq	r4,r7,2002909c <_fpadd_parts+0x194>
20028f38:	11c00217 	ldw	r7,8(r2)
20028f3c:	2ac00217 	ldw	r11,8(r5)
20028f40:	13000317 	ldw	r12,12(r2)
20028f44:	13400417 	ldw	r13,16(r2)
20028f48:	3ac9c83a 	sub	r4,r7,r11
20028f4c:	2a000317 	ldw	r8,12(r5)
20028f50:	2a400417 	ldw	r9,16(r5)
20028f54:	2015883a 	mov	r10,r4
20028f58:	20007516 	blt	r4,zero,20029130 <_fpadd_parts+0x228>
20028f5c:	00c00fc4 	movi	r3,63
20028f60:	1a805016 	blt	r3,r10,200290a4 <_fpadd_parts+0x19c>
20028f64:	0100870e 	bge	zero,r4,20029184 <_fpadd_parts+0x27c>
20028f68:	50fff804 	addi	r3,r10,-32
20028f6c:	18009916 	blt	r3,zero,200291d4 <_fpadd_parts+0x2cc>
20028f70:	48d6d83a 	srl	r11,r9,r3
20028f74:	001d883a 	mov	r14,zero
20028f78:	18009e16 	blt	r3,zero,200291f4 <_fpadd_parts+0x2ec>
20028f7c:	01000044 	movi	r4,1
20028f80:	20c6983a 	sll	r3,r4,r3
20028f84:	0015883a 	mov	r10,zero
20028f88:	513fffc4 	addi	r4,r10,-1
20028f8c:	2295403a 	cmpgeu	r10,r4,r10
20028f90:	1a87c83a 	sub	r3,r3,r10
20028f94:	1a52703a 	and	r9,r3,r9
20028f98:	2210703a 	and	r8,r4,r8
20028f9c:	4250b03a 	or	r8,r8,r9
20028fa0:	4010c03a 	cmpne	r8,r8,zero
20028fa4:	42d0b03a 	or	r8,r8,r11
20028fa8:	7013883a 	mov	r9,r14
20028fac:	11000117 	ldw	r4,4(r2)
20028fb0:	28800117 	ldw	r2,4(r5)
20028fb4:	20804126 	beq	r4,r2,200290bc <_fpadd_parts+0x1b4>
20028fb8:	20006326 	beq	r4,zero,20029148 <_fpadd_parts+0x240>
20028fbc:	4305c83a 	sub	r2,r8,r12
20028fc0:	4091803a 	cmpltu	r8,r8,r2
20028fc4:	4b47c83a 	sub	r3,r9,r13
20028fc8:	1a07c83a 	sub	r3,r3,r8
20028fcc:	18006316 	blt	r3,zero,2002915c <_fpadd_parts+0x254>
20028fd0:	30000115 	stw	zero,4(r6)
20028fd4:	31c00215 	stw	r7,8(r6)
20028fd8:	30800315 	stw	r2,12(r6)
20028fdc:	30c00415 	stw	r3,16(r6)
20028fe0:	11ffffc4 	addi	r7,r2,-1
20028fe4:	388b403a 	cmpgeu	r5,r7,r2
20028fe8:	194bc83a 	sub	r5,r3,r5
20028fec:	01040034 	movhi	r4,4096
20028ff0:	213fffc4 	addi	r4,r4,-1
20028ff4:	21401736 	bltu	r4,r5,20029054 <_fpadd_parts+0x14c>
20028ff8:	29008226 	beq	r5,r4,20029204 <_fpadd_parts+0x2fc>
20028ffc:	31400217 	ldw	r5,8(r6)
20029000:	02840034 	movhi	r10,4096
20029004:	52bfffc4 	addi	r10,r10,-1
20029008:	033fff84 	movi	r12,-2
2002900c:	297fffc4 	addi	r5,r5,-1
20029010:	00000106 	br	20029018 <_fpadd_parts+0x110>
20029014:	3a804a26 	beq	r7,r10,20029140 <_fpadd_parts+0x238>
20029018:	1089883a 	add	r4,r2,r2
2002901c:	2091803a 	cmpltu	r8,r4,r2
20029020:	18c7883a 	add	r3,r3,r3
20029024:	227fffc4 	addi	r9,r4,-1
20029028:	40d1883a 	add	r8,r8,r3
2002902c:	490f403a 	cmpgeu	r7,r9,r4
20029030:	41cfc83a 	sub	r7,r8,r7
20029034:	2817883a 	mov	r11,r5
20029038:	2005883a 	mov	r2,r4
2002903c:	4007883a 	mov	r3,r8
20029040:	297fffc4 	addi	r5,r5,-1
20029044:	51fff32e 	bgeu	r10,r7,20029014 <__alt_data_end+0xfffe9c14>
20029048:	31000315 	stw	r4,12(r6)
2002904c:	32000415 	stw	r8,16(r6)
20029050:	32c00215 	stw	r11,8(r6)
20029054:	010000c4 	movi	r4,3
20029058:	31000015 	stw	r4,0(r6)
2002905c:	01080034 	movhi	r4,8192
20029060:	213fffc4 	addi	r4,r4,-1
20029064:	20c00b2e 	bgeu	r4,r3,20029094 <_fpadd_parts+0x18c>
20029068:	180e97fa 	slli	r7,r3,31
2002906c:	1008d07a 	srli	r4,r2,1
20029070:	31400217 	ldw	r5,8(r6)
20029074:	1806d07a 	srli	r3,r3,1
20029078:	1080004c 	andi	r2,r2,1
2002907c:	3908b03a 	or	r4,r7,r4
20029080:	1108b03a 	or	r4,r2,r4
20029084:	29400044 	addi	r5,r5,1
20029088:	31000315 	stw	r4,12(r6)
2002908c:	30c00415 	stw	r3,16(r6)
20029090:	31400215 	stw	r5,8(r6)
20029094:	3005883a 	mov	r2,r6
20029098:	f800283a 	ret
2002909c:	2805883a 	mov	r2,r5
200290a0:	f800283a 	ret
200290a4:	59c01e0e 	bge	r11,r7,20029120 <_fpadd_parts+0x218>
200290a8:	11000117 	ldw	r4,4(r2)
200290ac:	28800117 	ldw	r2,4(r5)
200290b0:	0011883a 	mov	r8,zero
200290b4:	0013883a 	mov	r9,zero
200290b8:	20bfbf1e 	bne	r4,r2,20028fb8 <__alt_data_end+0xfffe9bb8>
200290bc:	4305883a 	add	r2,r8,r12
200290c0:	1207803a 	cmpltu	r3,r2,r8
200290c4:	4b53883a 	add	r9,r9,r13
200290c8:	1a47883a 	add	r3,r3,r9
200290cc:	31000115 	stw	r4,4(r6)
200290d0:	31c00215 	stw	r7,8(r6)
200290d4:	30800315 	stw	r2,12(r6)
200290d8:	30c00415 	stw	r3,16(r6)
200290dc:	003fdd06 	br	20029054 <__alt_data_end+0xfffe9c54>
200290e0:	20ffef1e 	bne	r4,r3,200290a0 <__alt_data_end+0xfffe9ca0>
200290e4:	31000015 	stw	r4,0(r6)
200290e8:	10c00117 	ldw	r3,4(r2)
200290ec:	30c00115 	stw	r3,4(r6)
200290f0:	10c00217 	ldw	r3,8(r2)
200290f4:	11000117 	ldw	r4,4(r2)
200290f8:	29400117 	ldw	r5,4(r5)
200290fc:	30c00215 	stw	r3,8(r6)
20029100:	10c00317 	ldw	r3,12(r2)
20029104:	2908703a 	and	r4,r5,r4
20029108:	30c00315 	stw	r3,12(r6)
2002910c:	10c00417 	ldw	r3,16(r2)
20029110:	31000115 	stw	r4,4(r6)
20029114:	3005883a 	mov	r2,r6
20029118:	30c00415 	stw	r3,16(r6)
2002911c:	f800283a 	ret
20029120:	580f883a 	mov	r7,r11
20029124:	0019883a 	mov	r12,zero
20029128:	001b883a 	mov	r13,zero
2002912c:	003f9f06 	br	20028fac <__alt_data_end+0xfffe9bac>
20029130:	0115c83a 	sub	r10,zero,r4
20029134:	00c00fc4 	movi	r3,63
20029138:	1abfda16 	blt	r3,r10,200290a4 <__alt_data_end+0xfffe9ca4>
2002913c:	003f8906 	br	20028f64 <__alt_data_end+0xfffe9b64>
20029140:	627fb52e 	bgeu	r12,r9,20029018 <__alt_data_end+0xfffe9c18>
20029144:	003fc006 	br	20029048 <__alt_data_end+0xfffe9c48>
20029148:	6205c83a 	sub	r2,r12,r8
2002914c:	6099803a 	cmpltu	r12,r12,r2
20029150:	6a47c83a 	sub	r3,r13,r9
20029154:	1b07c83a 	sub	r3,r3,r12
20029158:	183f9d0e 	bge	r3,zero,20028fd0 <__alt_data_end+0xfffe9bd0>
2002915c:	0085c83a 	sub	r2,zero,r2
20029160:	1008c03a 	cmpne	r4,r2,zero
20029164:	00c7c83a 	sub	r3,zero,r3
20029168:	1907c83a 	sub	r3,r3,r4
2002916c:	01000044 	movi	r4,1
20029170:	31000115 	stw	r4,4(r6)
20029174:	31c00215 	stw	r7,8(r6)
20029178:	30800315 	stw	r2,12(r6)
2002917c:	30c00415 	stw	r3,16(r6)
20029180:	003f9706 	br	20028fe0 <__alt_data_end+0xfffe9be0>
20029184:	203f8926 	beq	r4,zero,20028fac <__alt_data_end+0xfffe9bac>
20029188:	50fff804 	addi	r3,r10,-32
2002918c:	3a8f883a 	add	r7,r7,r10
20029190:	18002316 	blt	r3,zero,20029220 <_fpadd_parts+0x318>
20029194:	68d6d83a 	srl	r11,r13,r3
20029198:	001d883a 	mov	r14,zero
2002919c:	18001c16 	blt	r3,zero,20029210 <_fpadd_parts+0x308>
200291a0:	01000044 	movi	r4,1
200291a4:	20c6983a 	sll	r3,r4,r3
200291a8:	0015883a 	mov	r10,zero
200291ac:	513fffc4 	addi	r4,r10,-1
200291b0:	2295403a 	cmpgeu	r10,r4,r10
200291b4:	1a87c83a 	sub	r3,r3,r10
200291b8:	1b5a703a 	and	r13,r3,r13
200291bc:	2318703a 	and	r12,r4,r12
200291c0:	6358b03a 	or	r12,r12,r13
200291c4:	6018c03a 	cmpne	r12,r12,zero
200291c8:	62d8b03a 	or	r12,r12,r11
200291cc:	701b883a 	mov	r13,r14
200291d0:	003f7606 	br	20028fac <__alt_data_end+0xfffe9bac>
200291d4:	4808907a 	slli	r4,r9,1
200291d8:	02c007c4 	movi	r11,31
200291dc:	5a97c83a 	sub	r11,r11,r10
200291e0:	22c8983a 	sll	r4,r4,r11
200291e4:	4296d83a 	srl	r11,r8,r10
200291e8:	4a9cd83a 	srl	r14,r9,r10
200291ec:	22d6b03a 	or	r11,r4,r11
200291f0:	003f6106 	br	20028f78 <__alt_data_end+0xfffe9b78>
200291f4:	00c00044 	movi	r3,1
200291f8:	1a94983a 	sll	r10,r3,r10
200291fc:	0007883a 	mov	r3,zero
20029200:	003f6106 	br	20028f88 <__alt_data_end+0xfffe9b88>
20029204:	013fff84 	movi	r4,-2
20029208:	21ff7c2e 	bgeu	r4,r7,20028ffc <__alt_data_end+0xfffe9bfc>
2002920c:	003f9106 	br	20029054 <__alt_data_end+0xfffe9c54>
20029210:	00c00044 	movi	r3,1
20029214:	1a94983a 	sll	r10,r3,r10
20029218:	0007883a 	mov	r3,zero
2002921c:	003fe306 	br	200291ac <__alt_data_end+0xfffe9dac>
20029220:	6816907a 	slli	r11,r13,1
20029224:	010007c4 	movi	r4,31
20029228:	2289c83a 	sub	r4,r4,r10
2002922c:	5908983a 	sll	r4,r11,r4
20029230:	6296d83a 	srl	r11,r12,r10
20029234:	6a9cd83a 	srl	r14,r13,r10
20029238:	22d6b03a 	or	r11,r4,r11
2002923c:	003fd706 	br	2002919c <__alt_data_end+0xfffe9d9c>
20029240:	193f971e 	bne	r3,r4,200290a0 <__alt_data_end+0xfffe9ca0>
20029244:	11000117 	ldw	r4,4(r2)
20029248:	28c00117 	ldw	r3,4(r5)
2002924c:	20ff9426 	beq	r4,r3,200290a0 <__alt_data_end+0xfffe9ca0>
20029250:	008800f4 	movhi	r2,8195
20029254:	10b37f04 	addi	r2,r2,-12804
20029258:	f800283a 	ret

2002925c <__adddf3>:
2002925c:	deffec04 	addi	sp,sp,-80
20029260:	d9001115 	stw	r4,68(sp)
20029264:	d9401215 	stw	r5,72(sp)
20029268:	d9001104 	addi	r4,sp,68
2002926c:	d9400a04 	addi	r5,sp,40
20029270:	dfc01315 	stw	ra,76(sp)
20029274:	d9c01015 	stw	r7,64(sp)
20029278:	d9800f15 	stw	r6,60(sp)
2002927c:	0029f080 	call	20029f08 <__unpack_d>
20029280:	d9000f04 	addi	r4,sp,60
20029284:	d9400504 	addi	r5,sp,20
20029288:	0029f080 	call	20029f08 <__unpack_d>
2002928c:	d9000a04 	addi	r4,sp,40
20029290:	d9400504 	addi	r5,sp,20
20029294:	d80d883a 	mov	r6,sp
20029298:	0028f080 	call	20028f08 <_fpadd_parts>
2002929c:	1009883a 	mov	r4,r2
200292a0:	0029ce40 	call	20029ce4 <__pack_d>
200292a4:	dfc01317 	ldw	ra,76(sp)
200292a8:	dec01404 	addi	sp,sp,80
200292ac:	f800283a 	ret

200292b0 <__subdf3>:
200292b0:	deffec04 	addi	sp,sp,-80
200292b4:	d9001115 	stw	r4,68(sp)
200292b8:	d9401215 	stw	r5,72(sp)
200292bc:	d9001104 	addi	r4,sp,68
200292c0:	d9400a04 	addi	r5,sp,40
200292c4:	dfc01315 	stw	ra,76(sp)
200292c8:	d9c01015 	stw	r7,64(sp)
200292cc:	d9800f15 	stw	r6,60(sp)
200292d0:	0029f080 	call	20029f08 <__unpack_d>
200292d4:	d9000f04 	addi	r4,sp,60
200292d8:	d9400504 	addi	r5,sp,20
200292dc:	0029f080 	call	20029f08 <__unpack_d>
200292e0:	d8800617 	ldw	r2,24(sp)
200292e4:	d9000a04 	addi	r4,sp,40
200292e8:	d9400504 	addi	r5,sp,20
200292ec:	d80d883a 	mov	r6,sp
200292f0:	1080005c 	xori	r2,r2,1
200292f4:	d8800615 	stw	r2,24(sp)
200292f8:	0028f080 	call	20028f08 <_fpadd_parts>
200292fc:	1009883a 	mov	r4,r2
20029300:	0029ce40 	call	20029ce4 <__pack_d>
20029304:	dfc01317 	ldw	ra,76(sp)
20029308:	dec01404 	addi	sp,sp,80
2002930c:	f800283a 	ret

20029310 <__muldf3>:
20029310:	deffe404 	addi	sp,sp,-112
20029314:	d9001115 	stw	r4,68(sp)
20029318:	d9401215 	stw	r5,72(sp)
2002931c:	d9001104 	addi	r4,sp,68
20029320:	d9400a04 	addi	r5,sp,40
20029324:	dfc01b15 	stw	ra,108(sp)
20029328:	d9800f15 	stw	r6,60(sp)
2002932c:	d9c01015 	stw	r7,64(sp)
20029330:	ddc01a15 	stw	r23,104(sp)
20029334:	dd801915 	stw	r22,100(sp)
20029338:	dd401815 	stw	r21,96(sp)
2002933c:	dd001715 	stw	r20,92(sp)
20029340:	dcc01615 	stw	r19,88(sp)
20029344:	dc801515 	stw	r18,84(sp)
20029348:	dc401415 	stw	r17,80(sp)
2002934c:	dc001315 	stw	r16,76(sp)
20029350:	0029f080 	call	20029f08 <__unpack_d>
20029354:	d9000f04 	addi	r4,sp,60
20029358:	d9400504 	addi	r5,sp,20
2002935c:	0029f080 	call	20029f08 <__unpack_d>
20029360:	d8c00a17 	ldw	r3,40(sp)
20029364:	00800044 	movi	r2,1
20029368:	10c01136 	bltu	r2,r3,200293b0 <__muldf3+0xa0>
2002936c:	d8c00b17 	ldw	r3,44(sp)
20029370:	d8800617 	ldw	r2,24(sp)
20029374:	d9000a04 	addi	r4,sp,40
20029378:	1884c03a 	cmpne	r2,r3,r2
2002937c:	d8800b15 	stw	r2,44(sp)
20029380:	0029ce40 	call	20029ce4 <__pack_d>
20029384:	dfc01b17 	ldw	ra,108(sp)
20029388:	ddc01a17 	ldw	r23,104(sp)
2002938c:	dd801917 	ldw	r22,100(sp)
20029390:	dd401817 	ldw	r21,96(sp)
20029394:	dd001717 	ldw	r20,92(sp)
20029398:	dcc01617 	ldw	r19,88(sp)
2002939c:	dc801517 	ldw	r18,84(sp)
200293a0:	dc401417 	ldw	r17,80(sp)
200293a4:	dc001317 	ldw	r16,76(sp)
200293a8:	dec01c04 	addi	sp,sp,112
200293ac:	f800283a 	ret
200293b0:	d9000517 	ldw	r4,20(sp)
200293b4:	11000636 	bltu	r2,r4,200293d0 <__muldf3+0xc0>
200293b8:	d8800617 	ldw	r2,24(sp)
200293bc:	d8c00b17 	ldw	r3,44(sp)
200293c0:	d9000504 	addi	r4,sp,20
200293c4:	1884c03a 	cmpne	r2,r3,r2
200293c8:	d8800615 	stw	r2,24(sp)
200293cc:	003fec06 	br	20029380 <__alt_data_end+0xfffe9f80>
200293d0:	00800104 	movi	r2,4
200293d4:	1880051e 	bne	r3,r2,200293ec <__muldf3+0xdc>
200293d8:	00800084 	movi	r2,2
200293dc:	20bfe31e 	bne	r4,r2,2002936c <__alt_data_end+0xfffe9f6c>
200293e0:	010800f4 	movhi	r4,8195
200293e4:	21337f04 	addi	r4,r4,-12804
200293e8:	003fe506 	br	20029380 <__alt_data_end+0xfffe9f80>
200293ec:	2080031e 	bne	r4,r2,200293fc <__muldf3+0xec>
200293f0:	00800084 	movi	r2,2
200293f4:	18bffa26 	beq	r3,r2,200293e0 <__alt_data_end+0xfffe9fe0>
200293f8:	003fef06 	br	200293b8 <__alt_data_end+0xfffe9fb8>
200293fc:	00800084 	movi	r2,2
20029400:	18bfda26 	beq	r3,r2,2002936c <__alt_data_end+0xfffe9f6c>
20029404:	20bfec26 	beq	r4,r2,200293b8 <__alt_data_end+0xfffe9fb8>
20029408:	dc000d17 	ldw	r16,52(sp)
2002940c:	dd000817 	ldw	r20,32(sp)
20029410:	dc800917 	ldw	r18,36(sp)
20029414:	8009883a 	mov	r4,r16
20029418:	000b883a 	mov	r5,zero
2002941c:	a00d883a 	mov	r6,r20
20029420:	000f883a 	mov	r7,zero
20029424:	00283540 	call	20028354 <__muldi3>
20029428:	dc400e17 	ldw	r17,56(sp)
2002942c:	9009883a 	mov	r4,r18
20029430:	800d883a 	mov	r6,r16
20029434:	000b883a 	mov	r5,zero
20029438:	000f883a 	mov	r7,zero
2002943c:	102f883a 	mov	r23,r2
20029440:	1827883a 	mov	r19,r3
20029444:	00283540 	call	20028354 <__muldi3>
20029448:	900d883a 	mov	r6,r18
2002944c:	8809883a 	mov	r4,r17
20029450:	000b883a 	mov	r5,zero
20029454:	000f883a 	mov	r7,zero
20029458:	102b883a 	mov	r21,r2
2002945c:	1821883a 	mov	r16,r3
20029460:	00283540 	call	20028354 <__muldi3>
20029464:	8809883a 	mov	r4,r17
20029468:	000b883a 	mov	r5,zero
2002946c:	a00d883a 	mov	r6,r20
20029470:	000f883a 	mov	r7,zero
20029474:	102d883a 	mov	r22,r2
20029478:	1825883a 	mov	r18,r3
2002947c:	00283540 	call	20028354 <__muldi3>
20029480:	154b883a 	add	r5,r2,r21
20029484:	2889803a 	cmpltu	r4,r5,r2
20029488:	1c07883a 	add	r3,r3,r16
2002948c:	20c9883a 	add	r4,r4,r3
20029490:	24004b36 	bltu	r4,r16,200295c0 <__muldf3+0x2b0>
20029494:	8100011e 	bne	r16,r4,2002949c <__muldf3+0x18c>
20029498:	2d404936 	bltu	r5,r21,200295c0 <__muldf3+0x2b0>
2002949c:	0011883a 	mov	r8,zero
200294a0:	0007883a 	mov	r3,zero
200294a4:	2ccb883a 	add	r5,r5,r19
200294a8:	b80d883a 	mov	r6,r23
200294ac:	2cc0012e 	bgeu	r5,r19,200294b4 <__muldf3+0x1a4>
200294b0:	02000044 	movi	r8,1
200294b4:	258f883a 	add	r7,r4,r22
200294b8:	3909803a 	cmpltu	r4,r7,r4
200294bc:	da400c17 	ldw	r9,48(sp)
200294c0:	2489883a 	add	r4,r4,r18
200294c4:	d8800717 	ldw	r2,28(sp)
200294c8:	20c9883a 	add	r4,r4,r3
200294cc:	da800b17 	ldw	r10,44(sp)
200294d0:	d8c00617 	ldw	r3,24(sp)
200294d4:	3a11883a 	add	r8,r7,r8
200294d8:	4885883a 	add	r2,r9,r2
200294dc:	50c6c03a 	cmpne	r3,r10,r3
200294e0:	41cf803a 	cmpltu	r7,r8,r7
200294e4:	12400104 	addi	r9,r2,4
200294e8:	d8c00115 	stw	r3,4(sp)
200294ec:	3909883a 	add	r4,r7,r4
200294f0:	da400215 	stw	r9,8(sp)
200294f4:	03480034 	movhi	r13,8192
200294f8:	6b7fffc4 	addi	r13,r13,-1
200294fc:	4007883a 	mov	r3,r8
20029500:	6900102e 	bgeu	r13,r4,20029544 <__muldf3+0x234>
20029504:	10800144 	addi	r2,r2,5
20029508:	180ed07a 	srli	r7,r3,1
2002950c:	18c0004c 	andi	r3,r3,1
20029510:	201097fa 	slli	r8,r4,31
20029514:	281697fa 	slli	r11,r5,31
20029518:	2008d07a 	srli	r4,r4,1
2002951c:	3014d07a 	srli	r10,r6,1
20029520:	2812d07a 	srli	r9,r5,1
20029524:	1019883a 	mov	r12,r2
20029528:	18000226 	beq	r3,zero,20029534 <__muldf3+0x224>
2002952c:	5a8cb03a 	or	r6,r11,r10
20029530:	49600034 	orhi	r5,r9,32768
20029534:	41c6b03a 	or	r3,r8,r7
20029538:	10800044 	addi	r2,r2,1
2002953c:	693ff236 	bltu	r13,r4,20029508 <__alt_data_end+0xfffea108>
20029540:	db000215 	stw	r12,8(sp)
20029544:	03440034 	movhi	r13,4096
20029548:	6b7fffc4 	addi	r13,r13,-1
2002954c:	69001336 	bltu	r13,r4,2002959c <__muldf3+0x28c>
20029550:	d8800217 	ldw	r2,8(sp)
20029554:	10bfffc4 	addi	r2,r2,-1
20029558:	18d3883a 	add	r9,r3,r3
2002955c:	48c7803a 	cmpltu	r3,r9,r3
20029560:	2109883a 	add	r4,r4,r4
20029564:	190f883a 	add	r7,r3,r4
20029568:	3191883a 	add	r8,r6,r6
2002956c:	4197803a 	cmpltu	r11,r8,r6
20029570:	2955883a 	add	r10,r5,r5
20029574:	1019883a 	mov	r12,r2
20029578:	4807883a 	mov	r3,r9
2002957c:	3809883a 	mov	r4,r7
20029580:	2800010e 	bge	r5,zero,20029588 <__muldf3+0x278>
20029584:	48c00054 	ori	r3,r9,1
20029588:	400d883a 	mov	r6,r8
2002958c:	5a8b883a 	add	r5,r11,r10
20029590:	10bfffc4 	addi	r2,r2,-1
20029594:	69fff02e 	bgeu	r13,r7,20029558 <__alt_data_end+0xfffea158>
20029598:	db000215 	stw	r12,8(sp)
2002959c:	18803fcc 	andi	r2,r3,255
200295a0:	01c02004 	movi	r7,128
200295a4:	11c00926 	beq	r2,r7,200295cc <__muldf3+0x2bc>
200295a8:	008000c4 	movi	r2,3
200295ac:	d9000415 	stw	r4,16(sp)
200295b0:	d8c00315 	stw	r3,12(sp)
200295b4:	d8800015 	stw	r2,0(sp)
200295b8:	d809883a 	mov	r4,sp
200295bc:	003f7006 	br	20029380 <__alt_data_end+0xfffe9f80>
200295c0:	0011883a 	mov	r8,zero
200295c4:	00c00044 	movi	r3,1
200295c8:	003fb606 	br	200294a4 <__alt_data_end+0xfffea0a4>
200295cc:	19c0400c 	andi	r7,r3,256
200295d0:	383ff51e 	bne	r7,zero,200295a8 <__alt_data_end+0xfffea1a8>
200295d4:	314ab03a 	or	r5,r6,r5
200295d8:	283ff326 	beq	r5,zero,200295a8 <__alt_data_end+0xfffea1a8>
200295dc:	1885883a 	add	r2,r3,r2
200295e0:	10cb803a 	cmpltu	r5,r2,r3
200295e4:	00ffc004 	movi	r3,-256
200295e8:	10c6703a 	and	r3,r2,r3
200295ec:	2909883a 	add	r4,r5,r4
200295f0:	003fed06 	br	200295a8 <__alt_data_end+0xfffea1a8>

200295f4 <__divdf3>:
200295f4:	defff104 	addi	sp,sp,-60
200295f8:	d9000c15 	stw	r4,48(sp)
200295fc:	d9400d15 	stw	r5,52(sp)
20029600:	d9000c04 	addi	r4,sp,48
20029604:	d9400504 	addi	r5,sp,20
20029608:	dfc00e15 	stw	ra,56(sp)
2002960c:	d9800a15 	stw	r6,40(sp)
20029610:	d9c00b15 	stw	r7,44(sp)
20029614:	0029f080 	call	20029f08 <__unpack_d>
20029618:	d9000a04 	addi	r4,sp,40
2002961c:	d80b883a 	mov	r5,sp
20029620:	0029f080 	call	20029f08 <__unpack_d>
20029624:	d8c00517 	ldw	r3,20(sp)
20029628:	00800044 	movi	r2,1
2002962c:	10c00536 	bltu	r2,r3,20029644 <__divdf3+0x50>
20029630:	d9000504 	addi	r4,sp,20
20029634:	0029ce40 	call	20029ce4 <__pack_d>
20029638:	dfc00e17 	ldw	ra,56(sp)
2002963c:	dec00f04 	addi	sp,sp,60
20029640:	f800283a 	ret
20029644:	d9000017 	ldw	r4,0(sp)
20029648:	11000536 	bltu	r2,r4,20029660 <__divdf3+0x6c>
2002964c:	d809883a 	mov	r4,sp
20029650:	0029ce40 	call	20029ce4 <__pack_d>
20029654:	dfc00e17 	ldw	ra,56(sp)
20029658:	dec00f04 	addi	sp,sp,60
2002965c:	f800283a 	ret
20029660:	d9800617 	ldw	r6,24(sp)
20029664:	d9400117 	ldw	r5,4(sp)
20029668:	00800104 	movi	r2,4
2002966c:	314af03a 	xor	r5,r6,r5
20029670:	d9400615 	stw	r5,24(sp)
20029674:	18800226 	beq	r3,r2,20029680 <__divdf3+0x8c>
20029678:	01400084 	movi	r5,2
2002967c:	1940041e 	bne	r3,r5,20029690 <__divdf3+0x9c>
20029680:	193feb1e 	bne	r3,r4,20029630 <__alt_data_end+0xfffea230>
20029684:	010800f4 	movhi	r4,8195
20029688:	21337f04 	addi	r4,r4,-12804
2002968c:	003fe906 	br	20029634 <__alt_data_end+0xfffea234>
20029690:	20803326 	beq	r4,r2,20029760 <__divdf3+0x16c>
20029694:	21403726 	beq	r4,r5,20029774 <__divdf3+0x180>
20029698:	d8800217 	ldw	r2,8(sp)
2002969c:	d9000717 	ldw	r4,28(sp)
200296a0:	d8c00917 	ldw	r3,36(sp)
200296a4:	da000417 	ldw	r8,16(sp)
200296a8:	2089c83a 	sub	r4,r4,r2
200296ac:	d9000715 	stw	r4,28(sp)
200296b0:	d8800817 	ldw	r2,32(sp)
200296b4:	dbc00317 	ldw	r15,12(sp)
200296b8:	1a000236 	bltu	r3,r8,200296c4 <__divdf3+0xd0>
200296bc:	40c0081e 	bne	r8,r3,200296e0 <__divdf3+0xec>
200296c0:	13c0072e 	bgeu	r2,r15,200296e0 <__divdf3+0xec>
200296c4:	108b883a 	add	r5,r2,r2
200296c8:	288d803a 	cmpltu	r6,r5,r2
200296cc:	18c7883a 	add	r3,r3,r3
200296d0:	213fffc4 	addi	r4,r4,-1
200296d4:	2805883a 	mov	r2,r5
200296d8:	30c7883a 	add	r3,r6,r3
200296dc:	d9000715 	stw	r4,28(sp)
200296e0:	01400f44 	movi	r5,61
200296e4:	000f883a 	mov	r7,zero
200296e8:	01040034 	movhi	r4,4096
200296ec:	0019883a 	mov	r12,zero
200296f0:	001b883a 	mov	r13,zero
200296f4:	201697fa 	slli	r11,r4,31
200296f8:	3814d07a 	srli	r10,r7,1
200296fc:	297fffc4 	addi	r5,r5,-1
20029700:	1a000936 	bltu	r3,r8,20029728 <__divdf3+0x134>
20029704:	13cdc83a 	sub	r6,r2,r15
20029708:	1193803a 	cmpltu	r9,r2,r6
2002970c:	1a1dc83a 	sub	r14,r3,r8
20029710:	40c0011e 	bne	r8,r3,20029718 <__divdf3+0x124>
20029714:	13c00436 	bltu	r2,r15,20029728 <__divdf3+0x134>
20029718:	3005883a 	mov	r2,r6
2002971c:	7247c83a 	sub	r3,r14,r9
20029720:	61d8b03a 	or	r12,r12,r7
20029724:	691ab03a 	or	r13,r13,r4
20029728:	108d883a 	add	r6,r2,r2
2002972c:	3093803a 	cmpltu	r9,r6,r2
20029730:	18c7883a 	add	r3,r3,r3
20029734:	5a8eb03a 	or	r7,r11,r10
20029738:	2008d07a 	srli	r4,r4,1
2002973c:	3005883a 	mov	r2,r6
20029740:	48c7883a 	add	r3,r9,r3
20029744:	283feb1e 	bne	r5,zero,200296f4 <__alt_data_end+0xfffea2f4>
20029748:	61003fcc 	andi	r4,r12,255
2002974c:	01402004 	movi	r5,128
20029750:	21400b26 	beq	r4,r5,20029780 <__divdf3+0x18c>
20029754:	db000815 	stw	r12,32(sp)
20029758:	db400915 	stw	r13,36(sp)
2002975c:	003fb406 	br	20029630 <__alt_data_end+0xfffea230>
20029760:	d8000815 	stw	zero,32(sp)
20029764:	d8000915 	stw	zero,36(sp)
20029768:	d8000715 	stw	zero,28(sp)
2002976c:	d9000504 	addi	r4,sp,20
20029770:	003fb006 	br	20029634 <__alt_data_end+0xfffea234>
20029774:	d8800515 	stw	r2,20(sp)
20029778:	d9000504 	addi	r4,sp,20
2002977c:	003fad06 	br	20029634 <__alt_data_end+0xfffea234>
20029780:	6140400c 	andi	r5,r12,256
20029784:	283ff31e 	bne	r5,zero,20029754 <__alt_data_end+0xfffea354>
20029788:	30c4b03a 	or	r2,r6,r3
2002978c:	103ff126 	beq	r2,zero,20029754 <__alt_data_end+0xfffea354>
20029790:	6109883a 	add	r4,r12,r4
20029794:	2305803a 	cmpltu	r2,r4,r12
20029798:	033fc004 	movi	r12,-256
2002979c:	2318703a 	and	r12,r4,r12
200297a0:	135b883a 	add	r13,r2,r13
200297a4:	003feb06 	br	20029754 <__alt_data_end+0xfffea354>

200297a8 <__eqdf2>:
200297a8:	defff104 	addi	sp,sp,-60
200297ac:	d9000c15 	stw	r4,48(sp)
200297b0:	d9400d15 	stw	r5,52(sp)
200297b4:	d9000c04 	addi	r4,sp,48
200297b8:	d9400504 	addi	r5,sp,20
200297bc:	dfc00e15 	stw	ra,56(sp)
200297c0:	d9800a15 	stw	r6,40(sp)
200297c4:	d9c00b15 	stw	r7,44(sp)
200297c8:	0029f080 	call	20029f08 <__unpack_d>
200297cc:	d9000a04 	addi	r4,sp,40
200297d0:	d80b883a 	mov	r5,sp
200297d4:	0029f080 	call	20029f08 <__unpack_d>
200297d8:	d8c00517 	ldw	r3,20(sp)
200297dc:	00800044 	movi	r2,1
200297e0:	10c0052e 	bgeu	r2,r3,200297f8 <__eqdf2+0x50>
200297e4:	d8c00017 	ldw	r3,0(sp)
200297e8:	10c0032e 	bgeu	r2,r3,200297f8 <__eqdf2+0x50>
200297ec:	d9000504 	addi	r4,sp,20
200297f0:	d80b883a 	mov	r5,sp
200297f4:	002a00c0 	call	2002a00c <__fpcmp_parts_d>
200297f8:	dfc00e17 	ldw	ra,56(sp)
200297fc:	dec00f04 	addi	sp,sp,60
20029800:	f800283a 	ret

20029804 <__nedf2>:
20029804:	defff104 	addi	sp,sp,-60
20029808:	d9000c15 	stw	r4,48(sp)
2002980c:	d9400d15 	stw	r5,52(sp)
20029810:	d9000c04 	addi	r4,sp,48
20029814:	d9400504 	addi	r5,sp,20
20029818:	dfc00e15 	stw	ra,56(sp)
2002981c:	d9800a15 	stw	r6,40(sp)
20029820:	d9c00b15 	stw	r7,44(sp)
20029824:	0029f080 	call	20029f08 <__unpack_d>
20029828:	d9000a04 	addi	r4,sp,40
2002982c:	d80b883a 	mov	r5,sp
20029830:	0029f080 	call	20029f08 <__unpack_d>
20029834:	d8c00517 	ldw	r3,20(sp)
20029838:	00800044 	movi	r2,1
2002983c:	10c0052e 	bgeu	r2,r3,20029854 <__nedf2+0x50>
20029840:	d8c00017 	ldw	r3,0(sp)
20029844:	10c0032e 	bgeu	r2,r3,20029854 <__nedf2+0x50>
20029848:	d9000504 	addi	r4,sp,20
2002984c:	d80b883a 	mov	r5,sp
20029850:	002a00c0 	call	2002a00c <__fpcmp_parts_d>
20029854:	dfc00e17 	ldw	ra,56(sp)
20029858:	dec00f04 	addi	sp,sp,60
2002985c:	f800283a 	ret

20029860 <__gtdf2>:
20029860:	defff104 	addi	sp,sp,-60
20029864:	d9000c15 	stw	r4,48(sp)
20029868:	d9400d15 	stw	r5,52(sp)
2002986c:	d9000c04 	addi	r4,sp,48
20029870:	d9400504 	addi	r5,sp,20
20029874:	dfc00e15 	stw	ra,56(sp)
20029878:	d9800a15 	stw	r6,40(sp)
2002987c:	d9c00b15 	stw	r7,44(sp)
20029880:	0029f080 	call	20029f08 <__unpack_d>
20029884:	d9000a04 	addi	r4,sp,40
20029888:	d80b883a 	mov	r5,sp
2002988c:	0029f080 	call	20029f08 <__unpack_d>
20029890:	d8c00517 	ldw	r3,20(sp)
20029894:	00800044 	movi	r2,1
20029898:	10c0082e 	bgeu	r2,r3,200298bc <__gtdf2+0x5c>
2002989c:	d8c00017 	ldw	r3,0(sp)
200298a0:	10c0062e 	bgeu	r2,r3,200298bc <__gtdf2+0x5c>
200298a4:	d9000504 	addi	r4,sp,20
200298a8:	d80b883a 	mov	r5,sp
200298ac:	002a00c0 	call	2002a00c <__fpcmp_parts_d>
200298b0:	dfc00e17 	ldw	ra,56(sp)
200298b4:	dec00f04 	addi	sp,sp,60
200298b8:	f800283a 	ret
200298bc:	00bfffc4 	movi	r2,-1
200298c0:	003ffb06 	br	200298b0 <__alt_data_end+0xfffea4b0>

200298c4 <__gedf2>:
200298c4:	defff104 	addi	sp,sp,-60
200298c8:	d9000c15 	stw	r4,48(sp)
200298cc:	d9400d15 	stw	r5,52(sp)
200298d0:	d9000c04 	addi	r4,sp,48
200298d4:	d9400504 	addi	r5,sp,20
200298d8:	dfc00e15 	stw	ra,56(sp)
200298dc:	d9800a15 	stw	r6,40(sp)
200298e0:	d9c00b15 	stw	r7,44(sp)
200298e4:	0029f080 	call	20029f08 <__unpack_d>
200298e8:	d9000a04 	addi	r4,sp,40
200298ec:	d80b883a 	mov	r5,sp
200298f0:	0029f080 	call	20029f08 <__unpack_d>
200298f4:	d8c00517 	ldw	r3,20(sp)
200298f8:	00800044 	movi	r2,1
200298fc:	10c0082e 	bgeu	r2,r3,20029920 <__gedf2+0x5c>
20029900:	d8c00017 	ldw	r3,0(sp)
20029904:	10c0062e 	bgeu	r2,r3,20029920 <__gedf2+0x5c>
20029908:	d9000504 	addi	r4,sp,20
2002990c:	d80b883a 	mov	r5,sp
20029910:	002a00c0 	call	2002a00c <__fpcmp_parts_d>
20029914:	dfc00e17 	ldw	ra,56(sp)
20029918:	dec00f04 	addi	sp,sp,60
2002991c:	f800283a 	ret
20029920:	00bfffc4 	movi	r2,-1
20029924:	003ffb06 	br	20029914 <__alt_data_end+0xfffea514>

20029928 <__ltdf2>:
20029928:	defff104 	addi	sp,sp,-60
2002992c:	d9000c15 	stw	r4,48(sp)
20029930:	d9400d15 	stw	r5,52(sp)
20029934:	d9000c04 	addi	r4,sp,48
20029938:	d9400504 	addi	r5,sp,20
2002993c:	dfc00e15 	stw	ra,56(sp)
20029940:	d9800a15 	stw	r6,40(sp)
20029944:	d9c00b15 	stw	r7,44(sp)
20029948:	0029f080 	call	20029f08 <__unpack_d>
2002994c:	d9000a04 	addi	r4,sp,40
20029950:	d80b883a 	mov	r5,sp
20029954:	0029f080 	call	20029f08 <__unpack_d>
20029958:	d8c00517 	ldw	r3,20(sp)
2002995c:	00800044 	movi	r2,1
20029960:	10c0052e 	bgeu	r2,r3,20029978 <__ltdf2+0x50>
20029964:	d8c00017 	ldw	r3,0(sp)
20029968:	10c0032e 	bgeu	r2,r3,20029978 <__ltdf2+0x50>
2002996c:	d9000504 	addi	r4,sp,20
20029970:	d80b883a 	mov	r5,sp
20029974:	002a00c0 	call	2002a00c <__fpcmp_parts_d>
20029978:	dfc00e17 	ldw	ra,56(sp)
2002997c:	dec00f04 	addi	sp,sp,60
20029980:	f800283a 	ret

20029984 <__floatsidf>:
20029984:	2004d7fa 	srli	r2,r4,31
20029988:	defff904 	addi	sp,sp,-28
2002998c:	00c000c4 	movi	r3,3
20029990:	dfc00615 	stw	ra,24(sp)
20029994:	dc000515 	stw	r16,20(sp)
20029998:	d8c00015 	stw	r3,0(sp)
2002999c:	d8800115 	stw	r2,4(sp)
200299a0:	2000081e 	bne	r4,zero,200299c4 <__floatsidf+0x40>
200299a4:	00800084 	movi	r2,2
200299a8:	d8800015 	stw	r2,0(sp)
200299ac:	d809883a 	mov	r4,sp
200299b0:	0029ce40 	call	20029ce4 <__pack_d>
200299b4:	dfc00617 	ldw	ra,24(sp)
200299b8:	dc000517 	ldw	r16,20(sp)
200299bc:	dec00704 	addi	sp,sp,28
200299c0:	f800283a 	ret
200299c4:	00c00f04 	movi	r3,60
200299c8:	d8c00215 	stw	r3,8(sp)
200299cc:	10000f1e 	bne	r2,zero,20029a0c <__floatsidf+0x88>
200299d0:	2021883a 	mov	r16,r4
200299d4:	8009883a 	mov	r4,r16
200299d8:	0029c380 	call	20029c38 <__clzsi2>
200299dc:	11000744 	addi	r4,r2,29
200299e0:	0100110e 	bge	zero,r4,20029a28 <__floatsidf+0xa4>
200299e4:	10ffff44 	addi	r3,r2,-3
200299e8:	18001216 	blt	r3,zero,20029a34 <__floatsidf+0xb0>
200299ec:	80c6983a 	sll	r3,r16,r3
200299f0:	0009883a 	mov	r4,zero
200299f4:	014007c4 	movi	r5,31
200299f8:	2885c83a 	sub	r2,r5,r2
200299fc:	d9000315 	stw	r4,12(sp)
20029a00:	d8c00415 	stw	r3,16(sp)
20029a04:	d8800215 	stw	r2,8(sp)
20029a08:	003fe806 	br	200299ac <__alt_data_end+0xfffea5ac>
20029a0c:	00a00034 	movhi	r2,32768
20029a10:	20800e26 	beq	r4,r2,20029a4c <__floatsidf+0xc8>
20029a14:	0121c83a 	sub	r16,zero,r4
20029a18:	8009883a 	mov	r4,r16
20029a1c:	0029c380 	call	20029c38 <__clzsi2>
20029a20:	11000744 	addi	r4,r2,29
20029a24:	013fef16 	blt	zero,r4,200299e4 <__alt_data_end+0xfffea5e4>
20029a28:	dc000315 	stw	r16,12(sp)
20029a2c:	d8000415 	stw	zero,16(sp)
20029a30:	003fde06 	br	200299ac <__alt_data_end+0xfffea5ac>
20029a34:	800ad07a 	srli	r5,r16,1
20029a38:	00c007c4 	movi	r3,31
20029a3c:	1907c83a 	sub	r3,r3,r4
20029a40:	28c6d83a 	srl	r3,r5,r3
20029a44:	8108983a 	sll	r4,r16,r4
20029a48:	003fea06 	br	200299f4 <__alt_data_end+0xfffea5f4>
20029a4c:	0005883a 	mov	r2,zero
20029a50:	00f07834 	movhi	r3,49632
20029a54:	003fd706 	br	200299b4 <__alt_data_end+0xfffea5b4>

20029a58 <__fixdfsi>:
20029a58:	defff804 	addi	sp,sp,-32
20029a5c:	d9000515 	stw	r4,20(sp)
20029a60:	d9400615 	stw	r5,24(sp)
20029a64:	d9000504 	addi	r4,sp,20
20029a68:	d80b883a 	mov	r5,sp
20029a6c:	dfc00715 	stw	ra,28(sp)
20029a70:	0029f080 	call	20029f08 <__unpack_d>
20029a74:	d8800017 	ldw	r2,0(sp)
20029a78:	00c00084 	movi	r3,2
20029a7c:	10c01c26 	beq	r2,r3,20029af0 <__fixdfsi+0x98>
20029a80:	00c00044 	movi	r3,1
20029a84:	18801a2e 	bgeu	r3,r2,20029af0 <__fixdfsi+0x98>
20029a88:	00c00104 	movi	r3,4
20029a8c:	10c01126 	beq	r2,r3,20029ad4 <__fixdfsi+0x7c>
20029a90:	d8800217 	ldw	r2,8(sp)
20029a94:	10001616 	blt	r2,zero,20029af0 <__fixdfsi+0x98>
20029a98:	00c00784 	movi	r3,30
20029a9c:	18800d16 	blt	r3,r2,20029ad4 <__fixdfsi+0x7c>
20029aa0:	00c00f04 	movi	r3,60
20029aa4:	1885c83a 	sub	r2,r3,r2
20029aa8:	10fff804 	addi	r3,r2,-32
20029aac:	d9400317 	ldw	r5,12(sp)
20029ab0:	d9000417 	ldw	r4,16(sp)
20029ab4:	18001216 	blt	r3,zero,20029b00 <__fixdfsi+0xa8>
20029ab8:	20c4d83a 	srl	r2,r4,r3
20029abc:	d8c00117 	ldw	r3,4(sp)
20029ac0:	18000826 	beq	r3,zero,20029ae4 <__fixdfsi+0x8c>
20029ac4:	0085c83a 	sub	r2,zero,r2
20029ac8:	dfc00717 	ldw	ra,28(sp)
20029acc:	dec00804 	addi	sp,sp,32
20029ad0:	f800283a 	ret
20029ad4:	d8800117 	ldw	r2,4(sp)
20029ad8:	00e00034 	movhi	r3,32768
20029adc:	1005003a 	cmpeq	r2,r2,zero
20029ae0:	1885c83a 	sub	r2,r3,r2
20029ae4:	dfc00717 	ldw	ra,28(sp)
20029ae8:	dec00804 	addi	sp,sp,32
20029aec:	f800283a 	ret
20029af0:	0005883a 	mov	r2,zero
20029af4:	dfc00717 	ldw	ra,28(sp)
20029af8:	dec00804 	addi	sp,sp,32
20029afc:	f800283a 	ret
20029b00:	2008907a 	slli	r4,r4,1
20029b04:	018007c4 	movi	r6,31
20029b08:	308dc83a 	sub	r6,r6,r2
20029b0c:	2188983a 	sll	r4,r4,r6
20029b10:	2884d83a 	srl	r2,r5,r2
20029b14:	2084b03a 	or	r2,r4,r2
20029b18:	003fe806 	br	20029abc <__alt_data_end+0xfffea6bc>

20029b1c <__floatunsidf>:
20029b1c:	defff904 	addi	sp,sp,-28
20029b20:	dc000515 	stw	r16,20(sp)
20029b24:	dfc00615 	stw	ra,24(sp)
20029b28:	d8000115 	stw	zero,4(sp)
20029b2c:	2021883a 	mov	r16,r4
20029b30:	20001726 	beq	r4,zero,20029b90 <__floatunsidf+0x74>
20029b34:	008000c4 	movi	r2,3
20029b38:	d8800015 	stw	r2,0(sp)
20029b3c:	00800f04 	movi	r2,60
20029b40:	d8800215 	stw	r2,8(sp)
20029b44:	0029c380 	call	20029c38 <__clzsi2>
20029b48:	10c00744 	addi	r3,r2,29
20029b4c:	18001816 	blt	r3,zero,20029bb0 <__floatunsidf+0x94>
20029b50:	18002d26 	beq	r3,zero,20029c08 <__floatunsidf+0xec>
20029b54:	113fff44 	addi	r4,r2,-3
20029b58:	20002e16 	blt	r4,zero,20029c14 <__floatunsidf+0xf8>
20029b5c:	8108983a 	sll	r4,r16,r4
20029b60:	0021883a 	mov	r16,zero
20029b64:	014007c4 	movi	r5,31
20029b68:	2885c83a 	sub	r2,r5,r2
20029b6c:	dc000315 	stw	r16,12(sp)
20029b70:	d9000415 	stw	r4,16(sp)
20029b74:	d8800215 	stw	r2,8(sp)
20029b78:	d809883a 	mov	r4,sp
20029b7c:	0029ce40 	call	20029ce4 <__pack_d>
20029b80:	dfc00617 	ldw	ra,24(sp)
20029b84:	dc000517 	ldw	r16,20(sp)
20029b88:	dec00704 	addi	sp,sp,28
20029b8c:	f800283a 	ret
20029b90:	00800084 	movi	r2,2
20029b94:	d809883a 	mov	r4,sp
20029b98:	d8800015 	stw	r2,0(sp)
20029b9c:	0029ce40 	call	20029ce4 <__pack_d>
20029ba0:	dfc00617 	ldw	ra,24(sp)
20029ba4:	dc000517 	ldw	r16,20(sp)
20029ba8:	dec00704 	addi	sp,sp,28
20029bac:	f800283a 	ret
20029bb0:	00c7c83a 	sub	r3,zero,r3
20029bb4:	193ff804 	addi	r4,r3,-32
20029bb8:	20001c16 	blt	r4,zero,20029c2c <__floatunsidf+0x110>
20029bbc:	000b883a 	mov	r5,zero
20029bc0:	2009d7fa 	srai	r4,r4,31
20029bc4:	80c6d83a 	srl	r3,r16,r3
20029bc8:	297fffc4 	addi	r5,r5,-1
20029bcc:	2c20703a 	and	r16,r5,r16
20029bd0:	8020c03a 	cmpne	r16,r16,zero
20029bd4:	1906703a 	and	r3,r3,r4
20029bd8:	010007c4 	movi	r4,31
20029bdc:	80c6b03a 	or	r3,r16,r3
20029be0:	2085c83a 	sub	r2,r4,r2
20029be4:	d809883a 	mov	r4,sp
20029be8:	d8c00315 	stw	r3,12(sp)
20029bec:	d8000415 	stw	zero,16(sp)
20029bf0:	d8800215 	stw	r2,8(sp)
20029bf4:	0029ce40 	call	20029ce4 <__pack_d>
20029bf8:	dfc00617 	ldw	ra,24(sp)
20029bfc:	dc000517 	ldw	r16,20(sp)
20029c00:	dec00704 	addi	sp,sp,28
20029c04:	f800283a 	ret
20029c08:	dc000315 	stw	r16,12(sp)
20029c0c:	d8000415 	stw	zero,16(sp)
20029c10:	003fd906 	br	20029b78 <__alt_data_end+0xfffea778>
20029c14:	800ad07a 	srli	r5,r16,1
20029c18:	010007c4 	movi	r4,31
20029c1c:	20c9c83a 	sub	r4,r4,r3
20029c20:	2908d83a 	srl	r4,r5,r4
20029c24:	80e0983a 	sll	r16,r16,r3
20029c28:	003fce06 	br	20029b64 <__alt_data_end+0xfffea764>
20029c2c:	01400044 	movi	r5,1
20029c30:	28ca983a 	sll	r5,r5,r3
20029c34:	003fe206 	br	20029bc0 <__alt_data_end+0xfffea7c0>

20029c38 <__clzsi2>:
20029c38:	00bfffd4 	movui	r2,65535
20029c3c:	11000b36 	bltu	r2,r4,20029c6c <__clzsi2+0x34>
20029c40:	00803fc4 	movi	r2,255
20029c44:	11001e2e 	bgeu	r2,r4,20029cc0 <__clzsi2+0x88>
20029c48:	00c00204 	movi	r3,8
20029c4c:	20c8d83a 	srl	r4,r4,r3
20029c50:	00c800f4 	movhi	r3,8195
20029c54:	18f38404 	addi	r3,r3,-12784
20029c58:	00800604 	movi	r2,24
20029c5c:	1909883a 	add	r4,r3,r4
20029c60:	20c00003 	ldbu	r3,0(r4)
20029c64:	10c5c83a 	sub	r2,r2,r3
20029c68:	f800283a 	ret
20029c6c:	00804034 	movhi	r2,256
20029c70:	10bfffc4 	addi	r2,r2,-1
20029c74:	11000936 	bltu	r2,r4,20029c9c <__clzsi2+0x64>
20029c78:	00800404 	movi	r2,16
20029c7c:	1007883a 	mov	r3,r2
20029c80:	20c8d83a 	srl	r4,r4,r3
20029c84:	00c800f4 	movhi	r3,8195
20029c88:	18f38404 	addi	r3,r3,-12784
20029c8c:	1909883a 	add	r4,r3,r4
20029c90:	20c00003 	ldbu	r3,0(r4)
20029c94:	10c5c83a 	sub	r2,r2,r3
20029c98:	f800283a 	ret
20029c9c:	00c00604 	movi	r3,24
20029ca0:	20c8d83a 	srl	r4,r4,r3
20029ca4:	00c800f4 	movhi	r3,8195
20029ca8:	18f38404 	addi	r3,r3,-12784
20029cac:	00800204 	movi	r2,8
20029cb0:	1909883a 	add	r4,r3,r4
20029cb4:	20c00003 	ldbu	r3,0(r4)
20029cb8:	10c5c83a 	sub	r2,r2,r3
20029cbc:	f800283a 	ret
20029cc0:	0007883a 	mov	r3,zero
20029cc4:	20c8d83a 	srl	r4,r4,r3
20029cc8:	00c800f4 	movhi	r3,8195
20029ccc:	18f38404 	addi	r3,r3,-12784
20029cd0:	00800804 	movi	r2,32
20029cd4:	1909883a 	add	r4,r3,r4
20029cd8:	20c00003 	ldbu	r3,0(r4)
20029cdc:	10c5c83a 	sub	r2,r2,r3
20029ce0:	f800283a 	ret

20029ce4 <__pack_d>:
20029ce4:	20800017 	ldw	r2,0(r4)
20029ce8:	defff804 	addi	sp,sp,-32
20029cec:	dcc00315 	stw	r19,12(sp)
20029cf0:	dc800215 	stw	r18,8(sp)
20029cf4:	dfc00715 	stw	ra,28(sp)
20029cf8:	dd800615 	stw	r22,24(sp)
20029cfc:	dd400515 	stw	r21,20(sp)
20029d00:	dd000415 	stw	r20,16(sp)
20029d04:	dc400115 	stw	r17,4(sp)
20029d08:	dc000015 	stw	r16,0(sp)
20029d0c:	04800044 	movi	r18,1
20029d10:	24400317 	ldw	r17,12(r4)
20029d14:	24000417 	ldw	r16,16(r4)
20029d18:	24c00117 	ldw	r19,4(r4)
20029d1c:	9080422e 	bgeu	r18,r2,20029e28 <__pack_d+0x144>
20029d20:	00c00104 	movi	r3,4
20029d24:	10c03c26 	beq	r2,r3,20029e18 <__pack_d+0x134>
20029d28:	00c00084 	movi	r3,2
20029d2c:	10c01926 	beq	r2,r3,20029d94 <__pack_d+0xb0>
20029d30:	8c04b03a 	or	r2,r17,r16
20029d34:	10001726 	beq	r2,zero,20029d94 <__pack_d+0xb0>
20029d38:	21000217 	ldw	r4,8(r4)
20029d3c:	00bf0084 	movi	r2,-1022
20029d40:	20804016 	blt	r4,r2,20029e44 <__pack_d+0x160>
20029d44:	0080ffc4 	movi	r2,1023
20029d48:	11003316 	blt	r2,r4,20029e18 <__pack_d+0x134>
20029d4c:	88803fcc 	andi	r2,r17,255
20029d50:	00c02004 	movi	r3,128
20029d54:	10c02926 	beq	r2,r3,20029dfc <__pack_d+0x118>
20029d58:	88801fc4 	addi	r2,r17,127
20029d5c:	1463803a 	cmpltu	r17,r2,r17
20029d60:	8c21883a 	add	r16,r17,r16
20029d64:	1023883a 	mov	r17,r2
20029d68:	00880034 	movhi	r2,8192
20029d6c:	10bfffc4 	addi	r2,r2,-1
20029d70:	14001c36 	bltu	r2,r16,20029de4 <__pack_d+0x100>
20029d74:	2100ffc4 	addi	r4,r4,1023
20029d78:	8006963a 	slli	r3,r16,24
20029d7c:	8804d23a 	srli	r2,r17,8
20029d80:	8020913a 	slli	r16,r16,4
20029d84:	2101ffcc 	andi	r4,r4,2047
20029d88:	1884b03a 	or	r2,r3,r2
20029d8c:	8020d33a 	srli	r16,r16,12
20029d90:	00000306 	br	20029da0 <__pack_d+0xbc>
20029d94:	0009883a 	mov	r4,zero
20029d98:	0005883a 	mov	r2,zero
20029d9c:	0021883a 	mov	r16,zero
20029da0:	2008953a 	slli	r4,r4,20
20029da4:	982697fa 	slli	r19,r19,31
20029da8:	00c00434 	movhi	r3,16
20029dac:	18ffffc4 	addi	r3,r3,-1
20029db0:	80e0703a 	and	r16,r16,r3
20029db4:	8106b03a 	or	r3,r16,r4
20029db8:	1cc6b03a 	or	r3,r3,r19
20029dbc:	dfc00717 	ldw	ra,28(sp)
20029dc0:	dd800617 	ldw	r22,24(sp)
20029dc4:	dd400517 	ldw	r21,20(sp)
20029dc8:	dd000417 	ldw	r20,16(sp)
20029dcc:	dcc00317 	ldw	r19,12(sp)
20029dd0:	dc800217 	ldw	r18,8(sp)
20029dd4:	dc400117 	ldw	r17,4(sp)
20029dd8:	dc000017 	ldw	r16,0(sp)
20029ddc:	dec00804 	addi	sp,sp,32
20029de0:	f800283a 	ret
20029de4:	800697fa 	slli	r3,r16,31
20029de8:	8804d07a 	srli	r2,r17,1
20029dec:	21010004 	addi	r4,r4,1024
20029df0:	8020d07a 	srli	r16,r16,1
20029df4:	18a2b03a 	or	r17,r3,r2
20029df8:	003fdf06 	br	20029d78 <__alt_data_end+0xfffea978>
20029dfc:	88c0400c 	andi	r3,r17,256
20029e00:	183fd926 	beq	r3,zero,20029d68 <__alt_data_end+0xfffea968>
20029e04:	8885883a 	add	r2,r17,r2
20029e08:	1463803a 	cmpltu	r17,r2,r17
20029e0c:	8c21883a 	add	r16,r17,r16
20029e10:	1023883a 	mov	r17,r2
20029e14:	003fd406 	br	20029d68 <__alt_data_end+0xfffea968>
20029e18:	0101ffc4 	movi	r4,2047
20029e1c:	0005883a 	mov	r2,zero
20029e20:	0021883a 	mov	r16,zero
20029e24:	003fde06 	br	20029da0 <__alt_data_end+0xfffea9a0>
20029e28:	84000234 	orhi	r16,r16,8
20029e2c:	00c00434 	movhi	r3,16
20029e30:	18ffffc4 	addi	r3,r3,-1
20029e34:	8805883a 	mov	r2,r17
20029e38:	80e0703a 	and	r16,r16,r3
20029e3c:	0101ffc4 	movi	r4,2047
20029e40:	003fd706 	br	20029da0 <__alt_data_end+0xfffea9a0>
20029e44:	1129c83a 	sub	r20,r2,r4
20029e48:	00800e04 	movi	r2,56
20029e4c:	15002716 	blt	r2,r20,20029eec <__pack_d+0x208>
20029e50:	800b883a 	mov	r5,r16
20029e54:	a00d883a 	mov	r6,r20
20029e58:	8809883a 	mov	r4,r17
20029e5c:	002a0dc0 	call	2002a0dc <__lshrdi3>
20029e60:	9009883a 	mov	r4,r18
20029e64:	000b883a 	mov	r5,zero
20029e68:	a00d883a 	mov	r6,r20
20029e6c:	102d883a 	mov	r22,r2
20029e70:	182b883a 	mov	r21,r3
20029e74:	002a1200 	call	2002a120 <__ashldi3>
20029e78:	1009003a 	cmpeq	r4,r2,zero
20029e7c:	1907c83a 	sub	r3,r3,r4
20029e80:	10bfffc4 	addi	r2,r2,-1
20029e84:	1c20703a 	and	r16,r3,r16
20029e88:	1444703a 	and	r2,r2,r17
20029e8c:	1404b03a 	or	r2,r2,r16
20029e90:	1004c03a 	cmpne	r2,r2,zero
20029e94:	1584b03a 	or	r2,r2,r22
20029e98:	11003fcc 	andi	r4,r2,255
20029e9c:	01402004 	movi	r5,128
20029ea0:	a807883a 	mov	r3,r21
20029ea4:	2140131e 	bne	r4,r5,20029ef4 <__pack_d+0x210>
20029ea8:	1140400c 	andi	r5,r2,256
20029eac:	28000426 	beq	r5,zero,20029ec0 <__pack_d+0x1dc>
20029eb0:	1109883a 	add	r4,r2,r4
20029eb4:	2085803a 	cmpltu	r2,r4,r2
20029eb8:	1547883a 	add	r3,r2,r21
20029ebc:	2005883a 	mov	r2,r4
20029ec0:	1808963a 	slli	r4,r3,24
20029ec4:	1004d23a 	srli	r2,r2,8
20029ec8:	1820913a 	slli	r16,r3,4
20029ecc:	01440034 	movhi	r5,4096
20029ed0:	297fffc4 	addi	r5,r5,-1
20029ed4:	2084b03a 	or	r2,r4,r2
20029ed8:	8020d33a 	srli	r16,r16,12
20029edc:	01000044 	movi	r4,1
20029ee0:	28ffaf36 	bltu	r5,r3,20029da0 <__alt_data_end+0xfffea9a0>
20029ee4:	0009883a 	mov	r4,zero
20029ee8:	003fad06 	br	20029da0 <__alt_data_end+0xfffea9a0>
20029eec:	0005883a 	mov	r2,zero
20029ef0:	0007883a 	mov	r3,zero
20029ef4:	11001fc4 	addi	r4,r2,127
20029ef8:	2085803a 	cmpltu	r2,r4,r2
20029efc:	10c7883a 	add	r3,r2,r3
20029f00:	2005883a 	mov	r2,r4
20029f04:	003fee06 	br	20029ec0 <__alt_data_end+0xfffeaac0>

20029f08 <__unpack_d>:
20029f08:	21800117 	ldw	r6,4(r4)
20029f0c:	20c00017 	ldw	r3,0(r4)
20029f10:	3004d7fa 	srli	r2,r6,31
20029f14:	3008d53a 	srli	r4,r6,20
20029f18:	28800115 	stw	r2,4(r5)
20029f1c:	2101ffcc 	andi	r4,r4,2047
20029f20:	00800434 	movhi	r2,16
20029f24:	10bfffc4 	addi	r2,r2,-1
20029f28:	3084703a 	and	r2,r6,r2
20029f2c:	20001a1e 	bne	r4,zero,20029f98 <__unpack_d+0x90>
20029f30:	1888b03a 	or	r4,r3,r2
20029f34:	20002626 	beq	r4,zero,20029fd0 <__unpack_d+0xc8>
20029f38:	1808d63a 	srli	r4,r3,24
20029f3c:	1004923a 	slli	r2,r2,8
20029f40:	01bf0084 	movi	r6,-1022
20029f44:	29800215 	stw	r6,8(r5)
20029f48:	2084b03a 	or	r2,r4,r2
20029f4c:	010000c4 	movi	r4,3
20029f50:	29000015 	stw	r4,0(r5)
20029f54:	02040034 	movhi	r8,4096
20029f58:	423fffc4 	addi	r8,r8,-1
20029f5c:	1806923a 	slli	r3,r3,8
20029f60:	40801836 	bltu	r8,r2,20029fc4 <__unpack_d+0xbc>
20029f64:	013f0044 	movi	r4,-1023
20029f68:	18cd883a 	add	r6,r3,r3
20029f6c:	30c7803a 	cmpltu	r3,r6,r3
20029f70:	1085883a 	add	r2,r2,r2
20029f74:	1885883a 	add	r2,r3,r2
20029f78:	200f883a 	mov	r7,r4
20029f7c:	3007883a 	mov	r3,r6
20029f80:	213fffc4 	addi	r4,r4,-1
20029f84:	40bff82e 	bgeu	r8,r2,20029f68 <__alt_data_end+0xfffeab68>
20029f88:	29c00215 	stw	r7,8(r5)
20029f8c:	28c00315 	stw	r3,12(r5)
20029f90:	28800415 	stw	r2,16(r5)
20029f94:	f800283a 	ret
20029f98:	01c1ffc4 	movi	r7,2047
20029f9c:	21c00f26 	beq	r4,r7,20029fdc <__unpack_d+0xd4>
20029fa0:	180cd63a 	srli	r6,r3,24
20029fa4:	1004923a 	slli	r2,r2,8
20029fa8:	213f0044 	addi	r4,r4,-1023
20029fac:	1806923a 	slli	r3,r3,8
20029fb0:	3084b03a 	or	r2,r6,r2
20029fb4:	29000215 	stw	r4,8(r5)
20029fb8:	010000c4 	movi	r4,3
20029fbc:	10840034 	orhi	r2,r2,4096
20029fc0:	29000015 	stw	r4,0(r5)
20029fc4:	28c00315 	stw	r3,12(r5)
20029fc8:	28800415 	stw	r2,16(r5)
20029fcc:	f800283a 	ret
20029fd0:	00800084 	movi	r2,2
20029fd4:	28800015 	stw	r2,0(r5)
20029fd8:	f800283a 	ret
20029fdc:	1888b03a 	or	r4,r3,r2
20029fe0:	20000526 	beq	r4,zero,20029ff8 <__unpack_d+0xf0>
20029fe4:	3180022c 	andhi	r6,r6,8
20029fe8:	30000626 	beq	r6,zero,2002a004 <__unpack_d+0xfc>
20029fec:	01000044 	movi	r4,1
20029ff0:	29000015 	stw	r4,0(r5)
20029ff4:	003ff306 	br	20029fc4 <__alt_data_end+0xfffeabc4>
20029ff8:	00800104 	movi	r2,4
20029ffc:	28800015 	stw	r2,0(r5)
2002a000:	f800283a 	ret
2002a004:	28000015 	stw	zero,0(r5)
2002a008:	003fee06 	br	20029fc4 <__alt_data_end+0xfffeabc4>

2002a00c <__fpcmp_parts_d>:
2002a00c:	20c00017 	ldw	r3,0(r4)
2002a010:	00800044 	movi	r2,1
2002a014:	10c0142e 	bgeu	r2,r3,2002a068 <__fpcmp_parts_d+0x5c>
2002a018:	29800017 	ldw	r6,0(r5)
2002a01c:	1180122e 	bgeu	r2,r6,2002a068 <__fpcmp_parts_d+0x5c>
2002a020:	01c00104 	movi	r7,4
2002a024:	19c02826 	beq	r3,r7,2002a0c8 <__fpcmp_parts_d+0xbc>
2002a028:	31c00926 	beq	r6,r7,2002a050 <__fpcmp_parts_d+0x44>
2002a02c:	01c00084 	movi	r7,2
2002a030:	19c00626 	beq	r3,r7,2002a04c <__fpcmp_parts_d+0x40>
2002a034:	31c00a26 	beq	r6,r7,2002a060 <__fpcmp_parts_d+0x54>
2002a038:	20c00117 	ldw	r3,4(r4)
2002a03c:	29800117 	ldw	r6,4(r5)
2002a040:	19800b26 	beq	r3,r6,2002a070 <__fpcmp_parts_d+0x64>
2002a044:	1800041e 	bne	r3,zero,2002a058 <__fpcmp_parts_d+0x4c>
2002a048:	f800283a 	ret
2002a04c:	30c01a26 	beq	r6,r3,2002a0b8 <__fpcmp_parts_d+0xac>
2002a050:	28800117 	ldw	r2,4(r5)
2002a054:	1000041e 	bne	r2,zero,2002a068 <__fpcmp_parts_d+0x5c>
2002a058:	00bfffc4 	movi	r2,-1
2002a05c:	f800283a 	ret
2002a060:	20800117 	ldw	r2,4(r4)
2002a064:	103ffc1e 	bne	r2,zero,2002a058 <__alt_data_end+0xfffeac58>
2002a068:	00800044 	movi	r2,1
2002a06c:	f800283a 	ret
2002a070:	21c00217 	ldw	r7,8(r4)
2002a074:	29800217 	ldw	r6,8(r5)
2002a078:	31c0020e 	bge	r6,r7,2002a084 <__fpcmp_parts_d+0x78>
2002a07c:	183ff61e 	bne	r3,zero,2002a058 <__alt_data_end+0xfffeac58>
2002a080:	f800283a 	ret
2002a084:	39800a16 	blt	r7,r6,2002a0b0 <__fpcmp_parts_d+0xa4>
2002a088:	20800417 	ldw	r2,16(r4)
2002a08c:	29800417 	ldw	r6,16(r5)
2002a090:	21c00317 	ldw	r7,12(r4)
2002a094:	29000317 	ldw	r4,12(r5)
2002a098:	30800936 	bltu	r6,r2,2002a0c0 <__fpcmp_parts_d+0xb4>
2002a09c:	1180011e 	bne	r2,r6,2002a0a4 <__fpcmp_parts_d+0x98>
2002a0a0:	21c00736 	bltu	r4,r7,2002a0c0 <__fpcmp_parts_d+0xb4>
2002a0a4:	11800236 	bltu	r2,r6,2002a0b0 <__fpcmp_parts_d+0xa4>
2002a0a8:	3080031e 	bne	r6,r2,2002a0b8 <__fpcmp_parts_d+0xac>
2002a0ac:	3900022e 	bgeu	r7,r4,2002a0b8 <__fpcmp_parts_d+0xac>
2002a0b0:	183fe926 	beq	r3,zero,2002a058 <__alt_data_end+0xfffeac58>
2002a0b4:	003fec06 	br	2002a068 <__alt_data_end+0xfffeac68>
2002a0b8:	0005883a 	mov	r2,zero
2002a0bc:	f800283a 	ret
2002a0c0:	183fe926 	beq	r3,zero,2002a068 <__alt_data_end+0xfffeac68>
2002a0c4:	003fe406 	br	2002a058 <__alt_data_end+0xfffeac58>
2002a0c8:	30ffe51e 	bne	r6,r3,2002a060 <__alt_data_end+0xfffeac60>
2002a0cc:	28c00117 	ldw	r3,4(r5)
2002a0d0:	20800117 	ldw	r2,4(r4)
2002a0d4:	1885c83a 	sub	r2,r3,r2
2002a0d8:	f800283a 	ret

2002a0dc <__lshrdi3>:
2002a0dc:	2005883a 	mov	r2,r4
2002a0e0:	2807883a 	mov	r3,r5
2002a0e4:	30000826 	beq	r6,zero,2002a108 <__lshrdi3+0x2c>
2002a0e8:	01000804 	movi	r4,32
2002a0ec:	2189c83a 	sub	r4,r4,r6
2002a0f0:	0100060e 	bge	zero,r4,2002a10c <__lshrdi3+0x30>
2002a0f4:	1184d83a 	srl	r2,r2,r6
2002a0f8:	2908983a 	sll	r4,r5,r4
2002a0fc:	298cd83a 	srl	r6,r5,r6
2002a100:	2084b03a 	or	r2,r4,r2
2002a104:	3007883a 	mov	r3,r6
2002a108:	f800283a 	ret
2002a10c:	0105c83a 	sub	r2,zero,r4
2002a110:	000d883a 	mov	r6,zero
2002a114:	2884d83a 	srl	r2,r5,r2
2002a118:	3007883a 	mov	r3,r6
2002a11c:	003ffa06 	br	2002a108 <__alt_data_end+0xfffead08>

2002a120 <__ashldi3>:
2002a120:	2005883a 	mov	r2,r4
2002a124:	2807883a 	mov	r3,r5
2002a128:	30000826 	beq	r6,zero,2002a14c <__ashldi3+0x2c>
2002a12c:	01000804 	movi	r4,32
2002a130:	2189c83a 	sub	r4,r4,r6
2002a134:	0100060e 	bge	zero,r4,2002a150 <__ashldi3+0x30>
2002a138:	1108d83a 	srl	r4,r2,r4
2002a13c:	2986983a 	sll	r3,r5,r6
2002a140:	118c983a 	sll	r6,r2,r6
2002a144:	20c6b03a 	or	r3,r4,r3
2002a148:	3005883a 	mov	r2,r6
2002a14c:	f800283a 	ret
2002a150:	0107c83a 	sub	r3,zero,r4
2002a154:	000d883a 	mov	r6,zero
2002a158:	10c6983a 	sll	r3,r2,r3
2002a15c:	3005883a 	mov	r2,r6
2002a160:	003ffa06 	br	2002a14c <__alt_data_end+0xfffead4c>

2002a164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002a164:	defffe04 	addi	sp,sp,-8
2002a168:	dfc00115 	stw	ra,4(sp)
2002a16c:	df000015 	stw	fp,0(sp)
2002a170:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002a174:	008800f4 	movhi	r2,8195
2002a178:	10ba6004 	addi	r2,r2,-5760
2002a17c:	10800017 	ldw	r2,0(r2)
2002a180:	10000526 	beq	r2,zero,2002a198 <alt_get_errno+0x34>
2002a184:	008800f4 	movhi	r2,8195
2002a188:	10ba6004 	addi	r2,r2,-5760
2002a18c:	10800017 	ldw	r2,0(r2)
2002a190:	103ee83a 	callr	r2
2002a194:	00000206 	br	2002a1a0 <alt_get_errno+0x3c>
2002a198:	008800f4 	movhi	r2,8195
2002a19c:	10810104 	addi	r2,r2,1028
}
2002a1a0:	e037883a 	mov	sp,fp
2002a1a4:	dfc00117 	ldw	ra,4(sp)
2002a1a8:	df000017 	ldw	fp,0(sp)
2002a1ac:	dec00204 	addi	sp,sp,8
2002a1b0:	f800283a 	ret

2002a1b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2002a1b4:	defffb04 	addi	sp,sp,-20
2002a1b8:	dfc00415 	stw	ra,16(sp)
2002a1bc:	df000315 	stw	fp,12(sp)
2002a1c0:	df000304 	addi	fp,sp,12
2002a1c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2002a1c8:	e0bfff17 	ldw	r2,-4(fp)
2002a1cc:	10000616 	blt	r2,zero,2002a1e8 <close+0x34>
2002a1d0:	e0bfff17 	ldw	r2,-4(fp)
2002a1d4:	10c00324 	muli	r3,r2,12
2002a1d8:	008800f4 	movhi	r2,8195
2002a1dc:	10b5de04 	addi	r2,r2,-10376
2002a1e0:	1885883a 	add	r2,r3,r2
2002a1e4:	00000106 	br	2002a1ec <close+0x38>
2002a1e8:	0005883a 	mov	r2,zero
2002a1ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2002a1f0:	e0bffd17 	ldw	r2,-12(fp)
2002a1f4:	10001826 	beq	r2,zero,2002a258 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2002a1f8:	e0bffd17 	ldw	r2,-12(fp)
2002a1fc:	10800017 	ldw	r2,0(r2)
2002a200:	10800417 	ldw	r2,16(r2)
2002a204:	10000626 	beq	r2,zero,2002a220 <close+0x6c>
2002a208:	e0bffd17 	ldw	r2,-12(fp)
2002a20c:	10800017 	ldw	r2,0(r2)
2002a210:	10800417 	ldw	r2,16(r2)
2002a214:	e13ffd17 	ldw	r4,-12(fp)
2002a218:	103ee83a 	callr	r2
2002a21c:	00000106 	br	2002a224 <close+0x70>
2002a220:	0005883a 	mov	r2,zero
2002a224:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2002a228:	e13fff17 	ldw	r4,-4(fp)
2002a22c:	002a8dc0 	call	2002a8dc <alt_release_fd>
    if (rval < 0)
2002a230:	e0bffe17 	ldw	r2,-8(fp)
2002a234:	1000060e 	bge	r2,zero,2002a250 <close+0x9c>
    {
      ALT_ERRNO = -rval;
2002a238:	002a1640 	call	2002a164 <alt_get_errno>
2002a23c:	e0fffe17 	ldw	r3,-8(fp)
2002a240:	00c7c83a 	sub	r3,zero,r3
2002a244:	10c00015 	stw	r3,0(r2)
      return -1;
2002a248:	00bfffc4 	movi	r2,-1
2002a24c:	00000606 	br	2002a268 <close+0xb4>
    }
    return 0;
2002a250:	0005883a 	mov	r2,zero
2002a254:	00000406 	br	2002a268 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002a258:	002a1640 	call	2002a164 <alt_get_errno>
2002a25c:	00c01444 	movi	r3,81
2002a260:	10c00015 	stw	r3,0(r2)
    return -1;
2002a264:	00bfffc4 	movi	r2,-1
  }
}
2002a268:	e037883a 	mov	sp,fp
2002a26c:	dfc00117 	ldw	ra,4(sp)
2002a270:	df000017 	ldw	fp,0(sp)
2002a274:	dec00204 	addi	sp,sp,8
2002a278:	f800283a 	ret

2002a27c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2002a27c:	defffe04 	addi	sp,sp,-8
2002a280:	df000115 	stw	fp,4(sp)
2002a284:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2002a288:	e03fff15 	stw	zero,-4(fp)
2002a28c:	00000506 	br	2002a2a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2002a290:	e0bfff17 	ldw	r2,-4(fp)
2002a294:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2002a298:	e0bfff17 	ldw	r2,-4(fp)
2002a29c:	10800804 	addi	r2,r2,32
2002a2a0:	e0bfff15 	stw	r2,-4(fp)
2002a2a4:	e0bfff17 	ldw	r2,-4(fp)
2002a2a8:	10820030 	cmpltui	r2,r2,2048
2002a2ac:	103ff81e 	bne	r2,zero,2002a290 <__alt_data_end+0xfffeae90>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2002a2b0:	e037883a 	mov	sp,fp
2002a2b4:	df000017 	ldw	fp,0(sp)
2002a2b8:	dec00104 	addi	sp,sp,4
2002a2bc:	f800283a 	ret

2002a2c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
2002a2c0:	defffc04 	addi	sp,sp,-16
2002a2c4:	df000315 	stw	fp,12(sp)
2002a2c8:	df000304 	addi	fp,sp,12
2002a2cc:	e13ffd15 	stw	r4,-12(fp)
2002a2d0:	e17ffe15 	stw	r5,-8(fp)
2002a2d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
2002a2d8:	e0bfff17 	ldw	r2,-4(fp)
}
2002a2dc:	e037883a 	mov	sp,fp
2002a2e0:	df000017 	ldw	fp,0(sp)
2002a2e4:	dec00104 	addi	sp,sp,4
2002a2e8:	f800283a 	ret

2002a2ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002a2ec:	defffe04 	addi	sp,sp,-8
2002a2f0:	dfc00115 	stw	ra,4(sp)
2002a2f4:	df000015 	stw	fp,0(sp)
2002a2f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002a2fc:	008800f4 	movhi	r2,8195
2002a300:	10ba6004 	addi	r2,r2,-5760
2002a304:	10800017 	ldw	r2,0(r2)
2002a308:	10000526 	beq	r2,zero,2002a320 <alt_get_errno+0x34>
2002a30c:	008800f4 	movhi	r2,8195
2002a310:	10ba6004 	addi	r2,r2,-5760
2002a314:	10800017 	ldw	r2,0(r2)
2002a318:	103ee83a 	callr	r2
2002a31c:	00000206 	br	2002a328 <alt_get_errno+0x3c>
2002a320:	008800f4 	movhi	r2,8195
2002a324:	10810104 	addi	r2,r2,1028
}
2002a328:	e037883a 	mov	sp,fp
2002a32c:	dfc00117 	ldw	ra,4(sp)
2002a330:	df000017 	ldw	fp,0(sp)
2002a334:	dec00204 	addi	sp,sp,8
2002a338:	f800283a 	ret

2002a33c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
2002a33c:	defffb04 	addi	sp,sp,-20
2002a340:	dfc00415 	stw	ra,16(sp)
2002a344:	df000315 	stw	fp,12(sp)
2002a348:	df000304 	addi	fp,sp,12
2002a34c:	e13ffe15 	stw	r4,-8(fp)
2002a350:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002a354:	e0bffe17 	ldw	r2,-8(fp)
2002a358:	10000616 	blt	r2,zero,2002a374 <fstat+0x38>
2002a35c:	e0bffe17 	ldw	r2,-8(fp)
2002a360:	10c00324 	muli	r3,r2,12
2002a364:	008800f4 	movhi	r2,8195
2002a368:	10b5de04 	addi	r2,r2,-10376
2002a36c:	1885883a 	add	r2,r3,r2
2002a370:	00000106 	br	2002a378 <fstat+0x3c>
2002a374:	0005883a 	mov	r2,zero
2002a378:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
2002a37c:	e0bffd17 	ldw	r2,-12(fp)
2002a380:	10001026 	beq	r2,zero,2002a3c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
2002a384:	e0bffd17 	ldw	r2,-12(fp)
2002a388:	10800017 	ldw	r2,0(r2)
2002a38c:	10800817 	ldw	r2,32(r2)
2002a390:	10000726 	beq	r2,zero,2002a3b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
2002a394:	e0bffd17 	ldw	r2,-12(fp)
2002a398:	10800017 	ldw	r2,0(r2)
2002a39c:	10800817 	ldw	r2,32(r2)
2002a3a0:	e13ffd17 	ldw	r4,-12(fp)
2002a3a4:	e17fff17 	ldw	r5,-4(fp)
2002a3a8:	103ee83a 	callr	r2
2002a3ac:	00000906 	br	2002a3d4 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
2002a3b0:	e0bfff17 	ldw	r2,-4(fp)
2002a3b4:	00c80004 	movi	r3,8192
2002a3b8:	10c00115 	stw	r3,4(r2)
      return 0;
2002a3bc:	0005883a 	mov	r2,zero
2002a3c0:	00000406 	br	2002a3d4 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002a3c4:	002a2ec0 	call	2002a2ec <alt_get_errno>
2002a3c8:	00c01444 	movi	r3,81
2002a3cc:	10c00015 	stw	r3,0(r2)
    return -1;
2002a3d0:	00bfffc4 	movi	r2,-1
  }
}
2002a3d4:	e037883a 	mov	sp,fp
2002a3d8:	dfc00117 	ldw	ra,4(sp)
2002a3dc:	df000017 	ldw	fp,0(sp)
2002a3e0:	dec00204 	addi	sp,sp,8
2002a3e4:	f800283a 	ret

2002a3e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002a3e8:	defffe04 	addi	sp,sp,-8
2002a3ec:	dfc00115 	stw	ra,4(sp)
2002a3f0:	df000015 	stw	fp,0(sp)
2002a3f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002a3f8:	008800f4 	movhi	r2,8195
2002a3fc:	10ba6004 	addi	r2,r2,-5760
2002a400:	10800017 	ldw	r2,0(r2)
2002a404:	10000526 	beq	r2,zero,2002a41c <alt_get_errno+0x34>
2002a408:	008800f4 	movhi	r2,8195
2002a40c:	10ba6004 	addi	r2,r2,-5760
2002a410:	10800017 	ldw	r2,0(r2)
2002a414:	103ee83a 	callr	r2
2002a418:	00000206 	br	2002a424 <alt_get_errno+0x3c>
2002a41c:	008800f4 	movhi	r2,8195
2002a420:	10810104 	addi	r2,r2,1028
}
2002a424:	e037883a 	mov	sp,fp
2002a428:	dfc00117 	ldw	ra,4(sp)
2002a42c:	df000017 	ldw	fp,0(sp)
2002a430:	dec00204 	addi	sp,sp,8
2002a434:	f800283a 	ret

2002a438 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
2002a438:	deffed04 	addi	sp,sp,-76
2002a43c:	dfc01215 	stw	ra,72(sp)
2002a440:	df001115 	stw	fp,68(sp)
2002a444:	df001104 	addi	fp,sp,68
2002a448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002a44c:	e0bfff17 	ldw	r2,-4(fp)
2002a450:	10000616 	blt	r2,zero,2002a46c <isatty+0x34>
2002a454:	e0bfff17 	ldw	r2,-4(fp)
2002a458:	10c00324 	muli	r3,r2,12
2002a45c:	008800f4 	movhi	r2,8195
2002a460:	10b5de04 	addi	r2,r2,-10376
2002a464:	1885883a 	add	r2,r3,r2
2002a468:	00000106 	br	2002a470 <isatty+0x38>
2002a46c:	0005883a 	mov	r2,zero
2002a470:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2002a474:	e0bfef17 	ldw	r2,-68(fp)
2002a478:	10000e26 	beq	r2,zero,2002a4b4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2002a47c:	e0bfef17 	ldw	r2,-68(fp)
2002a480:	10800017 	ldw	r2,0(r2)
2002a484:	10800817 	ldw	r2,32(r2)
2002a488:	1000021e 	bne	r2,zero,2002a494 <isatty+0x5c>
    {
      return 1;
2002a48c:	00800044 	movi	r2,1
2002a490:	00000c06 	br	2002a4c4 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2002a494:	e0bff004 	addi	r2,fp,-64
2002a498:	e13fff17 	ldw	r4,-4(fp)
2002a49c:	100b883a 	mov	r5,r2
2002a4a0:	002a33c0 	call	2002a33c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2002a4a4:	e0bff117 	ldw	r2,-60(fp)
2002a4a8:	10880020 	cmpeqi	r2,r2,8192
2002a4ac:	10803fcc 	andi	r2,r2,255
2002a4b0:	00000406 	br	2002a4c4 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2002a4b4:	002a3e80 	call	2002a3e8 <alt_get_errno>
2002a4b8:	00c01444 	movi	r3,81
2002a4bc:	10c00015 	stw	r3,0(r2)
    return 0;
2002a4c0:	0005883a 	mov	r2,zero
  }
}
2002a4c4:	e037883a 	mov	sp,fp
2002a4c8:	dfc00117 	ldw	ra,4(sp)
2002a4cc:	df000017 	ldw	fp,0(sp)
2002a4d0:	dec00204 	addi	sp,sp,8
2002a4d4:	f800283a 	ret

2002a4d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
2002a4d8:	defffc04 	addi	sp,sp,-16
2002a4dc:	df000315 	stw	fp,12(sp)
2002a4e0:	df000304 	addi	fp,sp,12
2002a4e4:	e13ffd15 	stw	r4,-12(fp)
2002a4e8:	e17ffe15 	stw	r5,-8(fp)
2002a4ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2002a4f0:	e0fffe17 	ldw	r3,-8(fp)
2002a4f4:	e0bffd17 	ldw	r2,-12(fp)
2002a4f8:	18800e26 	beq	r3,r2,2002a534 <alt_load_section+0x5c>
  {
    while( to != end )
2002a4fc:	00000a06 	br	2002a528 <alt_load_section+0x50>
    {
      *to++ = *from++;
2002a500:	e0bffd17 	ldw	r2,-12(fp)
2002a504:	10c00017 	ldw	r3,0(r2)
2002a508:	e0bffe17 	ldw	r2,-8(fp)
2002a50c:	10c00015 	stw	r3,0(r2)
2002a510:	e0bffe17 	ldw	r2,-8(fp)
2002a514:	10800104 	addi	r2,r2,4
2002a518:	e0bffe15 	stw	r2,-8(fp)
2002a51c:	e0bffd17 	ldw	r2,-12(fp)
2002a520:	10800104 	addi	r2,r2,4
2002a524:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
2002a528:	e0fffe17 	ldw	r3,-8(fp)
2002a52c:	e0bfff17 	ldw	r2,-4(fp)
2002a530:	18bff31e 	bne	r3,r2,2002a500 <__alt_data_end+0xfffeb100>
    {
      *to++ = *from++;
    }
  }
}
2002a534:	e037883a 	mov	sp,fp
2002a538:	df000017 	ldw	fp,0(sp)
2002a53c:	dec00104 	addi	sp,sp,4
2002a540:	f800283a 	ret

2002a544 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
2002a544:	defffe04 	addi	sp,sp,-8
2002a548:	dfc00115 	stw	ra,4(sp)
2002a54c:	df000015 	stw	fp,0(sp)
2002a550:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
2002a554:	010800f4 	movhi	r4,8195
2002a558:	213a6504 	addi	r4,r4,-5740
2002a55c:	014800f4 	movhi	r5,8195
2002a560:	2973cf04 	addi	r5,r5,-12484
2002a564:	018800f4 	movhi	r6,8195
2002a568:	31ba6504 	addi	r6,r6,-5740
2002a56c:	002a4d80 	call	2002a4d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2002a570:	010800b4 	movhi	r4,8194
2002a574:	21000804 	addi	r4,r4,32
2002a578:	014800b4 	movhi	r5,8194
2002a57c:	29400804 	addi	r5,r5,32
2002a580:	018800b4 	movhi	r6,8194
2002a584:	31806e04 	addi	r6,r6,440
2002a588:	002a4d80 	call	2002a4d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
2002a58c:	010800f4 	movhi	r4,8195
2002a590:	2132b404 	addi	r4,r4,-13616
2002a594:	014800f4 	movhi	r5,8195
2002a598:	2972b404 	addi	r5,r5,-13616
2002a59c:	018800f4 	movhi	r6,8195
2002a5a0:	31b3cf04 	addi	r6,r6,-12484
2002a5a4:	002a4d80 	call	2002a4d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2002a5a8:	002a27c0 	call	2002a27c <alt_dcache_flush_all>
  alt_icache_flush_all();
2002a5ac:	002bd580 	call	2002bd58 <alt_icache_flush_all>
}
2002a5b0:	e037883a 	mov	sp,fp
2002a5b4:	dfc00117 	ldw	ra,4(sp)
2002a5b8:	df000017 	ldw	fp,0(sp)
2002a5bc:	dec00204 	addi	sp,sp,8
2002a5c0:	f800283a 	ret

2002a5c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002a5c4:	defffe04 	addi	sp,sp,-8
2002a5c8:	dfc00115 	stw	ra,4(sp)
2002a5cc:	df000015 	stw	fp,0(sp)
2002a5d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002a5d4:	008800f4 	movhi	r2,8195
2002a5d8:	10ba6004 	addi	r2,r2,-5760
2002a5dc:	10800017 	ldw	r2,0(r2)
2002a5e0:	10000526 	beq	r2,zero,2002a5f8 <alt_get_errno+0x34>
2002a5e4:	008800f4 	movhi	r2,8195
2002a5e8:	10ba6004 	addi	r2,r2,-5760
2002a5ec:	10800017 	ldw	r2,0(r2)
2002a5f0:	103ee83a 	callr	r2
2002a5f4:	00000206 	br	2002a600 <alt_get_errno+0x3c>
2002a5f8:	008800f4 	movhi	r2,8195
2002a5fc:	10810104 	addi	r2,r2,1028
}
2002a600:	e037883a 	mov	sp,fp
2002a604:	dfc00117 	ldw	ra,4(sp)
2002a608:	df000017 	ldw	fp,0(sp)
2002a60c:	dec00204 	addi	sp,sp,8
2002a610:	f800283a 	ret

2002a614 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
2002a614:	defff904 	addi	sp,sp,-28
2002a618:	dfc00615 	stw	ra,24(sp)
2002a61c:	df000515 	stw	fp,20(sp)
2002a620:	df000504 	addi	fp,sp,20
2002a624:	e13ffd15 	stw	r4,-12(fp)
2002a628:	e17ffe15 	stw	r5,-8(fp)
2002a62c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2002a630:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002a634:	e0bffd17 	ldw	r2,-12(fp)
2002a638:	10000616 	blt	r2,zero,2002a654 <lseek+0x40>
2002a63c:	e0bffd17 	ldw	r2,-12(fp)
2002a640:	10c00324 	muli	r3,r2,12
2002a644:	008800f4 	movhi	r2,8195
2002a648:	10b5de04 	addi	r2,r2,-10376
2002a64c:	1885883a 	add	r2,r3,r2
2002a650:	00000106 	br	2002a658 <lseek+0x44>
2002a654:	0005883a 	mov	r2,zero
2002a658:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
2002a65c:	e0bffc17 	ldw	r2,-16(fp)
2002a660:	10001026 	beq	r2,zero,2002a6a4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
2002a664:	e0bffc17 	ldw	r2,-16(fp)
2002a668:	10800017 	ldw	r2,0(r2)
2002a66c:	10800717 	ldw	r2,28(r2)
2002a670:	10000926 	beq	r2,zero,2002a698 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
2002a674:	e0bffc17 	ldw	r2,-16(fp)
2002a678:	10800017 	ldw	r2,0(r2)
2002a67c:	10800717 	ldw	r2,28(r2)
2002a680:	e13ffc17 	ldw	r4,-16(fp)
2002a684:	e17ffe17 	ldw	r5,-8(fp)
2002a688:	e1bfff17 	ldw	r6,-4(fp)
2002a68c:	103ee83a 	callr	r2
2002a690:	e0bffb15 	stw	r2,-20(fp)
2002a694:	00000506 	br	2002a6ac <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2002a698:	00bfde84 	movi	r2,-134
2002a69c:	e0bffb15 	stw	r2,-20(fp)
2002a6a0:	00000206 	br	2002a6ac <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
2002a6a4:	00bfebc4 	movi	r2,-81
2002a6a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
2002a6ac:	e0bffb17 	ldw	r2,-20(fp)
2002a6b0:	1000060e 	bge	r2,zero,2002a6cc <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
2002a6b4:	002a5c40 	call	2002a5c4 <alt_get_errno>
2002a6b8:	e0fffb17 	ldw	r3,-20(fp)
2002a6bc:	00c7c83a 	sub	r3,zero,r3
2002a6c0:	10c00015 	stw	r3,0(r2)
    rc = -1;
2002a6c4:	00bfffc4 	movi	r2,-1
2002a6c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
2002a6cc:	e0bffb17 	ldw	r2,-20(fp)
}
2002a6d0:	e037883a 	mov	sp,fp
2002a6d4:	dfc00117 	ldw	ra,4(sp)
2002a6d8:	df000017 	ldw	fp,0(sp)
2002a6dc:	dec00204 	addi	sp,sp,8
2002a6e0:	f800283a 	ret

2002a6e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2002a6e4:	defffd04 	addi	sp,sp,-12
2002a6e8:	dfc00215 	stw	ra,8(sp)
2002a6ec:	df000115 	stw	fp,4(sp)
2002a6f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2002a6f4:	0009883a 	mov	r4,zero
2002a6f8:	002ad2c0 	call	2002ad2c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
2002a6fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
2002a700:	002ad600 	call	2002ad60 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2002a704:	010800f4 	movhi	r4,8195
2002a708:	2133c704 	addi	r4,r4,-12516
2002a70c:	014800f4 	movhi	r5,8195
2002a710:	2973c704 	addi	r5,r5,-12516
2002a714:	018800f4 	movhi	r6,8195
2002a718:	31b3c704 	addi	r6,r6,-12516
2002a71c:	002c1100 	call	2002c110 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
2002a720:	002bca00 	call	2002bca0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
2002a724:	010800f4 	movhi	r4,8195
2002a728:	212f3f04 	addi	r4,r4,-17156
2002a72c:	002c6fc0 	call	2002c6fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
2002a730:	d126ac17 	ldw	r4,-25936(gp)
2002a734:	d0e6ad17 	ldw	r3,-25932(gp)
2002a738:	d0a6ae17 	ldw	r2,-25928(gp)
2002a73c:	180b883a 	mov	r5,r3
2002a740:	100d883a 	mov	r6,r2
2002a744:	00202040 	call	20020204 <main>
2002a748:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2002a74c:	01000044 	movi	r4,1
2002a750:	002a1b40 	call	2002a1b4 <close>
  exit (result);
2002a754:	e13fff17 	ldw	r4,-4(fp)
2002a758:	002c7100 	call	2002c710 <exit>

2002a75c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2002a75c:	defffe04 	addi	sp,sp,-8
2002a760:	df000115 	stw	fp,4(sp)
2002a764:	df000104 	addi	fp,sp,4
2002a768:	e13fff15 	stw	r4,-4(fp)
}
2002a76c:	e037883a 	mov	sp,fp
2002a770:	df000017 	ldw	fp,0(sp)
2002a774:	dec00104 	addi	sp,sp,4
2002a778:	f800283a 	ret

2002a77c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2002a77c:	defffe04 	addi	sp,sp,-8
2002a780:	df000115 	stw	fp,4(sp)
2002a784:	df000104 	addi	fp,sp,4
2002a788:	e13fff15 	stw	r4,-4(fp)
}
2002a78c:	e037883a 	mov	sp,fp
2002a790:	df000017 	ldw	fp,0(sp)
2002a794:	dec00104 	addi	sp,sp,4
2002a798:	f800283a 	ret

2002a79c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002a79c:	defffe04 	addi	sp,sp,-8
2002a7a0:	dfc00115 	stw	ra,4(sp)
2002a7a4:	df000015 	stw	fp,0(sp)
2002a7a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002a7ac:	008800f4 	movhi	r2,8195
2002a7b0:	10ba6004 	addi	r2,r2,-5760
2002a7b4:	10800017 	ldw	r2,0(r2)
2002a7b8:	10000526 	beq	r2,zero,2002a7d0 <alt_get_errno+0x34>
2002a7bc:	008800f4 	movhi	r2,8195
2002a7c0:	10ba6004 	addi	r2,r2,-5760
2002a7c4:	10800017 	ldw	r2,0(r2)
2002a7c8:	103ee83a 	callr	r2
2002a7cc:	00000206 	br	2002a7d8 <alt_get_errno+0x3c>
2002a7d0:	008800f4 	movhi	r2,8195
2002a7d4:	10810104 	addi	r2,r2,1028
}
2002a7d8:	e037883a 	mov	sp,fp
2002a7dc:	dfc00117 	ldw	ra,4(sp)
2002a7e0:	df000017 	ldw	fp,0(sp)
2002a7e4:	dec00204 	addi	sp,sp,8
2002a7e8:	f800283a 	ret

2002a7ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
2002a7ec:	defff904 	addi	sp,sp,-28
2002a7f0:	dfc00615 	stw	ra,24(sp)
2002a7f4:	df000515 	stw	fp,20(sp)
2002a7f8:	df000504 	addi	fp,sp,20
2002a7fc:	e13ffd15 	stw	r4,-12(fp)
2002a800:	e17ffe15 	stw	r5,-8(fp)
2002a804:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002a808:	e0bffd17 	ldw	r2,-12(fp)
2002a80c:	10000616 	blt	r2,zero,2002a828 <read+0x3c>
2002a810:	e0bffd17 	ldw	r2,-12(fp)
2002a814:	10c00324 	muli	r3,r2,12
2002a818:	008800f4 	movhi	r2,8195
2002a81c:	10b5de04 	addi	r2,r2,-10376
2002a820:	1885883a 	add	r2,r3,r2
2002a824:	00000106 	br	2002a82c <read+0x40>
2002a828:	0005883a 	mov	r2,zero
2002a82c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002a830:	e0bffb17 	ldw	r2,-20(fp)
2002a834:	10002026 	beq	r2,zero,2002a8b8 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002a838:	e0bffb17 	ldw	r2,-20(fp)
2002a83c:	10800217 	ldw	r2,8(r2)
2002a840:	108000cc 	andi	r2,r2,3
2002a844:	10800060 	cmpeqi	r2,r2,1
2002a848:	1000171e 	bne	r2,zero,2002a8a8 <read+0xbc>
        (fd->dev->read))
2002a84c:	e0bffb17 	ldw	r2,-20(fp)
2002a850:	10800017 	ldw	r2,0(r2)
2002a854:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
2002a858:	10001326 	beq	r2,zero,2002a8a8 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2002a85c:	e0bffb17 	ldw	r2,-20(fp)
2002a860:	10800017 	ldw	r2,0(r2)
2002a864:	10c00517 	ldw	r3,20(r2)
2002a868:	e0bfff17 	ldw	r2,-4(fp)
2002a86c:	e13ffb17 	ldw	r4,-20(fp)
2002a870:	e17ffe17 	ldw	r5,-8(fp)
2002a874:	100d883a 	mov	r6,r2
2002a878:	183ee83a 	callr	r3
2002a87c:	e0bffc15 	stw	r2,-16(fp)
2002a880:	e0bffc17 	ldw	r2,-16(fp)
2002a884:	1000060e 	bge	r2,zero,2002a8a0 <read+0xb4>
        {
          ALT_ERRNO = -rval;
2002a888:	002a79c0 	call	2002a79c <alt_get_errno>
2002a88c:	e0fffc17 	ldw	r3,-16(fp)
2002a890:	00c7c83a 	sub	r3,zero,r3
2002a894:	10c00015 	stw	r3,0(r2)
          return -1;
2002a898:	00bfffc4 	movi	r2,-1
2002a89c:	00000a06 	br	2002a8c8 <read+0xdc>
        }
        return rval;
2002a8a0:	e0bffc17 	ldw	r2,-16(fp)
2002a8a4:	00000806 	br	2002a8c8 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
2002a8a8:	002a79c0 	call	2002a79c <alt_get_errno>
2002a8ac:	00c00344 	movi	r3,13
2002a8b0:	10c00015 	stw	r3,0(r2)
2002a8b4:	00000306 	br	2002a8c4 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
2002a8b8:	002a79c0 	call	2002a79c <alt_get_errno>
2002a8bc:	00c01444 	movi	r3,81
2002a8c0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
2002a8c4:	00bfffc4 	movi	r2,-1
}
2002a8c8:	e037883a 	mov	sp,fp
2002a8cc:	dfc00117 	ldw	ra,4(sp)
2002a8d0:	df000017 	ldw	fp,0(sp)
2002a8d4:	dec00204 	addi	sp,sp,8
2002a8d8:	f800283a 	ret

2002a8dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
2002a8dc:	defffe04 	addi	sp,sp,-8
2002a8e0:	df000115 	stw	fp,4(sp)
2002a8e4:	df000104 	addi	fp,sp,4
2002a8e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
2002a8ec:	e0bfff17 	ldw	r2,-4(fp)
2002a8f0:	108000d0 	cmplti	r2,r2,3
2002a8f4:	10000d1e 	bne	r2,zero,2002a92c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2002a8f8:	00c800f4 	movhi	r3,8195
2002a8fc:	18f5de04 	addi	r3,r3,-10376
2002a900:	e0bfff17 	ldw	r2,-4(fp)
2002a904:	10800324 	muli	r2,r2,12
2002a908:	1885883a 	add	r2,r3,r2
2002a90c:	10800204 	addi	r2,r2,8
2002a910:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2002a914:	00c800f4 	movhi	r3,8195
2002a918:	18f5de04 	addi	r3,r3,-10376
2002a91c:	e0bfff17 	ldw	r2,-4(fp)
2002a920:	10800324 	muli	r2,r2,12
2002a924:	1885883a 	add	r2,r3,r2
2002a928:	10000015 	stw	zero,0(r2)
  }
}
2002a92c:	e037883a 	mov	sp,fp
2002a930:	df000017 	ldw	fp,0(sp)
2002a934:	dec00104 	addi	sp,sp,4
2002a938:	f800283a 	ret

2002a93c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2002a93c:	defff904 	addi	sp,sp,-28
2002a940:	df000615 	stw	fp,24(sp)
2002a944:	df000604 	addi	fp,sp,24
2002a948:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a94c:	0005303a 	rdctl	r2,status
2002a950:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002a954:	e0fffc17 	ldw	r3,-16(fp)
2002a958:	00bfff84 	movi	r2,-2
2002a95c:	1884703a 	and	r2,r3,r2
2002a960:	1001703a 	wrctl	status,r2
  
  return context;
2002a964:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2002a968:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2002a96c:	d0a00b17 	ldw	r2,-32724(gp)
2002a970:	10c000c4 	addi	r3,r2,3
2002a974:	00bfff04 	movi	r2,-4
2002a978:	1884703a 	and	r2,r3,r2
2002a97c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2002a980:	d0e00b17 	ldw	r3,-32724(gp)
2002a984:	e0bfff17 	ldw	r2,-4(fp)
2002a988:	1885883a 	add	r2,r3,r2
2002a98c:	00c80134 	movhi	r3,8196
2002a990:	18fd0004 	addi	r3,r3,-3072
2002a994:	1880062e 	bgeu	r3,r2,2002a9b0 <sbrk+0x74>
2002a998:	e0bffa17 	ldw	r2,-24(fp)
2002a99c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002a9a0:	e0bffd17 	ldw	r2,-12(fp)
2002a9a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2002a9a8:	00bfffc4 	movi	r2,-1
2002a9ac:	00000b06 	br	2002a9dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2002a9b0:	d0a00b17 	ldw	r2,-32724(gp)
2002a9b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
2002a9b8:	d0e00b17 	ldw	r3,-32724(gp)
2002a9bc:	e0bfff17 	ldw	r2,-4(fp)
2002a9c0:	1885883a 	add	r2,r3,r2
2002a9c4:	d0a00b15 	stw	r2,-32724(gp)
2002a9c8:	e0bffa17 	ldw	r2,-24(fp)
2002a9cc:	e0bffe15 	stw	r2,-8(fp)
2002a9d0:	e0bffe17 	ldw	r2,-8(fp)
2002a9d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2002a9d8:	e0bffb17 	ldw	r2,-20(fp)
} 
2002a9dc:	e037883a 	mov	sp,fp
2002a9e0:	df000017 	ldw	fp,0(sp)
2002a9e4:	dec00104 	addi	sp,sp,4
2002a9e8:	f800283a 	ret

2002a9ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
2002a9ec:	defffa04 	addi	sp,sp,-24
2002a9f0:	df000515 	stw	fp,20(sp)
2002a9f4:	df000504 	addi	fp,sp,20
2002a9f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002a9fc:	0005303a 	rdctl	r2,status
2002aa00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002aa04:	e0fffc17 	ldw	r3,-16(fp)
2002aa08:	00bfff84 	movi	r2,-2
2002aa0c:	1884703a 	and	r2,r3,r2
2002aa10:	1001703a 	wrctl	status,r2
  
  return context;
2002aa14:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
2002aa18:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
2002aa1c:	e0bfff17 	ldw	r2,-4(fp)
2002aa20:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
2002aa24:	e0bffd17 	ldw	r2,-12(fp)
2002aa28:	10800017 	ldw	r2,0(r2)
2002aa2c:	e0fffd17 	ldw	r3,-12(fp)
2002aa30:	18c00117 	ldw	r3,4(r3)
2002aa34:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
2002aa38:	e0bffd17 	ldw	r2,-12(fp)
2002aa3c:	10800117 	ldw	r2,4(r2)
2002aa40:	e0fffd17 	ldw	r3,-12(fp)
2002aa44:	18c00017 	ldw	r3,0(r3)
2002aa48:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
2002aa4c:	e0bffd17 	ldw	r2,-12(fp)
2002aa50:	e0fffd17 	ldw	r3,-12(fp)
2002aa54:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
2002aa58:	e0bffd17 	ldw	r2,-12(fp)
2002aa5c:	e0fffd17 	ldw	r3,-12(fp)
2002aa60:	10c00015 	stw	r3,0(r2)
2002aa64:	e0bffb17 	ldw	r2,-20(fp)
2002aa68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002aa6c:	e0bffe17 	ldw	r2,-8(fp)
2002aa70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
2002aa74:	e037883a 	mov	sp,fp
2002aa78:	df000017 	ldw	fp,0(sp)
2002aa7c:	dec00104 	addi	sp,sp,4
2002aa80:	f800283a 	ret

2002aa84 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
2002aa84:	defffb04 	addi	sp,sp,-20
2002aa88:	dfc00415 	stw	ra,16(sp)
2002aa8c:	df000315 	stw	fp,12(sp)
2002aa90:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
2002aa94:	d0a00c17 	ldw	r2,-32720(gp)
2002aa98:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2002aa9c:	d0a6b017 	ldw	r2,-25920(gp)
2002aaa0:	10800044 	addi	r2,r2,1
2002aaa4:	d0a6b015 	stw	r2,-25920(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2002aaa8:	00002e06 	br	2002ab64 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
2002aaac:	e0bffd17 	ldw	r2,-12(fp)
2002aab0:	10800017 	ldw	r2,0(r2)
2002aab4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
2002aab8:	e0bffd17 	ldw	r2,-12(fp)
2002aabc:	10800403 	ldbu	r2,16(r2)
2002aac0:	10803fcc 	andi	r2,r2,255
2002aac4:	10000426 	beq	r2,zero,2002aad8 <alt_tick+0x54>
2002aac8:	d0a6b017 	ldw	r2,-25920(gp)
2002aacc:	1000021e 	bne	r2,zero,2002aad8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
2002aad0:	e0bffd17 	ldw	r2,-12(fp)
2002aad4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
2002aad8:	e0bffd17 	ldw	r2,-12(fp)
2002aadc:	10800217 	ldw	r2,8(r2)
2002aae0:	d0e6b017 	ldw	r3,-25920(gp)
2002aae4:	18801d36 	bltu	r3,r2,2002ab5c <alt_tick+0xd8>
2002aae8:	e0bffd17 	ldw	r2,-12(fp)
2002aaec:	10800403 	ldbu	r2,16(r2)
2002aaf0:	10803fcc 	andi	r2,r2,255
2002aaf4:	1000191e 	bne	r2,zero,2002ab5c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
2002aaf8:	e0bffd17 	ldw	r2,-12(fp)
2002aafc:	10c00317 	ldw	r3,12(r2)
2002ab00:	e0bffd17 	ldw	r2,-12(fp)
2002ab04:	10800517 	ldw	r2,20(r2)
2002ab08:	1009883a 	mov	r4,r2
2002ab0c:	183ee83a 	callr	r3
2002ab10:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
2002ab14:	e0bfff17 	ldw	r2,-4(fp)
2002ab18:	1000031e 	bne	r2,zero,2002ab28 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
2002ab1c:	e13ffd17 	ldw	r4,-12(fp)
2002ab20:	002a9ec0 	call	2002a9ec <alt_alarm_stop>
2002ab24:	00000d06 	br	2002ab5c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
2002ab28:	e0bffd17 	ldw	r2,-12(fp)
2002ab2c:	10c00217 	ldw	r3,8(r2)
2002ab30:	e0bfff17 	ldw	r2,-4(fp)
2002ab34:	1887883a 	add	r3,r3,r2
2002ab38:	e0bffd17 	ldw	r2,-12(fp)
2002ab3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2002ab40:	e0bffd17 	ldw	r2,-12(fp)
2002ab44:	10c00217 	ldw	r3,8(r2)
2002ab48:	d0a6b017 	ldw	r2,-25920(gp)
2002ab4c:	1880032e 	bgeu	r3,r2,2002ab5c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
2002ab50:	e0bffd17 	ldw	r2,-12(fp)
2002ab54:	00c00044 	movi	r3,1
2002ab58:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
2002ab5c:	e0bffe17 	ldw	r2,-8(fp)
2002ab60:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2002ab64:	e0fffd17 	ldw	r3,-12(fp)
2002ab68:	d0a00c04 	addi	r2,gp,-32720
2002ab6c:	18bfcf1e 	bne	r3,r2,2002aaac <__alt_data_end+0xfffeb6ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
2002ab70:	0001883a 	nop
}
2002ab74:	e037883a 	mov	sp,fp
2002ab78:	dfc00117 	ldw	ra,4(sp)
2002ab7c:	df000017 	ldw	fp,0(sp)
2002ab80:	dec00204 	addi	sp,sp,8
2002ab84:	f800283a 	ret

2002ab88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
2002ab88:	defffd04 	addi	sp,sp,-12
2002ab8c:	dfc00215 	stw	ra,8(sp)
2002ab90:	df000115 	stw	fp,4(sp)
2002ab94:	df000104 	addi	fp,sp,4
2002ab98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
2002ab9c:	e13fff17 	ldw	r4,-4(fp)
2002aba0:	002ba5c0 	call	2002ba5c <alt_busy_sleep>
}
2002aba4:	e037883a 	mov	sp,fp
2002aba8:	dfc00117 	ldw	ra,4(sp)
2002abac:	df000017 	ldw	fp,0(sp)
2002abb0:	dec00204 	addi	sp,sp,8
2002abb4:	f800283a 	ret

2002abb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002abb8:	defffe04 	addi	sp,sp,-8
2002abbc:	dfc00115 	stw	ra,4(sp)
2002abc0:	df000015 	stw	fp,0(sp)
2002abc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002abc8:	008800f4 	movhi	r2,8195
2002abcc:	10ba6004 	addi	r2,r2,-5760
2002abd0:	10800017 	ldw	r2,0(r2)
2002abd4:	10000526 	beq	r2,zero,2002abec <alt_get_errno+0x34>
2002abd8:	008800f4 	movhi	r2,8195
2002abdc:	10ba6004 	addi	r2,r2,-5760
2002abe0:	10800017 	ldw	r2,0(r2)
2002abe4:	103ee83a 	callr	r2
2002abe8:	00000206 	br	2002abf4 <alt_get_errno+0x3c>
2002abec:	008800f4 	movhi	r2,8195
2002abf0:	10810104 	addi	r2,r2,1028
}
2002abf4:	e037883a 	mov	sp,fp
2002abf8:	dfc00117 	ldw	ra,4(sp)
2002abfc:	df000017 	ldw	fp,0(sp)
2002ac00:	dec00204 	addi	sp,sp,8
2002ac04:	f800283a 	ret

2002ac08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2002ac08:	defff904 	addi	sp,sp,-28
2002ac0c:	dfc00615 	stw	ra,24(sp)
2002ac10:	df000515 	stw	fp,20(sp)
2002ac14:	df000504 	addi	fp,sp,20
2002ac18:	e13ffd15 	stw	r4,-12(fp)
2002ac1c:	e17ffe15 	stw	r5,-8(fp)
2002ac20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2002ac24:	e0bffd17 	ldw	r2,-12(fp)
2002ac28:	10000616 	blt	r2,zero,2002ac44 <write+0x3c>
2002ac2c:	e0bffd17 	ldw	r2,-12(fp)
2002ac30:	10c00324 	muli	r3,r2,12
2002ac34:	008800f4 	movhi	r2,8195
2002ac38:	10b5de04 	addi	r2,r2,-10376
2002ac3c:	1885883a 	add	r2,r3,r2
2002ac40:	00000106 	br	2002ac48 <write+0x40>
2002ac44:	0005883a 	mov	r2,zero
2002ac48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2002ac4c:	e0bffb17 	ldw	r2,-20(fp)
2002ac50:	10001f26 	beq	r2,zero,2002acd0 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2002ac54:	e0bffb17 	ldw	r2,-20(fp)
2002ac58:	10800217 	ldw	r2,8(r2)
2002ac5c:	108000cc 	andi	r2,r2,3
2002ac60:	10001726 	beq	r2,zero,2002acc0 <write+0xb8>
2002ac64:	e0bffb17 	ldw	r2,-20(fp)
2002ac68:	10800017 	ldw	r2,0(r2)
2002ac6c:	10800617 	ldw	r2,24(r2)
2002ac70:	10001326 	beq	r2,zero,2002acc0 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2002ac74:	e0bffb17 	ldw	r2,-20(fp)
2002ac78:	10800017 	ldw	r2,0(r2)
2002ac7c:	10c00617 	ldw	r3,24(r2)
2002ac80:	e0bfff17 	ldw	r2,-4(fp)
2002ac84:	e13ffb17 	ldw	r4,-20(fp)
2002ac88:	e17ffe17 	ldw	r5,-8(fp)
2002ac8c:	100d883a 	mov	r6,r2
2002ac90:	183ee83a 	callr	r3
2002ac94:	e0bffc15 	stw	r2,-16(fp)
2002ac98:	e0bffc17 	ldw	r2,-16(fp)
2002ac9c:	1000060e 	bge	r2,zero,2002acb8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
2002aca0:	002abb80 	call	2002abb8 <alt_get_errno>
2002aca4:	e0fffc17 	ldw	r3,-16(fp)
2002aca8:	00c7c83a 	sub	r3,zero,r3
2002acac:	10c00015 	stw	r3,0(r2)
        return -1;
2002acb0:	00bfffc4 	movi	r2,-1
2002acb4:	00000a06 	br	2002ace0 <write+0xd8>
      }
      return rval;
2002acb8:	e0bffc17 	ldw	r2,-16(fp)
2002acbc:	00000806 	br	2002ace0 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
2002acc0:	002abb80 	call	2002abb8 <alt_get_errno>
2002acc4:	00c00344 	movi	r3,13
2002acc8:	10c00015 	stw	r3,0(r2)
2002accc:	00000306 	br	2002acdc <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2002acd0:	002abb80 	call	2002abb8 <alt_get_errno>
2002acd4:	00c01444 	movi	r3,81
2002acd8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
2002acdc:	00bfffc4 	movi	r2,-1
}
2002ace0:	e037883a 	mov	sp,fp
2002ace4:	dfc00117 	ldw	ra,4(sp)
2002ace8:	df000017 	ldw	fp,0(sp)
2002acec:	dec00204 	addi	sp,sp,8
2002acf0:	f800283a 	ret

2002acf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2002acf4:	defffd04 	addi	sp,sp,-12
2002acf8:	dfc00215 	stw	ra,8(sp)
2002acfc:	df000115 	stw	fp,4(sp)
2002ad00:	df000104 	addi	fp,sp,4
2002ad04:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2002ad08:	e13fff17 	ldw	r4,-4(fp)
2002ad0c:	014800f4 	movhi	r5,8195
2002ad10:	297a5d04 	addi	r5,r5,-5772
2002ad14:	002bc000 	call	2002bc00 <alt_dev_llist_insert>
}
2002ad18:	e037883a 	mov	sp,fp
2002ad1c:	dfc00117 	ldw	ra,4(sp)
2002ad20:	df000017 	ldw	fp,0(sp)
2002ad24:	dec00204 	addi	sp,sp,8
2002ad28:	f800283a 	ret

2002ad2c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2002ad2c:	defffd04 	addi	sp,sp,-12
2002ad30:	dfc00215 	stw	ra,8(sp)
2002ad34:	df000115 	stw	fp,4(sp)
2002ad38:	df000104 	addi	fp,sp,4
2002ad3c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
2002ad40:	002c3f80 	call	2002c3f8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2002ad44:	00800044 	movi	r2,1
2002ad48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2002ad4c:	e037883a 	mov	sp,fp
2002ad50:	dfc00117 	ldw	ra,4(sp)
2002ad54:	df000017 	ldw	fp,0(sp)
2002ad58:	dec00204 	addi	sp,sp,8
2002ad5c:	f800283a 	ret

2002ad60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2002ad60:	defffe04 	addi	sp,sp,-8
2002ad64:	dfc00115 	stw	ra,4(sp)
2002ad68:	df000015 	stw	fp,0(sp)
2002ad6c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
2002ad70:	01080134 	movhi	r4,8196
2002ad74:	21040004 	addi	r4,r4,4096
2002ad78:	000b883a 	mov	r5,zero
2002ad7c:	000d883a 	mov	r6,zero
2002ad80:	01c0fa04 	movi	r7,1000
2002ad84:	002b8940 	call	2002b894 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2002ad88:	010800f4 	movhi	r4,8195
2002ad8c:	21364804 	addi	r4,r4,-9952
2002ad90:	000b883a 	mov	r5,zero
2002ad94:	01800044 	movi	r6,1
2002ad98:	002af240 	call	2002af24 <altera_avalon_jtag_uart_init>
2002ad9c:	010800f4 	movhi	r4,8195
2002ada0:	21363e04 	addi	r4,r4,-9992
2002ada4:	002acf40 	call	2002acf4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
2002ada8:	0001883a 	nop
}
2002adac:	e037883a 	mov	sp,fp
2002adb0:	dfc00117 	ldw	ra,4(sp)
2002adb4:	df000017 	ldw	fp,0(sp)
2002adb8:	dec00204 	addi	sp,sp,8
2002adbc:	f800283a 	ret

2002adc0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2002adc0:	defffa04 	addi	sp,sp,-24
2002adc4:	dfc00515 	stw	ra,20(sp)
2002adc8:	df000415 	stw	fp,16(sp)
2002adcc:	df000404 	addi	fp,sp,16
2002add0:	e13ffd15 	stw	r4,-12(fp)
2002add4:	e17ffe15 	stw	r5,-8(fp)
2002add8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002addc:	e0bffd17 	ldw	r2,-12(fp)
2002ade0:	10800017 	ldw	r2,0(r2)
2002ade4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2002ade8:	e0bffc17 	ldw	r2,-16(fp)
2002adec:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
2002adf0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2002adf4:	10800217 	ldw	r2,8(r2)
2002adf8:	1809883a 	mov	r4,r3
2002adfc:	e17ffe17 	ldw	r5,-8(fp)
2002ae00:	e1bfff17 	ldw	r6,-4(fp)
2002ae04:	100f883a 	mov	r7,r2
2002ae08:	002b3e80 	call	2002b3e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2002ae0c:	e037883a 	mov	sp,fp
2002ae10:	dfc00117 	ldw	ra,4(sp)
2002ae14:	df000017 	ldw	fp,0(sp)
2002ae18:	dec00204 	addi	sp,sp,8
2002ae1c:	f800283a 	ret

2002ae20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2002ae20:	defffa04 	addi	sp,sp,-24
2002ae24:	dfc00515 	stw	ra,20(sp)
2002ae28:	df000415 	stw	fp,16(sp)
2002ae2c:	df000404 	addi	fp,sp,16
2002ae30:	e13ffd15 	stw	r4,-12(fp)
2002ae34:	e17ffe15 	stw	r5,-8(fp)
2002ae38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002ae3c:	e0bffd17 	ldw	r2,-12(fp)
2002ae40:	10800017 	ldw	r2,0(r2)
2002ae44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2002ae48:	e0bffc17 	ldw	r2,-16(fp)
2002ae4c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
2002ae50:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2002ae54:	10800217 	ldw	r2,8(r2)
2002ae58:	1809883a 	mov	r4,r3
2002ae5c:	e17ffe17 	ldw	r5,-8(fp)
2002ae60:	e1bfff17 	ldw	r6,-4(fp)
2002ae64:	100f883a 	mov	r7,r2
2002ae68:	002b6000 	call	2002b600 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2002ae6c:	e037883a 	mov	sp,fp
2002ae70:	dfc00117 	ldw	ra,4(sp)
2002ae74:	df000017 	ldw	fp,0(sp)
2002ae78:	dec00204 	addi	sp,sp,8
2002ae7c:	f800283a 	ret

2002ae80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2002ae80:	defffc04 	addi	sp,sp,-16
2002ae84:	dfc00315 	stw	ra,12(sp)
2002ae88:	df000215 	stw	fp,8(sp)
2002ae8c:	df000204 	addi	fp,sp,8
2002ae90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2002ae94:	e0bfff17 	ldw	r2,-4(fp)
2002ae98:	10800017 	ldw	r2,0(r2)
2002ae9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2002aea0:	e0bffe17 	ldw	r2,-8(fp)
2002aea4:	10c00a04 	addi	r3,r2,40
2002aea8:	e0bfff17 	ldw	r2,-4(fp)
2002aeac:	10800217 	ldw	r2,8(r2)
2002aeb0:	1809883a 	mov	r4,r3
2002aeb4:	100b883a 	mov	r5,r2
2002aeb8:	002b28c0 	call	2002b28c <altera_avalon_jtag_uart_close>
}
2002aebc:	e037883a 	mov	sp,fp
2002aec0:	dfc00117 	ldw	ra,4(sp)
2002aec4:	df000017 	ldw	fp,0(sp)
2002aec8:	dec00204 	addi	sp,sp,8
2002aecc:	f800283a 	ret

2002aed0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2002aed0:	defffa04 	addi	sp,sp,-24
2002aed4:	dfc00515 	stw	ra,20(sp)
2002aed8:	df000415 	stw	fp,16(sp)
2002aedc:	df000404 	addi	fp,sp,16
2002aee0:	e13ffd15 	stw	r4,-12(fp)
2002aee4:	e17ffe15 	stw	r5,-8(fp)
2002aee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2002aeec:	e0bffd17 	ldw	r2,-12(fp)
2002aef0:	10800017 	ldw	r2,0(r2)
2002aef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2002aef8:	e0bffc17 	ldw	r2,-16(fp)
2002aefc:	10800a04 	addi	r2,r2,40
2002af00:	1009883a 	mov	r4,r2
2002af04:	e17ffe17 	ldw	r5,-8(fp)
2002af08:	e1bfff17 	ldw	r6,-4(fp)
2002af0c:	002b2f40 	call	2002b2f4 <altera_avalon_jtag_uart_ioctl>
}
2002af10:	e037883a 	mov	sp,fp
2002af14:	dfc00117 	ldw	ra,4(sp)
2002af18:	df000017 	ldw	fp,0(sp)
2002af1c:	dec00204 	addi	sp,sp,8
2002af20:	f800283a 	ret

2002af24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2002af24:	defffa04 	addi	sp,sp,-24
2002af28:	dfc00515 	stw	ra,20(sp)
2002af2c:	df000415 	stw	fp,16(sp)
2002af30:	df000404 	addi	fp,sp,16
2002af34:	e13ffd15 	stw	r4,-12(fp)
2002af38:	e17ffe15 	stw	r5,-8(fp)
2002af3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002af40:	e0bffd17 	ldw	r2,-12(fp)
2002af44:	00c00044 	movi	r3,1
2002af48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2002af4c:	e0bffd17 	ldw	r2,-12(fp)
2002af50:	10800017 	ldw	r2,0(r2)
2002af54:	10800104 	addi	r2,r2,4
2002af58:	e0fffd17 	ldw	r3,-12(fp)
2002af5c:	18c00817 	ldw	r3,32(r3)
2002af60:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2002af64:	e0fffe17 	ldw	r3,-8(fp)
2002af68:	e0bfff17 	ldw	r2,-4(fp)
2002af6c:	d8000015 	stw	zero,0(sp)
2002af70:	1809883a 	mov	r4,r3
2002af74:	100b883a 	mov	r5,r2
2002af78:	018800f4 	movhi	r6,8195
2002af7c:	31abf904 	addi	r6,r6,-20508
2002af80:	e1fffd17 	ldw	r7,-12(fp)
2002af84:	002bd880 	call	2002bd88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2002af88:	e0bffd17 	ldw	r2,-12(fp)
2002af8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2002af90:	e0bffd17 	ldw	r2,-12(fp)
2002af94:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2002af98:	008800f4 	movhi	r2,8195
2002af9c:	10810504 	addi	r2,r2,1044
2002afa0:	10800017 	ldw	r2,0(r2)
2002afa4:	1809883a 	mov	r4,r3
2002afa8:	100b883a 	mov	r5,r2
2002afac:	018800f4 	movhi	r6,8195
2002afb0:	31ac7a04 	addi	r6,r6,-19992
2002afb4:	e1fffd17 	ldw	r7,-12(fp)
2002afb8:	002b91c0 	call	2002b91c <alt_alarm_start>
2002afbc:	1000040e 	bge	r2,zero,2002afd0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2002afc0:	e0bffd17 	ldw	r2,-12(fp)
2002afc4:	00e00034 	movhi	r3,32768
2002afc8:	18ffffc4 	addi	r3,r3,-1
2002afcc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2002afd0:	e037883a 	mov	sp,fp
2002afd4:	dfc00117 	ldw	ra,4(sp)
2002afd8:	df000017 	ldw	fp,0(sp)
2002afdc:	dec00204 	addi	sp,sp,8
2002afe0:	f800283a 	ret

2002afe4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2002afe4:	defff804 	addi	sp,sp,-32
2002afe8:	df000715 	stw	fp,28(sp)
2002afec:	df000704 	addi	fp,sp,28
2002aff0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2002aff4:	e0bfff17 	ldw	r2,-4(fp)
2002aff8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2002affc:	e0bffb17 	ldw	r2,-20(fp)
2002b000:	10800017 	ldw	r2,0(r2)
2002b004:	e0bffc15 	stw	r2,-16(fp)
2002b008:	00000106 	br	2002b010 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
2002b00c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002b010:	e0bffc17 	ldw	r2,-16(fp)
2002b014:	10800104 	addi	r2,r2,4
2002b018:	10800037 	ldwio	r2,0(r2)
2002b01c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2002b020:	e0bffd17 	ldw	r2,-12(fp)
2002b024:	1080c00c 	andi	r2,r2,768
2002b028:	10006a26 	beq	r2,zero,2002b1d4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2002b02c:	e0bffd17 	ldw	r2,-12(fp)
2002b030:	1080400c 	andi	r2,r2,256
2002b034:	10003326 	beq	r2,zero,2002b104 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2002b038:	00800074 	movhi	r2,1
2002b03c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b040:	e0bffb17 	ldw	r2,-20(fp)
2002b044:	10800a17 	ldw	r2,40(r2)
2002b048:	10800044 	addi	r2,r2,1
2002b04c:	1081ffcc 	andi	r2,r2,2047
2002b050:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2002b054:	e0bffb17 	ldw	r2,-20(fp)
2002b058:	10c00b17 	ldw	r3,44(r2)
2002b05c:	e0bffe17 	ldw	r2,-8(fp)
2002b060:	18801426 	beq	r3,r2,2002b0b4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2002b064:	e0bffc17 	ldw	r2,-16(fp)
2002b068:	10800037 	ldwio	r2,0(r2)
2002b06c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2002b070:	e0bff917 	ldw	r2,-28(fp)
2002b074:	10a0000c 	andi	r2,r2,32768
2002b078:	10001026 	beq	r2,zero,2002b0bc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2002b07c:	e0bffb17 	ldw	r2,-20(fp)
2002b080:	10800a17 	ldw	r2,40(r2)
2002b084:	e0fff917 	ldw	r3,-28(fp)
2002b088:	e13ffb17 	ldw	r4,-20(fp)
2002b08c:	2085883a 	add	r2,r4,r2
2002b090:	10800e04 	addi	r2,r2,56
2002b094:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b098:	e0bffb17 	ldw	r2,-20(fp)
2002b09c:	10800a17 	ldw	r2,40(r2)
2002b0a0:	10800044 	addi	r2,r2,1
2002b0a4:	10c1ffcc 	andi	r3,r2,2047
2002b0a8:	e0bffb17 	ldw	r2,-20(fp)
2002b0ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2002b0b0:	003fe306 	br	2002b040 <__alt_data_end+0xfffebc40>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
2002b0b4:	0001883a 	nop
2002b0b8:	00000106 	br	2002b0c0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
2002b0bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2002b0c0:	e0bff917 	ldw	r2,-28(fp)
2002b0c4:	10bfffec 	andhi	r2,r2,65535
2002b0c8:	10000e26 	beq	r2,zero,2002b104 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002b0cc:	e0bffb17 	ldw	r2,-20(fp)
2002b0d0:	10c00817 	ldw	r3,32(r2)
2002b0d4:	00bfff84 	movi	r2,-2
2002b0d8:	1886703a 	and	r3,r3,r2
2002b0dc:	e0bffb17 	ldw	r2,-20(fp)
2002b0e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2002b0e4:	e0bffc17 	ldw	r2,-16(fp)
2002b0e8:	10800104 	addi	r2,r2,4
2002b0ec:	e0fffb17 	ldw	r3,-20(fp)
2002b0f0:	18c00817 	ldw	r3,32(r3)
2002b0f4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002b0f8:	e0bffc17 	ldw	r2,-16(fp)
2002b0fc:	10800104 	addi	r2,r2,4
2002b100:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2002b104:	e0bffd17 	ldw	r2,-12(fp)
2002b108:	1080800c 	andi	r2,r2,512
2002b10c:	103fbf26 	beq	r2,zero,2002b00c <__alt_data_end+0xfffebc0c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2002b110:	e0bffd17 	ldw	r2,-12(fp)
2002b114:	1004d43a 	srli	r2,r2,16
2002b118:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2002b11c:	00001406 	br	2002b170 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2002b120:	e0bffc17 	ldw	r2,-16(fp)
2002b124:	e0fffb17 	ldw	r3,-20(fp)
2002b128:	18c00d17 	ldw	r3,52(r3)
2002b12c:	e13ffb17 	ldw	r4,-20(fp)
2002b130:	20c7883a 	add	r3,r4,r3
2002b134:	18c20e04 	addi	r3,r3,2104
2002b138:	18c00003 	ldbu	r3,0(r3)
2002b13c:	18c03fcc 	andi	r3,r3,255
2002b140:	18c0201c 	xori	r3,r3,128
2002b144:	18ffe004 	addi	r3,r3,-128
2002b148:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b14c:	e0bffb17 	ldw	r2,-20(fp)
2002b150:	10800d17 	ldw	r2,52(r2)
2002b154:	10800044 	addi	r2,r2,1
2002b158:	10c1ffcc 	andi	r3,r2,2047
2002b15c:	e0bffb17 	ldw	r2,-20(fp)
2002b160:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2002b164:	e0bffa17 	ldw	r2,-24(fp)
2002b168:	10bfffc4 	addi	r2,r2,-1
2002b16c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2002b170:	e0bffa17 	ldw	r2,-24(fp)
2002b174:	10000526 	beq	r2,zero,2002b18c <altera_avalon_jtag_uart_irq+0x1a8>
2002b178:	e0bffb17 	ldw	r2,-20(fp)
2002b17c:	10c00d17 	ldw	r3,52(r2)
2002b180:	e0bffb17 	ldw	r2,-20(fp)
2002b184:	10800c17 	ldw	r2,48(r2)
2002b188:	18bfe51e 	bne	r3,r2,2002b120 <__alt_data_end+0xfffebd20>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2002b18c:	e0bffa17 	ldw	r2,-24(fp)
2002b190:	103f9e26 	beq	r2,zero,2002b00c <__alt_data_end+0xfffebc0c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2002b194:	e0bffb17 	ldw	r2,-20(fp)
2002b198:	10c00817 	ldw	r3,32(r2)
2002b19c:	00bfff44 	movi	r2,-3
2002b1a0:	1886703a 	and	r3,r3,r2
2002b1a4:	e0bffb17 	ldw	r2,-20(fp)
2002b1a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002b1ac:	e0bffb17 	ldw	r2,-20(fp)
2002b1b0:	10800017 	ldw	r2,0(r2)
2002b1b4:	10800104 	addi	r2,r2,4
2002b1b8:	e0fffb17 	ldw	r3,-20(fp)
2002b1bc:	18c00817 	ldw	r3,32(r3)
2002b1c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2002b1c4:	e0bffc17 	ldw	r2,-16(fp)
2002b1c8:	10800104 	addi	r2,r2,4
2002b1cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2002b1d0:	003f8e06 	br	2002b00c <__alt_data_end+0xfffebc0c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
2002b1d4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
2002b1d8:	e037883a 	mov	sp,fp
2002b1dc:	df000017 	ldw	fp,0(sp)
2002b1e0:	dec00104 	addi	sp,sp,4
2002b1e4:	f800283a 	ret

2002b1e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2002b1e8:	defffc04 	addi	sp,sp,-16
2002b1ec:	df000315 	stw	fp,12(sp)
2002b1f0:	df000304 	addi	fp,sp,12
2002b1f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2002b1f8:	e0bfff17 	ldw	r2,-4(fp)
2002b1fc:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2002b200:	e0bffd17 	ldw	r2,-12(fp)
2002b204:	10800017 	ldw	r2,0(r2)
2002b208:	10800104 	addi	r2,r2,4
2002b20c:	10800037 	ldwio	r2,0(r2)
2002b210:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2002b214:	e0bffe17 	ldw	r2,-8(fp)
2002b218:	1081000c 	andi	r2,r2,1024
2002b21c:	10000a26 	beq	r2,zero,2002b248 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2002b220:	e0bffd17 	ldw	r2,-12(fp)
2002b224:	10800017 	ldw	r2,0(r2)
2002b228:	10800104 	addi	r2,r2,4
2002b22c:	e0fffd17 	ldw	r3,-12(fp)
2002b230:	18c00817 	ldw	r3,32(r3)
2002b234:	18c10014 	ori	r3,r3,1024
2002b238:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
2002b23c:	e0bffd17 	ldw	r2,-12(fp)
2002b240:	10000915 	stw	zero,36(r2)
2002b244:	00000a06 	br	2002b270 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2002b248:	e0bffd17 	ldw	r2,-12(fp)
2002b24c:	10800917 	ldw	r2,36(r2)
2002b250:	00e00034 	movhi	r3,32768
2002b254:	18ffff04 	addi	r3,r3,-4
2002b258:	18800536 	bltu	r3,r2,2002b270 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
2002b25c:	e0bffd17 	ldw	r2,-12(fp)
2002b260:	10800917 	ldw	r2,36(r2)
2002b264:	10c00044 	addi	r3,r2,1
2002b268:	e0bffd17 	ldw	r2,-12(fp)
2002b26c:	10c00915 	stw	r3,36(r2)
2002b270:	008800f4 	movhi	r2,8195
2002b274:	10810504 	addi	r2,r2,1044
2002b278:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2002b27c:	e037883a 	mov	sp,fp
2002b280:	df000017 	ldw	fp,0(sp)
2002b284:	dec00104 	addi	sp,sp,4
2002b288:	f800283a 	ret

2002b28c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2002b28c:	defffd04 	addi	sp,sp,-12
2002b290:	df000215 	stw	fp,8(sp)
2002b294:	df000204 	addi	fp,sp,8
2002b298:	e13ffe15 	stw	r4,-8(fp)
2002b29c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2002b2a0:	00000506 	br	2002b2b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2002b2a4:	e0bfff17 	ldw	r2,-4(fp)
2002b2a8:	1090000c 	andi	r2,r2,16384
2002b2ac:	10000226 	beq	r2,zero,2002b2b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2002b2b0:	00bffd44 	movi	r2,-11
2002b2b4:	00000b06 	br	2002b2e4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2002b2b8:	e0bffe17 	ldw	r2,-8(fp)
2002b2bc:	10c00d17 	ldw	r3,52(r2)
2002b2c0:	e0bffe17 	ldw	r2,-8(fp)
2002b2c4:	10800c17 	ldw	r2,48(r2)
2002b2c8:	18800526 	beq	r3,r2,2002b2e0 <altera_avalon_jtag_uart_close+0x54>
2002b2cc:	e0bffe17 	ldw	r2,-8(fp)
2002b2d0:	10c00917 	ldw	r3,36(r2)
2002b2d4:	e0bffe17 	ldw	r2,-8(fp)
2002b2d8:	10800117 	ldw	r2,4(r2)
2002b2dc:	18bff136 	bltu	r3,r2,2002b2a4 <__alt_data_end+0xfffebea4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2002b2e0:	0005883a 	mov	r2,zero
}
2002b2e4:	e037883a 	mov	sp,fp
2002b2e8:	df000017 	ldw	fp,0(sp)
2002b2ec:	dec00104 	addi	sp,sp,4
2002b2f0:	f800283a 	ret

2002b2f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2002b2f4:	defffa04 	addi	sp,sp,-24
2002b2f8:	df000515 	stw	fp,20(sp)
2002b2fc:	df000504 	addi	fp,sp,20
2002b300:	e13ffd15 	stw	r4,-12(fp)
2002b304:	e17ffe15 	stw	r5,-8(fp)
2002b308:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2002b30c:	00bff9c4 	movi	r2,-25
2002b310:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2002b314:	e0bffe17 	ldw	r2,-8(fp)
2002b318:	10da8060 	cmpeqi	r3,r2,27137
2002b31c:	1800031e 	bne	r3,zero,2002b32c <altera_avalon_jtag_uart_ioctl+0x38>
2002b320:	109a80a0 	cmpeqi	r2,r2,27138
2002b324:	1000181e 	bne	r2,zero,2002b388 <altera_avalon_jtag_uart_ioctl+0x94>
2002b328:	00002606 	br	2002b3c4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2002b32c:	e0bffd17 	ldw	r2,-12(fp)
2002b330:	10c00117 	ldw	r3,4(r2)
2002b334:	00a00034 	movhi	r2,32768
2002b338:	10bfffc4 	addi	r2,r2,-1
2002b33c:	18802226 	beq	r3,r2,2002b3c8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
2002b340:	e0bfff17 	ldw	r2,-4(fp)
2002b344:	10800017 	ldw	r2,0(r2)
2002b348:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2002b34c:	e0bffc17 	ldw	r2,-16(fp)
2002b350:	10800090 	cmplti	r2,r2,2
2002b354:	1000061e 	bne	r2,zero,2002b370 <altera_avalon_jtag_uart_ioctl+0x7c>
2002b358:	e0fffc17 	ldw	r3,-16(fp)
2002b35c:	00a00034 	movhi	r2,32768
2002b360:	10bfffc4 	addi	r2,r2,-1
2002b364:	18800226 	beq	r3,r2,2002b370 <altera_avalon_jtag_uart_ioctl+0x7c>
2002b368:	e0bffc17 	ldw	r2,-16(fp)
2002b36c:	00000206 	br	2002b378 <altera_avalon_jtag_uart_ioctl+0x84>
2002b370:	00a00034 	movhi	r2,32768
2002b374:	10bfff84 	addi	r2,r2,-2
2002b378:	e0fffd17 	ldw	r3,-12(fp)
2002b37c:	18800115 	stw	r2,4(r3)
      rc = 0;
2002b380:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2002b384:	00001006 	br	2002b3c8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2002b388:	e0bffd17 	ldw	r2,-12(fp)
2002b38c:	10c00117 	ldw	r3,4(r2)
2002b390:	00a00034 	movhi	r2,32768
2002b394:	10bfffc4 	addi	r2,r2,-1
2002b398:	18800d26 	beq	r3,r2,2002b3d0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2002b39c:	e0bffd17 	ldw	r2,-12(fp)
2002b3a0:	10c00917 	ldw	r3,36(r2)
2002b3a4:	e0bffd17 	ldw	r2,-12(fp)
2002b3a8:	10800117 	ldw	r2,4(r2)
2002b3ac:	1885803a 	cmpltu	r2,r3,r2
2002b3b0:	10c03fcc 	andi	r3,r2,255
2002b3b4:	e0bfff17 	ldw	r2,-4(fp)
2002b3b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
2002b3bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2002b3c0:	00000306 	br	2002b3d0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
2002b3c4:	00000306 	br	2002b3d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
2002b3c8:	0001883a 	nop
2002b3cc:	00000106 	br	2002b3d4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
2002b3d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
2002b3d4:	e0bffb17 	ldw	r2,-20(fp)
}
2002b3d8:	e037883a 	mov	sp,fp
2002b3dc:	df000017 	ldw	fp,0(sp)
2002b3e0:	dec00104 	addi	sp,sp,4
2002b3e4:	f800283a 	ret

2002b3e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2002b3e8:	defff304 	addi	sp,sp,-52
2002b3ec:	dfc00c15 	stw	ra,48(sp)
2002b3f0:	df000b15 	stw	fp,44(sp)
2002b3f4:	df000b04 	addi	fp,sp,44
2002b3f8:	e13ffc15 	stw	r4,-16(fp)
2002b3fc:	e17ffd15 	stw	r5,-12(fp)
2002b400:	e1bffe15 	stw	r6,-8(fp)
2002b404:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2002b408:	e0bffd17 	ldw	r2,-12(fp)
2002b40c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2002b410:	00004706 	br	2002b530 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2002b414:	e0bffc17 	ldw	r2,-16(fp)
2002b418:	10800a17 	ldw	r2,40(r2)
2002b41c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2002b420:	e0bffc17 	ldw	r2,-16(fp)
2002b424:	10800b17 	ldw	r2,44(r2)
2002b428:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2002b42c:	e0fff717 	ldw	r3,-36(fp)
2002b430:	e0bff817 	ldw	r2,-32(fp)
2002b434:	18800536 	bltu	r3,r2,2002b44c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2002b438:	e0fff717 	ldw	r3,-36(fp)
2002b43c:	e0bff817 	ldw	r2,-32(fp)
2002b440:	1885c83a 	sub	r2,r3,r2
2002b444:	e0bff615 	stw	r2,-40(fp)
2002b448:	00000406 	br	2002b45c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2002b44c:	00c20004 	movi	r3,2048
2002b450:	e0bff817 	ldw	r2,-32(fp)
2002b454:	1885c83a 	sub	r2,r3,r2
2002b458:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2002b45c:	e0bff617 	ldw	r2,-40(fp)
2002b460:	10001e26 	beq	r2,zero,2002b4dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
2002b464:	e0fffe17 	ldw	r3,-8(fp)
2002b468:	e0bff617 	ldw	r2,-40(fp)
2002b46c:	1880022e 	bgeu	r3,r2,2002b478 <altera_avalon_jtag_uart_read+0x90>
        n = space;
2002b470:	e0bffe17 	ldw	r2,-8(fp)
2002b474:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2002b478:	e0bff817 	ldw	r2,-32(fp)
2002b47c:	10800e04 	addi	r2,r2,56
2002b480:	e0fffc17 	ldw	r3,-16(fp)
2002b484:	1885883a 	add	r2,r3,r2
2002b488:	e13ff517 	ldw	r4,-44(fp)
2002b48c:	100b883a 	mov	r5,r2
2002b490:	e1bff617 	ldw	r6,-40(fp)
2002b494:	0020c300 	call	20020c30 <memcpy>
      ptr   += n;
2002b498:	e0fff517 	ldw	r3,-44(fp)
2002b49c:	e0bff617 	ldw	r2,-40(fp)
2002b4a0:	1885883a 	add	r2,r3,r2
2002b4a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2002b4a8:	e0fffe17 	ldw	r3,-8(fp)
2002b4ac:	e0bff617 	ldw	r2,-40(fp)
2002b4b0:	1885c83a 	sub	r2,r3,r2
2002b4b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b4b8:	e0fff817 	ldw	r3,-32(fp)
2002b4bc:	e0bff617 	ldw	r2,-40(fp)
2002b4c0:	1885883a 	add	r2,r3,r2
2002b4c4:	10c1ffcc 	andi	r3,r2,2047
2002b4c8:	e0bffc17 	ldw	r2,-16(fp)
2002b4cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2002b4d0:	e0bffe17 	ldw	r2,-8(fp)
2002b4d4:	00bfcf16 	blt	zero,r2,2002b414 <__alt_data_end+0xfffec014>
2002b4d8:	00000106 	br	2002b4e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
2002b4dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
2002b4e0:	e0fff517 	ldw	r3,-44(fp)
2002b4e4:	e0bffd17 	ldw	r2,-12(fp)
2002b4e8:	1880141e 	bne	r3,r2,2002b53c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2002b4ec:	e0bfff17 	ldw	r2,-4(fp)
2002b4f0:	1090000c 	andi	r2,r2,16384
2002b4f4:	1000131e 	bne	r2,zero,2002b544 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2002b4f8:	0001883a 	nop
2002b4fc:	e0bffc17 	ldw	r2,-16(fp)
2002b500:	10c00a17 	ldw	r3,40(r2)
2002b504:	e0bff717 	ldw	r2,-36(fp)
2002b508:	1880051e 	bne	r3,r2,2002b520 <altera_avalon_jtag_uart_read+0x138>
2002b50c:	e0bffc17 	ldw	r2,-16(fp)
2002b510:	10c00917 	ldw	r3,36(r2)
2002b514:	e0bffc17 	ldw	r2,-16(fp)
2002b518:	10800117 	ldw	r2,4(r2)
2002b51c:	18bff736 	bltu	r3,r2,2002b4fc <__alt_data_end+0xfffec0fc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2002b520:	e0bffc17 	ldw	r2,-16(fp)
2002b524:	10c00a17 	ldw	r3,40(r2)
2002b528:	e0bff717 	ldw	r2,-36(fp)
2002b52c:	18800726 	beq	r3,r2,2002b54c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2002b530:	e0bffe17 	ldw	r2,-8(fp)
2002b534:	00bfb716 	blt	zero,r2,2002b414 <__alt_data_end+0xfffec014>
2002b538:	00000506 	br	2002b550 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
2002b53c:	0001883a 	nop
2002b540:	00000306 	br	2002b550 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
2002b544:	0001883a 	nop
2002b548:	00000106 	br	2002b550 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
2002b54c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2002b550:	e0fff517 	ldw	r3,-44(fp)
2002b554:	e0bffd17 	ldw	r2,-12(fp)
2002b558:	18801726 	beq	r3,r2,2002b5b8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b55c:	0005303a 	rdctl	r2,status
2002b560:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b564:	e0fffa17 	ldw	r3,-24(fp)
2002b568:	00bfff84 	movi	r2,-2
2002b56c:	1884703a 	and	r2,r3,r2
2002b570:	1001703a 	wrctl	status,r2
  
  return context;
2002b574:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2002b578:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2002b57c:	e0bffc17 	ldw	r2,-16(fp)
2002b580:	10800817 	ldw	r2,32(r2)
2002b584:	10c00054 	ori	r3,r2,1
2002b588:	e0bffc17 	ldw	r2,-16(fp)
2002b58c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002b590:	e0bffc17 	ldw	r2,-16(fp)
2002b594:	10800017 	ldw	r2,0(r2)
2002b598:	10800104 	addi	r2,r2,4
2002b59c:	e0fffc17 	ldw	r3,-16(fp)
2002b5a0:	18c00817 	ldw	r3,32(r3)
2002b5a4:	10c00035 	stwio	r3,0(r2)
2002b5a8:	e0bff917 	ldw	r2,-28(fp)
2002b5ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b5b0:	e0bffb17 	ldw	r2,-20(fp)
2002b5b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2002b5b8:	e0fff517 	ldw	r3,-44(fp)
2002b5bc:	e0bffd17 	ldw	r2,-12(fp)
2002b5c0:	18800426 	beq	r3,r2,2002b5d4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
2002b5c4:	e0fff517 	ldw	r3,-44(fp)
2002b5c8:	e0bffd17 	ldw	r2,-12(fp)
2002b5cc:	1885c83a 	sub	r2,r3,r2
2002b5d0:	00000606 	br	2002b5ec <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
2002b5d4:	e0bfff17 	ldw	r2,-4(fp)
2002b5d8:	1090000c 	andi	r2,r2,16384
2002b5dc:	10000226 	beq	r2,zero,2002b5e8 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
2002b5e0:	00bffd44 	movi	r2,-11
2002b5e4:	00000106 	br	2002b5ec <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
2002b5e8:	00bffec4 	movi	r2,-5
}
2002b5ec:	e037883a 	mov	sp,fp
2002b5f0:	dfc00117 	ldw	ra,4(sp)
2002b5f4:	df000017 	ldw	fp,0(sp)
2002b5f8:	dec00204 	addi	sp,sp,8
2002b5fc:	f800283a 	ret

2002b600 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2002b600:	defff304 	addi	sp,sp,-52
2002b604:	dfc00c15 	stw	ra,48(sp)
2002b608:	df000b15 	stw	fp,44(sp)
2002b60c:	df000b04 	addi	fp,sp,44
2002b610:	e13ffc15 	stw	r4,-16(fp)
2002b614:	e17ffd15 	stw	r5,-12(fp)
2002b618:	e1bffe15 	stw	r6,-8(fp)
2002b61c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2002b620:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2002b624:	e0bffd17 	ldw	r2,-12(fp)
2002b628:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2002b62c:	00003706 	br	2002b70c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2002b630:	e0bffc17 	ldw	r2,-16(fp)
2002b634:	10800c17 	ldw	r2,48(r2)
2002b638:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2002b63c:	e0bffc17 	ldw	r2,-16(fp)
2002b640:	10800d17 	ldw	r2,52(r2)
2002b644:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2002b648:	e0fff817 	ldw	r3,-32(fp)
2002b64c:	e0bff517 	ldw	r2,-44(fp)
2002b650:	1880062e 	bgeu	r3,r2,2002b66c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2002b654:	e0fff517 	ldw	r3,-44(fp)
2002b658:	e0bff817 	ldw	r2,-32(fp)
2002b65c:	1885c83a 	sub	r2,r3,r2
2002b660:	10bfffc4 	addi	r2,r2,-1
2002b664:	e0bff615 	stw	r2,-40(fp)
2002b668:	00000b06 	br	2002b698 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2002b66c:	e0bff517 	ldw	r2,-44(fp)
2002b670:	10000526 	beq	r2,zero,2002b688 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2002b674:	00c20004 	movi	r3,2048
2002b678:	e0bff817 	ldw	r2,-32(fp)
2002b67c:	1885c83a 	sub	r2,r3,r2
2002b680:	e0bff615 	stw	r2,-40(fp)
2002b684:	00000406 	br	2002b698 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2002b688:	00c1ffc4 	movi	r3,2047
2002b68c:	e0bff817 	ldw	r2,-32(fp)
2002b690:	1885c83a 	sub	r2,r3,r2
2002b694:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2002b698:	e0bff617 	ldw	r2,-40(fp)
2002b69c:	10001e26 	beq	r2,zero,2002b718 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
2002b6a0:	e0fffe17 	ldw	r3,-8(fp)
2002b6a4:	e0bff617 	ldw	r2,-40(fp)
2002b6a8:	1880022e 	bgeu	r3,r2,2002b6b4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
2002b6ac:	e0bffe17 	ldw	r2,-8(fp)
2002b6b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2002b6b4:	e0bff817 	ldw	r2,-32(fp)
2002b6b8:	10820e04 	addi	r2,r2,2104
2002b6bc:	e0fffc17 	ldw	r3,-16(fp)
2002b6c0:	1885883a 	add	r2,r3,r2
2002b6c4:	1009883a 	mov	r4,r2
2002b6c8:	e17ffd17 	ldw	r5,-12(fp)
2002b6cc:	e1bff617 	ldw	r6,-40(fp)
2002b6d0:	0020c300 	call	20020c30 <memcpy>
      ptr   += n;
2002b6d4:	e0fffd17 	ldw	r3,-12(fp)
2002b6d8:	e0bff617 	ldw	r2,-40(fp)
2002b6dc:	1885883a 	add	r2,r3,r2
2002b6e0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2002b6e4:	e0fffe17 	ldw	r3,-8(fp)
2002b6e8:	e0bff617 	ldw	r2,-40(fp)
2002b6ec:	1885c83a 	sub	r2,r3,r2
2002b6f0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2002b6f4:	e0fff817 	ldw	r3,-32(fp)
2002b6f8:	e0bff617 	ldw	r2,-40(fp)
2002b6fc:	1885883a 	add	r2,r3,r2
2002b700:	10c1ffcc 	andi	r3,r2,2047
2002b704:	e0bffc17 	ldw	r2,-16(fp)
2002b708:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2002b70c:	e0bffe17 	ldw	r2,-8(fp)
2002b710:	00bfc716 	blt	zero,r2,2002b630 <__alt_data_end+0xfffec230>
2002b714:	00000106 	br	2002b71c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
2002b718:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b71c:	0005303a 	rdctl	r2,status
2002b720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b724:	e0fffa17 	ldw	r3,-24(fp)
2002b728:	00bfff84 	movi	r2,-2
2002b72c:	1884703a 	and	r2,r3,r2
2002b730:	1001703a 	wrctl	status,r2
  
  return context;
2002b734:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2002b738:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2002b73c:	e0bffc17 	ldw	r2,-16(fp)
2002b740:	10800817 	ldw	r2,32(r2)
2002b744:	10c00094 	ori	r3,r2,2
2002b748:	e0bffc17 	ldw	r2,-16(fp)
2002b74c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2002b750:	e0bffc17 	ldw	r2,-16(fp)
2002b754:	10800017 	ldw	r2,0(r2)
2002b758:	10800104 	addi	r2,r2,4
2002b75c:	e0fffc17 	ldw	r3,-16(fp)
2002b760:	18c00817 	ldw	r3,32(r3)
2002b764:	10c00035 	stwio	r3,0(r2)
2002b768:	e0bff917 	ldw	r2,-28(fp)
2002b76c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b770:	e0bffb17 	ldw	r2,-20(fp)
2002b774:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2002b778:	e0bffe17 	ldw	r2,-8(fp)
2002b77c:	0080100e 	bge	zero,r2,2002b7c0 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
2002b780:	e0bfff17 	ldw	r2,-4(fp)
2002b784:	1090000c 	andi	r2,r2,16384
2002b788:	1000101e 	bne	r2,zero,2002b7cc <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2002b78c:	0001883a 	nop
2002b790:	e0bffc17 	ldw	r2,-16(fp)
2002b794:	10c00d17 	ldw	r3,52(r2)
2002b798:	e0bff517 	ldw	r2,-44(fp)
2002b79c:	1880051e 	bne	r3,r2,2002b7b4 <altera_avalon_jtag_uart_write+0x1b4>
2002b7a0:	e0bffc17 	ldw	r2,-16(fp)
2002b7a4:	10c00917 	ldw	r3,36(r2)
2002b7a8:	e0bffc17 	ldw	r2,-16(fp)
2002b7ac:	10800117 	ldw	r2,4(r2)
2002b7b0:	18bff736 	bltu	r3,r2,2002b790 <__alt_data_end+0xfffec390>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2002b7b4:	e0bffc17 	ldw	r2,-16(fp)
2002b7b8:	10800917 	ldw	r2,36(r2)
2002b7bc:	1000051e 	bne	r2,zero,2002b7d4 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
2002b7c0:	e0bffe17 	ldw	r2,-8(fp)
2002b7c4:	00bfd116 	blt	zero,r2,2002b70c <__alt_data_end+0xfffec30c>
2002b7c8:	00000306 	br	2002b7d8 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
2002b7cc:	0001883a 	nop
2002b7d0:	00000106 	br	2002b7d8 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
2002b7d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2002b7d8:	e0fffd17 	ldw	r3,-12(fp)
2002b7dc:	e0bff717 	ldw	r2,-36(fp)
2002b7e0:	18800426 	beq	r3,r2,2002b7f4 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
2002b7e4:	e0fffd17 	ldw	r3,-12(fp)
2002b7e8:	e0bff717 	ldw	r2,-36(fp)
2002b7ec:	1885c83a 	sub	r2,r3,r2
2002b7f0:	00000606 	br	2002b80c <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
2002b7f4:	e0bfff17 	ldw	r2,-4(fp)
2002b7f8:	1090000c 	andi	r2,r2,16384
2002b7fc:	10000226 	beq	r2,zero,2002b808 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
2002b800:	00bffd44 	movi	r2,-11
2002b804:	00000106 	br	2002b80c <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2002b808:	00bffec4 	movi	r2,-5
}
2002b80c:	e037883a 	mov	sp,fp
2002b810:	dfc00117 	ldw	ra,4(sp)
2002b814:	df000017 	ldw	fp,0(sp)
2002b818:	dec00204 	addi	sp,sp,8
2002b81c:	f800283a 	ret

2002b820 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
2002b820:	defffa04 	addi	sp,sp,-24
2002b824:	dfc00515 	stw	ra,20(sp)
2002b828:	df000415 	stw	fp,16(sp)
2002b82c:	df000404 	addi	fp,sp,16
2002b830:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
2002b834:	0007883a 	mov	r3,zero
2002b838:	e0bfff17 	ldw	r2,-4(fp)
2002b83c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
2002b840:	e0bfff17 	ldw	r2,-4(fp)
2002b844:	10800104 	addi	r2,r2,4
2002b848:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b84c:	0005303a 	rdctl	r2,status
2002b850:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b854:	e0fffd17 	ldw	r3,-12(fp)
2002b858:	00bfff84 	movi	r2,-2
2002b85c:	1884703a 	and	r2,r3,r2
2002b860:	1001703a 	wrctl	status,r2
  
  return context;
2002b864:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
2002b868:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
2002b86c:	002aa840 	call	2002aa84 <alt_tick>
2002b870:	e0bffc17 	ldw	r2,-16(fp)
2002b874:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002b878:	e0bffe17 	ldw	r2,-8(fp)
2002b87c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
2002b880:	e037883a 	mov	sp,fp
2002b884:	dfc00117 	ldw	ra,4(sp)
2002b888:	df000017 	ldw	fp,0(sp)
2002b88c:	dec00204 	addi	sp,sp,8
2002b890:	f800283a 	ret

2002b894 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2002b894:	defff804 	addi	sp,sp,-32
2002b898:	dfc00715 	stw	ra,28(sp)
2002b89c:	df000615 	stw	fp,24(sp)
2002b8a0:	df000604 	addi	fp,sp,24
2002b8a4:	e13ffc15 	stw	r4,-16(fp)
2002b8a8:	e17ffd15 	stw	r5,-12(fp)
2002b8ac:	e1bffe15 	stw	r6,-8(fp)
2002b8b0:	e1ffff15 	stw	r7,-4(fp)
2002b8b4:	e0bfff17 	ldw	r2,-4(fp)
2002b8b8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
2002b8bc:	008800f4 	movhi	r2,8195
2002b8c0:	10810504 	addi	r2,r2,1044
2002b8c4:	10800017 	ldw	r2,0(r2)
2002b8c8:	1000041e 	bne	r2,zero,2002b8dc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
2002b8cc:	008800f4 	movhi	r2,8195
2002b8d0:	10810504 	addi	r2,r2,1044
2002b8d4:	e0fffb17 	ldw	r3,-20(fp)
2002b8d8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
2002b8dc:	e0bffc17 	ldw	r2,-16(fp)
2002b8e0:	10800104 	addi	r2,r2,4
2002b8e4:	00c001c4 	movi	r3,7
2002b8e8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
2002b8ec:	d8000015 	stw	zero,0(sp)
2002b8f0:	e13ffd17 	ldw	r4,-12(fp)
2002b8f4:	e17ffe17 	ldw	r5,-8(fp)
2002b8f8:	018800f4 	movhi	r6,8195
2002b8fc:	31ae0804 	addi	r6,r6,-18400
2002b900:	e1fffc17 	ldw	r7,-16(fp)
2002b904:	002bd880 	call	2002bd88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2002b908:	e037883a 	mov	sp,fp
2002b90c:	dfc00117 	ldw	ra,4(sp)
2002b910:	df000017 	ldw	fp,0(sp)
2002b914:	dec00204 	addi	sp,sp,8
2002b918:	f800283a 	ret

2002b91c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2002b91c:	defff504 	addi	sp,sp,-44
2002b920:	df000a15 	stw	fp,40(sp)
2002b924:	df000a04 	addi	fp,sp,40
2002b928:	e13ffc15 	stw	r4,-16(fp)
2002b92c:	e17ffd15 	stw	r5,-12(fp)
2002b930:	e1bffe15 	stw	r6,-8(fp)
2002b934:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2002b938:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2002b93c:	008800f4 	movhi	r2,8195
2002b940:	10810504 	addi	r2,r2,1044
2002b944:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2002b948:	10003f26 	beq	r2,zero,2002ba48 <alt_alarm_start+0x12c>
  {
    if (alarm)
2002b94c:	e0bffc17 	ldw	r2,-16(fp)
2002b950:	10003b26 	beq	r2,zero,2002ba40 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2002b954:	e0bffc17 	ldw	r2,-16(fp)
2002b958:	e0fffe17 	ldw	r3,-8(fp)
2002b95c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2002b960:	e0bffc17 	ldw	r2,-16(fp)
2002b964:	e0ffff17 	ldw	r3,-4(fp)
2002b968:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002b96c:	0005303a 	rdctl	r2,status
2002b970:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002b974:	e0fff817 	ldw	r3,-32(fp)
2002b978:	00bfff84 	movi	r2,-2
2002b97c:	1884703a 	and	r2,r3,r2
2002b980:	1001703a 	wrctl	status,r2
  
  return context;
2002b984:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2002b988:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2002b98c:	008800f4 	movhi	r2,8195
2002b990:	10810604 	addi	r2,r2,1048
2002b994:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2002b998:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2002b99c:	e0fffd17 	ldw	r3,-12(fp)
2002b9a0:	e0bff617 	ldw	r2,-40(fp)
2002b9a4:	1885883a 	add	r2,r3,r2
2002b9a8:	10c00044 	addi	r3,r2,1
2002b9ac:	e0bffc17 	ldw	r2,-16(fp)
2002b9b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2002b9b4:	e0bffc17 	ldw	r2,-16(fp)
2002b9b8:	10c00217 	ldw	r3,8(r2)
2002b9bc:	e0bff617 	ldw	r2,-40(fp)
2002b9c0:	1880042e 	bgeu	r3,r2,2002b9d4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2002b9c4:	e0bffc17 	ldw	r2,-16(fp)
2002b9c8:	00c00044 	movi	r3,1
2002b9cc:	10c00405 	stb	r3,16(r2)
2002b9d0:	00000206 	br	2002b9dc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2002b9d4:	e0bffc17 	ldw	r2,-16(fp)
2002b9d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2002b9dc:	e0bffc17 	ldw	r2,-16(fp)
2002b9e0:	00c800f4 	movhi	r3,8195
2002b9e4:	18fa6204 	addi	r3,r3,-5752
2002b9e8:	e0fff915 	stw	r3,-28(fp)
2002b9ec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2002b9f0:	e0bffa17 	ldw	r2,-24(fp)
2002b9f4:	e0fff917 	ldw	r3,-28(fp)
2002b9f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2002b9fc:	e0bff917 	ldw	r2,-28(fp)
2002ba00:	10c00017 	ldw	r3,0(r2)
2002ba04:	e0bffa17 	ldw	r2,-24(fp)
2002ba08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2002ba0c:	e0bff917 	ldw	r2,-28(fp)
2002ba10:	10800017 	ldw	r2,0(r2)
2002ba14:	e0fffa17 	ldw	r3,-24(fp)
2002ba18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2002ba1c:	e0bff917 	ldw	r2,-28(fp)
2002ba20:	e0fffa17 	ldw	r3,-24(fp)
2002ba24:	10c00015 	stw	r3,0(r2)
2002ba28:	e0bff717 	ldw	r2,-36(fp)
2002ba2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002ba30:	e0bffb17 	ldw	r2,-20(fp)
2002ba34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2002ba38:	0005883a 	mov	r2,zero
2002ba3c:	00000306 	br	2002ba4c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2002ba40:	00bffa84 	movi	r2,-22
2002ba44:	00000106 	br	2002ba4c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2002ba48:	00bfde84 	movi	r2,-134
  }
}
2002ba4c:	e037883a 	mov	sp,fp
2002ba50:	df000017 	ldw	fp,0(sp)
2002ba54:	dec00104 	addi	sp,sp,4
2002ba58:	f800283a 	ret

2002ba5c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2002ba5c:	defffa04 	addi	sp,sp,-24
2002ba60:	dfc00515 	stw	ra,20(sp)
2002ba64:	df000415 	stw	fp,16(sp)
2002ba68:	df000404 	addi	fp,sp,16
2002ba6c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2002ba70:	008000c4 	movi	r2,3
2002ba74:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2002ba78:	e0fffd17 	ldw	r3,-12(fp)
2002ba7c:	008003f4 	movhi	r2,15
2002ba80:	10909004 	addi	r2,r2,16960
2002ba84:	1885383a 	mul	r2,r3,r2
2002ba88:	010221b4 	movhi	r4,2182
2002ba8c:	21007004 	addi	r4,r4,448
2002ba90:	100b883a 	mov	r5,r2
2002ba94:	0020c200 	call	20020c20 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2002ba98:	01200034 	movhi	r4,32768
2002ba9c:	213fffc4 	addi	r4,r4,-1
2002baa0:	100b883a 	mov	r5,r2
2002baa4:	0020c200 	call	20020c20 <__udivsi3>
2002baa8:	e13fff17 	ldw	r4,-4(fp)
2002baac:	100b883a 	mov	r5,r2
2002bab0:	0020c200 	call	20020c20 <__udivsi3>
2002bab4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2002bab8:	e0bffe17 	ldw	r2,-8(fp)
2002babc:	10002926 	beq	r2,zero,2002bb64 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
2002bac0:	e03ffc15 	stw	zero,-16(fp)
2002bac4:	00001606 	br	2002bb20 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2002bac8:	00a00034 	movhi	r2,32768
2002bacc:	10bfffc4 	addi	r2,r2,-1
2002bad0:	10bfffc4 	addi	r2,r2,-1
2002bad4:	103ffe1e 	bne	r2,zero,2002bad0 <__alt_data_end+0xfffec6d0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2002bad8:	e0fffd17 	ldw	r3,-12(fp)
2002badc:	008003f4 	movhi	r2,15
2002bae0:	10909004 	addi	r2,r2,16960
2002bae4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2002bae8:	010221b4 	movhi	r4,2182
2002baec:	21007004 	addi	r4,r4,448
2002baf0:	100b883a 	mov	r5,r2
2002baf4:	0020c200 	call	20020c20 <__udivsi3>
2002baf8:	01200034 	movhi	r4,32768
2002bafc:	213fffc4 	addi	r4,r4,-1
2002bb00:	100b883a 	mov	r5,r2
2002bb04:	0020c200 	call	20020c20 <__udivsi3>
2002bb08:	e0ffff17 	ldw	r3,-4(fp)
2002bb0c:	1885c83a 	sub	r2,r3,r2
2002bb10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2002bb14:	e0bffc17 	ldw	r2,-16(fp)
2002bb18:	10800044 	addi	r2,r2,1
2002bb1c:	e0bffc15 	stw	r2,-16(fp)
2002bb20:	e0fffc17 	ldw	r3,-16(fp)
2002bb24:	e0bffe17 	ldw	r2,-8(fp)
2002bb28:	18bfe716 	blt	r3,r2,2002bac8 <__alt_data_end+0xfffec6c8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2002bb2c:	e0fffd17 	ldw	r3,-12(fp)
2002bb30:	008003f4 	movhi	r2,15
2002bb34:	10909004 	addi	r2,r2,16960
2002bb38:	1885383a 	mul	r2,r3,r2
2002bb3c:	010221b4 	movhi	r4,2182
2002bb40:	21007004 	addi	r4,r4,448
2002bb44:	100b883a 	mov	r5,r2
2002bb48:	0020c200 	call	20020c20 <__udivsi3>
2002bb4c:	1007883a 	mov	r3,r2
2002bb50:	e0bfff17 	ldw	r2,-4(fp)
2002bb54:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2002bb58:	10bfffc4 	addi	r2,r2,-1
2002bb5c:	103ffe1e 	bne	r2,zero,2002bb58 <__alt_data_end+0xfffec758>
2002bb60:	00000d06 	br	2002bb98 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2002bb64:	e0fffd17 	ldw	r3,-12(fp)
2002bb68:	008003f4 	movhi	r2,15
2002bb6c:	10909004 	addi	r2,r2,16960
2002bb70:	1885383a 	mul	r2,r3,r2
2002bb74:	010221b4 	movhi	r4,2182
2002bb78:	21007004 	addi	r4,r4,448
2002bb7c:	100b883a 	mov	r5,r2
2002bb80:	0020c200 	call	20020c20 <__udivsi3>
2002bb84:	1007883a 	mov	r3,r2
2002bb88:	e0bfff17 	ldw	r2,-4(fp)
2002bb8c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2002bb90:	10bfffc4 	addi	r2,r2,-1
2002bb94:	00bffe16 	blt	zero,r2,2002bb90 <__alt_data_end+0xfffec790>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2002bb98:	0005883a 	mov	r2,zero
}
2002bb9c:	e037883a 	mov	sp,fp
2002bba0:	dfc00117 	ldw	ra,4(sp)
2002bba4:	df000017 	ldw	fp,0(sp)
2002bba8:	dec00204 	addi	sp,sp,8
2002bbac:	f800283a 	ret

2002bbb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002bbb0:	defffe04 	addi	sp,sp,-8
2002bbb4:	dfc00115 	stw	ra,4(sp)
2002bbb8:	df000015 	stw	fp,0(sp)
2002bbbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002bbc0:	008800f4 	movhi	r2,8195
2002bbc4:	10ba6004 	addi	r2,r2,-5760
2002bbc8:	10800017 	ldw	r2,0(r2)
2002bbcc:	10000526 	beq	r2,zero,2002bbe4 <alt_get_errno+0x34>
2002bbd0:	008800f4 	movhi	r2,8195
2002bbd4:	10ba6004 	addi	r2,r2,-5760
2002bbd8:	10800017 	ldw	r2,0(r2)
2002bbdc:	103ee83a 	callr	r2
2002bbe0:	00000206 	br	2002bbec <alt_get_errno+0x3c>
2002bbe4:	008800f4 	movhi	r2,8195
2002bbe8:	10810104 	addi	r2,r2,1028
}
2002bbec:	e037883a 	mov	sp,fp
2002bbf0:	dfc00117 	ldw	ra,4(sp)
2002bbf4:	df000017 	ldw	fp,0(sp)
2002bbf8:	dec00204 	addi	sp,sp,8
2002bbfc:	f800283a 	ret

2002bc00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2002bc00:	defffa04 	addi	sp,sp,-24
2002bc04:	dfc00515 	stw	ra,20(sp)
2002bc08:	df000415 	stw	fp,16(sp)
2002bc0c:	df000404 	addi	fp,sp,16
2002bc10:	e13ffe15 	stw	r4,-8(fp)
2002bc14:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2002bc18:	e0bffe17 	ldw	r2,-8(fp)
2002bc1c:	10000326 	beq	r2,zero,2002bc2c <alt_dev_llist_insert+0x2c>
2002bc20:	e0bffe17 	ldw	r2,-8(fp)
2002bc24:	10800217 	ldw	r2,8(r2)
2002bc28:	1000051e 	bne	r2,zero,2002bc40 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
2002bc2c:	002bbb00 	call	2002bbb0 <alt_get_errno>
2002bc30:	00c00584 	movi	r3,22
2002bc34:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
2002bc38:	00bffa84 	movi	r2,-22
2002bc3c:	00001306 	br	2002bc8c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2002bc40:	e0bffe17 	ldw	r2,-8(fp)
2002bc44:	e0ffff17 	ldw	r3,-4(fp)
2002bc48:	e0fffc15 	stw	r3,-16(fp)
2002bc4c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2002bc50:	e0bffd17 	ldw	r2,-12(fp)
2002bc54:	e0fffc17 	ldw	r3,-16(fp)
2002bc58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2002bc5c:	e0bffc17 	ldw	r2,-16(fp)
2002bc60:	10c00017 	ldw	r3,0(r2)
2002bc64:	e0bffd17 	ldw	r2,-12(fp)
2002bc68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2002bc6c:	e0bffc17 	ldw	r2,-16(fp)
2002bc70:	10800017 	ldw	r2,0(r2)
2002bc74:	e0fffd17 	ldw	r3,-12(fp)
2002bc78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2002bc7c:	e0bffc17 	ldw	r2,-16(fp)
2002bc80:	e0fffd17 	ldw	r3,-12(fp)
2002bc84:	10c00015 	stw	r3,0(r2)

  return 0;  
2002bc88:	0005883a 	mov	r2,zero
}
2002bc8c:	e037883a 	mov	sp,fp
2002bc90:	dfc00117 	ldw	ra,4(sp)
2002bc94:	df000017 	ldw	fp,0(sp)
2002bc98:	dec00204 	addi	sp,sp,8
2002bc9c:	f800283a 	ret

2002bca0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2002bca0:	defffd04 	addi	sp,sp,-12
2002bca4:	dfc00215 	stw	ra,8(sp)
2002bca8:	df000115 	stw	fp,4(sp)
2002bcac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2002bcb0:	008800f4 	movhi	r2,8195
2002bcb4:	10b2b304 	addi	r2,r2,-13620
2002bcb8:	e0bfff15 	stw	r2,-4(fp)
2002bcbc:	00000606 	br	2002bcd8 <_do_ctors+0x38>
        (*ctor) (); 
2002bcc0:	e0bfff17 	ldw	r2,-4(fp)
2002bcc4:	10800017 	ldw	r2,0(r2)
2002bcc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2002bccc:	e0bfff17 	ldw	r2,-4(fp)
2002bcd0:	10bfff04 	addi	r2,r2,-4
2002bcd4:	e0bfff15 	stw	r2,-4(fp)
2002bcd8:	e0ffff17 	ldw	r3,-4(fp)
2002bcdc:	008800f4 	movhi	r2,8195
2002bce0:	10b2b404 	addi	r2,r2,-13616
2002bce4:	18bff62e 	bgeu	r3,r2,2002bcc0 <__alt_data_end+0xfffec8c0>
        (*ctor) (); 
}
2002bce8:	e037883a 	mov	sp,fp
2002bcec:	dfc00117 	ldw	ra,4(sp)
2002bcf0:	df000017 	ldw	fp,0(sp)
2002bcf4:	dec00204 	addi	sp,sp,8
2002bcf8:	f800283a 	ret

2002bcfc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2002bcfc:	defffd04 	addi	sp,sp,-12
2002bd00:	dfc00215 	stw	ra,8(sp)
2002bd04:	df000115 	stw	fp,4(sp)
2002bd08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2002bd0c:	008800f4 	movhi	r2,8195
2002bd10:	10b2b304 	addi	r2,r2,-13620
2002bd14:	e0bfff15 	stw	r2,-4(fp)
2002bd18:	00000606 	br	2002bd34 <_do_dtors+0x38>
        (*dtor) (); 
2002bd1c:	e0bfff17 	ldw	r2,-4(fp)
2002bd20:	10800017 	ldw	r2,0(r2)
2002bd24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2002bd28:	e0bfff17 	ldw	r2,-4(fp)
2002bd2c:	10bfff04 	addi	r2,r2,-4
2002bd30:	e0bfff15 	stw	r2,-4(fp)
2002bd34:	e0ffff17 	ldw	r3,-4(fp)
2002bd38:	008800f4 	movhi	r2,8195
2002bd3c:	10b2b404 	addi	r2,r2,-13616
2002bd40:	18bff62e 	bgeu	r3,r2,2002bd1c <__alt_data_end+0xfffec91c>
        (*dtor) (); 
}
2002bd44:	e037883a 	mov	sp,fp
2002bd48:	dfc00117 	ldw	ra,4(sp)
2002bd4c:	df000017 	ldw	fp,0(sp)
2002bd50:	dec00204 	addi	sp,sp,8
2002bd54:	f800283a 	ret

2002bd58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2002bd58:	defffe04 	addi	sp,sp,-8
2002bd5c:	dfc00115 	stw	ra,4(sp)
2002bd60:	df000015 	stw	fp,0(sp)
2002bd64:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2002bd68:	0009883a 	mov	r4,zero
2002bd6c:	01440004 	movi	r5,4096
2002bd70:	002c6700 	call	2002c670 <alt_icache_flush>
#endif
}
2002bd74:	e037883a 	mov	sp,fp
2002bd78:	dfc00117 	ldw	ra,4(sp)
2002bd7c:	df000017 	ldw	fp,0(sp)
2002bd80:	dec00204 	addi	sp,sp,8
2002bd84:	f800283a 	ret

2002bd88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002bd88:	defff904 	addi	sp,sp,-28
2002bd8c:	dfc00615 	stw	ra,24(sp)
2002bd90:	df000515 	stw	fp,20(sp)
2002bd94:	df000504 	addi	fp,sp,20
2002bd98:	e13ffc15 	stw	r4,-16(fp)
2002bd9c:	e17ffd15 	stw	r5,-12(fp)
2002bda0:	e1bffe15 	stw	r6,-8(fp)
2002bda4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2002bda8:	e0800217 	ldw	r2,8(fp)
2002bdac:	d8800015 	stw	r2,0(sp)
2002bdb0:	e13ffc17 	ldw	r4,-16(fp)
2002bdb4:	e17ffd17 	ldw	r5,-12(fp)
2002bdb8:	e1bffe17 	ldw	r6,-8(fp)
2002bdbc:	e1ffff17 	ldw	r7,-4(fp)
2002bdc0:	002bf600 	call	2002bf60 <alt_iic_isr_register>
}  
2002bdc4:	e037883a 	mov	sp,fp
2002bdc8:	dfc00117 	ldw	ra,4(sp)
2002bdcc:	df000017 	ldw	fp,0(sp)
2002bdd0:	dec00204 	addi	sp,sp,8
2002bdd4:	f800283a 	ret

2002bdd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2002bdd8:	defff904 	addi	sp,sp,-28
2002bddc:	df000615 	stw	fp,24(sp)
2002bde0:	df000604 	addi	fp,sp,24
2002bde4:	e13ffe15 	stw	r4,-8(fp)
2002bde8:	e17fff15 	stw	r5,-4(fp)
2002bdec:	e0bfff17 	ldw	r2,-4(fp)
2002bdf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002bdf4:	0005303a 	rdctl	r2,status
2002bdf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002bdfc:	e0fffb17 	ldw	r3,-20(fp)
2002be00:	00bfff84 	movi	r2,-2
2002be04:	1884703a 	and	r2,r3,r2
2002be08:	1001703a 	wrctl	status,r2
  
  return context;
2002be0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002be10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2002be14:	e0bffa17 	ldw	r2,-24(fp)
2002be18:	00c00044 	movi	r3,1
2002be1c:	1884983a 	sll	r2,r3,r2
2002be20:	1007883a 	mov	r3,r2
2002be24:	008800f4 	movhi	r2,8195
2002be28:	10810704 	addi	r2,r2,1052
2002be2c:	10800017 	ldw	r2,0(r2)
2002be30:	1886b03a 	or	r3,r3,r2
2002be34:	008800f4 	movhi	r2,8195
2002be38:	10810704 	addi	r2,r2,1052
2002be3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002be40:	008800f4 	movhi	r2,8195
2002be44:	10810704 	addi	r2,r2,1052
2002be48:	10800017 	ldw	r2,0(r2)
2002be4c:	100170fa 	wrctl	ienable,r2
2002be50:	e0bffc17 	ldw	r2,-16(fp)
2002be54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002be58:	e0bffd17 	ldw	r2,-12(fp)
2002be5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002be60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
2002be64:	e037883a 	mov	sp,fp
2002be68:	df000017 	ldw	fp,0(sp)
2002be6c:	dec00104 	addi	sp,sp,4
2002be70:	f800283a 	ret

2002be74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2002be74:	defff904 	addi	sp,sp,-28
2002be78:	df000615 	stw	fp,24(sp)
2002be7c:	df000604 	addi	fp,sp,24
2002be80:	e13ffe15 	stw	r4,-8(fp)
2002be84:	e17fff15 	stw	r5,-4(fp)
2002be88:	e0bfff17 	ldw	r2,-4(fp)
2002be8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002be90:	0005303a 	rdctl	r2,status
2002be94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002be98:	e0fffb17 	ldw	r3,-20(fp)
2002be9c:	00bfff84 	movi	r2,-2
2002bea0:	1884703a 	and	r2,r3,r2
2002bea4:	1001703a 	wrctl	status,r2
  
  return context;
2002bea8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2002beac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2002beb0:	e0bffa17 	ldw	r2,-24(fp)
2002beb4:	00c00044 	movi	r3,1
2002beb8:	1884983a 	sll	r2,r3,r2
2002bebc:	0084303a 	nor	r2,zero,r2
2002bec0:	1007883a 	mov	r3,r2
2002bec4:	008800f4 	movhi	r2,8195
2002bec8:	10810704 	addi	r2,r2,1052
2002becc:	10800017 	ldw	r2,0(r2)
2002bed0:	1886703a 	and	r3,r3,r2
2002bed4:	008800f4 	movhi	r2,8195
2002bed8:	10810704 	addi	r2,r2,1052
2002bedc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2002bee0:	008800f4 	movhi	r2,8195
2002bee4:	10810704 	addi	r2,r2,1052
2002bee8:	10800017 	ldw	r2,0(r2)
2002beec:	100170fa 	wrctl	ienable,r2
2002bef0:	e0bffc17 	ldw	r2,-16(fp)
2002bef4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002bef8:	e0bffd17 	ldw	r2,-12(fp)
2002befc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2002bf00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
2002bf04:	e037883a 	mov	sp,fp
2002bf08:	df000017 	ldw	fp,0(sp)
2002bf0c:	dec00104 	addi	sp,sp,4
2002bf10:	f800283a 	ret

2002bf14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2002bf14:	defffc04 	addi	sp,sp,-16
2002bf18:	df000315 	stw	fp,12(sp)
2002bf1c:	df000304 	addi	fp,sp,12
2002bf20:	e13ffe15 	stw	r4,-8(fp)
2002bf24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2002bf28:	000530fa 	rdctl	r2,ienable
2002bf2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2002bf30:	e0bfff17 	ldw	r2,-4(fp)
2002bf34:	00c00044 	movi	r3,1
2002bf38:	1884983a 	sll	r2,r3,r2
2002bf3c:	1007883a 	mov	r3,r2
2002bf40:	e0bffd17 	ldw	r2,-12(fp)
2002bf44:	1884703a 	and	r2,r3,r2
2002bf48:	1004c03a 	cmpne	r2,r2,zero
2002bf4c:	10803fcc 	andi	r2,r2,255
}
2002bf50:	e037883a 	mov	sp,fp
2002bf54:	df000017 	ldw	fp,0(sp)
2002bf58:	dec00104 	addi	sp,sp,4
2002bf5c:	f800283a 	ret

2002bf60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2002bf60:	defff504 	addi	sp,sp,-44
2002bf64:	dfc00a15 	stw	ra,40(sp)
2002bf68:	df000915 	stw	fp,36(sp)
2002bf6c:	df000904 	addi	fp,sp,36
2002bf70:	e13ffc15 	stw	r4,-16(fp)
2002bf74:	e17ffd15 	stw	r5,-12(fp)
2002bf78:	e1bffe15 	stw	r6,-8(fp)
2002bf7c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2002bf80:	00bffa84 	movi	r2,-22
2002bf84:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2002bf88:	e0bffd17 	ldw	r2,-12(fp)
2002bf8c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2002bf90:	e0bff817 	ldw	r2,-32(fp)
2002bf94:	10800808 	cmpgei	r2,r2,32
2002bf98:	1000271e 	bne	r2,zero,2002c038 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2002bf9c:	0005303a 	rdctl	r2,status
2002bfa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2002bfa4:	e0fffa17 	ldw	r3,-24(fp)
2002bfa8:	00bfff84 	movi	r2,-2
2002bfac:	1884703a 	and	r2,r3,r2
2002bfb0:	1001703a 	wrctl	status,r2
  
  return context;
2002bfb4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2002bfb8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
2002bfbc:	00c800f4 	movhi	r3,8195
2002bfc0:	18c11204 	addi	r3,r3,1096
2002bfc4:	e0bff817 	ldw	r2,-32(fp)
2002bfc8:	100490fa 	slli	r2,r2,3
2002bfcc:	1885883a 	add	r2,r3,r2
2002bfd0:	e0fffe17 	ldw	r3,-8(fp)
2002bfd4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2002bfd8:	00c800f4 	movhi	r3,8195
2002bfdc:	18c11204 	addi	r3,r3,1096
2002bfe0:	e0bff817 	ldw	r2,-32(fp)
2002bfe4:	100490fa 	slli	r2,r2,3
2002bfe8:	1885883a 	add	r2,r3,r2
2002bfec:	10800104 	addi	r2,r2,4
2002bff0:	e0ffff17 	ldw	r3,-4(fp)
2002bff4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2002bff8:	e0bffe17 	ldw	r2,-8(fp)
2002bffc:	10000526 	beq	r2,zero,2002c014 <alt_iic_isr_register+0xb4>
2002c000:	e0bff817 	ldw	r2,-32(fp)
2002c004:	e13ffc17 	ldw	r4,-16(fp)
2002c008:	100b883a 	mov	r5,r2
2002c00c:	002bdd80 	call	2002bdd8 <alt_ic_irq_enable>
2002c010:	00000406 	br	2002c024 <alt_iic_isr_register+0xc4>
2002c014:	e0bff817 	ldw	r2,-32(fp)
2002c018:	e13ffc17 	ldw	r4,-16(fp)
2002c01c:	100b883a 	mov	r5,r2
2002c020:	002be740 	call	2002be74 <alt_ic_irq_disable>
2002c024:	e0bff715 	stw	r2,-36(fp)
2002c028:	e0bff917 	ldw	r2,-28(fp)
2002c02c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2002c030:	e0bffb17 	ldw	r2,-20(fp)
2002c034:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2002c038:	e0bff717 	ldw	r2,-36(fp)
}
2002c03c:	e037883a 	mov	sp,fp
2002c040:	dfc00117 	ldw	ra,4(sp)
2002c044:	df000017 	ldw	fp,0(sp)
2002c048:	dec00204 	addi	sp,sp,8
2002c04c:	f800283a 	ret

2002c050 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2002c050:	defff904 	addi	sp,sp,-28
2002c054:	dfc00615 	stw	ra,24(sp)
2002c058:	df000515 	stw	fp,20(sp)
2002c05c:	df000504 	addi	fp,sp,20
2002c060:	e13ffc15 	stw	r4,-16(fp)
2002c064:	e17ffd15 	stw	r5,-12(fp)
2002c068:	e1bffe15 	stw	r6,-8(fp)
2002c06c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2002c070:	e13ffd17 	ldw	r4,-12(fp)
2002c074:	e17ffe17 	ldw	r5,-8(fp)
2002c078:	e1bfff17 	ldw	r6,-4(fp)
2002c07c:	002c2a40 	call	2002c2a4 <open>
2002c080:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
2002c084:	e0bffb17 	ldw	r2,-20(fp)
2002c088:	10001c16 	blt	r2,zero,2002c0fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
2002c08c:	00c800f4 	movhi	r3,8195
2002c090:	18f5de04 	addi	r3,r3,-10376
2002c094:	e0bffb17 	ldw	r2,-20(fp)
2002c098:	10800324 	muli	r2,r2,12
2002c09c:	1885883a 	add	r2,r3,r2
2002c0a0:	10c00017 	ldw	r3,0(r2)
2002c0a4:	e0bffc17 	ldw	r2,-16(fp)
2002c0a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2002c0ac:	00c800f4 	movhi	r3,8195
2002c0b0:	18f5de04 	addi	r3,r3,-10376
2002c0b4:	e0bffb17 	ldw	r2,-20(fp)
2002c0b8:	10800324 	muli	r2,r2,12
2002c0bc:	1885883a 	add	r2,r3,r2
2002c0c0:	10800104 	addi	r2,r2,4
2002c0c4:	10c00017 	ldw	r3,0(r2)
2002c0c8:	e0bffc17 	ldw	r2,-16(fp)
2002c0cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2002c0d0:	00c800f4 	movhi	r3,8195
2002c0d4:	18f5de04 	addi	r3,r3,-10376
2002c0d8:	e0bffb17 	ldw	r2,-20(fp)
2002c0dc:	10800324 	muli	r2,r2,12
2002c0e0:	1885883a 	add	r2,r3,r2
2002c0e4:	10800204 	addi	r2,r2,8
2002c0e8:	10c00017 	ldw	r3,0(r2)
2002c0ec:	e0bffc17 	ldw	r2,-16(fp)
2002c0f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2002c0f4:	e13ffb17 	ldw	r4,-20(fp)
2002c0f8:	002a8dc0 	call	2002a8dc <alt_release_fd>
  }
} 
2002c0fc:	e037883a 	mov	sp,fp
2002c100:	dfc00117 	ldw	ra,4(sp)
2002c104:	df000017 	ldw	fp,0(sp)
2002c108:	dec00204 	addi	sp,sp,8
2002c10c:	f800283a 	ret

2002c110 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2002c110:	defffb04 	addi	sp,sp,-20
2002c114:	dfc00415 	stw	ra,16(sp)
2002c118:	df000315 	stw	fp,12(sp)
2002c11c:	df000304 	addi	fp,sp,12
2002c120:	e13ffd15 	stw	r4,-12(fp)
2002c124:	e17ffe15 	stw	r5,-8(fp)
2002c128:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2002c12c:	010800f4 	movhi	r4,8195
2002c130:	2135e104 	addi	r4,r4,-10364
2002c134:	e17ffd17 	ldw	r5,-12(fp)
2002c138:	01800044 	movi	r6,1
2002c13c:	01c07fc4 	movi	r7,511
2002c140:	002c0500 	call	2002c050 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2002c144:	010800f4 	movhi	r4,8195
2002c148:	2135de04 	addi	r4,r4,-10376
2002c14c:	e17ffe17 	ldw	r5,-8(fp)
2002c150:	000d883a 	mov	r6,zero
2002c154:	01c07fc4 	movi	r7,511
2002c158:	002c0500 	call	2002c050 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2002c15c:	010800f4 	movhi	r4,8195
2002c160:	2135e404 	addi	r4,r4,-10352
2002c164:	e17fff17 	ldw	r5,-4(fp)
2002c168:	01800044 	movi	r6,1
2002c16c:	01c07fc4 	movi	r7,511
2002c170:	002c0500 	call	2002c050 <alt_open_fd>
}  
2002c174:	e037883a 	mov	sp,fp
2002c178:	dfc00117 	ldw	ra,4(sp)
2002c17c:	df000017 	ldw	fp,0(sp)
2002c180:	dec00204 	addi	sp,sp,8
2002c184:	f800283a 	ret

2002c188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2002c188:	defffe04 	addi	sp,sp,-8
2002c18c:	dfc00115 	stw	ra,4(sp)
2002c190:	df000015 	stw	fp,0(sp)
2002c194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2002c198:	008800f4 	movhi	r2,8195
2002c19c:	10ba6004 	addi	r2,r2,-5760
2002c1a0:	10800017 	ldw	r2,0(r2)
2002c1a4:	10000526 	beq	r2,zero,2002c1bc <alt_get_errno+0x34>
2002c1a8:	008800f4 	movhi	r2,8195
2002c1ac:	10ba6004 	addi	r2,r2,-5760
2002c1b0:	10800017 	ldw	r2,0(r2)
2002c1b4:	103ee83a 	callr	r2
2002c1b8:	00000206 	br	2002c1c4 <alt_get_errno+0x3c>
2002c1bc:	008800f4 	movhi	r2,8195
2002c1c0:	10810104 	addi	r2,r2,1028
}
2002c1c4:	e037883a 	mov	sp,fp
2002c1c8:	dfc00117 	ldw	ra,4(sp)
2002c1cc:	df000017 	ldw	fp,0(sp)
2002c1d0:	dec00204 	addi	sp,sp,8
2002c1d4:	f800283a 	ret

2002c1d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
2002c1d8:	defffd04 	addi	sp,sp,-12
2002c1dc:	df000215 	stw	fp,8(sp)
2002c1e0:	df000204 	addi	fp,sp,8
2002c1e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2002c1e8:	e0bfff17 	ldw	r2,-4(fp)
2002c1ec:	10800217 	ldw	r2,8(r2)
2002c1f0:	10d00034 	orhi	r3,r2,16384
2002c1f4:	e0bfff17 	ldw	r2,-4(fp)
2002c1f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2002c1fc:	e03ffe15 	stw	zero,-8(fp)
2002c200:	00001d06 	br	2002c278 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2002c204:	00c800f4 	movhi	r3,8195
2002c208:	18f5de04 	addi	r3,r3,-10376
2002c20c:	e0bffe17 	ldw	r2,-8(fp)
2002c210:	10800324 	muli	r2,r2,12
2002c214:	1885883a 	add	r2,r3,r2
2002c218:	10c00017 	ldw	r3,0(r2)
2002c21c:	e0bfff17 	ldw	r2,-4(fp)
2002c220:	10800017 	ldw	r2,0(r2)
2002c224:	1880111e 	bne	r3,r2,2002c26c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2002c228:	00c800f4 	movhi	r3,8195
2002c22c:	18f5de04 	addi	r3,r3,-10376
2002c230:	e0bffe17 	ldw	r2,-8(fp)
2002c234:	10800324 	muli	r2,r2,12
2002c238:	1885883a 	add	r2,r3,r2
2002c23c:	10800204 	addi	r2,r2,8
2002c240:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2002c244:	1000090e 	bge	r2,zero,2002c26c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
2002c248:	e0bffe17 	ldw	r2,-8(fp)
2002c24c:	10c00324 	muli	r3,r2,12
2002c250:	008800f4 	movhi	r2,8195
2002c254:	10b5de04 	addi	r2,r2,-10376
2002c258:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2002c25c:	e0bfff17 	ldw	r2,-4(fp)
2002c260:	18800226 	beq	r3,r2,2002c26c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2002c264:	00bffcc4 	movi	r2,-13
2002c268:	00000a06 	br	2002c294 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2002c26c:	e0bffe17 	ldw	r2,-8(fp)
2002c270:	10800044 	addi	r2,r2,1
2002c274:	e0bffe15 	stw	r2,-8(fp)
2002c278:	008800f4 	movhi	r2,8195
2002c27c:	10ba5f04 	addi	r2,r2,-5764
2002c280:	10800017 	ldw	r2,0(r2)
2002c284:	1007883a 	mov	r3,r2
2002c288:	e0bffe17 	ldw	r2,-8(fp)
2002c28c:	18bfdd2e 	bgeu	r3,r2,2002c204 <__alt_data_end+0xfffece04>
    }
  }
  
  /* The device is not locked */
 
  return 0;
2002c290:	0005883a 	mov	r2,zero
}
2002c294:	e037883a 	mov	sp,fp
2002c298:	df000017 	ldw	fp,0(sp)
2002c29c:	dec00104 	addi	sp,sp,4
2002c2a0:	f800283a 	ret

2002c2a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2002c2a4:	defff604 	addi	sp,sp,-40
2002c2a8:	dfc00915 	stw	ra,36(sp)
2002c2ac:	df000815 	stw	fp,32(sp)
2002c2b0:	df000804 	addi	fp,sp,32
2002c2b4:	e13ffd15 	stw	r4,-12(fp)
2002c2b8:	e17ffe15 	stw	r5,-8(fp)
2002c2bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
2002c2c0:	00bfffc4 	movi	r2,-1
2002c2c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
2002c2c8:	00bffb44 	movi	r2,-19
2002c2cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
2002c2d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2002c2d4:	e13ffd17 	ldw	r4,-12(fp)
2002c2d8:	014800f4 	movhi	r5,8195
2002c2dc:	297a5d04 	addi	r5,r5,-5772
2002c2e0:	002c4180 	call	2002c418 <alt_find_dev>
2002c2e4:	e0bff815 	stw	r2,-32(fp)
2002c2e8:	e0bff817 	ldw	r2,-32(fp)
2002c2ec:	1000051e 	bne	r2,zero,2002c304 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
2002c2f0:	e13ffd17 	ldw	r4,-12(fp)
2002c2f4:	002c4a80 	call	2002c4a8 <alt_find_file>
2002c2f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2002c2fc:	00800044 	movi	r2,1
2002c300:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2002c304:	e0bff817 	ldw	r2,-32(fp)
2002c308:	10002926 	beq	r2,zero,2002c3b0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
2002c30c:	e13ff817 	ldw	r4,-32(fp)
2002c310:	002c5bc0 	call	2002c5bc <alt_get_fd>
2002c314:	e0bff915 	stw	r2,-28(fp)
2002c318:	e0bff917 	ldw	r2,-28(fp)
2002c31c:	1000030e 	bge	r2,zero,2002c32c <open+0x88>
    {
      status = index;
2002c320:	e0bff917 	ldw	r2,-28(fp)
2002c324:	e0bffa15 	stw	r2,-24(fp)
2002c328:	00002306 	br	2002c3b8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
2002c32c:	e0bff917 	ldw	r2,-28(fp)
2002c330:	10c00324 	muli	r3,r2,12
2002c334:	008800f4 	movhi	r2,8195
2002c338:	10b5de04 	addi	r2,r2,-10376
2002c33c:	1885883a 	add	r2,r3,r2
2002c340:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2002c344:	e0fffe17 	ldw	r3,-8(fp)
2002c348:	00900034 	movhi	r2,16384
2002c34c:	10bfffc4 	addi	r2,r2,-1
2002c350:	1886703a 	and	r3,r3,r2
2002c354:	e0bffc17 	ldw	r2,-16(fp)
2002c358:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
2002c35c:	e0bffb17 	ldw	r2,-20(fp)
2002c360:	1000051e 	bne	r2,zero,2002c378 <open+0xd4>
2002c364:	e13ffc17 	ldw	r4,-16(fp)
2002c368:	002c1d80 	call	2002c1d8 <alt_file_locked>
2002c36c:	e0bffa15 	stw	r2,-24(fp)
2002c370:	e0bffa17 	ldw	r2,-24(fp)
2002c374:	10001016 	blt	r2,zero,2002c3b8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2002c378:	e0bff817 	ldw	r2,-32(fp)
2002c37c:	10800317 	ldw	r2,12(r2)
2002c380:	10000826 	beq	r2,zero,2002c3a4 <open+0x100>
2002c384:	e0bff817 	ldw	r2,-32(fp)
2002c388:	10800317 	ldw	r2,12(r2)
2002c38c:	e13ffc17 	ldw	r4,-16(fp)
2002c390:	e17ffd17 	ldw	r5,-12(fp)
2002c394:	e1bffe17 	ldw	r6,-8(fp)
2002c398:	e1ffff17 	ldw	r7,-4(fp)
2002c39c:	103ee83a 	callr	r2
2002c3a0:	00000106 	br	2002c3a8 <open+0x104>
2002c3a4:	0005883a 	mov	r2,zero
2002c3a8:	e0bffa15 	stw	r2,-24(fp)
2002c3ac:	00000206 	br	2002c3b8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
2002c3b0:	00bffb44 	movi	r2,-19
2002c3b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2002c3b8:	e0bffa17 	ldw	r2,-24(fp)
2002c3bc:	1000080e 	bge	r2,zero,2002c3e0 <open+0x13c>
  {
    alt_release_fd (index);  
2002c3c0:	e13ff917 	ldw	r4,-28(fp)
2002c3c4:	002a8dc0 	call	2002a8dc <alt_release_fd>
    ALT_ERRNO = -status;
2002c3c8:	002c1880 	call	2002c188 <alt_get_errno>
2002c3cc:	e0fffa17 	ldw	r3,-24(fp)
2002c3d0:	00c7c83a 	sub	r3,zero,r3
2002c3d4:	10c00015 	stw	r3,0(r2)
    return -1;
2002c3d8:	00bfffc4 	movi	r2,-1
2002c3dc:	00000106 	br	2002c3e4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
2002c3e0:	e0bff917 	ldw	r2,-28(fp)
}
2002c3e4:	e037883a 	mov	sp,fp
2002c3e8:	dfc00117 	ldw	ra,4(sp)
2002c3ec:	df000017 	ldw	fp,0(sp)
2002c3f0:	dec00204 	addi	sp,sp,8
2002c3f4:	f800283a 	ret

2002c3f8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
2002c3f8:	deffff04 	addi	sp,sp,-4
2002c3fc:	df000015 	stw	fp,0(sp)
2002c400:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
2002c404:	000170fa 	wrctl	ienable,zero
}
2002c408:	e037883a 	mov	sp,fp
2002c40c:	df000017 	ldw	fp,0(sp)
2002c410:	dec00104 	addi	sp,sp,4
2002c414:	f800283a 	ret

2002c418 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2002c418:	defffa04 	addi	sp,sp,-24
2002c41c:	dfc00515 	stw	ra,20(sp)
2002c420:	df000415 	stw	fp,16(sp)
2002c424:	df000404 	addi	fp,sp,16
2002c428:	e13ffe15 	stw	r4,-8(fp)
2002c42c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2002c430:	e0bfff17 	ldw	r2,-4(fp)
2002c434:	10800017 	ldw	r2,0(r2)
2002c438:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2002c43c:	e13ffe17 	ldw	r4,-8(fp)
2002c440:	0020ec80 	call	20020ec8 <strlen>
2002c444:	10800044 	addi	r2,r2,1
2002c448:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2002c44c:	00000d06 	br	2002c484 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2002c450:	e0bffc17 	ldw	r2,-16(fp)
2002c454:	10c00217 	ldw	r3,8(r2)
2002c458:	e0bffd17 	ldw	r2,-12(fp)
2002c45c:	1809883a 	mov	r4,r3
2002c460:	e17ffe17 	ldw	r5,-8(fp)
2002c464:	100d883a 	mov	r6,r2
2002c468:	002c7480 	call	2002c748 <memcmp>
2002c46c:	1000021e 	bne	r2,zero,2002c478 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2002c470:	e0bffc17 	ldw	r2,-16(fp)
2002c474:	00000706 	br	2002c494 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2002c478:	e0bffc17 	ldw	r2,-16(fp)
2002c47c:	10800017 	ldw	r2,0(r2)
2002c480:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2002c484:	e0fffc17 	ldw	r3,-16(fp)
2002c488:	e0bfff17 	ldw	r2,-4(fp)
2002c48c:	18bff01e 	bne	r3,r2,2002c450 <__alt_data_end+0xfffed050>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2002c490:	0005883a 	mov	r2,zero
}
2002c494:	e037883a 	mov	sp,fp
2002c498:	dfc00117 	ldw	ra,4(sp)
2002c49c:	df000017 	ldw	fp,0(sp)
2002c4a0:	dec00204 	addi	sp,sp,8
2002c4a4:	f800283a 	ret

2002c4a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2002c4a8:	defffb04 	addi	sp,sp,-20
2002c4ac:	dfc00415 	stw	ra,16(sp)
2002c4b0:	df000315 	stw	fp,12(sp)
2002c4b4:	df000304 	addi	fp,sp,12
2002c4b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2002c4bc:	008800f4 	movhi	r2,8195
2002c4c0:	10ba5b04 	addi	r2,r2,-5780
2002c4c4:	10800017 	ldw	r2,0(r2)
2002c4c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2002c4cc:	00003106 	br	2002c594 <alt_find_file+0xec>
  {
    len = strlen(next->name);
2002c4d0:	e0bffd17 	ldw	r2,-12(fp)
2002c4d4:	10800217 	ldw	r2,8(r2)
2002c4d8:	1009883a 	mov	r4,r2
2002c4dc:	0020ec80 	call	20020ec8 <strlen>
2002c4e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2002c4e4:	e0bffd17 	ldw	r2,-12(fp)
2002c4e8:	10c00217 	ldw	r3,8(r2)
2002c4ec:	e0bffe17 	ldw	r2,-8(fp)
2002c4f0:	10bfffc4 	addi	r2,r2,-1
2002c4f4:	1885883a 	add	r2,r3,r2
2002c4f8:	10800003 	ldbu	r2,0(r2)
2002c4fc:	10803fcc 	andi	r2,r2,255
2002c500:	1080201c 	xori	r2,r2,128
2002c504:	10bfe004 	addi	r2,r2,-128
2002c508:	10800bd8 	cmpnei	r2,r2,47
2002c50c:	1000031e 	bne	r2,zero,2002c51c <alt_find_file+0x74>
    {
      len -= 1;
2002c510:	e0bffe17 	ldw	r2,-8(fp)
2002c514:	10bfffc4 	addi	r2,r2,-1
2002c518:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2002c51c:	e0bffe17 	ldw	r2,-8(fp)
2002c520:	e0ffff17 	ldw	r3,-4(fp)
2002c524:	1885883a 	add	r2,r3,r2
2002c528:	10800003 	ldbu	r2,0(r2)
2002c52c:	10803fcc 	andi	r2,r2,255
2002c530:	1080201c 	xori	r2,r2,128
2002c534:	10bfe004 	addi	r2,r2,-128
2002c538:	10800be0 	cmpeqi	r2,r2,47
2002c53c:	1000081e 	bne	r2,zero,2002c560 <alt_find_file+0xb8>
2002c540:	e0bffe17 	ldw	r2,-8(fp)
2002c544:	e0ffff17 	ldw	r3,-4(fp)
2002c548:	1885883a 	add	r2,r3,r2
2002c54c:	10800003 	ldbu	r2,0(r2)
2002c550:	10803fcc 	andi	r2,r2,255
2002c554:	1080201c 	xori	r2,r2,128
2002c558:	10bfe004 	addi	r2,r2,-128
2002c55c:	10000a1e 	bne	r2,zero,2002c588 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
2002c560:	e0bffd17 	ldw	r2,-12(fp)
2002c564:	10c00217 	ldw	r3,8(r2)
2002c568:	e0bffe17 	ldw	r2,-8(fp)
2002c56c:	1809883a 	mov	r4,r3
2002c570:	e17fff17 	ldw	r5,-4(fp)
2002c574:	100d883a 	mov	r6,r2
2002c578:	002c7480 	call	2002c748 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2002c57c:	1000021e 	bne	r2,zero,2002c588 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2002c580:	e0bffd17 	ldw	r2,-12(fp)
2002c584:	00000806 	br	2002c5a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
2002c588:	e0bffd17 	ldw	r2,-12(fp)
2002c58c:	10800017 	ldw	r2,0(r2)
2002c590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2002c594:	e0fffd17 	ldw	r3,-12(fp)
2002c598:	008800f4 	movhi	r2,8195
2002c59c:	10ba5b04 	addi	r2,r2,-5780
2002c5a0:	18bfcb1e 	bne	r3,r2,2002c4d0 <__alt_data_end+0xfffed0d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2002c5a4:	0005883a 	mov	r2,zero
}
2002c5a8:	e037883a 	mov	sp,fp
2002c5ac:	dfc00117 	ldw	ra,4(sp)
2002c5b0:	df000017 	ldw	fp,0(sp)
2002c5b4:	dec00204 	addi	sp,sp,8
2002c5b8:	f800283a 	ret

2002c5bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2002c5bc:	defffc04 	addi	sp,sp,-16
2002c5c0:	df000315 	stw	fp,12(sp)
2002c5c4:	df000304 	addi	fp,sp,12
2002c5c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2002c5cc:	00bffa04 	movi	r2,-24
2002c5d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2002c5d4:	e03ffd15 	stw	zero,-12(fp)
2002c5d8:	00001d06 	br	2002c650 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
2002c5dc:	00c800f4 	movhi	r3,8195
2002c5e0:	18f5de04 	addi	r3,r3,-10376
2002c5e4:	e0bffd17 	ldw	r2,-12(fp)
2002c5e8:	10800324 	muli	r2,r2,12
2002c5ec:	1885883a 	add	r2,r3,r2
2002c5f0:	10800017 	ldw	r2,0(r2)
2002c5f4:	1000131e 	bne	r2,zero,2002c644 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
2002c5f8:	00c800f4 	movhi	r3,8195
2002c5fc:	18f5de04 	addi	r3,r3,-10376
2002c600:	e0bffd17 	ldw	r2,-12(fp)
2002c604:	10800324 	muli	r2,r2,12
2002c608:	1885883a 	add	r2,r3,r2
2002c60c:	e0ffff17 	ldw	r3,-4(fp)
2002c610:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2002c614:	008800f4 	movhi	r2,8195
2002c618:	10ba5f04 	addi	r2,r2,-5764
2002c61c:	10c00017 	ldw	r3,0(r2)
2002c620:	e0bffd17 	ldw	r2,-12(fp)
2002c624:	1880040e 	bge	r3,r2,2002c638 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
2002c628:	008800f4 	movhi	r2,8195
2002c62c:	10ba5f04 	addi	r2,r2,-5764
2002c630:	e0fffd17 	ldw	r3,-12(fp)
2002c634:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
2002c638:	e0bffd17 	ldw	r2,-12(fp)
2002c63c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
2002c640:	00000606 	br	2002c65c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2002c644:	e0bffd17 	ldw	r2,-12(fp)
2002c648:	10800044 	addi	r2,r2,1
2002c64c:	e0bffd15 	stw	r2,-12(fp)
2002c650:	e0bffd17 	ldw	r2,-12(fp)
2002c654:	10800810 	cmplti	r2,r2,32
2002c658:	103fe01e 	bne	r2,zero,2002c5dc <__alt_data_end+0xfffed1dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2002c65c:	e0bffe17 	ldw	r2,-8(fp)
}
2002c660:	e037883a 	mov	sp,fp
2002c664:	df000017 	ldw	fp,0(sp)
2002c668:	dec00104 	addi	sp,sp,4
2002c66c:	f800283a 	ret

2002c670 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2002c670:	defffb04 	addi	sp,sp,-20
2002c674:	df000415 	stw	fp,16(sp)
2002c678:	df000404 	addi	fp,sp,16
2002c67c:	e13ffe15 	stw	r4,-8(fp)
2002c680:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
2002c684:	e0bfff17 	ldw	r2,-4(fp)
2002c688:	10840070 	cmpltui	r2,r2,4097
2002c68c:	1000021e 	bne	r2,zero,2002c698 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
2002c690:	00840004 	movi	r2,4096
2002c694:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
2002c698:	e0fffe17 	ldw	r3,-8(fp)
2002c69c:	e0bfff17 	ldw	r2,-4(fp)
2002c6a0:	1885883a 	add	r2,r3,r2
2002c6a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2002c6a8:	e0bffe17 	ldw	r2,-8(fp)
2002c6ac:	e0bffc15 	stw	r2,-16(fp)
2002c6b0:	00000506 	br	2002c6c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2002c6b4:	e0bffc17 	ldw	r2,-16(fp)
2002c6b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2002c6bc:	e0bffc17 	ldw	r2,-16(fp)
2002c6c0:	10800804 	addi	r2,r2,32
2002c6c4:	e0bffc15 	stw	r2,-16(fp)
2002c6c8:	e0fffc17 	ldw	r3,-16(fp)
2002c6cc:	e0bffd17 	ldw	r2,-12(fp)
2002c6d0:	18bff836 	bltu	r3,r2,2002c6b4 <__alt_data_end+0xfffed2b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2002c6d4:	e0bffe17 	ldw	r2,-8(fp)
2002c6d8:	108007cc 	andi	r2,r2,31
2002c6dc:	10000226 	beq	r2,zero,2002c6e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2002c6e0:	e0bffc17 	ldw	r2,-16(fp)
2002c6e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2002c6e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
2002c6ec:	e037883a 	mov	sp,fp
2002c6f0:	df000017 	ldw	fp,0(sp)
2002c6f4:	dec00104 	addi	sp,sp,4
2002c6f8:	f800283a 	ret

2002c6fc <atexit>:
2002c6fc:	200b883a 	mov	r5,r4
2002c700:	000d883a 	mov	r6,zero
2002c704:	0009883a 	mov	r4,zero
2002c708:	000f883a 	mov	r7,zero
2002c70c:	002c7c41 	jmpi	2002c7c4 <__register_exitproc>

2002c710 <exit>:
2002c710:	defffe04 	addi	sp,sp,-8
2002c714:	000b883a 	mov	r5,zero
2002c718:	dc000015 	stw	r16,0(sp)
2002c71c:	dfc00115 	stw	ra,4(sp)
2002c720:	2021883a 	mov	r16,r4
2002c724:	002c8f40 	call	2002c8f4 <__call_exitprocs>
2002c728:	008800f4 	movhi	r2,8195
2002c72c:	10ba5604 	addi	r2,r2,-5800
2002c730:	11000017 	ldw	r4,0(r2)
2002c734:	20800f17 	ldw	r2,60(r4)
2002c738:	10000126 	beq	r2,zero,2002c740 <exit+0x30>
2002c73c:	103ee83a 	callr	r2
2002c740:	8009883a 	mov	r4,r16
2002c744:	002ca940 	call	2002ca94 <_exit>

2002c748 <memcmp>:
2002c748:	01c000c4 	movi	r7,3
2002c74c:	3980192e 	bgeu	r7,r6,2002c7b4 <memcmp+0x6c>
2002c750:	2904b03a 	or	r2,r5,r4
2002c754:	11c4703a 	and	r2,r2,r7
2002c758:	10000f26 	beq	r2,zero,2002c798 <memcmp+0x50>
2002c75c:	20c00003 	ldbu	r3,0(r4)
2002c760:	28800003 	ldbu	r2,0(r5)
2002c764:	1880151e 	bne	r3,r2,2002c7bc <memcmp+0x74>
2002c768:	31bfff84 	addi	r6,r6,-2
2002c76c:	01ffffc4 	movi	r7,-1
2002c770:	00000406 	br	2002c784 <memcmp+0x3c>
2002c774:	20c00003 	ldbu	r3,0(r4)
2002c778:	28800003 	ldbu	r2,0(r5)
2002c77c:	31bfffc4 	addi	r6,r6,-1
2002c780:	18800e1e 	bne	r3,r2,2002c7bc <memcmp+0x74>
2002c784:	21000044 	addi	r4,r4,1
2002c788:	29400044 	addi	r5,r5,1
2002c78c:	31fff91e 	bne	r6,r7,2002c774 <__alt_data_end+0xfffed374>
2002c790:	0005883a 	mov	r2,zero
2002c794:	f800283a 	ret
2002c798:	20c00017 	ldw	r3,0(r4)
2002c79c:	28800017 	ldw	r2,0(r5)
2002c7a0:	1880041e 	bne	r3,r2,2002c7b4 <memcmp+0x6c>
2002c7a4:	31bfff04 	addi	r6,r6,-4
2002c7a8:	21000104 	addi	r4,r4,4
2002c7ac:	29400104 	addi	r5,r5,4
2002c7b0:	39bff936 	bltu	r7,r6,2002c798 <__alt_data_end+0xfffed398>
2002c7b4:	303fe91e 	bne	r6,zero,2002c75c <__alt_data_end+0xfffed35c>
2002c7b8:	003ff506 	br	2002c790 <__alt_data_end+0xfffed390>
2002c7bc:	1885c83a 	sub	r2,r3,r2
2002c7c0:	f800283a 	ret

2002c7c4 <__register_exitproc>:
2002c7c4:	defffa04 	addi	sp,sp,-24
2002c7c8:	008800f4 	movhi	r2,8195
2002c7cc:	10ba5604 	addi	r2,r2,-5800
2002c7d0:	dc000315 	stw	r16,12(sp)
2002c7d4:	14000017 	ldw	r16,0(r2)
2002c7d8:	dc400415 	stw	r17,16(sp)
2002c7dc:	dfc00515 	stw	ra,20(sp)
2002c7e0:	80805217 	ldw	r2,328(r16)
2002c7e4:	2023883a 	mov	r17,r4
2002c7e8:	10003e26 	beq	r2,zero,2002c8e4 <__register_exitproc+0x120>
2002c7ec:	10c00117 	ldw	r3,4(r2)
2002c7f0:	020007c4 	movi	r8,31
2002c7f4:	40c0180e 	bge	r8,r3,2002c858 <__register_exitproc+0x94>
2002c7f8:	00800034 	movhi	r2,0
2002c7fc:	10800004 	addi	r2,r2,0
2002c800:	1000061e 	bne	r2,zero,2002c81c <__register_exitproc+0x58>
2002c804:	00bfffc4 	movi	r2,-1
2002c808:	dfc00517 	ldw	ra,20(sp)
2002c80c:	dc400417 	ldw	r17,16(sp)
2002c810:	dc000317 	ldw	r16,12(sp)
2002c814:	dec00604 	addi	sp,sp,24
2002c818:	f800283a 	ret
2002c81c:	01006404 	movi	r4,400
2002c820:	d9400015 	stw	r5,0(sp)
2002c824:	d9800115 	stw	r6,4(sp)
2002c828:	d9c00215 	stw	r7,8(sp)
2002c82c:	00000000 	call	20000000 <__alt_mem_sdram+0x20000000>
2002c830:	d9400017 	ldw	r5,0(sp)
2002c834:	d9800117 	ldw	r6,4(sp)
2002c838:	d9c00217 	ldw	r7,8(sp)
2002c83c:	103ff126 	beq	r2,zero,2002c804 <__alt_data_end+0xfffed404>
2002c840:	80c05217 	ldw	r3,328(r16)
2002c844:	10000115 	stw	zero,4(r2)
2002c848:	10c00015 	stw	r3,0(r2)
2002c84c:	80805215 	stw	r2,328(r16)
2002c850:	10006215 	stw	zero,392(r2)
2002c854:	10006315 	stw	zero,396(r2)
2002c858:	10c00117 	ldw	r3,4(r2)
2002c85c:	88000d1e 	bne	r17,zero,2002c894 <__register_exitproc+0xd0>
2002c860:	19000084 	addi	r4,r3,2
2002c864:	2109883a 	add	r4,r4,r4
2002c868:	18c00044 	addi	r3,r3,1
2002c86c:	2109883a 	add	r4,r4,r4
2002c870:	1109883a 	add	r4,r2,r4
2002c874:	10c00115 	stw	r3,4(r2)
2002c878:	0005883a 	mov	r2,zero
2002c87c:	21400015 	stw	r5,0(r4)
2002c880:	dfc00517 	ldw	ra,20(sp)
2002c884:	dc400417 	ldw	r17,16(sp)
2002c888:	dc000317 	ldw	r16,12(sp)
2002c88c:	dec00604 	addi	sp,sp,24
2002c890:	f800283a 	ret
2002c894:	02400044 	movi	r9,1
2002c898:	12806217 	ldw	r10,392(r2)
2002c89c:	48d2983a 	sll	r9,r9,r3
2002c8a0:	19000804 	addi	r4,r3,32
2002c8a4:	18d1883a 	add	r8,r3,r3
2002c8a8:	2109883a 	add	r4,r4,r4
2002c8ac:	4211883a 	add	r8,r8,r8
2002c8b0:	2109883a 	add	r4,r4,r4
2002c8b4:	1109883a 	add	r4,r2,r4
2002c8b8:	1211883a 	add	r8,r2,r8
2002c8bc:	5254b03a 	or	r10,r10,r9
2002c8c0:	21c02215 	stw	r7,136(r4)
2002c8c4:	41802215 	stw	r6,136(r8)
2002c8c8:	12806215 	stw	r10,392(r2)
2002c8cc:	01000084 	movi	r4,2
2002c8d0:	893fe31e 	bne	r17,r4,2002c860 <__alt_data_end+0xfffed460>
2002c8d4:	11006317 	ldw	r4,396(r2)
2002c8d8:	2252b03a 	or	r9,r4,r9
2002c8dc:	12406315 	stw	r9,396(r2)
2002c8e0:	003fdf06 	br	2002c860 <__alt_data_end+0xfffed460>
2002c8e4:	008800f4 	movhi	r2,8195
2002c8e8:	10815204 	addi	r2,r2,1352
2002c8ec:	80805215 	stw	r2,328(r16)
2002c8f0:	003fbe06 	br	2002c7ec <__alt_data_end+0xfffed3ec>

2002c8f4 <__call_exitprocs>:
2002c8f4:	008800f4 	movhi	r2,8195
2002c8f8:	10ba5604 	addi	r2,r2,-5800
2002c8fc:	10800017 	ldw	r2,0(r2)
2002c900:	defff304 	addi	sp,sp,-52
2002c904:	df000b15 	stw	fp,44(sp)
2002c908:	d8800015 	stw	r2,0(sp)
2002c90c:	10805204 	addi	r2,r2,328
2002c910:	dd400815 	stw	r21,32(sp)
2002c914:	dfc00c15 	stw	ra,48(sp)
2002c918:	ddc00a15 	stw	r23,40(sp)
2002c91c:	dd800915 	stw	r22,36(sp)
2002c920:	dd000715 	stw	r20,28(sp)
2002c924:	dcc00615 	stw	r19,24(sp)
2002c928:	dc800515 	stw	r18,20(sp)
2002c92c:	dc400415 	stw	r17,16(sp)
2002c930:	dc000315 	stw	r16,12(sp)
2002c934:	d9000115 	stw	r4,4(sp)
2002c938:	2839883a 	mov	fp,r5
2002c93c:	d8800215 	stw	r2,8(sp)
2002c940:	057fffc4 	movi	r21,-1
2002c944:	d8800017 	ldw	r2,0(sp)
2002c948:	ddc00217 	ldw	r23,8(sp)
2002c94c:	14805217 	ldw	r18,328(r2)
2002c950:	90001726 	beq	r18,zero,2002c9b0 <__call_exitprocs+0xbc>
2002c954:	94400117 	ldw	r17,4(r18)
2002c958:	8c3fffc4 	addi	r16,r17,-1
2002c95c:	80001116 	blt	r16,zero,2002c9a4 <__call_exitprocs+0xb0>
2002c960:	8c400044 	addi	r17,r17,1
2002c964:	8427883a 	add	r19,r16,r16
2002c968:	8c63883a 	add	r17,r17,r17
2002c96c:	95802204 	addi	r22,r18,136
2002c970:	9ce7883a 	add	r19,r19,r19
2002c974:	8c63883a 	add	r17,r17,r17
2002c978:	b4e7883a 	add	r19,r22,r19
2002c97c:	9463883a 	add	r17,r18,r17
2002c980:	e0001726 	beq	fp,zero,2002c9e0 <__call_exitprocs+0xec>
2002c984:	8c87c83a 	sub	r3,r17,r18
2002c988:	b0c7883a 	add	r3,r22,r3
2002c98c:	18c01e17 	ldw	r3,120(r3)
2002c990:	1f001326 	beq	r3,fp,2002c9e0 <__call_exitprocs+0xec>
2002c994:	843fffc4 	addi	r16,r16,-1
2002c998:	9cffff04 	addi	r19,r19,-4
2002c99c:	8c7fff04 	addi	r17,r17,-4
2002c9a0:	857ff71e 	bne	r16,r21,2002c980 <__alt_data_end+0xfffed580>
2002c9a4:	00800034 	movhi	r2,0
2002c9a8:	10800004 	addi	r2,r2,0
2002c9ac:	10002a1e 	bne	r2,zero,2002ca58 <__call_exitprocs+0x164>
2002c9b0:	dfc00c17 	ldw	ra,48(sp)
2002c9b4:	df000b17 	ldw	fp,44(sp)
2002c9b8:	ddc00a17 	ldw	r23,40(sp)
2002c9bc:	dd800917 	ldw	r22,36(sp)
2002c9c0:	dd400817 	ldw	r21,32(sp)
2002c9c4:	dd000717 	ldw	r20,28(sp)
2002c9c8:	dcc00617 	ldw	r19,24(sp)
2002c9cc:	dc800517 	ldw	r18,20(sp)
2002c9d0:	dc400417 	ldw	r17,16(sp)
2002c9d4:	dc000317 	ldw	r16,12(sp)
2002c9d8:	dec00d04 	addi	sp,sp,52
2002c9dc:	f800283a 	ret
2002c9e0:	91000117 	ldw	r4,4(r18)
2002c9e4:	88c00017 	ldw	r3,0(r17)
2002c9e8:	213fffc4 	addi	r4,r4,-1
2002c9ec:	24001526 	beq	r4,r16,2002ca44 <__call_exitprocs+0x150>
2002c9f0:	88000015 	stw	zero,0(r17)
2002c9f4:	183fe726 	beq	r3,zero,2002c994 <__alt_data_end+0xfffed594>
2002c9f8:	00800044 	movi	r2,1
2002c9fc:	1408983a 	sll	r4,r2,r16
2002ca00:	91406217 	ldw	r5,392(r18)
2002ca04:	95000117 	ldw	r20,4(r18)
2002ca08:	214a703a 	and	r5,r4,r5
2002ca0c:	28000b26 	beq	r5,zero,2002ca3c <__call_exitprocs+0x148>
2002ca10:	91406317 	ldw	r5,396(r18)
2002ca14:	2148703a 	and	r4,r4,r5
2002ca18:	20000c1e 	bne	r4,zero,2002ca4c <__call_exitprocs+0x158>
2002ca1c:	99400017 	ldw	r5,0(r19)
2002ca20:	d9000117 	ldw	r4,4(sp)
2002ca24:	183ee83a 	callr	r3
2002ca28:	90c00117 	ldw	r3,4(r18)
2002ca2c:	1d3fc51e 	bne	r3,r20,2002c944 <__alt_data_end+0xfffed544>
2002ca30:	b8c00017 	ldw	r3,0(r23)
2002ca34:	1cbfd726 	beq	r3,r18,2002c994 <__alt_data_end+0xfffed594>
2002ca38:	003fc206 	br	2002c944 <__alt_data_end+0xfffed544>
2002ca3c:	183ee83a 	callr	r3
2002ca40:	003ff906 	br	2002ca28 <__alt_data_end+0xfffed628>
2002ca44:	94000115 	stw	r16,4(r18)
2002ca48:	003fea06 	br	2002c9f4 <__alt_data_end+0xfffed5f4>
2002ca4c:	99000017 	ldw	r4,0(r19)
2002ca50:	183ee83a 	callr	r3
2002ca54:	003ff406 	br	2002ca28 <__alt_data_end+0xfffed628>
2002ca58:	90c00117 	ldw	r3,4(r18)
2002ca5c:	1800071e 	bne	r3,zero,2002ca7c <__call_exitprocs+0x188>
2002ca60:	90c00017 	ldw	r3,0(r18)
2002ca64:	18000926 	beq	r3,zero,2002ca8c <__call_exitprocs+0x198>
2002ca68:	9009883a 	mov	r4,r18
2002ca6c:	b8c00015 	stw	r3,0(r23)
2002ca70:	00000000 	call	20000000 <__alt_mem_sdram+0x20000000>
2002ca74:	bc800017 	ldw	r18,0(r23)
2002ca78:	003fb506 	br	2002c950 <__alt_data_end+0xfffed550>
2002ca7c:	90c00017 	ldw	r3,0(r18)
2002ca80:	902f883a 	mov	r23,r18
2002ca84:	1825883a 	mov	r18,r3
2002ca88:	003fb106 	br	2002c950 <__alt_data_end+0xfffed550>
2002ca8c:	0007883a 	mov	r3,zero
2002ca90:	003ffb06 	br	2002ca80 <__alt_data_end+0xfffed680>

2002ca94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
2002ca94:	defffc04 	addi	sp,sp,-16
2002ca98:	df000315 	stw	fp,12(sp)
2002ca9c:	df000304 	addi	fp,sp,12
2002caa0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
2002caa4:	0001883a 	nop
2002caa8:	e0bfff17 	ldw	r2,-4(fp)
2002caac:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
2002cab0:	e0bffd17 	ldw	r2,-12(fp)
2002cab4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
2002cab8:	e0bffe17 	ldw	r2,-8(fp)
2002cabc:	10000226 	beq	r2,zero,2002cac8 <_exit+0x34>
    ALT_SIM_FAIL();
2002cac0:	002af070 	cmpltui	zero,zero,43969
2002cac4:	00000106 	br	2002cacc <_exit+0x38>
  } else {
    ALT_SIM_PASS();
2002cac8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
2002cacc:	003fff06 	br	2002cacc <__alt_data_end+0xfffed6cc>
