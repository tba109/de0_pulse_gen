
DE0_CV_SD_DEMO.elf:     file format elf32-littlenios2
DE0_CV_SD_DEMO.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012e40 memsz 0x00012e40 flags r-x
    LOAD off    0x00013e60 vaddr 0x00012e60 paddr 0x000148bc align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00016318 vaddr 0x00016318 paddr 0x00016318 align 2**12
         filesz 0x00000000 memsz 0x00000324 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011ebc  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dec  00012074  00012074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  00012e60  000148bc  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000324  00016318  00016318  00016318  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000158bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010d0  00000000  00000000  000158e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002bbfe  00000000  00000000  000169b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b862  00000000  00000000  000425ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000cc5a  00000000  00000000  0004de10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000023a4  00000000  00000000  0005aa6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003e98  00000000  00000000  0005ce10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001255c  00000000  00000000  00060ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  00073204  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00073268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00077a36  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00077a39  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00077a3c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00077a3d  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00077a3e  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00077a47  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00077a50  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000d  00000000  00000000  00077a59  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002b  00000000  00000000  00077a66  2**0
                  CONTENTS, READONLY
 25 .jdi          00004b10  00000000  00000000  00077a91  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007814a  00000000  00000000  0007c5a1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00012074 l    d  .rodata	00000000 .rodata
00012e60 l    d  .rwdata	00000000 .rwdata
00016318 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE0_CV_SD_DEMO_bsp//obj/HAL/src/crt0.o
00000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00000000 l    df *ABS*	00000000 FatInternal.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 crc16.c
000125b0 l     O .rodata	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc7.c
000127b0 l     O .rodata	00000100 crc7_syndrome_table
00000000 l    df *ABS*	00000000 sd_hal.c
00000000 l    df *ABS*	00000000 sd_lib.c
0001634c l     O .bss	00000038 gSdInfo
00000000 l    df *ABS*	00000000 sd_protocol.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00005e30 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000073ec l     F .text	00000034 __sprint_r
00012a1a l     O .rodata	00000010 blanks.3546
00012a2a l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00012b3b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0000949c l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000aed8 l     F .text	00000008 __fp_lock
0000aee0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013268 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012ce0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00012e28 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000eac4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f710 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f828 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f854 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f950 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000fa40 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fb2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fd04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000148ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010120 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001025c l     F .text	00000038 alt_dev_reg
0001381c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010544 l     F .text	00000204 altera_avalon_jtag_uart_irq
00010748 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010d80 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011154 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000115f4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001172c l     F .text	00000050 alt_get_errno
0001177c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0000702c g     F .text	0000001c putchar
0000ced8 g     F .text	00000074 _mprec_log10
0000cfc8 g     F .text	00000084 __any_on
0000de34 g     F .text	00000064 _isatty_r
00012d10 g     O .rodata	00000028 __mprec_tinytens
0000fc4c g     F .text	00000078 alt_main
000065f8 g     F .text	00000044 __ashldi3
00007048 g     F .text	00000084 _puts_r
0000070c g     F .text	0000006c Fat_FileBrowseBegin
000163ac g     O .bss	00000100 alt_irq
0000de98 g     F .text	0000006c _lseek_r
000148bc g       *ABS*	00000000 __flash_rwdata_start
0000f1b0 g     F .text	0000005c __eqdf2
000040dc g     F .text	00000080 SDLIB_WriteBlock512
0001663c g       *ABS*	00000000 __alt_heap_start
00006fe8 g     F .text	0000003c printf
00005564 g     F .text	000001a8 SD_CMD24
0000d934 g     F .text	0000005c __sseek
0000af68 g     F .text	0000010c __sinit
0000d998 g     F .text	0000013c __swbuf_r
0000bc00 g     F .text	0000009c _setlocale_r
0000aef4 g     F .text	00000064 __sfmoreglue
0000fce4 g     F .text	00000020 __malloc_unlock
00000778 g     F .text	00000428 Fat_FileBrowseNext
00005990 g     F .text	0000013c __divsf3
000035ec g     F .text	0000002c SDHAL_IsSupport4Bits
00003518 g     F .text	00000050 crc7_byte
0000211c g     F .text	000000a8 fatIsValidDir
0000bf7c g     F .text	00000128 memmove
0000af58 g     F .text	00000010 _cleanup
0000c0a4 g     F .text	000000a8 _Balloc
000031dc g     F .text	0000002c LED_AllOff
0000f268 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00003778 g     F .text	00000218 SDHAL_GetResponse
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ddcc g     F .text	00000068 _fstat_r
00016324 g     O .bss	00000004 errno
00005d98 g     F .text	00000038 __make_dp
00001afc g     F .text	00000168 fatNextCluster
00006260 g     F .text	0000002c __make_fp
00016338 g     O .bss	00000004 alt_argv
0001c87c g       *ABS*	00000000 _gp
000100f0 g     F .text	00000030 usleep
0001369c g     O .rwdata	00000180 alt_fd_list
00007024 g     F .text	00000008 _putchar_r
000119bc g     F .text	00000090 alt_find_dev
00006de8 g     F .text	000000f8 memcpy
00003208 g     F .text	00000040 LED_Display
0000aee8 g     F .text	0000000c _cleanup_r
0000f38c g     F .text	000000d4 __floatsidf
000116b4 g     F .text	00000078 alt_io_redirect
0000f330 g     F .text	0000005c __ltdf2
00012074 g       *ABS*	00000000 __DTOR_END__
00000e58 g     F .text	000000b0 Fat_FileExist
000070cc g     F .text	00000014 puts
000046dc g     F .text	00000198 SD_CMD2
0000ce34 g     F .text	000000a4 __ratio
00010948 g     F .text	00000218 altera_avalon_jtag_uart_read
0000663c g     F .text	00000014 malloc
00006fbc g     F .text	0000002c _printf_r
00005f50 g     F .text	00000008 __udivsi3
0000f9a0 g     F .text	000000a0 isatty
00012d60 g     O .rodata	000000c8 __mprec_tens
0000523c g     F .text	00000180 SD_ACMD42
0000bc9c g     F .text	0000000c __locale_charset
000092e8 g     F .text	00000040 vsnprintf
00011c14 g     F .text	0000008c alt_icache_flush
00016320 g     O .bss	00000004 __malloc_top_pad
00014890 g     O .rwdata	00000004 __mb_cur_max
0000bca8 g     F .text	0000000c _localeconv_r
00004d90 g     F .text	00000180 SD_CMD7
0000c4a4 g     F .text	0000003c __i2b
0000b5bc g     F .text	000004e4 __sfvwrite_r
000070e0 g     F .text	00000064 _sbrk_r
00004f10 g     F .text	000001a0 SD_CMD16
0000578c g     F .text	00000074 ArrayToU32
0000df04 g     F .text	0000006c _read_r
00013668 g     O .rwdata	0000000c __lc_ctype
000148a4 g     O .rwdata	00000004 alt_max_fd
00002c18 g     F .text	000003d8 fatMount
000064b0 g     F .text	00000104 __unpack_d
0000dc7c g     F .text	0000013c _fclose_r
0000aea8 g     F .text	00000030 fflush
0001631c g     O .bss	00000004 __malloc_max_sbrked_mem
00005acc g     F .text	00000044 __extendsfdf2
0000ee18 g     F .text	00000054 __adddf3
000021c4 g     F .text	00000048 fatIsUnusedDir
0000cba8 g     F .text	00000148 __b2d
0000e538 g     F .text	0000058c __umoddi3
0000fb7c g     F .text	000000d0 lseek
00014888 g     O .rwdata	00000004 _global_impure_ptr
0000d1f8 g     F .text	000005fc _realloc_r
0001663c g       *ABS*	00000000 __bss_end
00011504 g     F .text	000000f0 alt_iic_isr_register
0000ffec g     F .text	00000104 alt_tick
0000df70 g     F .text	000005c8 __udivdi3
00012d38 g     O .rodata	00000028 __mprec_bigtens
0000c288 g     F .text	00000104 __s2b
0000f524 g     F .text	0000011c __floatunsidf
0000c948 g     F .text	00000058 __mcmp
00014884 g     O .rwdata	00000004 __ctype_ptr
00002ff0 g     F .text	0000003c SD_ReadBlock512
0000b180 g     F .text	00000018 __fp_lock_all
000114b8 g     F .text	0000004c alt_ic_irq_enabled
00000f08 g     F .text	00000228 Fat_FileOpen
0000ff54 g     F .text	00000098 alt_alarm_stop
00016348 g     O .bss	00000004 alt_irq_active
00001ddc g     F .text	000001ec fatDelClusterList
000000ec g     F .exceptions	000000cc alt_irq_handler
00013674 g     O .rwdata	00000028 alt_dev_null
00003684 g     F .text	000000f4 SDHAL_SendCmd
00006198 g     F .text	000000c8 __unpack_f
00011110 g     F .text	00000044 alt_dcache_flush_all
0000c38c g     F .text	00000068 __hi0bits
00003990 g     F .text	00000158 SDHAL_ReadData
0000f460 g     F .text	000000c4 __fixdfsi
000148bc g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001489c g     O .rwdata	00000008 alt_dev_list
0000060c g     F .text	00000044 Fat_Mount
00010170 g     F .text	000000ec write
0000d04c g     F .text	000000bc _putc_r
00012e60 g       *ABS*	00000000 __ram_rodata_end
0000f8a4 g     F .text	000000ac fstat
000065b4 g     F .text	00000044 __lshrdi3
000032f0 g     F .text	0000006c myprintf
0000c6c0 g     F .text	0000012c __pow5mult
00016330 g     O .bss	00000004 __nlocale_changed
00005f58 g     F .text	00000008 __umodsi3
0001663c g       *ABS*	00000000 end
0000606c g     F .text	0000012c __pack_f
000031b0 g     F .text	0000002c LED_AllOn
00010484 g     F .text	000000c0 altera_avalon_jtag_uart_init
00012074 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
00010df4 g     F .text	00000088 alt_avalon_timer_sc_init
00005fc0 g     F .text	000000ac __clzsi2
00010b60 g     F .text	00000220 altera_avalon_jtag_uart_write
00001714 g     F .text	00000048 Fat_FileClose
0000b170 g     F .text	00000004 __sfp_lock_acquire
00000ba0 g     F .text	0000006c Fat_FileCount
0000be84 g     F .text	000000f8 memchr
00007420 g     F .text	00001df8 ___vfprintf_internal_r
00007144 g     F .text	00000058 _sprintf_r
0000b2ec g     F .text	000002d0 _free_r
00011e98 g     F .text	000001a0 __call_exitprocs
0001632c g     O .bss	00000004 __mlocale_changed
0001487c g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000004c _start
00016340 g     O .bss	00000004 _alt_tick_rate
0000c7ec g     F .text	0000015c __lshift
00016344 g     O .bss	00000004 _alt_nticks
000041ac g     F .text	00000088 SD_CMD0
0000fd54 g     F .text	000000f0 read
000102c8 g     F .text	00000058 alt_sys_init
00011d68 g     F .text	00000130 __register_exitproc
00003cc8 g     F .text	00000060 SDHAL_DummyClock
00001130 g     F .text	00000044 Fat_FileSize
00003470 g     F .text	000000a8 crc16
0000c4e0 g     F .text	000001e0 __multiply
0000415c g     F .text	00000028 SD_Init
000107ec g     F .text	00000068 altera_avalon_jtag_uart_close
00012e60 g       *ABS*	00000000 __ram_rwdata_start
00012074 g       *ABS*	00000000 __ram_rodata_start
00016384 g     O .bss	00000028 __malloc_current_mallinfo
0000ccf0 g     F .text	00000144 __d2b
00007208 g     F .text	000000b4 strcasecmp
00010320 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011b60 g     F .text	000000b4 alt_get_fd
00010fbc g     F .text	00000154 alt_busy_sleep
0000f640 g     F .text	000000d0 __fpcmp_parts_d
0000dc18 g     F .text	00000064 _close_r
00001174 g     F .text	000004a0 Fat_FileRead
00011cec g     F .text	0000007c memcmp
000103e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001663c g       *ABS*	00000000 __alt_stack_base
00010430 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002b08 g     F .text	00000110 fatFindUnusedDirectory
00003618 g     F .text	0000006c SDHAL_Init
00009328 g     F .text	00000174 __swsetup_r
00005be4 g     F .text	000001b4 __divdf3
0000b074 g     F .text	000000fc __sfp
0000cf4c g     F .text	0000007c __copybits
00012e60 g     O .rwdata	00000408 __malloc_av_
0000b17c g     F .text	00000004 __sinit_lock_release
0000923c g     F .text	000000ac _vsnprintf_r
0000eecc g     F .text	000002e4 __muldf3
0000d858 g     F .text	00000054 __sread
000128b0 g     O .rodata	00000010 __thenan_sf
0000175c g     F .text	00000224 Fat_SpeedTest
00011a4c g     F .text	00000114 alt_find_file
000111a4 g     F .text	000000a0 alt_dev_llist_insert
0000fcc4 g     F .text	00000020 __malloc_lock
0000fea4 g     F .text	000000b0 sbrk
0000acc0 g     F .text	000001e8 _fflush_r
0000db5c g     F .text	000000bc _calloc_r
00002a5c g     F .text	000000ac fatFindDirectory
00016318 g       *ABS*	00000000 __bss_start
00006ee0 g     F .text	000000dc memset
000004b4 g     F .text	00000158 main
000029c8 g     F .text	00000094 fatReadSecter
0001633c g     O .bss	00000004 alt_envp
00016318 g     O .bss	00000004 __malloc_max_total_mem
0000335c g     F .text	00000088 myprintf_hexarray
00010380 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000dad4 g     F .text	0000001c __swbuf
0000d990 g     F .text	00000008 __sclose
0000220c g     F .text	00000730 fatDump
000186a0 g       *ABS*	00000000 __alt_heap_limit
0000ddb8 g     F .text	00000014 fclose
00005dd0 g     F .text	00000060 __truncdfsf2
000164ac g     O .bss	00000190 _atexit0
000096a4 g     F .text	0000161c _dtoa_r
00006664 g     F .text	00000784 _malloc_r
0000574c g     F .text	00000040 SD_WriteData
000148a8 g     O .rwdata	00000004 alt_errno
0000baa0 g     F .text	000000a8 _fwalk
00001fc8 g     F .text	00000088 fatDumpDate
00003568 g     F .text	00000084 crc7
0000d108 g     F .text	000000f0 putc
00001614 g     F .text	00000100 Fat_FileSeek
00005ea4 g     F .text	00000050 __divsi3
000050b0 g     F .text	0000018c SD_ACMD6
000128c0 g     O .rodata	00000014 __thenan_df
0000b1b0 g     F .text	0000013c _malloc_trim_r
00012074 g       *ABS*	00000000 __CTOR_END__
00005800 g     F .text	00000190 __mulsf3
000072bc g     F .text	000000a4 strcmp
0000302c g     F .text	0000003c SD_WriteBlock512
00012074 g       *ABS*	00000000 __flash_rodata_start
00012074 g       *ABS*	00000000 __DTOR_LIST__
0000293c g     F .text	0000008c fatArray2Value
00004184 g     F .text	00000028 SD_IsSupport4Bits
0000f20c g     F .text	0000005c __nedf2
00001a30 g     F .text	000000cc fat32ClusterType
00010294 g     F .text	00000034 alt_irq_init
0000fe44 g     F .text	00000060 alt_release_fd
0000719c g     F .text	0000006c sprintf
000128d4 g     O .rodata	00000100 __clz_tab
000032c0 g     F .text	00000030 debug_output
00016328 g     O .bss	00000004 _PathLocale
00004540 g     F .text	0000019c SD_ACMD41
00011ca0 g     F .text	00000014 atexit
0000daf0 g     F .text	0000006c _write_r
00004234 g     F .text	0000018c SD_CMD8
00000ca0 g     F .text	000001b8 fatComposeShortFilename
0000bcb4 g     F .text	0000001c setlocale
0001488c g     O .rwdata	00000004 _impure_ptr
00016334 g     O .bss	00000004 alt_argc
000112a0 g     F .text	0000005c _do_dtors
000006a0 g     F .text	0000006c Fat_Type
000033e4 g     F .text	0000008c myprintf_dwordarray
00000020 g       .exceptions	00000000 alt_irq_entry
0000cb48 g     F .text	00000060 __ulp
0000d7f4 g     F .text	00000038 __isinfd
0000b198 g     F .text	00000018 __fp_unlock_all
00000204 g     F .text	000002b0 Fat_Test
00001980 g     F .text	000000b0 fat16ClusterType
00014894 g     O .rwdata	00000008 alt_fs_list
000043c0 g     F .text	00000180 SD_CMD55
00004bd0 g     F .text	000001c0 SD_CMD10
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000bcd0 g     F .text	0000000c localeconv
00000c0c g     F .text	00000094 fatSameLongFilename
0001132c g     F .text	00000050 alt_ic_isr_register
000148bc g       *ABS*	00000000 _edata
00002050 g     F .text	00000088 fatDumpTime
0001663c g       *ABS*	00000000 _end
00004a10 g     F .text	000001c0 SD_CMD9
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00010854 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00011418 g     F .text	000000a0 alt_ic_irq_disable
0000d8ac g     F .text	00000088 __swrite
00014880 g     O .rwdata	00000004 __malloc_trim_threshold
0001199c g     F .text	00000020 altera_nios2_qsys_irq_init
00011cb4 g     F .text	00000038 exit
00003248 g     F .text	00000078 LED_LightCount
00003068 g     F .text	00000148 fatMountSdcard
0000bb48 g     F .text	000000b8 _fwalk_reent
00005b10 g     F .text	000000d4 __floatunsisf
0000c9a0 g     F .text	000001a8 __mdiff
00005ef4 g     F .text	0000005c __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000b174 g     F .text	00000004 __sfp_lock_release
00003d28 g     F .text	00000334 SDLIB_Init
00012a3a g     O .rodata	00000101 _ctype_
000053bc g     F .text	000001a8 SD_CMD17
00012038 g     F .text	0000003c _exit
0000d82c g     F .text	0000002c __isnand
00010e7c g     F .text	00000140 alt_alarm_start
00005f60 g     F .text	00000060 __muldi3
0000bcdc g     F .text	000001a8 __smakebuf_r
00007360 g     F .text	0000008c strlen
00011848 g     F .text	00000154 open
0000f2cc g     F .text	00000064 __gedf2
000112fc g     F .text	00000030 alt_icache_flush_all
000148b8 g     O .rwdata	00000004 alt_priority_mask
0001137c g     F .text	0000009c alt_ic_irq_enable
00003ae8 g     F .text	000001e0 SDHAL_WriteData
00009218 g     F .text	00000024 __vfprintf_internal
00001c64 g     F .text	00000178 fatFindUnusedCluster
0000ee6c g     F .text	00000060 __subdf3
0000c3f4 g     F .text	000000b0 __lo0bits
000148b0 g     O .rwdata	00000008 alt_alarm_list
00011244 g     F .text	0000005c _do_ctors
0000570c g     F .text	00000040 SD_ReadData
0000f760 g     F .text	000000c8 close
00000650 g     F .text	00000050 Fat_Unmount
0000faac g     F .text	00000080 alt_load
0000628c g     F .text	00000224 __pack_d
00006650 g     F .text	00000014 free
0000b178 g     F .text	00000004 __sinit_lock_acquire
0000c174 g     F .text	00000114 __multadd
000020d8 g     F .text	00000044 fatIsLastDir
0000c14c g     F .text	00000028 _Bfree
00004874 g     F .text	0000019c SD_CMD3
0000405c g     F .text	00000080 SDLIB_ReadBlock512



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xfffe3788>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00074 	movhi	r3,1
 130:	18d8eb04 	addi	r3,r3,25516
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000074 	movhi	r4,1
 148:	2118eb04 	addi	r4,r4,25516
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <_gp+0xfffe3894>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <_gp+0xfffe38a0>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
     1bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c4:	00bffd16 	blt	zero,r2,1bc <_gp+0xfffe3940>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c8:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     1cc:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     1d0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d4:	d6b21f14 	ori	gp,gp,51324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1dc:	1098c614 	ori	r2,r2,25368

    movhi r3, %hi(__bss_end)
     1e0:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e4:	18d98f14 	ori	r3,r3,26172

    beq r2, r3, 1f
     1e8:	10c00326 	beq	r2,r3,1f8 <_start+0x40>

0:
    stw zero, (r2)
     1ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f4:	10fffd36 	bltu	r2,r3,1ec <_gp+0xfffe3970>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f8:	000faac0 	call	faac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1fc:	000fc4c0 	call	fc4c <alt_main>

00000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     200:	003fff06 	br	200 <_gp+0xfffe3984>

00000204 <Fat_Test>:
#include "FatFileSystem.h"
#include "system.h"
#include "alt_types.h"


bool Fat_Test(FAT_HANDLE hFat, char *pDumpFile){
     204:	deff6704 	addi	sp,sp,-612
     208:	dfc09815 	stw	ra,608(sp)
     20c:	df009715 	stw	fp,604(sp)
     210:	df009704 	addi	fp,sp,604
     214:	e13ffe15 	stw	r4,-8(fp)
     218:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    int nCount = 0;
     21c:	e03f6a15 	stw	zero,-600(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
     220:	e0bf7204 	addi	r2,fp,-568
     224:	e13ffe17 	ldw	r4,-8(fp)
     228:	100b883a 	mov	r5,r2
     22c:	000070c0 	call	70c <Fat_FileBrowseBegin>
     230:	e0bf6915 	stw	r2,-604(fp)
    if (bSuccess){
     234:	e0bf6917 	ldw	r2,-604(fp)
     238:	10003d26 	beq	r2,zero,330 <Fat_Test+0x12c>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
     23c:	00003606 	br	318 <Fat_Test+0x114>
            if (FileContext.bLongFilename){
     240:	e0bfb417 	ldw	r2,-304(fp)
     244:	10002b26 	beq	r2,zero,2f4 <Fat_Test+0xf0>
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
     248:	e0bf7404 	addi	r2,fp,-560
     24c:	e0bf6b15 	stw	r2,-596(fp)
                pData8 = FileContext.szName;
     250:	e0bf7404 	addi	r2,fp,-560
     254:	e0bf6c15 	stw	r2,-592(fp)
                printf("[%d]", nCount);
     258:	01000074 	movhi	r4,1
     25c:	21081d04 	addi	r4,r4,8308
     260:	e17f6a17 	ldw	r5,-600(fp)
     264:	0006fe80 	call	6fe8 <printf>
                while(*pData16){
     268:	00001b06 	br	2d8 <Fat_Test+0xd4>
                    if (*pData8)
     26c:	e0bf6c17 	ldw	r2,-592(fp)
     270:	10800003 	ldbu	r2,0(r2)
     274:	10803fcc 	andi	r2,r2,255
     278:	10000526 	beq	r2,zero,290 <Fat_Test+0x8c>
                        printf("%c", *pData8);
     27c:	e0bf6c17 	ldw	r2,-592(fp)
     280:	10800003 	ldbu	r2,0(r2)
     284:	10803fcc 	andi	r2,r2,255
     288:	1009883a 	mov	r4,r2
     28c:	000702c0 	call	702c <putchar>
                    pData8++;
     290:	e0bf6c17 	ldw	r2,-592(fp)
     294:	10800044 	addi	r2,r2,1
     298:	e0bf6c15 	stw	r2,-592(fp)
                    if (*pData8)
     29c:	e0bf6c17 	ldw	r2,-592(fp)
     2a0:	10800003 	ldbu	r2,0(r2)
     2a4:	10803fcc 	andi	r2,r2,255
     2a8:	10000526 	beq	r2,zero,2c0 <Fat_Test+0xbc>
                        printf("%c", *pData8);
     2ac:	e0bf6c17 	ldw	r2,-592(fp)
     2b0:	10800003 	ldbu	r2,0(r2)
     2b4:	10803fcc 	andi	r2,r2,255
     2b8:	1009883a 	mov	r4,r2
     2bc:	000702c0 	call	702c <putchar>
                    pData8++;
     2c0:	e0bf6c17 	ldw	r2,-592(fp)
     2c4:	10800044 	addi	r2,r2,1
     2c8:	e0bf6c15 	stw	r2,-592(fp)
                    //
                    pData16++;
     2cc:	e0bf6b17 	ldw	r2,-596(fp)
     2d0:	10800084 	addi	r2,r2,2
     2d4:	e0bf6b15 	stw	r2,-596(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                printf("[%d]", nCount);
                while(*pData16){
     2d8:	e0bf6b17 	ldw	r2,-596(fp)
     2dc:	1080000b 	ldhu	r2,0(r2)
     2e0:	10bfffcc 	andi	r2,r2,65535
     2e4:	103fe11e 	bne	r2,zero,26c <_gp+0xfffe39f0>
                        printf("%c", *pData8);
                    pData8++;
                    //
                    pData16++;
                }
                printf("\n");
     2e8:	01000284 	movi	r4,10
     2ec:	000702c0 	call	702c <putchar>
     2f0:	00000606 	br	30c <Fat_Test+0x108>
            }else{
                printf("[%d]%s\n", nCount, FileContext.szName);
     2f4:	e0bf7404 	addi	r2,fp,-560
     2f8:	01000074 	movhi	r4,1
     2fc:	21081f04 	addi	r4,r4,8316
     300:	e17f6a17 	ldw	r5,-600(fp)
     304:	100d883a 	mov	r6,r2
     308:	0006fe80 	call	6fe8 <printf>
            }
            nCount++;
     30c:	e0bf6a17 	ldw	r2,-600(fp)
     310:	10800044 	addi	r2,r2,1
     314:	e0bf6a15 	stw	r2,-600(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;

    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
    if (bSuccess){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
     318:	e0ff7204 	addi	r3,fp,-568
     31c:	e0bf7404 	addi	r2,fp,-560
     320:	1809883a 	mov	r4,r3
     324:	100b883a 	mov	r5,r2
     328:	00007780 	call	778 <Fat_FileBrowseNext>
     32c:	103fc41e 	bne	r2,zero,240 <_gp+0xfffe39c4>
                printf("[%d]%s\n", nCount, FileContext.szName);
            }
            nCount++;
        }
    }
    if (bSuccess && pDumpFile && strlen(pDumpFile)){
     330:	e0bf6917 	ldw	r2,-604(fp)
     334:	10005926 	beq	r2,zero,49c <Fat_Test+0x298>
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	10005726 	beq	r2,zero,49c <Fat_Test+0x298>
     340:	e0bfff17 	ldw	r2,-4(fp)
     344:	10800003 	ldbu	r2,0(r2)
     348:	10803fcc 	andi	r2,r2,255
     34c:	1080201c 	xori	r2,r2,128
     350:	10bfe004 	addi	r2,r2,-128
     354:	10005126 	beq	r2,zero,49c <Fat_Test+0x298>
        FAT_FILE_HANDLE hFile;
        hFile =  Fat_FileOpen(hFat, pDumpFile);
     358:	e13ffe17 	ldw	r4,-8(fp)
     35c:	e17fff17 	ldw	r5,-4(fp)
     360:	0000f080 	call	f08 <Fat_FileOpen>
     364:	e0bf7015 	stw	r2,-576(fp)
        if (hFile){
     368:	e0bf7017 	ldw	r2,-576(fp)
     36c:	10004626 	beq	r2,zero,488 <Fat_Test+0x284>
            char szRead[256];
            int nReadSize, nFileSize, nTotalReadSize=0;
     370:	e03f6e15 	stw	zero,-584(fp)
            nFileSize = Fat_FileSize(hFile);
     374:	e13f7017 	ldw	r4,-576(fp)
     378:	00011300 	call	1130 <Fat_FileSize>
     37c:	e0bf7115 	stw	r2,-572(fp)
            if (nReadSize > sizeof(szRead))
     380:	e0bf6d17 	ldw	r2,-588(fp)
     384:	10804070 	cmpltui	r2,r2,257
     388:	1000021e 	bne	r2,zero,394 <Fat_Test+0x190>
                nReadSize = sizeof(szRead);
     38c:	00804004 	movi	r2,256
     390:	e0bf6d15 	stw	r2,-588(fp)
            printf("%s dump:\n", pDumpFile);
     394:	01000074 	movhi	r4,1
     398:	21082104 	addi	r4,r4,8324
     39c:	e17fff17 	ldw	r5,-4(fp)
     3a0:	0006fe80 	call	6fe8 <printf>
            while(bSuccess && nTotalReadSize < nFileSize){
     3a4:	00002c06 	br	458 <Fat_Test+0x254>
                nReadSize = sizeof(szRead);
     3a8:	00804004 	movi	r2,256
     3ac:	e0bf6d15 	stw	r2,-588(fp)
                if (nReadSize > (nFileSize - nTotalReadSize))
     3b0:	e0ff7117 	ldw	r3,-572(fp)
     3b4:	e0bf6e17 	ldw	r2,-584(fp)
     3b8:	1887c83a 	sub	r3,r3,r2
     3bc:	e0bf6d17 	ldw	r2,-588(fp)
     3c0:	1880040e 	bge	r3,r2,3d4 <Fat_Test+0x1d0>
                    nReadSize = (nFileSize - nTotalReadSize);
     3c4:	e0ff7117 	ldw	r3,-572(fp)
     3c8:	e0bf6e17 	ldw	r2,-584(fp)
     3cc:	1885c83a 	sub	r2,r3,r2
     3d0:	e0bf6d15 	stw	r2,-588(fp)
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
     3d4:	e0bfbe04 	addi	r2,fp,-264
     3d8:	e13f7017 	ldw	r4,-576(fp)
     3dc:	100b883a 	mov	r5,r2
     3e0:	e1bf6d17 	ldw	r6,-588(fp)
     3e4:	00011740 	call	1174 <Fat_FileRead>
     3e8:	10001626 	beq	r2,zero,444 <Fat_Test+0x240>
                    int i;
                    for(i=0;i<nReadSize;i++){
     3ec:	e03f6f15 	stw	zero,-580(fp)
     3f0:	00000c06 	br	424 <Fat_Test+0x220>
                        printf("%c", szRead[i]);
     3f4:	e0ffbe04 	addi	r3,fp,-264
     3f8:	e0bf6f17 	ldw	r2,-580(fp)
     3fc:	1885883a 	add	r2,r3,r2
     400:	10800003 	ldbu	r2,0(r2)
     404:	10803fcc 	andi	r2,r2,255
     408:	1080201c 	xori	r2,r2,128
     40c:	10bfe004 	addi	r2,r2,-128
     410:	1009883a 	mov	r4,r2
     414:	000702c0 	call	702c <putchar>
                if (nReadSize > (nFileSize - nTotalReadSize))
                    nReadSize = (nFileSize - nTotalReadSize);
                //
                if (Fat_FileRead(hFile, szRead, nReadSize)){
                    int i;
                    for(i=0;i<nReadSize;i++){
     418:	e0bf6f17 	ldw	r2,-580(fp)
     41c:	10800044 	addi	r2,r2,1
     420:	e0bf6f15 	stw	r2,-580(fp)
     424:	e0ff6f17 	ldw	r3,-580(fp)
     428:	e0bf6d17 	ldw	r2,-588(fp)
     42c:	18bff116 	blt	r3,r2,3f4 <_gp+0xfffe3b78>
                        printf("%c", szRead[i]);
                    }
                    nTotalReadSize += nReadSize;
     430:	e0ff6e17 	ldw	r3,-584(fp)
     434:	e0bf6d17 	ldw	r2,-588(fp)
     438:	1885883a 	add	r2,r3,r2
     43c:	e0bf6e15 	stw	r2,-584(fp)
     440:	00000506 	br	458 <Fat_Test+0x254>
                }else{
                    bSuccess = FALSE;
     444:	e03f6915 	stw	zero,-604(fp)
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
     448:	01000074 	movhi	r4,1
     44c:	21082404 	addi	r4,r4,8336
     450:	e17fff17 	ldw	r5,-4(fp)
     454:	0006fe80 	call	6fe8 <printf>
            int nReadSize, nFileSize, nTotalReadSize=0;
            nFileSize = Fat_FileSize(hFile);
            if (nReadSize > sizeof(szRead))
                nReadSize = sizeof(szRead);
            printf("%s dump:\n", pDumpFile);
            while(bSuccess && nTotalReadSize < nFileSize){
     458:	e0bf6917 	ldw	r2,-604(fp)
     45c:	10000326 	beq	r2,zero,46c <Fat_Test+0x268>
     460:	e0ff6e17 	ldw	r3,-584(fp)
     464:	e0bf7117 	ldw	r2,-572(fp)
     468:	18bfcf16 	blt	r3,r2,3a8 <_gp+0xfffe3b2c>
                }else{
                    bSuccess = FALSE;
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
                }
            } // while
            if (bSuccess)
     46c:	e0bf6917 	ldw	r2,-604(fp)
     470:	10000226 	beq	r2,zero,47c <Fat_Test+0x278>
                printf("\n");
     474:	01000284 	movi	r4,10
     478:	000702c0 	call	702c <putchar>
            Fat_FileClose(hFile);
     47c:	e13f7017 	ldw	r4,-576(fp)
     480:	00017140 	call	1714 <Fat_FileClose>
     484:	00000506 	br	49c <Fat_Test+0x298>
        }else{
            bSuccess = FALSE;
     488:	e03f6915 	stw	zero,-604(fp)
            printf("Cannot find the file \"%s\"\n", pDumpFile);
     48c:	01000074 	movhi	r4,1
     490:	21082c04 	addi	r4,r4,8368
     494:	e17fff17 	ldw	r5,-4(fp)
     498:	0006fe80 	call	6fe8 <printf>
        }
    }

    return bSuccess;
     49c:	e0bf6917 	ldw	r2,-604(fp)
}
     4a0:	e037883a 	mov	sp,fp
     4a4:	dfc00117 	ldw	ra,4(sp)
     4a8:	df000017 	ldw	fp,0(sp)
     4ac:	dec00204 	addi	sp,sp,8
     4b0:	f800283a 	ret

000004b4 <main>:

int main()
{
     4b4:	defff804 	addi	sp,sp,-32
     4b8:	dfc00715 	stw	ra,28(sp)
     4bc:	df000615 	stw	fp,24(sp)
     4c0:	df000604 	addi	fp,sp,24
    const alt_u32 LED_TEST_PATTERN = 0x00;
     4c4:	e03ffc15 	stw	zero,-16(fp)
    const alt_u32 LED_NG_PATTERN = 0x1F;
     4c8:	008007c4 	movi	r2,31
     4cc:	e0bffd15 	stw	r2,-12(fp)
    const alt_u32 LED_PASS_PATTERN = 0x3E0;
     4d0:	0080f804 	movi	r2,992
     4d4:	e0bffe15 	stw	r2,-8(fp)
    FAT_HANDLE hFat;
    bool bSuccess;
    int i;
    printf("========== DE0-CV SDCARD Demo ==========\n");
     4d8:	01000074 	movhi	r4,1
     4dc:	21083304 	addi	r4,r4,8396
     4e0:	00070cc0 	call	70cc <puts>
    printf("please ensure the sd card has been inserted into de0-cv board\n");
     4e4:	01000074 	movhi	r4,1
     4e8:	21083e04 	addi	r4,r4,8440
     4ec:	00070cc0 	call	70cc <puts>
    while(1)
    {
        printf("Processing...\r\n");
     4f0:	01000074 	movhi	r4,1
     4f4:	21084e04 	addi	r4,r4,8504
     4f8:	00070cc0 	call	70cc <puts>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_TEST_PATTERN);
     4fc:	e0fffc17 	ldw	r3,-16(fp)
     500:	00804034 	movhi	r2,256
     504:	10801004 	addi	r2,r2,64
     508:	10c00035 	stwio	r3,0(r2)
        bSuccess = SDLIB_Init();
     50c:	0003d280 	call	3d28 <SDLIB_Init>
     510:	e0bffa15 	stw	r2,-24(fp)
       	    for(i=0;i<5 && !bSuccess;i++){ // try 3 time at max
     514:	e03ffb15 	stw	zero,-20(fp)
     518:	00000506 	br	530 <main+0x7c>
       	        bSuccess = SDLIB_Init();
     51c:	0003d280 	call	3d28 <SDLIB_Init>
     520:	e0bffa15 	stw	r2,-24(fp)
    while(1)
    {
        printf("Processing...\r\n");
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_TEST_PATTERN);
        bSuccess = SDLIB_Init();
       	    for(i=0;i<5 && !bSuccess;i++){ // try 3 time at max
     524:	e0bffb17 	ldw	r2,-20(fp)
     528:	10800044 	addi	r2,r2,1
     52c:	e0bffb15 	stw	r2,-20(fp)
     530:	e0bffb17 	ldw	r2,-20(fp)
     534:	10800148 	cmpgei	r2,r2,5
     538:	1000021e 	bne	r2,zero,544 <main+0x90>
     53c:	e0bffa17 	ldw	r2,-24(fp)
     540:	103ff626 	beq	r2,zero,51c <_gp+0xfffe3ca0>
       	        bSuccess = SDLIB_Init();
       	    }
        hFat = Fat_Mount(FAT_SD_CARD, 0);
     544:	0009883a 	mov	r4,zero
     548:	000b883a 	mov	r5,zero
     54c:	000060c0 	call	60c <Fat_Mount>
     550:	e0bfff15 	stw	r2,-4(fp)
        if (hFat){
     554:	e0bfff17 	ldw	r2,-4(fp)
     558:	10001726 	beq	r2,zero,5b8 <main+0x104>
            printf("sdcard mount success!\n");
     55c:	01000074 	movhi	r4,1
     560:	21085204 	addi	r4,r4,8520
     564:	00070cc0 	call	70cc <puts>
            printf("Root Directory Item Count:%d\n", Fat_FileCount(hFat));
     568:	e13fff17 	ldw	r4,-4(fp)
     56c:	0000ba00 	call	ba0 <Fat_FileCount>
     570:	01000074 	movhi	r4,1
     574:	21085804 	addi	r4,r4,8544
     578:	100b883a 	mov	r5,r2
     57c:	0006fe80 	call	6fe8 <printf>
            Fat_Test(hFat, "test.txt");
     580:	e13fff17 	ldw	r4,-4(fp)
     584:	01400074 	movhi	r5,1
     588:	29486004 	addi	r5,r5,8576
     58c:	00002040 	call	204 <Fat_Test>
            Fat_Unmount(hFat);
     590:	e13fff17 	ldw	r4,-4(fp)
     594:	00006500 	call	650 <Fat_Unmount>
            IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_PASS_PATTERN);
     598:	e0fffe17 	ldw	r3,-8(fp)
     59c:	00804034 	movhi	r2,256
     5a0:	10801004 	addi	r2,r2,64
     5a4:	10c00035 	stwio	r3,0(r2)
            printf("===== Test Done =====\r\nPress KEY3 to test again.\r\n");
     5a8:	01000074 	movhi	r4,1
     5ac:	21086304 	addi	r4,r4,8588
     5b0:	00070cc0 	call	70cc <puts>
        }else{
            printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE0-CV board and press KEY3.\r\n");
            IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_NG_PATTERN);
        }
        // wait users to press BUTTON3
        while ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x08) == 0x08);
     5b4:	00000706 	br	5d4 <main+0x120>
            Fat_Test(hFat, "test.txt");
            Fat_Unmount(hFat);
            IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_PASS_PATTERN);
            printf("===== Test Done =====\r\nPress KEY3 to test again.\r\n");
        }else{
            printf("Failed to mount the SDCARD!\r\nPlease insert the SDCARD into DE0-CV board and press KEY3.\r\n");
     5b8:	01000074 	movhi	r4,1
     5bc:	21087004 	addi	r4,r4,8640
     5c0:	00070cc0 	call	70cc <puts>
            IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_NG_PATTERN);
     5c4:	e0fffd17 	ldw	r3,-12(fp)
     5c8:	00804034 	movhi	r2,256
     5cc:	10801004 	addi	r2,r2,64
     5d0:	10c00035 	stwio	r3,0(r2)
        }
        // wait users to press BUTTON3
        while ((IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE) & 0x08) == 0x08);
     5d4:	0001883a 	nop
     5d8:	00804034 	movhi	r2,256
     5dc:	10800c04 	addi	r2,r2,48
     5e0:	10800037 	ldwio	r2,0(r2)
     5e4:	1080020c 	andi	r2,r2,8
     5e8:	103ffb1e 	bne	r2,zero,5d8 <_gp+0xfffe3d5c>
        IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_TEST_PATTERN);
     5ec:	e0fffc17 	ldw	r3,-16(fp)
     5f0:	00804034 	movhi	r2,256
     5f4:	10801004 	addi	r2,r2,64
     5f8:	10c00035 	stwio	r3,0(r2)
        usleep(400*1000); // debounce
     5fc:	010001b4 	movhi	r4,6
     600:	2106a004 	addi	r4,r4,6784
     604:	00100f00 	call	100f0 <usleep>
    } // while
     608:	003fb906 	br	4f0 <_gp+0xfffe3c74>

0000060c <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(FAT_DEVICE FatDevice, DEVICE_HANDLE hUsbDisk){
     60c:	defffb04 	addi	sp,sp,-20
     610:	dfc00415 	stw	ra,16(sp)
     614:	df000315 	stw	fp,12(sp)
     618:	df000304 	addi	fp,sp,12
     61c:	e13ffe15 	stw	r4,-8(fp)
     620:	e17fff15 	stw	r5,-4(fp)
    
    //Fat_Unmount();
    FAT_HANDLE hFat = 0;
     624:	e03ffd15 	stw	zero,-12(fp)
    
    if (FatDevice == FAT_SD_CARD){
     628:	e0bffe17 	ldw	r2,-8(fp)
     62c:	1000021e 	bne	r2,zero,638 <Fat_Mount+0x2c>
        #ifdef SUPPORT_SD_CARD
        hFat = fatMountSdcard();
     630:	00030680 	call	3068 <fatMountSdcard>
     634:	e0bffd15 	stw	r2,-12(fp)
    }else if (FatDevice == FAT_USB_DISK){
        #ifdef SUPPORT_USB_DISK
        hFat = fatMountUsbDisk(hUsbDisk);
        #endif
    }  
    return hFat;      
     638:	e0bffd17 	ldw	r2,-12(fp)
        
}
     63c:	e037883a 	mov	sp,fp
     640:	dfc00117 	ldw	ra,4(sp)
     644:	df000017 	ldw	fp,0(sp)
     648:	dec00204 	addi	sp,sp,8
     64c:	f800283a 	ret

00000650 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
     650:	defffc04 	addi	sp,sp,-16
     654:	dfc00315 	stw	ra,12(sp)
     658:	df000215 	stw	fp,8(sp)
     65c:	df000204 	addi	fp,sp,8
     660:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
     664:	e0bfff17 	ldw	r2,-4(fp)
     668:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
     66c:	e0bffe17 	ldw	r2,-8(fp)
     670:	10000526 	beq	r2,zero,688 <Fat_Unmount+0x38>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
     674:	e0bffe17 	ldw	r2,-8(fp)
     678:	10000415 	stw	zero,16(r2)
    
    free(pVol);  
     67c:	e13ffe17 	ldw	r4,-8(fp)
     680:	00066500 	call	6650 <free>
     684:	00000106 	br	68c <Fat_Unmount+0x3c>
}

void Fat_Unmount(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    if (!pVol)
        return;
     688:	0001883a 	nop
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
    
    free(pVol);  
}   
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
     6a0:	defffc04 	addi	sp,sp,-16
     6a4:	df000315 	stw	fp,12(sp)
     6a8:	df000304 	addi	fp,sp,12
     6ac:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
     6b8:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	10000d26 	beq	r2,zero,6f8 <Fat_Type+0x58>
        if (pVol->Partition_Type == PARTITION_FAT16)
     6c4:	e0bffe17 	ldw	r2,-8(fp)
     6c8:	10800317 	ldw	r2,12(r2)
     6cc:	10800198 	cmpnei	r2,r2,6
     6d0:	1000031e 	bne	r2,zero,6e0 <Fat_Type+0x40>
            Type = FAT_FAT16;
     6d4:	00800044 	movi	r2,1
     6d8:	e0bffd15 	stw	r2,-12(fp)
     6dc:	00000606 	br	6f8 <Fat_Type+0x58>
        else if (pVol->Partition_Type == PARTITION_FAT32)
     6e0:	e0bffe17 	ldw	r2,-8(fp)
     6e4:	10800317 	ldw	r2,12(r2)
     6e8:	108002d8 	cmpnei	r2,r2,11
     6ec:	1000021e 	bne	r2,zero,6f8 <Fat_Type+0x58>
            Type = FAT_FAT32;
     6f0:	00800084 	movi	r2,2
     6f4:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
     6f8:	e0bffd17 	ldw	r2,-12(fp)
}
     6fc:	e037883a 	mov	sp,fp
     700:	df000017 	ldw	fp,0(sp)
     704:	dec00104 	addi	sp,sp,4
     708:	f800283a 	ret

0000070c <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
     70c:	defffc04 	addi	sp,sp,-16
     710:	df000315 	stw	fp,12(sp)
     714:	df000304 	addi	fp,sp,12
     718:	e13ffe15 	stw	r4,-8(fp)
     71c:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
     720:	e0bffe17 	ldw	r2,-8(fp)
     724:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
     728:	e0bffd17 	ldw	r2,-12(fp)
     72c:	1000021e 	bne	r2,zero,738 <Fat_FileBrowseBegin+0x2c>
        return FALSE;
     730:	0005883a 	mov	r2,zero
     734:	00000c06 	br	768 <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
     738:	e0bffd17 	ldw	r2,-12(fp)
     73c:	10800417 	ldw	r2,16(r2)
     740:	1000021e 	bne	r2,zero,74c <Fat_FileBrowseBegin+0x40>
        return FALSE;
     744:	0005883a 	mov	r2,zero
     748:	00000706 	br	768 <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
     74c:	e0bfff17 	ldw	r2,-4(fp)
     750:	00ffffc4 	movi	r3,-1
     754:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
     758:	e0bfff17 	ldw	r2,-4(fp)
     75c:	e0fffe17 	ldw	r3,-8(fp)
     760:	10c00115 	stw	r3,4(r2)
    return TRUE;
     764:	00800044 	movi	r2,1
}
     768:	e037883a 	mov	sp,fp
     76c:	df000017 	ldw	fp,0(sp)
     770:	dec00104 	addi	sp,sp,4
     774:	f800283a 	ret

00000778 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
     778:	defff404 	addi	sp,sp,-48
     77c:	dfc00b15 	stw	ra,44(sp)
     780:	df000a15 	stw	fp,40(sp)
     784:	df000a04 	addi	fp,sp,40
     788:	e13ffe15 	stw	r4,-8(fp)
     78c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
     790:	e03ff615 	stw	zero,-40(fp)
     794:	e03ff715 	stw	zero,-36(fp)
     798:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
     79c:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
     7a0:	e0bffe17 	ldw	r2,-8(fp)
     7a4:	10800117 	ldw	r2,4(r2)
     7a8:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
     7ac:	e0bffa17 	ldw	r2,-24(fp)
     7b0:	1000021e 	bne	r2,zero,7bc <Fat_FileBrowseNext+0x44>
        return FALSE;    
     7b4:	0005883a 	mov	r2,zero
     7b8:	0000f406 	br	b8c <Fat_FileBrowseNext+0x414>
    
    if (!pVol->bMount)
     7bc:	e0bffa17 	ldw	r2,-24(fp)
     7c0:	10800417 	ldw	r2,16(r2)
     7c4:	1000021e 	bne	r2,zero,7d0 <Fat_FileBrowseNext+0x58>
        return FALSE;
     7c8:	0005883a 	mov	r2,zero
     7cc:	0000ef06 	br	b8c <Fat_FileBrowseNext+0x414>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
     7d0:	e0bffe17 	ldw	r2,-8(fp)
     7d4:	10800017 	ldw	r2,0(r2)
     7d8:	10c00044 	addi	r3,r2,1
     7dc:	e0bffe17 	ldw	r2,-8(fp)
     7e0:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
     7e4:	e0bffe17 	ldw	r2,-8(fp)
     7e8:	10800017 	ldw	r2,0(r2)
     7ec:	e13ffa17 	ldw	r4,-24(fp)
     7f0:	100b883a 	mov	r5,r2
     7f4:	0002a5c0 	call	2a5c <fatFindDirectory>
     7f8:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
     7fc:	e0bffb17 	ldw	r2,-20(fp)
     800:	1000021e 	bne	r2,zero,80c <Fat_FileBrowseNext+0x94>
            bError = TRUE;
     804:	00800044 	movi	r2,1
     808:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
     80c:	e0bff717 	ldw	r2,-36(fp)
     810:	1000d61e 	bne	r2,zero,b6c <Fat_FileBrowseNext+0x3f4>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
     814:	e13ffb17 	ldw	r4,-20(fp)
     818:	000211c0 	call	211c <fatIsValidDir>
     81c:	1000d326 	beq	r2,zero,b6c <Fat_FileBrowseNext+0x3f4>
     820:	e13ffb17 	ldw	r4,-20(fp)
     824:	00021c40 	call	21c4 <fatIsUnusedDir>
     828:	1000d01e 	bne	r2,zero,b6c <Fat_FileBrowseNext+0x3f4>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
     82c:	e0bffb17 	ldw	r2,-20(fp)
     830:	108002c3 	ldbu	r2,11(r2)
     834:	10803fcc 	andi	r2,r2,255
     838:	108003cc 	andi	r2,r2,15
     83c:	108003d8 	cmpnei	r2,r2,15
     840:	1000511e 	bne	r2,zero,988 <Fat_FileBrowseNext+0x210>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
     844:	e0bffb17 	ldw	r2,-20(fp)
     848:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
     84c:	e0bffc17 	ldw	r2,-16(fp)
     850:	108002c3 	ldbu	r2,11(r2)
     854:	10803fcc 	andi	r2,r2,255
     858:	108003cc 	andi	r2,r2,15
     85c:	108003e0 	cmpeqi	r2,r2,15
     860:	1000031e 	bne	r2,zero,870 <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
     864:	00800044 	movi	r2,1
     868:	e0bff715 	stw	r2,-36(fp)
     86c:	00001e06 	br	8e8 <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
     870:	e0bff917 	ldw	r2,-28(fp)
     874:	1000141e 	bne	r2,zero,8c8 <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
     878:	e0bff817 	ldw	r2,-32(fp)
     87c:	1000041e 	bne	r2,zero,890 <Fat_FileBrowseNext+0x118>
     880:	e0bff917 	ldw	r2,-28(fp)
     884:	10c0100c 	andi	r3,r2,64
     888:	e0bff917 	ldw	r2,-28(fp)
     88c:	18800326 	beq	r3,r2,89c <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
     890:	00800044 	movi	r2,1
     894:	e0bff715 	stw	r2,-36(fp)
     898:	00000506 	br	8b0 <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
     89c:	e0bffc17 	ldw	r2,-16(fp)
     8a0:	10800003 	ldbu	r2,0(r2)
     8a4:	10803fcc 	andi	r2,r2,255
     8a8:	10800fcc 	andi	r2,r2,63
     8ac:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
     8b0:	e0bfff17 	ldw	r2,-4(fp)
     8b4:	1009883a 	mov	r4,r2
     8b8:	000b883a 	mov	r5,zero
     8bc:	01804004 	movi	r6,256
     8c0:	0006ee00 	call	6ee0 <memset>
     8c4:	00000806 	br	8e8 <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
     8c8:	e0bffc17 	ldw	r2,-16(fp)
     8cc:	10800003 	ldbu	r2,0(r2)
     8d0:	10803fcc 	andi	r2,r2,255
     8d4:	10c00fcc 	andi	r3,r2,63
     8d8:	e0bff917 	ldw	r2,-28(fp)
     8dc:	18800226 	beq	r3,r2,8e8 <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
     8e0:	00800044 	movi	r2,1
     8e4:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
     8e8:	e0bff717 	ldw	r2,-36(fp)
     8ec:	10009f1e 	bne	r2,zero,b6c <Fat_FileBrowseNext+0x3f4>
                        int BaseOffset;
                        bLongFilename = TRUE;
     8f0:	00800044 	movi	r2,1
     8f4:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
     8f8:	e0bff917 	ldw	r2,-28(fp)
     8fc:	10bfffc4 	addi	r2,r2,-1
     900:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
     904:	e0bff917 	ldw	r2,-28(fp)
     908:	108006a4 	muli	r2,r2,26
     90c:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
     910:	e0bffd17 	ldw	r2,-12(fp)
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	1887883a 	add	r3,r3,r2
     91c:	e0bffc17 	ldw	r2,-16(fp)
     920:	10800044 	addi	r2,r2,1
     924:	1809883a 	mov	r4,r3
     928:	100b883a 	mov	r5,r2
     92c:	01800284 	movi	r6,10
     930:	0006de80 	call	6de8 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
     934:	e0bffd17 	ldw	r2,-12(fp)
     938:	10800284 	addi	r2,r2,10
     93c:	e0ffff17 	ldw	r3,-4(fp)
     940:	1887883a 	add	r3,r3,r2
     944:	e0bffc17 	ldw	r2,-16(fp)
     948:	10800384 	addi	r2,r2,14
     94c:	1809883a 	mov	r4,r3
     950:	100b883a 	mov	r5,r2
     954:	01800304 	movi	r6,12
     958:	0006de80 	call	6de8 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
     95c:	e0bffd17 	ldw	r2,-12(fp)
     960:	10800584 	addi	r2,r2,22
     964:	e0ffff17 	ldw	r3,-4(fp)
     968:	1887883a 	add	r3,r3,r2
     96c:	e0bffc17 	ldw	r2,-16(fp)
     970:	10800704 	addi	r2,r2,28
     974:	1809883a 	mov	r4,r3
     978:	100b883a 	mov	r5,r2
     97c:	01800104 	movi	r6,4
     980:	0006de80 	call	6de8 <memcpy>
     984:	00007906 	br	b6c <Fat_FileBrowseNext+0x3f4>
                    }                        
                }else{
                    if (bLongFilename){
     988:	e0bff817 	ldw	r2,-32(fp)
     98c:	10000e26 	beq	r2,zero,9c8 <Fat_FileBrowseNext+0x250>
                        pFileContext->Attribute = ATTR_LONG_NAME;
     990:	e0bfff17 	ldw	r2,-4(fp)
     994:	00c003c4 	movi	r3,15
     998:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
     99c:	e0bffb17 	ldw	r2,-20(fp)
     9a0:	108002c3 	ldbu	r2,11(r2)
     9a4:	10803fcc 	andi	r2,r2,255
     9a8:	10800c0c 	andi	r2,r2,48
     9ac:	1000031e 	bne	r2,zero,9bc <Fat_FileBrowseNext+0x244>
                            bError = TRUE;
     9b0:	00800044 	movi	r2,1
     9b4:	e0bff715 	stw	r2,-36(fp)
     9b8:	00000906 	br	9e0 <Fat_FileBrowseNext+0x268>
                        else    
                            bFind = TRUE;
     9bc:	00800044 	movi	r2,1
     9c0:	e0bff615 	stw	r2,-40(fp)
     9c4:	00000606 	br	9e0 <Fat_FileBrowseNext+0x268>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	e13ffb17 	ldw	r4,-20(fp)
     9d0:	100b883a 	mov	r5,r2
     9d4:	0000ca00 	call	ca0 <fatComposeShortFilename>
                        bFind = TRUE;
     9d8:	00800044 	movi	r2,1
     9dc:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
     9e0:	e0bff617 	ldw	r2,-40(fp)
     9e4:	10006126 	beq	r2,zero,b6c <Fat_FileBrowseNext+0x3f4>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
     9e8:	e0bfff17 	ldw	r2,-4(fp)
     9ec:	e0fff817 	ldw	r3,-32(fp)
     9f0:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
     9f4:	e0bffb17 	ldw	r2,-20(fp)
     9f8:	108002c3 	ldbu	r2,11(r2)
     9fc:	10803fcc 	andi	r2,r2,255
     a00:	1080080c 	andi	r2,r2,32
     a04:	1004c03a 	cmpne	r2,r2,zero
     a08:	10c03fcc 	andi	r3,r2,255
     a0c:	e0bfff17 	ldw	r2,-4(fp)
     a10:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
     a14:	e0bffb17 	ldw	r2,-20(fp)
     a18:	108002c3 	ldbu	r2,11(r2)
     a1c:	10803fcc 	andi	r2,r2,255
     a20:	1080040c 	andi	r2,r2,16
     a24:	1004c03a 	cmpne	r2,r2,zero
     a28:	10c03fcc 	andi	r3,r2,255
     a2c:	e0bfff17 	ldw	r2,-4(fp)
     a30:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
     a34:	e0bffb17 	ldw	r2,-20(fp)
     a38:	108002c3 	ldbu	r2,11(r2)
     a3c:	10803fcc 	andi	r2,r2,255
     a40:	1080020c 	andi	r2,r2,8
     a44:	1004c03a 	cmpne	r2,r2,zero
     a48:	10c03fcc 	andi	r3,r2,255
     a4c:	e0bfff17 	ldw	r2,-4(fp)
     a50:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
     a54:	e0bffe17 	ldw	r2,-8(fp)
     a58:	10c00017 	ldw	r3,0(r2)
     a5c:	e0bfff17 	ldw	r2,-4(fp)
     a60:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
     a64:	e0bffb17 	ldw	r2,-20(fp)
     a68:	10c002c3 	ldbu	r3,11(r2)
     a6c:	e0bfff17 	ldw	r2,-4(fp)
     a70:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
     a74:	e0bffb17 	ldw	r2,-20(fp)
     a78:	10c00383 	ldbu	r3,14(r2)
     a7c:	108003c3 	ldbu	r2,15(r2)
     a80:	1004923a 	slli	r2,r2,8
     a84:	10c4b03a 	or	r2,r2,r3
     a88:	1007883a 	mov	r3,r2
     a8c:	e0bfff17 	ldw	r2,-4(fp)
     a90:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
     a94:	e0bffb17 	ldw	r2,-20(fp)
     a98:	10c00483 	ldbu	r3,18(r2)
     a9c:	108004c3 	ldbu	r2,19(r2)
     aa0:	1004923a 	slli	r2,r2,8
     aa4:	10c4b03a 	or	r2,r2,r3
     aa8:	1007883a 	mov	r3,r2
     aac:	e0bfff17 	ldw	r2,-4(fp)
     ab0:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
     ab4:	e0bffb17 	ldw	r2,-20(fp)
     ab8:	10c00503 	ldbu	r3,20(r2)
     abc:	10800543 	ldbu	r2,21(r2)
     ac0:	1004923a 	slli	r2,r2,8
     ac4:	10c4b03a 	or	r2,r2,r3
     ac8:	1007883a 	mov	r3,r2
     acc:	e0bfff17 	ldw	r2,-4(fp)
     ad0:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
     ad4:	e0bffb17 	ldw	r2,-20(fp)
     ad8:	10c00583 	ldbu	r3,22(r2)
     adc:	108005c3 	ldbu	r2,23(r2)
     ae0:	1004923a 	slli	r2,r2,8
     ae4:	10c4b03a 	or	r2,r2,r3
     ae8:	1007883a 	mov	r3,r2
     aec:	e0bfff17 	ldw	r2,-4(fp)
     af0:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
     af4:	e0bffb17 	ldw	r2,-20(fp)
     af8:	10c00603 	ldbu	r3,24(r2)
     afc:	10800643 	ldbu	r2,25(r2)
     b00:	1004923a 	slli	r2,r2,8
     b04:	10c4b03a 	or	r2,r2,r3
     b08:	1007883a 	mov	r3,r2
     b0c:	e0bfff17 	ldw	r2,-4(fp)
     b10:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
     b14:	e0bffb17 	ldw	r2,-20(fp)
     b18:	10c00683 	ldbu	r3,26(r2)
     b1c:	108006c3 	ldbu	r2,27(r2)
     b20:	1004923a 	slli	r2,r2,8
     b24:	10c4b03a 	or	r2,r2,r3
     b28:	1007883a 	mov	r3,r2
     b2c:	e0bfff17 	ldw	r2,-4(fp)
     b30:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
     b34:	e0bffb17 	ldw	r2,-20(fp)
     b38:	10c00703 	ldbu	r3,28(r2)
     b3c:	11000743 	ldbu	r4,29(r2)
     b40:	2008923a 	slli	r4,r4,8
     b44:	20c6b03a 	or	r3,r4,r3
     b48:	11000783 	ldbu	r4,30(r2)
     b4c:	2008943a 	slli	r4,r4,16
     b50:	20c6b03a 	or	r3,r4,r3
     b54:	108007c3 	ldbu	r2,31(r2)
     b58:	1004963a 	slli	r2,r2,24
     b5c:	10c4b03a 	or	r2,r2,r3
     b60:	1007883a 	mov	r3,r2
     b64:	e0bfff17 	ldw	r2,-4(fp)
     b68:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
     b6c:	e0bff617 	ldw	r2,-40(fp)
     b70:	1000051e 	bne	r2,zero,b88 <Fat_FileBrowseNext+0x410>
     b74:	e13ffb17 	ldw	r4,-20(fp)
     b78:	00020d80 	call	20d8 <fatIsLastDir>
     b7c:	1000021e 	bne	r2,zero,b88 <Fat_FileBrowseNext+0x410>
     b80:	e0bff717 	ldw	r2,-36(fp)
     b84:	103f1226 	beq	r2,zero,7d0 <_gp+0xfffe3f54>
    
    return bFind;
     b88:	e0bff617 	ldw	r2,-40(fp)
    
}
     b8c:	e037883a 	mov	sp,fp
     b90:	dfc00117 	ldw	ra,4(sp)
     b94:	df000017 	ldw	fp,0(sp)
     b98:	dec00204 	addi	sp,sp,8
     b9c:	f800283a 	ret

00000ba0 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
     ba0:	deffb004 	addi	sp,sp,-320
     ba4:	dfc04f15 	stw	ra,316(sp)
     ba8:	df004e15 	stw	fp,312(sp)
     bac:	df004e04 	addi	fp,sp,312
     bb0:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
     bb4:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
     bb8:	e0bfb304 	addi	r2,fp,-308
     bbc:	e13fff17 	ldw	r4,-4(fp)
     bc0:	100b883a 	mov	r5,r2
     bc4:	000070c0 	call	70c <Fat_FileBrowseBegin>
     bc8:	10000a26 	beq	r2,zero,bf4 <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
     bcc:	00000306 	br	bdc <Fat_FileCount+0x3c>
            nCount++;
     bd0:	e0bfb217 	ldw	r2,-312(fp)
     bd4:	10800044 	addi	r2,r2,1
     bd8:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
     bdc:	e0ffb304 	addi	r3,fp,-308
     be0:	e0bfb504 	addi	r2,fp,-300
     be4:	1809883a 	mov	r4,r3
     be8:	100b883a 	mov	r5,r2
     bec:	00007780 	call	778 <Fat_FileBrowseNext>
     bf0:	103ff71e 	bne	r2,zero,bd0 <_gp+0xfffe4354>
            nCount++;
    }
    
    return nCount;
     bf4:	e0bfb217 	ldw	r2,-312(fp)
}
     bf8:	e037883a 	mov	sp,fp
     bfc:	dfc00117 	ldw	ra,4(sp)
     c00:	df000017 	ldw	fp,0(sp)
     c04:	dec00204 	addi	sp,sp,8
     c08:	f800283a 	ret

00000c0c <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
     c0c:	defffc04 	addi	sp,sp,-16
     c10:	df000315 	stw	fp,12(sp)
     c14:	df000304 	addi	fp,sp,12
     c18:	e13ffe15 	stw	r4,-8(fp)
     c1c:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
     c20:	00800044 	movi	r2,1
     c24:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
     c28:	00000e06 	br	c64 <fatSameLongFilename+0x58>
        if (*p1 != *p2){
     c2c:	e0bffe17 	ldw	r2,-8(fp)
     c30:	10c0000b 	ldhu	r3,0(r2)
     c34:	e0bfff17 	ldw	r2,-4(fp)
     c38:	1080000b 	ldhu	r2,0(r2)
     c3c:	18ffffcc 	andi	r3,r3,65535
     c40:	10bfffcc 	andi	r2,r2,65535
     c44:	18800126 	beq	r3,r2,c4c <fatSameLongFilename+0x40>
            bSame = FALSE;
     c48:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
     c4c:	e0bffe17 	ldw	r2,-8(fp)
     c50:	10800084 	addi	r2,r2,2
     c54:	e0bffe15 	stw	r2,-8(fp)
        p2++;
     c58:	e0bfff17 	ldw	r2,-4(fp)
     c5c:	10800084 	addi	r2,r2,2
     c60:	e0bfff15 	stw	r2,-4(fp)
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	10000826 	beq	r2,zero,c8c <fatSameLongFilename+0x80>
     c6c:	e0bffe17 	ldw	r2,-8(fp)
     c70:	1080000b 	ldhu	r2,0(r2)
     c74:	10bfffcc 	andi	r2,r2,65535
     c78:	103fec1e 	bne	r2,zero,c2c <_gp+0xfffe43b0>
     c7c:	e0bfff17 	ldw	r2,-4(fp)
     c80:	1080000b 	ldhu	r2,0(r2)
     c84:	10bfffcc 	andi	r2,r2,65535
     c88:	103fe81e 	bne	r2,zero,c2c <_gp+0xfffe43b0>
        p1++;
        p2++;
        
    }
    
    return bSame;
     c8c:	e0bffd17 	ldw	r2,-12(fp)
}
     c90:	e037883a 	mov	sp,fp
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00104 	addi	sp,sp,4
     c9c:	f800283a 	ret

00000ca0 <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
     ca0:	defffb04 	addi	sp,sp,-20
     ca4:	df000415 	stw	fp,16(sp)
     ca8:	df000404 	addi	fp,sp,16
     cac:	e13ffe15 	stw	r4,-8(fp)
     cb0:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
     cb4:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
     cb8:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
     cbc:	00000e06 	br	cf8 <fatComposeShortFilename+0x58>
        szFilename[nPos++] = pDir->Name[i++];
     cc0:	e0bffd17 	ldw	r2,-12(fp)
     cc4:	e0ffff17 	ldw	r3,-4(fp)
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	e13ffe17 	ldw	r4,-8(fp)
     cd0:	e0fffc17 	ldw	r3,-16(fp)
     cd4:	20c7883a 	add	r3,r4,r3
     cd8:	18c00003 	ldbu	r3,0(r3)
     cdc:	10c00005 	stb	r3,0(r2)
     ce0:	e0bffd17 	ldw	r2,-12(fp)
     ce4:	10800044 	addi	r2,r2,1
     ce8:	e0bffd15 	stw	r2,-12(fp)
     cec:	e0bffc17 	ldw	r2,-16(fp)
     cf0:	10800044 	addi	r2,r2,1
     cf4:	e0bffc15 	stw	r2,-16(fp)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
     cf8:	e0bffc17 	ldw	r2,-16(fp)
     cfc:	10800208 	cmpgei	r2,r2,8
     d00:	1000111e 	bne	r2,zero,d48 <fatComposeShortFilename+0xa8>
     d04:	e0fffe17 	ldw	r3,-8(fp)
     d08:	e0bffc17 	ldw	r2,-16(fp)
     d0c:	1885883a 	add	r2,r3,r2
     d10:	10800003 	ldbu	r2,0(r2)
     d14:	10803fcc 	andi	r2,r2,255
     d18:	1080201c 	xori	r2,r2,128
     d1c:	10bfe004 	addi	r2,r2,-128
     d20:	10000926 	beq	r2,zero,d48 <fatComposeShortFilename+0xa8>
     d24:	e0fffe17 	ldw	r3,-8(fp)
     d28:	e0bffc17 	ldw	r2,-16(fp)
     d2c:	1885883a 	add	r2,r3,r2
     d30:	10800003 	ldbu	r2,0(r2)
     d34:	10803fcc 	andi	r2,r2,255
     d38:	1080201c 	xori	r2,r2,128
     d3c:	10bfe004 	addi	r2,r2,-128
     d40:	10800818 	cmpnei	r2,r2,32
     d44:	103fde1e 	bne	r2,zero,cc0 <_gp+0xfffe4444>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
     d48:	e0bffe17 	ldw	r2,-8(fp)
     d4c:	108002c3 	ldbu	r2,11(r2)
     d50:	10803fcc 	andi	r2,r2,255
     d54:	10800c0c 	andi	r2,r2,48
     d58:	10003426 	beq	r2,zero,e2c <fatComposeShortFilename+0x18c>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
     d5c:	e0bffe17 	ldw	r2,-8(fp)
     d60:	108002c3 	ldbu	r2,11(r2)
     d64:	10803fcc 	andi	r2,r2,255
     d68:	10800c0c 	andi	r2,r2,48
     d6c:	10000826 	beq	r2,zero,d90 <fatComposeShortFilename+0xf0>
            szFilename[nPos++] = '.';   
     d70:	e0bffd17 	ldw	r2,-12(fp)
     d74:	e0ffff17 	ldw	r3,-4(fp)
     d78:	1885883a 	add	r2,r3,r2
     d7c:	00c00b84 	movi	r3,46
     d80:	10c00005 	stb	r3,0(r2)
     d84:	e0bffd17 	ldw	r2,-12(fp)
     d88:	10800044 	addi	r2,r2,1
     d8c:	e0bffd15 	stw	r2,-12(fp)
        i=0;
     d90:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
     d94:	00000f06 	br	dd4 <fatComposeShortFilename+0x134>
            szFilename[nPos++] = pDir->Extension[i++];
     d98:	e0bffd17 	ldw	r2,-12(fp)
     d9c:	e0ffff17 	ldw	r3,-4(fp)
     da0:	1885883a 	add	r2,r3,r2
     da4:	e13ffe17 	ldw	r4,-8(fp)
     da8:	e0fffc17 	ldw	r3,-16(fp)
     dac:	20c7883a 	add	r3,r4,r3
     db0:	18c00204 	addi	r3,r3,8
     db4:	18c00003 	ldbu	r3,0(r3)
     db8:	10c00005 	stb	r3,0(r2)
     dbc:	e0bffd17 	ldw	r2,-12(fp)
     dc0:	10800044 	addi	r2,r2,1
     dc4:	e0bffd15 	stw	r2,-12(fp)
     dc8:	e0bffc17 	ldw	r2,-16(fp)
     dcc:	10800044 	addi	r2,r2,1
     dd0:	e0bffc15 	stw	r2,-16(fp)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
     dd4:	e0bffc17 	ldw	r2,-16(fp)
     dd8:	108000c8 	cmpgei	r2,r2,3
     ddc:	1000131e 	bne	r2,zero,e2c <fatComposeShortFilename+0x18c>
     de0:	e0fffe17 	ldw	r3,-8(fp)
     de4:	e0bffc17 	ldw	r2,-16(fp)
     de8:	1885883a 	add	r2,r3,r2
     dec:	10800204 	addi	r2,r2,8
     df0:	10800003 	ldbu	r2,0(r2)
     df4:	10803fcc 	andi	r2,r2,255
     df8:	1080201c 	xori	r2,r2,128
     dfc:	10bfe004 	addi	r2,r2,-128
     e00:	10000a26 	beq	r2,zero,e2c <fatComposeShortFilename+0x18c>
     e04:	e0fffe17 	ldw	r3,-8(fp)
     e08:	e0bffc17 	ldw	r2,-16(fp)
     e0c:	1885883a 	add	r2,r3,r2
     e10:	10800204 	addi	r2,r2,8
     e14:	10800003 	ldbu	r2,0(r2)
     e18:	10803fcc 	andi	r2,r2,255
     e1c:	1080201c 	xori	r2,r2,128
     e20:	10bfe004 	addi	r2,r2,-128
     e24:	10800818 	cmpnei	r2,r2,32
     e28:	103fdb1e 	bne	r2,zero,d98 <_gp+0xfffe451c>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
     e2c:	e0bffd17 	ldw	r2,-12(fp)
     e30:	e0ffff17 	ldw	r3,-4(fp)
     e34:	1885883a 	add	r2,r3,r2
     e38:	10000005 	stb	zero,0(r2)
     e3c:	e0bffd17 	ldw	r2,-12(fp)
     e40:	10800044 	addi	r2,r2,1
     e44:	e0bffd15 	stw	r2,-12(fp)
}
     e48:	e037883a 	mov	sp,fp
     e4c:	df000017 	ldw	fp,0(sp)
     e50:	dec00104 	addi	sp,sp,4
     e54:	f800283a 	ret

00000e58 <Fat_FileExist>:





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
     e58:	deffaf04 	addi	sp,sp,-324
     e5c:	dfc05015 	stw	ra,320(sp)
     e60:	df004f15 	stw	fp,316(sp)
     e64:	df004f04 	addi	fp,sp,316
     e68:	e13ffe15 	stw	r4,-8(fp)
     e6c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
     e70:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
     e74:	e0bfb204 	addi	r2,fp,-312
     e78:	e13ffe17 	ldw	r4,-8(fp)
     e7c:	100b883a 	mov	r5,r2
     e80:	000070c0 	call	70c <Fat_FileBrowseBegin>
     e84:	10001a26 	beq	r2,zero,ef0 <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
     e88:	00000f06 	br	ec8 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
     e8c:	e0bff417 	ldw	r2,-48(fp)
     e90:	10000626 	beq	r2,zero,eac <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
     e94:	e0bfb404 	addi	r2,fp,-304
     e98:	1009883a 	mov	r4,r2
     e9c:	e17fff17 	ldw	r5,-4(fp)
     ea0:	0000c0c0 	call	c0c <fatSameLongFilename>
     ea4:	e0bfb115 	stw	r2,-316(fp)
     ea8:	00000706 	br	ec8 <Fat_FileExist+0x70>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
     eac:	e0bfb404 	addi	r2,fp,-304
     eb0:	1009883a 	mov	r4,r2
     eb4:	e17fff17 	ldw	r5,-4(fp)
     eb8:	00072080 	call	7208 <strcasecmp>
     ebc:	1000021e 	bne	r2,zero,ec8 <Fat_FileExist+0x70>
                    bFind = TRUE;
     ec0:	00800044 	movi	r2,1
     ec4:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
     ec8:	e0bfb117 	ldw	r2,-316(fp)
     ecc:	1000061e 	bne	r2,zero,ee8 <Fat_FileExist+0x90>
     ed0:	e0ffb204 	addi	r3,fp,-312
     ed4:	e0bfb404 	addi	r2,fp,-304
     ed8:	1809883a 	mov	r4,r3
     edc:	100b883a 	mov	r5,r2
     ee0:	00007780 	call	778 <Fat_FileBrowseNext>
     ee4:	103fe91e 	bne	r2,zero,e8c <_gp+0xfffe4610>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
     ee8:	e13ffe17 	ldw	r4,-8(fp)
     eec:	00017140 	call	1714 <Fat_FileClose>
    }
    return bFind;            
     ef0:	e0bfb117 	ldw	r2,-316(fp)
}    
     ef4:	e037883a 	mov	sp,fp
     ef8:	dfc00117 	ldw	ra,4(sp)
     efc:	df000017 	ldw	fp,0(sp)
     f00:	dec00204 	addi	sp,sp,8
     f04:	f800283a 	ret

00000f08 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
     f08:	deff6b04 	addi	sp,sp,-596
     f0c:	dfc09415 	stw	ra,592(sp)
     f10:	df009315 	stw	fp,588(sp)
     f14:	df009304 	addi	fp,sp,588
     f18:	e13ffe15 	stw	r4,-8(fp)
     f1c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
     f20:	e03f6d15 	stw	zero,-588(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
     f24:	e03f6e15 	stw	zero,-584(fp)
    int nPos = 0;
     f28:	e03f6f15 	stw	zero,-580(fp)
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
     f2c:	e0bf7204 	addi	r2,fp,-568
     f30:	e13ffe17 	ldw	r4,-8(fp)
     f34:	100b883a 	mov	r5,r2
     f38:	000070c0 	call	70c <Fat_FileBrowseBegin>
     f3c:	10007626 	beq	r2,zero,1118 <Fat_FileOpen+0x210>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
     f40:	00004e06 	br	107c <Fat_FileOpen+0x174>
            if (FileContext.bLongFilename){
     f44:	e0bfb417 	ldw	r2,-304(fp)
     f48:	10004526 	beq	r2,zero,1060 <Fat_FileOpen+0x158>
                //bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
                nPos = 0;
     f4c:	e03f6f15 	stw	zero,-580(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
     f50:	e0bf7404 	addi	r2,fp,-560
     f54:	e0bf7015 	stw	r2,-576(fp)
                pData8 = FileContext.szName;
     f58:	e0bf7404 	addi	r2,fp,-560
     f5c:	e0bf7115 	stw	r2,-572(fp)
                while(*pData16){
     f60:	00002f06 	br	1020 <Fat_FileOpen+0x118>
                    if (*pData8 && *pData8 != ' ')
     f64:	e0bf7117 	ldw	r2,-572(fp)
     f68:	10800003 	ldbu	r2,0(r2)
     f6c:	10803fcc 	andi	r2,r2,255
     f70:	10000f26 	beq	r2,zero,fb0 <Fat_FileOpen+0xa8>
     f74:	e0bf7117 	ldw	r2,-572(fp)
     f78:	10800003 	ldbu	r2,0(r2)
     f7c:	10803fcc 	andi	r2,r2,255
     f80:	10800820 	cmpeqi	r2,r2,32
     f84:	10000a1e 	bne	r2,zero,fb0 <Fat_FileOpen+0xa8>
                        szWaveFilename[nPos++] = *pData8;
     f88:	e0bf7117 	ldw	r2,-572(fp)
     f8c:	10800003 	ldbu	r2,0(r2)
     f90:	1007883a 	mov	r3,r2
     f94:	e13fbe04 	addi	r4,fp,-264
     f98:	e0bf6f17 	ldw	r2,-580(fp)
     f9c:	2085883a 	add	r2,r4,r2
     fa0:	10c00005 	stb	r3,0(r2)
     fa4:	e0bf6f17 	ldw	r2,-580(fp)
     fa8:	10800044 	addi	r2,r2,1
     fac:	e0bf6f15 	stw	r2,-580(fp)
                    pData8++;
     fb0:	e0bf7117 	ldw	r2,-572(fp)
     fb4:	10800044 	addi	r2,r2,1
     fb8:	e0bf7115 	stw	r2,-572(fp)
                    if (*pData8 && *pData8 != ' ')
     fbc:	e0bf7117 	ldw	r2,-572(fp)
     fc0:	10800003 	ldbu	r2,0(r2)
     fc4:	10803fcc 	andi	r2,r2,255
     fc8:	10000f26 	beq	r2,zero,1008 <Fat_FileOpen+0x100>
     fcc:	e0bf7117 	ldw	r2,-572(fp)
     fd0:	10800003 	ldbu	r2,0(r2)
     fd4:	10803fcc 	andi	r2,r2,255
     fd8:	10800820 	cmpeqi	r2,r2,32
     fdc:	10000a1e 	bne	r2,zero,1008 <Fat_FileOpen+0x100>
                        szWaveFilename[nPos++] = *pData8;
     fe0:	e0bf7117 	ldw	r2,-572(fp)
     fe4:	10800003 	ldbu	r2,0(r2)
     fe8:	1007883a 	mov	r3,r2
     fec:	e13fbe04 	addi	r4,fp,-264
     ff0:	e0bf6f17 	ldw	r2,-580(fp)
     ff4:	2085883a 	add	r2,r4,r2
     ff8:	10c00005 	stb	r3,0(r2)
     ffc:	e0bf6f17 	ldw	r2,-580(fp)
    1000:	10800044 	addi	r2,r2,1
    1004:	e0bf6f15 	stw	r2,-580(fp)
                    pData8++;                    
    1008:	e0bf7117 	ldw	r2,-572(fp)
    100c:	10800044 	addi	r2,r2,1
    1010:	e0bf7115 	stw	r2,-572(fp)
                    //    
                    pData16++;
    1014:	e0bf7017 	ldw	r2,-576(fp)
    1018:	10800084 	addi	r2,r2,2
    101c:	e0bf7015 	stw	r2,-576(fp)
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
    1020:	e0bf7017 	ldw	r2,-576(fp)
    1024:	1080000b 	ldhu	r2,0(r2)
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	103fcd1e 	bne	r2,zero,f64 <_gp+0xfffe46e8>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
    1030:	e0ffbe04 	addi	r3,fp,-264
    1034:	e0bf6f17 	ldw	r2,-580(fp)
    1038:	1885883a 	add	r2,r3,r2
    103c:	10000005 	stb	zero,0(r2)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
    1040:	e0bfbe04 	addi	r2,fp,-264
    1044:	e13fff17 	ldw	r4,-4(fp)
    1048:	100b883a 	mov	r5,r2
    104c:	00072bc0 	call	72bc <strcmp>
    1050:	10000a1e 	bne	r2,zero,107c <Fat_FileOpen+0x174>
                    bFind = TRUE;
    1054:	00800044 	movi	r2,1
    1058:	e0bf6d15 	stw	r2,-588(fp)
    105c:	00000706 	br	107c <Fat_FileOpen+0x174>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
    1060:	e0bf7404 	addi	r2,fp,-560
    1064:	1009883a 	mov	r4,r2
    1068:	e17fff17 	ldw	r5,-4(fp)
    106c:	00072080 	call	7208 <strcasecmp>
    1070:	1000021e 	bne	r2,zero,107c <Fat_FileOpen+0x174>
                    bFind = TRUE;
    1074:	00800044 	movi	r2,1
    1078:	e0bf6d15 	stw	r2,-588(fp)
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
    107c:	e0bf6d17 	ldw	r2,-588(fp)
    1080:	1000061e 	bne	r2,zero,109c <Fat_FileOpen+0x194>
    1084:	e0ff7204 	addi	r3,fp,-568
    1088:	e0bf7404 	addi	r2,fp,-560
    108c:	1809883a 	mov	r4,r3
    1090:	100b883a 	mov	r5,r2
    1094:	00007780 	call	778 <Fat_FileBrowseNext>
    1098:	103faa1e 	bne	r2,zero,f44 <_gp+0xfffe46c8>
                if (strcmpi(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
    109c:	e0bf6d17 	ldw	r2,-588(fp)
    10a0:	10001d26 	beq	r2,zero,1118 <Fat_FileOpen+0x210>
            pFile = malloc(sizeof(FAT_FILE_INFO));
    10a4:	01005004 	movi	r4,320
    10a8:	000663c0 	call	663c <malloc>
    10ac:	e0bf6e15 	stw	r2,-584(fp)
            if (pFile){
    10b0:	e0bf6e17 	ldw	r2,-584(fp)
    10b4:	10001826 	beq	r2,zero,1118 <Fat_FileOpen+0x210>
                pFile->OpenAttribute = FILE_OPEN_READ; 
    10b8:	e0bf6e17 	ldw	r2,-584(fp)
    10bc:	00c00044 	movi	r3,1
    10c0:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
    10c4:	e0bf6e17 	ldw	r2,-584(fp)
    10c8:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
    10cc:	e0bf6e17 	ldw	r2,-584(fp)
    10d0:	11000504 	addi	r4,r2,20
    10d4:	e0ff7404 	addi	r3,fp,-560
    10d8:	00804a04 	movi	r2,296
    10dc:	180b883a 	mov	r5,r3
    10e0:	100d883a 	mov	r6,r2
    10e4:	0006de80 	call	6de8 <memcpy>
                pFile->IsOpened = TRUE;
    10e8:	e0bf6e17 	ldw	r2,-584(fp)
    10ec:	00c00044 	movi	r3,1
    10f0:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
    10f4:	e0bfbc8b 	ldhu	r2,-270(fp)
    10f8:	10ffffcc 	andi	r3,r2,65535
    10fc:	e0bf6e17 	ldw	r2,-584(fp)
    1100:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
    1104:	e0bf6e17 	ldw	r2,-584(fp)
    1108:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
    110c:	e0bf6e17 	ldw	r2,-584(fp)
    1110:	e0fffe17 	ldw	r3,-8(fp)
    1114:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
    1118:	e0bf6e17 	ldw	r2,-584(fp)
}
    111c:	e037883a 	mov	sp,fp
    1120:	dfc00117 	ldw	ra,4(sp)
    1124:	df000017 	ldw	fp,0(sp)
    1128:	dec00204 	addi	sp,sp,8
    112c:	f800283a 	ret

00001130 <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
    1130:	defffd04 	addi	sp,sp,-12
    1134:	df000215 	stw	fp,8(sp)
    1138:	df000204 	addi	fp,sp,8
    113c:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
    1148:	e0bffe17 	ldw	r2,-8(fp)
    114c:	10800017 	ldw	r2,0(r2)
    1150:	10000326 	beq	r2,zero,1160 <Fat_FileSize+0x30>
        return f->Directory.FileSize;
    1154:	e0bffe17 	ldw	r2,-8(fp)
    1158:	10804e17 	ldw	r2,312(r2)
    115c:	00000106 	br	1164 <Fat_FileSize+0x34>
    return 0;        
    1160:	0005883a 	mov	r2,zero
}
    1164:	e037883a 	mov	sp,fp
    1168:	df000017 	ldw	fp,0(sp)
    116c:	dec00104 	addi	sp,sp,4
    1170:	f800283a 	ret

00001174 <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
    1174:	deffef04 	addi	sp,sp,-68
    1178:	dfc01015 	stw	ra,64(sp)
    117c:	df000f15 	stw	fp,60(sp)
    1180:	df000f04 	addi	fp,sp,60
    1184:	e13ffd15 	stw	r4,-12(fp)
    1188:	e17ffe15 	stw	r5,-8(fp)
    118c:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    1190:	e0bffd17 	ldw	r2,-12(fp)
    1194:	e0bff915 	stw	r2,-28(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    1198:	e03ff415 	stw	zero,-48(fp)
    int s;
    bool bSuccess= TRUE;
    119c:	00800044 	movi	r2,1
    11a0:	e0bff715 	stw	r2,-36(fp)
    
    if (!f || !f->Fat)
    11a4:	e0bff917 	ldw	r2,-28(fp)
    11a8:	10000326 	beq	r2,zero,11b8 <Fat_FileRead+0x44>
    11ac:	e0bff917 	ldw	r2,-28(fp)
    11b0:	10804f17 	ldw	r2,316(r2)
    11b4:	1000021e 	bne	r2,zero,11c0 <Fat_FileRead+0x4c>
        return FALSE;
    11b8:	0005883a 	mov	r2,zero
    11bc:	00011006 	br	1600 <Fat_FileRead+0x48c>
    pVol = (VOLUME_INFO *)f->Fat;        
    11c0:	e0bff917 	ldw	r2,-28(fp)
    11c4:	10804f17 	ldw	r2,316(r2)
    11c8:	e0bffa15 	stw	r2,-24(fp)
    
    if (!f->IsOpened){
    11cc:	e0bff917 	ldw	r2,-28(fp)
    11d0:	10800017 	ldw	r2,0(r2)
    11d4:	1000051e 	bne	r2,zero,11ec <Fat_FileRead+0x78>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
    11d8:	01000074 	movhi	r4,1
    11dc:	21088704 	addi	r4,r4,8732
    11e0:	00032f00 	call	32f0 <myprintf>
        return bSuccess;
    11e4:	e0bff717 	ldw	r2,-36(fp)
    11e8:	00010506 	br	1600 <Fat_FileRead+0x48c>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    11ec:	e0bffa17 	ldw	r2,-24(fp)
    11f0:	10800c17 	ldw	r2,48(r2)
    11f4:	e0bffb15 	stw	r2,-20(fp)
    Pos = f->SeekPos;
    11f8:	e0bff917 	ldw	r2,-28(fp)
    11fc:	10800217 	ldw	r2,8(r2)
    1200:	e0bff115 	stw	r2,-60(fp)
    if (BytesPerCluster == 32768){
    1204:	e0fffb17 	ldw	r3,-20(fp)
    1208:	00a00014 	movui	r2,32768
    120c:	18800a1e 	bne	r3,r2,1238 <Fat_FileRead+0xc4>
        nClusterSeq = Pos >> 15;
    1210:	e0bff117 	ldw	r2,-60(fp)
    1214:	1004d3fa 	srli	r2,r2,15
    1218:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 15);
    121c:	e0bff917 	ldw	r2,-28(fp)
    1220:	10800417 	ldw	r2,16(r2)
    1224:	100493fa 	slli	r2,r2,15
    1228:	e0fff117 	ldw	r3,-60(fp)
    122c:	1885c83a 	sub	r2,r3,r2
    1230:	e0bff115 	stw	r2,-60(fp)
    1234:	00002506 	br	12cc <Fat_FileRead+0x158>
    }else if (BytesPerCluster == 16384){
    1238:	e0bffb17 	ldw	r2,-20(fp)
    123c:	10900018 	cmpnei	r2,r2,16384
    1240:	10000a1e 	bne	r2,zero,126c <Fat_FileRead+0xf8>
        nClusterSeq = Pos >> 14;
    1244:	e0bff117 	ldw	r2,-60(fp)
    1248:	1004d3ba 	srli	r2,r2,14
    124c:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 14);
    1250:	e0bff917 	ldw	r2,-28(fp)
    1254:	10800417 	ldw	r2,16(r2)
    1258:	100493ba 	slli	r2,r2,14
    125c:	e0fff117 	ldw	r3,-60(fp)
    1260:	1885c83a 	sub	r2,r3,r2
    1264:	e0bff115 	stw	r2,-60(fp)
    1268:	00001806 	br	12cc <Fat_FileRead+0x158>
    }else if (BytesPerCluster == 2048){
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10820018 	cmpnei	r2,r2,2048
    1274:	10000a1e 	bne	r2,zero,12a0 <Fat_FileRead+0x12c>
        nClusterSeq = Pos >> 11;
    1278:	e0bff117 	ldw	r2,-60(fp)
    127c:	1004d2fa 	srli	r2,r2,11
    1280:	e0bff515 	stw	r2,-44(fp)
        Pos -= (f->ClusterSeq << 11);
    1284:	e0bff917 	ldw	r2,-28(fp)
    1288:	10800417 	ldw	r2,16(r2)
    128c:	100492fa 	slli	r2,r2,11
    1290:	e0fff117 	ldw	r3,-60(fp)
    1294:	1885c83a 	sub	r2,r3,r2
    1298:	e0bff115 	stw	r2,-60(fp)
    129c:	00000b06 	br	12cc <Fat_FileRead+0x158>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
    12a0:	e13ff117 	ldw	r4,-60(fp)
    12a4:	e17ffb17 	ldw	r5,-20(fp)
    12a8:	0005f500 	call	5f50 <__udivsi3>
    12ac:	e0bff515 	stw	r2,-44(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
    12b0:	e0bff917 	ldw	r2,-28(fp)
    12b4:	10c00417 	ldw	r3,16(r2)
    12b8:	e0bffb17 	ldw	r2,-20(fp)
    12bc:	1885383a 	mul	r2,r3,r2
    12c0:	e0fff117 	ldw	r3,-60(fp)
    12c4:	1885c83a 	sub	r2,r3,r2
    12c8:	e0bff115 	stw	r2,-60(fp)
    }    
        
       
    Cluster = f->Cluster;
    12cc:	e0bff917 	ldw	r2,-28(fp)
    12d0:	10800317 	ldw	r2,12(r2)
    12d4:	e0bff315 	stw	r2,-52(fp)
    if (nClusterSeq != f->ClusterSeq){
    12d8:	e0bff917 	ldw	r2,-28(fp)
    12dc:	10c00417 	ldw	r3,16(r2)
    12e0:	e0bff517 	ldw	r2,-44(fp)
    12e4:	1880b726 	beq	r3,r2,15c4 <Fat_FileRead+0x450>
        Cluster = f->Cluster;  //11/20/2007, richard
    12e8:	e0bff917 	ldw	r2,-28(fp)
    12ec:	10800317 	ldw	r2,12(r2)
    12f0:	e0bff315 	stw	r2,-52(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
    12f4:	00001a06 	br	1360 <Fat_FileRead+0x1ec>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
    12f8:	e13ffa17 	ldw	r4,-24(fp)
    12fc:	e17ff317 	ldw	r5,-52(fp)
    1300:	0001afc0 	call	1afc <fatNextCluster>
    1304:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	1000061e 	bne	r2,zero,1328 <Fat_FileRead+0x1b4>
                bSuccess = FALSE;
    1310:	e03ff715 	stw	zero,-36(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
    1314:	01000074 	movhi	r4,1
    1318:	21089104 	addi	r4,r4,8772
    131c:	e17ff317 	ldw	r5,-52(fp)
    1320:	00032f00 	call	32f0 <myprintf>
    1324:	00000206 	br	1330 <Fat_FileRead+0x1bc>
            }else{
                Cluster = NextCluster;
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	e0bff315 	stw	r2,-52(fp)
            }        
            Pos -= BytesPerCluster;
    1330:	e0fff117 	ldw	r3,-60(fp)
    1334:	e0bffb17 	ldw	r2,-20(fp)
    1338:	1885c83a 	sub	r2,r3,r2
    133c:	e0bff115 	stw	r2,-60(fp)
            f->Cluster = Cluster;
    1340:	e0bff917 	ldw	r2,-28(fp)
    1344:	e0fff317 	ldw	r3,-52(fp)
    1348:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
    134c:	e0bff917 	ldw	r2,-28(fp)
    1350:	10800417 	ldw	r2,16(r2)
    1354:	10c00044 	addi	r3,r2,1
    1358:	e0bff917 	ldw	r2,-28(fp)
    135c:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
    1360:	e0fff117 	ldw	r3,-60(fp)
    1364:	e0bffb17 	ldw	r2,-20(fp)
    1368:	18809636 	bltu	r3,r2,15c4 <Fat_FileRead+0x450>
    136c:	e0bff717 	ldw	r2,-36(fp)
    1370:	103fe11e 	bne	r2,zero,12f8 <_gp+0xfffe4a7c>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
    1374:	00009306 	br	15c4 <Fat_FileRead+0x450>
        if (pVol->BPB_SecPerCluster == 32)
    1378:	e0bffa17 	ldw	r2,-24(fp)
    137c:	10800717 	ldw	r2,28(r2)
    1380:	10800818 	cmpnei	r2,r2,32
    1384:	1000081e 	bne	r2,zero,13a8 <Fat_FileRead+0x234>
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    1388:	e0bff317 	ldw	r2,-52(fp)
    138c:	10bfff84 	addi	r2,r2,-2
    1390:	1006917a 	slli	r3,r2,5
    1394:	e0bffa17 	ldw	r2,-24(fp)
    1398:	10800f17 	ldw	r2,60(r2)
    139c:	1885883a 	add	r2,r3,r2
    13a0:	e0bff215 	stw	r2,-56(fp)
    13a4:	00001506 	br	13fc <Fat_FileRead+0x288>
        else if (pVol->BPB_SecPerCluster == 64)
    13a8:	e0bffa17 	ldw	r2,-24(fp)
    13ac:	10800717 	ldw	r2,28(r2)
    13b0:	10801018 	cmpnei	r2,r2,64
    13b4:	1000081e 	bne	r2,zero,13d8 <Fat_FileRead+0x264>
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    13b8:	e0bff317 	ldw	r2,-52(fp)
    13bc:	10bfff84 	addi	r2,r2,-2
    13c0:	100691ba 	slli	r3,r2,6
    13c4:	e0bffa17 	ldw	r2,-24(fp)
    13c8:	10800f17 	ldw	r2,60(r2)
    13cc:	1885883a 	add	r2,r3,r2
    13d0:	e0bff215 	stw	r2,-56(fp)
    13d4:	00000906 	br	13fc <Fat_FileRead+0x288>
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    13d8:	e0bff317 	ldw	r2,-52(fp)
    13dc:	10ffff84 	addi	r3,r2,-2
    13e0:	e0bffa17 	ldw	r2,-24(fp)
    13e4:	10800717 	ldw	r2,28(r2)
    13e8:	1887383a 	mul	r3,r3,r2
    13ec:	e0bffa17 	ldw	r2,-24(fp)
    13f0:	10800f17 	ldw	r2,60(r2)
    13f4:	1885883a 	add	r2,r3,r2
    13f8:	e0bff215 	stw	r2,-56(fp)
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
    13fc:	e03ff615 	stw	zero,-40(fp)
    1400:	00004e06 	br	153c <Fat_FileRead+0x3c8>
            if (Pos >= pVol->BPB_BytsPerSec){
    1404:	e0bffa17 	ldw	r2,-24(fp)
    1408:	10800617 	ldw	r2,24(r2)
    140c:	e0fff117 	ldw	r3,-60(fp)
    1410:	18800636 	bltu	r3,r2,142c <Fat_FileRead+0x2b8>
                Pos -= pVol->BPB_BytsPerSec;
    1414:	e0bffa17 	ldw	r2,-24(fp)
    1418:	10800617 	ldw	r2,24(r2)
    141c:	e0fff117 	ldw	r3,-60(fp)
    1420:	1885c83a 	sub	r2,r3,r2
    1424:	e0bff115 	stw	r2,-60(fp)
    1428:	00003e06 	br	1524 <Fat_FileRead+0x3b0>
            }else{
                // read secter data
                bSuccess = fatReadSecter(pVol, PhysicalSecter);
    142c:	e13ffa17 	ldw	r4,-24(fp)
    1430:	e17ff217 	ldw	r5,-56(fp)
    1434:	00029c80 	call	29c8 <fatReadSecter>
    1438:	e0bff715 	stw	r2,-36(fp)
                
                if (bSuccess){
    143c:	e0bff717 	ldw	r2,-36(fp)
    1440:	10003826 	beq	r2,zero,1524 <Fat_FileRead+0x3b0>
                    // copy data to user buffer
                
                    int nCopyCount;
                    nCopyCount = pVol->BPB_BytsPerSec;
    1444:	e0bffa17 	ldw	r2,-24(fp)
    1448:	10800617 	ldw	r2,24(r2)
    144c:	e0bff815 	stw	r2,-32(fp)
                    if (Pos)
    1450:	e0bff117 	ldw	r2,-60(fp)
    1454:	10000426 	beq	r2,zero,1468 <Fat_FileRead+0x2f4>
                        nCopyCount -= Pos;
    1458:	e0fff817 	ldw	r3,-32(fp)
    145c:	e0bff117 	ldw	r2,-60(fp)
    1460:	1885c83a 	sub	r2,r3,r2
    1464:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount > (nBufferSize-nReadCount))
    1468:	e0bff817 	ldw	r2,-32(fp)
    146c:	e13fff17 	ldw	r4,-4(fp)
    1470:	e0fff417 	ldw	r3,-48(fp)
    1474:	20c7c83a 	sub	r3,r4,r3
    1478:	1880042e 	bgeu	r3,r2,148c <Fat_FileRead+0x318>
                        nCopyCount = nBufferSize-nReadCount;
    147c:	e0ffff17 	ldw	r3,-4(fp)
    1480:	e0bff417 	ldw	r2,-48(fp)
    1484:	1885c83a 	sub	r2,r3,r2
    1488:	e0bff815 	stw	r2,-32(fp)
                    if (nCopyCount == 512){
    148c:	e0bff817 	ldw	r2,-32(fp)
    1490:	10808018 	cmpnei	r2,r2,512
    1494:	1000111e 	bne	r2,zero,14dc <Fat_FileRead+0x368>
                        memcpy((char *)pBuffer+nReadCount, pVol->Secter_Data, 512);
    1498:	e0fffe17 	ldw	r3,-8(fp)
    149c:	e0bff417 	ldw	r2,-48(fp)
    14a0:	1887883a 	add	r3,r3,r2
    14a4:	e0bffa17 	ldw	r2,-24(fp)
    14a8:	10801004 	addi	r2,r2,64
    14ac:	1809883a 	mov	r4,r3
    14b0:	100b883a 	mov	r5,r2
    14b4:	01808004 	movi	r6,512
    14b8:	0006de80 	call	6de8 <memcpy>
                        nReadCount += nCopyCount;
    14bc:	e0bff817 	ldw	r2,-32(fp)
    14c0:	e0fff417 	ldw	r3,-48(fp)
    14c4:	1885883a 	add	r2,r3,r2
    14c8:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
    14cc:	e0bff117 	ldw	r2,-60(fp)
    14d0:	10001426 	beq	r2,zero,1524 <Fat_FileRead+0x3b0>
                            Pos = 0;
    14d4:	e03ff115 	stw	zero,-60(fp)
    14d8:	00001206 	br	1524 <Fat_FileRead+0x3b0>
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
    14dc:	e0fffe17 	ldw	r3,-8(fp)
    14e0:	e0bff417 	ldw	r2,-48(fp)
    14e4:	1889883a 	add	r4,r3,r2
    14e8:	e0bff117 	ldw	r2,-60(fp)
    14ec:	10801004 	addi	r2,r2,64
    14f0:	e0fffa17 	ldw	r3,-24(fp)
    14f4:	1887883a 	add	r3,r3,r2
    14f8:	e0bff817 	ldw	r2,-32(fp)
    14fc:	180b883a 	mov	r5,r3
    1500:	100d883a 	mov	r6,r2
    1504:	0006de80 	call	6de8 <memcpy>
                        nReadCount += nCopyCount;
    1508:	e0bff817 	ldw	r2,-32(fp)
    150c:	e0fff417 	ldw	r3,-48(fp)
    1510:	1885883a 	add	r2,r3,r2
    1514:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
    1518:	e0bff117 	ldw	r2,-60(fp)
    151c:	10000126 	beq	r2,zero,1524 <Fat_FileRead+0x3b0>
                            Pos = 0;
    1520:	e03ff115 	stw	zero,-60(fp)
                    }         
                }    // if bSuccess
                    
            }
            PhysicalSecter++;
    1524:	e0bff217 	ldw	r2,-56(fp)
    1528:	10800044 	addi	r2,r2,1
    152c:	e0bff215 	stw	r2,-56(fp)
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else if (pVol->BPB_SecPerCluster == 64)
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
    1530:	e0bff617 	ldw	r2,-40(fp)
    1534:	10800044 	addi	r2,r2,1
    1538:	e0bff615 	stw	r2,-40(fp)
    153c:	e0fff617 	ldw	r3,-40(fp)
    1540:	e0bffa17 	ldw	r2,-24(fp)
    1544:	10800717 	ldw	r2,28(r2)
    1548:	1880052e 	bgeu	r3,r2,1560 <Fat_FileRead+0x3ec>
    154c:	e0bfff17 	ldw	r2,-4(fp)
    1550:	e0fff417 	ldw	r3,-48(fp)
    1554:	1880022e 	bgeu	r3,r2,1560 <Fat_FileRead+0x3ec>
    1558:	e0bff717 	ldw	r2,-36(fp)
    155c:	103fa91e 	bne	r2,zero,1404 <_gp+0xfffe4b88>
            }
            PhysicalSecter++;
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
    1560:	e0bfff17 	ldw	r2,-4(fp)
    1564:	e0fff417 	ldw	r3,-48(fp)
    1568:	1880172e 	bgeu	r3,r2,15c8 <Fat_FileRead+0x454>
            NextCluster = fatNextCluster(pVol, Cluster); 
    156c:	e13ffa17 	ldw	r4,-24(fp)
    1570:	e17ff317 	ldw	r5,-52(fp)
    1574:	0001afc0 	call	1afc <fatNextCluster>
    1578:	e0bffc15 	stw	r2,-16(fp)
            if (NextCluster == 0){
    157c:	e0bffc17 	ldw	r2,-16(fp)
    1580:	1000051e 	bne	r2,zero,1598 <Fat_FileRead+0x424>
                bSuccess = FALSE;
    1584:	e03ff715 	stw	zero,-36(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
    1588:	01000074 	movhi	r4,1
    158c:	2108a004 	addi	r4,r4,8832
    1590:	00032f00 	call	32f0 <myprintf>
    1594:	00000206 	br	15a0 <Fat_FileRead+0x42c>
            }else{
                Cluster = NextCluster;
    1598:	e0bffc17 	ldw	r2,-16(fp)
    159c:	e0bff315 	stw	r2,-52(fp)
            }    
            //    
            f->ClusterSeq++; 
    15a0:	e0bff917 	ldw	r2,-28(fp)
    15a4:	10800417 	ldw	r2,16(r2)
    15a8:	10c00044 	addi	r3,r2,1
    15ac:	e0bff917 	ldw	r2,-28(fp)
    15b0:	10c00415 	stw	r3,16(r2)
            f->Cluster = Cluster;
    15b4:	e0bff917 	ldw	r2,-28(fp)
    15b8:	e0fff317 	ldw	r3,-52(fp)
    15bc:	10c00315 	stw	r3,12(r2)
    15c0:	00000106 	br	15c8 <Fat_FileRead+0x454>
            f->ClusterSeq++; 
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
    15c4:	0001883a 	nop
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	e0fff417 	ldw	r3,-48(fp)
    15d0:	1880022e 	bgeu	r3,r2,15dc <Fat_FileRead+0x468>
    15d4:	e0bff717 	ldw	r2,-36(fp)
    15d8:	103f671e 	bne	r2,zero,1378 <_gp+0xfffe4afc>
            f->ClusterSeq++; 
            f->Cluster = Cluster;
        }                    
    }
    
    if (bSuccess){
    15dc:	e0bff717 	ldw	r2,-36(fp)
    15e0:	10000626 	beq	r2,zero,15fc <Fat_FileRead+0x488>
        f->SeekPos += nBufferSize;
    15e4:	e0bff917 	ldw	r2,-28(fp)
    15e8:	10c00217 	ldw	r3,8(r2)
    15ec:	e0bfff17 	ldw	r2,-4(fp)
    15f0:	1887883a 	add	r3,r3,r2
    15f4:	e0bff917 	ldw	r2,-28(fp)
    15f8:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
    15fc:	e0bff717 	ldw	r2,-36(fp)
}
    1600:	e037883a 	mov	sp,fp
    1604:	dfc00117 	ldw	ra,4(sp)
    1608:	df000017 	ldw	fp,0(sp)
    160c:	dec00204 	addi	sp,sp,8
    1610:	f800283a 	ret

00001614 <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    1614:	defff904 	addi	sp,sp,-28
    1618:	df000615 	stw	fp,24(sp)
    161c:	df000604 	addi	fp,sp,24
    1620:	e13ffd15 	stw	r4,-12(fp)
    1624:	e17ffe15 	stw	r5,-8(fp)
    1628:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    162c:	e0bffd17 	ldw	r2,-12(fp)
    1630:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
    1634:	00800044 	movi	r2,1
    1638:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
    163c:	e0bffb17 	ldw	r2,-20(fp)
    1640:	10000326 	beq	r2,zero,1650 <Fat_FileSeek+0x3c>
    1644:	e0bffb17 	ldw	r2,-20(fp)
    1648:	10804f17 	ldw	r2,316(r2)
    164c:	1000021e 	bne	r2,zero,1658 <Fat_FileSeek+0x44>
        return FALSE;
    1650:	0005883a 	mov	r2,zero
    1654:	00002b06 	br	1704 <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
    1658:	e0bffb17 	ldw	r2,-20(fp)
    165c:	10804f17 	ldw	r2,316(r2)
    1660:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
    1664:	e0bffb17 	ldw	r2,-20(fp)
    1668:	10800017 	ldw	r2,0(r2)
    166c:	1000021e 	bne	r2,zero,1678 <Fat_FileSeek+0x64>
        return FALSE;
    1670:	0005883a 	mov	r2,zero
    1674:	00002306 	br	1704 <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	10c00060 	cmpeqi	r3,r2,1
    1680:	1800081e 	bne	r3,zero,16a4 <Fat_FileSeek+0x90>
    1684:	0080032e 	bgeu	zero,r2,1694 <Fat_FileSeek+0x80>
    1688:	108000a0 	cmpeqi	r2,r2,2
    168c:	10000c1e 	bne	r2,zero,16c0 <Fat_FileSeek+0xac>
    1690:	00001206 	br	16dc <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
    1694:	e0ffff17 	ldw	r3,-4(fp)
    1698:	e0bffb17 	ldw	r2,-20(fp)
    169c:	10c00215 	stw	r3,8(r2)
            break;
    16a0:	00001006 	br	16e4 <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
    16a4:	e0bffb17 	ldw	r2,-20(fp)
    16a8:	10c00217 	ldw	r3,8(r2)
    16ac:	e0bfff17 	ldw	r2,-4(fp)
    16b0:	1887883a 	add	r3,r3,r2
    16b4:	e0bffb17 	ldw	r2,-20(fp)
    16b8:	10c00215 	stw	r3,8(r2)
            break;
    16bc:	00000906 	br	16e4 <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
    16c0:	e0bffb17 	ldw	r2,-20(fp)
    16c4:	10c04e17 	ldw	r3,312(r2)
    16c8:	e0bfff17 	ldw	r2,-4(fp)
    16cc:	1887883a 	add	r3,r3,r2
    16d0:	e0bffb17 	ldw	r2,-20(fp)
    16d4:	10c00215 	stw	r3,8(r2)
            break;
    16d8:	00000206 	br	16e4 <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
    16dc:	e03ffa15 	stw	zero,-24(fp)
            break;    
    16e0:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    16e4:	e0bffb17 	ldw	r2,-20(fp)
    16e8:	10804d8b 	ldhu	r2,310(r2)
    16ec:	10ffffcc 	andi	r3,r2,65535
    16f0:	e0bffb17 	ldw	r2,-20(fp)
    16f4:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
    16f8:	e0bffb17 	ldw	r2,-20(fp)
    16fc:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
    1700:	e0bffa17 	ldw	r2,-24(fp)
    
}
    1704:	e037883a 	mov	sp,fp
    1708:	df000017 	ldw	fp,0(sp)
    170c:	dec00104 	addi	sp,sp,4
    1710:	f800283a 	ret

00001714 <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
    1714:	defffc04 	addi	sp,sp,-16
    1718:	dfc00315 	stw	ra,12(sp)
    171c:	df000215 	stw	fp,8(sp)
    1720:	df000204 	addi	fp,sp,8
    1724:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    1728:	e0bfff17 	ldw	r2,-4(fp)
    172c:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
    1730:	e0bffe17 	ldw	r2,-8(fp)
    1734:	10000326 	beq	r2,zero,1744 <Fat_FileClose+0x30>
        return;
        
    free(f);        
    1738:	e13ffe17 	ldw	r4,-8(fp)
    173c:	00066500 	call	6650 <free>
    1740:	00000106 	br	1748 <Fat_FileClose+0x34>
}

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (!f)
        return;
    1744:	0001883a 	nop
        
    free(f);        
}
    1748:	e037883a 	mov	sp,fp
    174c:	dfc00117 	ldw	ra,4(sp)
    1750:	df000017 	ldw	fp,0(sp)
    1754:	dec00204 	addi	sp,sp,8
    1758:	f800283a 	ret

0000175c <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    175c:	deff7304 	addi	sp,sp,-564
    1760:	dfc08c15 	stw	ra,560(sp)
    1764:	df008b15 	stw	fp,556(sp)
    1768:	dc008a15 	stw	r16,552(sp)
    176c:	df008a04 	addi	fp,sp,552
    1770:	e13ffe15 	stw	r4,-8(fp)
    1774:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
    1778:	00800044 	movi	r2,1
    177c:	e0bf7615 	stw	r2,-552(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    1780:	e03f7715 	stw	zero,-548(fp)
    int nSecter = 0;
    1784:	e03f7815 	stw	zero,-544(fp)
    float fMegaBytePerSec = 0;
    1788:	e03f7915 	stw	zero,-540(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    178c:	e0bffe17 	ldw	r2,-8(fp)
    1790:	e0bf7a15 	stw	r2,-536(fp)
    if (!pVol)
    1794:	e0bf7a17 	ldw	r2,-536(fp)
    1798:	1000021e 	bne	r2,zero,17a4 <Fat_SpeedTest+0x48>
        return 0;
    179c:	0005883a 	mov	r2,zero
    17a0:	00006f06 	br	1960 <Fat_SpeedTest+0x204>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    17a4:	00800074 	movhi	r2,1
    17a8:	1098d104 	addi	r2,r2,25412
    17ac:	10800017 	ldw	r2,0(r2)
    time_start = alt_nticks();
    17b0:	e0bf7b15 	stw	r2,-532(fp)
    17b4:	00800074 	movhi	r2,1
    17b8:	1098d104 	addi	r2,r2,25412
    17bc:	10800017 	ldw	r2,0(r2)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    17c0:	1021883a 	mov	r16,r2
    17c4:	e0bfff17 	ldw	r2,-4(fp)
    17c8:	10c0fa24 	muli	r3,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    17cc:	00800074 	movhi	r2,1
    17d0:	1098d004 	addi	r2,r2,25408
    17d4:	10800017 	ldw	r2,0(r2)
    17d8:	1809883a 	mov	r4,r3
    17dc:	100b883a 	mov	r5,r2
    17e0:	0005f500 	call	5f50 <__udivsi3>
    17e4:	8085883a 	add	r2,r16,r2
    17e8:	e0bf7c15 	stw	r2,-528(fp)
    while(alt_nticks() < time_finish && bSuccess){
    17ec:	00001006 	br	1830 <Fat_SpeedTest+0xd4>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
    17f0:	e0bf7a17 	ldw	r2,-536(fp)
    17f4:	11c00117 	ldw	r7,4(r2)
    17f8:	e0bf7a17 	ldw	r2,-536(fp)
    17fc:	11000017 	ldw	r4,0(r2)
    1800:	e0ff7817 	ldw	r3,-544(fp)
    1804:	e0bf7e04 	addi	r2,fp,-520
    1808:	180b883a 	mov	r5,r3
    180c:	100d883a 	mov	r6,r2
    1810:	383ee83a 	callr	r7
    1814:	e0bf7615 	stw	r2,-552(fp)
        nSecter++;
    1818:	e0bf7817 	ldw	r2,-544(fp)
    181c:	10800044 	addi	r2,r2,1
    1820:	e0bf7815 	stw	r2,-544(fp)
        TotalReadBytes += sizeof(szBlock);
    1824:	e0bf7717 	ldw	r2,-548(fp)
    1828:	10808004 	addi	r2,r2,512
    182c:	e0bf7715 	stw	r2,-548(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1830:	00800074 	movhi	r2,1
    1834:	1098d104 	addi	r2,r2,25412
    1838:	10800017 	ldw	r2,0(r2)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
    183c:	1007883a 	mov	r3,r2
    1840:	e0bf7c17 	ldw	r2,-528(fp)
    1844:	1880022e 	bgeu	r3,r2,1850 <Fat_SpeedTest+0xf4>
    1848:	e0bf7617 	ldw	r2,-552(fp)
    184c:	103fe81e 	bne	r2,zero,17f0 <_gp+0xfffe4f74>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
    1850:	e0bf7617 	ldw	r2,-552(fp)
    1854:	10003826 	beq	r2,zero,1938 <Fat_SpeedTest+0x1dc>
    1858:	00800074 	movhi	r2,1
    185c:	1098d104 	addi	r2,r2,25412
    1860:	10800017 	ldw	r2,0(r2)
        time_elapsed = alt_nticks() - time_start;
    1864:	1007883a 	mov	r3,r2
    1868:	e0bf7b17 	ldw	r2,-532(fp)
    186c:	1885c83a 	sub	r2,r3,r2
    1870:	e0bf7d15 	stw	r2,-524(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
    1874:	e13f7717 	ldw	r4,-548(fp)
    1878:	0005b100 	call	5b10 <__floatunsisf>
    187c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1880:	00800074 	movhi	r2,1
    1884:	1098d004 	addi	r2,r2,25408
    1888:	10800017 	ldw	r2,0(r2)
    188c:	1009883a 	mov	r4,r2
    1890:	0005b100 	call	5b10 <__floatunsisf>
    1894:	1007883a 	mov	r3,r2
    1898:	8009883a 	mov	r4,r16
    189c:	180b883a 	mov	r5,r3
    18a0:	00058000 	call	5800 <__mulsf3>
    18a4:	1007883a 	mov	r3,r2
    18a8:	1821883a 	mov	r16,r3
    18ac:	e13f7d17 	ldw	r4,-524(fp)
    18b0:	0005b100 	call	5b10 <__floatunsisf>
    18b4:	1007883a 	mov	r3,r2
    18b8:	8009883a 	mov	r4,r16
    18bc:	180b883a 	mov	r5,r3
    18c0:	00059900 	call	5990 <__divsf3>
    18c4:	1007883a 	mov	r3,r2
    18c8:	1805883a 	mov	r2,r3
    18cc:	1009883a 	mov	r4,r2
    18d0:	0005acc0 	call	5acc <__extendsfdf2>
    18d4:	100b883a 	mov	r5,r2
    18d8:	180d883a 	mov	r6,r3
    18dc:	2809883a 	mov	r4,r5
    18e0:	300b883a 	mov	r5,r6
    18e4:	000d883a 	mov	r6,zero
    18e8:	01d02434 	movhi	r7,16528
    18ec:	0005be40 	call	5be4 <__divdf3>
    18f0:	1009883a 	mov	r4,r2
    18f4:	180b883a 	mov	r5,r3
    18f8:	2005883a 	mov	r2,r4
    18fc:	2807883a 	mov	r3,r5
    1900:	1009883a 	mov	r4,r2
    1904:	180b883a 	mov	r5,r3
    1908:	000d883a 	mov	r6,zero
    190c:	01d02434 	movhi	r7,16528
    1910:	0005be40 	call	5be4 <__divdf3>
    1914:	1009883a 	mov	r4,r2
    1918:	180b883a 	mov	r5,r3
    191c:	2005883a 	mov	r2,r4
    1920:	2807883a 	mov	r3,r5
    1924:	1009883a 	mov	r4,r2
    1928:	180b883a 	mov	r5,r3
    192c:	0005dd00 	call	5dd0 <__truncdfsf2>
    1930:	1007883a 	mov	r3,r2
    1934:	e0ff7915 	stw	r3,-540(fp)
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
    1938:	e13f7917 	ldw	r4,-540(fp)
    193c:	0005acc0 	call	5acc <__extendsfdf2>
    1940:	100d883a 	mov	r6,r2
    1944:	180f883a 	mov	r7,r3
    1948:	01000074 	movhi	r4,1
    194c:	2108aa04 	addi	r4,r4,8872
    1950:	300b883a 	mov	r5,r6
    1954:	380d883a 	mov	r6,r7
    1958:	0006fe80 	call	6fe8 <printf>
    return fMegaBytePerSec;
    195c:	e0bf7917 	ldw	r2,-540(fp)
    1960:	1007883a 	mov	r3,r2
    
   
}
    1964:	1805883a 	mov	r2,r3
    1968:	e037883a 	mov	sp,fp
    196c:	dfc00217 	ldw	ra,8(sp)
    1970:	df000117 	ldw	fp,4(sp)
    1974:	dc000017 	ldw	r16,0(sp)
    1978:	dec00304 	addi	sp,sp,12
    197c:	f800283a 	ret

00001980 <fat16ClusterType>:
//extern VOLUME_INFO gVolumeInfo;




CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    1980:	defffd04 	addi	sp,sp,-12
    1984:	df000215 	stw	fp,8(sp)
    1988:	df000204 	addi	fp,sp,8
    198c:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    1990:	e0bfff17 	ldw	r2,-4(fp)
    1994:	10bfffcc 	andi	r2,r2,65535
    1998:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
    199c:	e0bfff17 	ldw	r2,-4(fp)
    19a0:	10000626 	beq	r2,zero,19bc <fat16ClusterType+0x3c>
    19a4:	e0bfff17 	ldw	r2,-4(fp)
    19a8:	10bffc28 	cmpgeui	r2,r2,65520
    19ac:	1000031e 	bne	r2,zero,19bc <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
    19b0:	00800104 	movi	r2,4
    19b4:	e0bffe15 	stw	r2,-8(fp)
    19b8:	00001806 	br	1a1c <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
    19bc:	e0bfff17 	ldw	r2,-4(fp)
    19c0:	10bffe30 	cmpltui	r2,r2,65528
    19c4:	1000031e 	bne	r2,zero,19d4 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
    19c8:	008000c4 	movi	r2,3
    19cc:	e0bffe15 	stw	r2,-8(fp)
    19d0:	00001206 	br	1a1c <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
    19d4:	e0bfff17 	ldw	r2,-4(fp)
    19d8:	1000021e 	bne	r2,zero,19e4 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
    19dc:	e03ffe15 	stw	zero,-8(fp)
    19e0:	00000e06 	br	1a1c <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
    19e4:	e0bfff17 	ldw	r2,-4(fp)
    19e8:	10bffc30 	cmpltui	r2,r2,65520
    19ec:	1000061e 	bne	r2,zero,1a08 <fat16ClusterType+0x88>
    19f0:	e0bfff17 	ldw	r2,-4(fp)
    19f4:	10bffde8 	cmpgeui	r2,r2,65527
    19f8:	1000031e 	bne	r2,zero,1a08 <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
    19fc:	00800044 	movi	r2,1
    1a00:	e0bffe15 	stw	r2,-8(fp)
    1a04:	00000506 	br	1a1c <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
    1a08:	e0ffff17 	ldw	r3,-4(fp)
    1a0c:	00bffdd4 	movui	r2,65527
    1a10:	1880021e 	bne	r3,r2,1a1c <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
    1a14:	00800084 	movi	r2,2
    1a18:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
    1a1c:	e0bffe17 	ldw	r2,-8(fp)
         
}
    1a20:	e037883a 	mov	sp,fp
    1a24:	df000017 	ldw	fp,0(sp)
    1a28:	dec00104 	addi	sp,sp,4
    1a2c:	f800283a 	ret

00001a30 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    1a30:	defffd04 	addi	sp,sp,-12
    1a34:	df000215 	stw	fp,8(sp)
    1a38:	df000204 	addi	fp,sp,8
    1a3c:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    1a40:	e0ffff17 	ldw	r3,-4(fp)
    1a44:	00840034 	movhi	r2,4096
    1a48:	10bfffc4 	addi	r2,r2,-1
    1a4c:	1884703a 	and	r2,r3,r2
    1a50:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
    1a54:	e0bfff17 	ldw	r2,-4(fp)
    1a58:	10000726 	beq	r2,zero,1a78 <fat32ClusterType+0x48>
    1a5c:	e0bfff17 	ldw	r2,-4(fp)
    1a60:	00c40034 	movhi	r3,4096
    1a64:	18fffbc4 	addi	r3,r3,-17
    1a68:	18800336 	bltu	r3,r2,1a78 <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
    1a6c:	00800104 	movi	r2,4
    1a70:	e0bffe15 	stw	r2,-8(fp)
    1a74:	00001c06 	br	1ae8 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
    1a78:	e0bfff17 	ldw	r2,-4(fp)
    1a7c:	00c40034 	movhi	r3,4096
    1a80:	18fffdc4 	addi	r3,r3,-9
    1a84:	1880032e 	bgeu	r3,r2,1a94 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
    1a88:	008000c4 	movi	r2,3
    1a8c:	e0bffe15 	stw	r2,-8(fp)
    1a90:	00001506 	br	1ae8 <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
    1a94:	e0bfff17 	ldw	r2,-4(fp)
    1a98:	1000021e 	bne	r2,zero,1aa4 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
    1a9c:	e03ffe15 	stw	zero,-8(fp)
    1aa0:	00001106 	br	1ae8 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
    1aa4:	e0bfff17 	ldw	r2,-4(fp)
    1aa8:	00c40034 	movhi	r3,4096
    1aac:	18fffbc4 	addi	r3,r3,-17
    1ab0:	1880072e 	bgeu	r3,r2,1ad0 <fat32ClusterType+0xa0>
    1ab4:	e0bfff17 	ldw	r2,-4(fp)
    1ab8:	00c40034 	movhi	r3,4096
    1abc:	18fffd84 	addi	r3,r3,-10
    1ac0:	18800336 	bltu	r3,r2,1ad0 <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
    1ac4:	00800044 	movi	r2,1
    1ac8:	e0bffe15 	stw	r2,-8(fp)
    1acc:	00000606 	br	1ae8 <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
    1ad0:	e0ffff17 	ldw	r3,-4(fp)
    1ad4:	00840034 	movhi	r2,4096
    1ad8:	10bffdc4 	addi	r2,r2,-9
    1adc:	1880021e 	bne	r3,r2,1ae8 <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
    1ae0:	00800084 	movi	r2,2
    1ae4:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
    1ae8:	e0bffe17 	ldw	r2,-8(fp)
         
}
    1aec:	e037883a 	mov	sp,fp
    1af0:	df000017 	ldw	fp,0(sp)
    1af4:	dec00104 	addi	sp,sp,4
    1af8:	f800283a 	ret

00001afc <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
    1afc:	defff604 	addi	sp,sp,-40
    1b00:	dfc00915 	stw	ra,36(sp)
    1b04:	df000815 	stw	fp,32(sp)
    1b08:	dc000715 	stw	r16,28(sp)
    1b0c:	df000704 	addi	fp,sp,28
    1b10:	e13ffe15 	stw	r4,-8(fp)
    1b14:	e17fff15 	stw	r5,-4(fp)
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    1b18:	e0bffe17 	ldw	r2,-8(fp)
    1b1c:	10800317 	ldw	r2,12(r2)
    1b20:	108002d8 	cmpnei	r2,r2,11
    1b24:	1000021e 	bne	r2,zero,1b30 <fatNextCluster+0x34>
    1b28:	00800104 	movi	r2,4
    1b2c:	00000106 	br	1b34 <fatNextCluster+0x38>
    1b30:	00800084 	movi	r2,2
    1b34:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    1b38:	e0bffe17 	ldw	r2,-8(fp)
    1b3c:	10c00617 	ldw	r3,24(r2)
    1b40:	e0bffb17 	ldw	r2,-20(fp)
    1b44:	1809883a 	mov	r4,r3
    1b48:	100b883a 	mov	r5,r2
    1b4c:	0005f500 	call	5f50 <__udivsi3>
    1b50:	e0bffc15 	stw	r2,-16(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    1b54:	e0bffe17 	ldw	r2,-8(fp)
    1b58:	14000d17 	ldw	r16,52(r2)
    1b5c:	e0fffb17 	ldw	r3,-20(fp)
    1b60:	e0bfff17 	ldw	r2,-4(fp)
    1b64:	1887383a 	mul	r3,r3,r2
    1b68:	e0bffe17 	ldw	r2,-8(fp)
    1b6c:	10800617 	ldw	r2,24(r2)
    1b70:	1809883a 	mov	r4,r3
    1b74:	100b883a 	mov	r5,r2
    1b78:	0005f500 	call	5f50 <__udivsi3>
    1b7c:	8085883a 	add	r2,r16,r2
    1b80:	e0bffd15 	stw	r2,-12(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
    1b84:	e13ffe17 	ldw	r4,-8(fp)
    1b88:	e17ffd17 	ldw	r5,-12(fp)
    1b8c:	00029c80 	call	29c8 <fatReadSecter>
    1b90:	10002d26 	beq	r2,zero,1c48 <fatNextCluster+0x14c>
        if (pVol->Partition_Type == PARTITION_FAT32){
    1b94:	e0bffe17 	ldw	r2,-8(fp)
    1b98:	10800317 	ldw	r2,12(r2)
    1b9c:	108002d8 	cmpnei	r2,r2,11
    1ba0:	1000111e 	bne	r2,zero,1be8 <fatNextCluster+0xec>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
    1ba4:	e0bffc17 	ldw	r2,-16(fp)
    1ba8:	e0ffff17 	ldw	r3,-4(fp)
    1bac:	1809883a 	mov	r4,r3
    1bb0:	100b883a 	mov	r5,r2
    1bb4:	0005f580 	call	5f58 <__umodsi3>
    1bb8:	1007883a 	mov	r3,r2
    1bbc:	e0bffb17 	ldw	r2,-20(fp)
    1bc0:	1885383a 	mul	r2,r3,r2
    1bc4:	10801004 	addi	r2,r2,64
    1bc8:	e0fffe17 	ldw	r3,-8(fp)
    1bcc:	1885883a 	add	r2,r3,r2
    1bd0:	10800017 	ldw	r2,0(r2)
    1bd4:	e0bffa15 	stw	r2,-24(fp)
            ClusterType = fat32ClusterType(NextCluster);
    1bd8:	e13ffa17 	ldw	r4,-24(fp)
    1bdc:	0001a300 	call	1a30 <fat32ClusterType>
    1be0:	e0bff915 	stw	r2,-28(fp)
    1be4:	00001106 	br	1c2c <fatNextCluster+0x130>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
    1be8:	e0bffc17 	ldw	r2,-16(fp)
    1bec:	e0ffff17 	ldw	r3,-4(fp)
    1bf0:	1809883a 	mov	r4,r3
    1bf4:	100b883a 	mov	r5,r2
    1bf8:	0005f580 	call	5f58 <__umodsi3>
    1bfc:	1007883a 	mov	r3,r2
    1c00:	e0bffb17 	ldw	r2,-20(fp)
    1c04:	1885383a 	mul	r2,r3,r2
    1c08:	10801004 	addi	r2,r2,64
    1c0c:	e0fffe17 	ldw	r3,-8(fp)
    1c10:	1885883a 	add	r2,r3,r2
    1c14:	1080000b 	ldhu	r2,0(r2)
    1c18:	10bfffcc 	andi	r2,r2,65535
    1c1c:	e0bffa15 	stw	r2,-24(fp)
            ClusterType = fat16ClusterType(NextCluster);
    1c20:	e13ffa17 	ldw	r4,-24(fp)
    1c24:	00019800 	call	1980 <fat16ClusterType>
    1c28:	e0bff915 	stw	r2,-28(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
    1c2c:	e0bff917 	ldw	r2,-28(fp)
    1c30:	10800120 	cmpeqi	r2,r2,4
    1c34:	1000041e 	bne	r2,zero,1c48 <fatNextCluster+0x14c>
    1c38:	e0bff917 	ldw	r2,-28(fp)
    1c3c:	108000e0 	cmpeqi	r2,r2,3
    1c40:	1000011e 	bne	r2,zero,1c48 <fatNextCluster+0x14c>
            NextCluster = 0;  // invalid cluster
    1c44:	e03ffa15 	stw	zero,-24(fp)
    }                
    
    
    return NextCluster;
    1c48:	e0bffa17 	ldw	r2,-24(fp)

#endif    
    
    return NextCluster;
}
    1c4c:	e037883a 	mov	sp,fp
    1c50:	dfc00217 	ldw	ra,8(sp)
    1c54:	df000117 	ldw	fp,4(sp)
    1c58:	dc000017 	ldw	r16,0(sp)
    1c5c:	dec00304 	addi	sp,sp,12
    1c60:	f800283a 	ret

00001c64 <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    1c64:	defff304 	addi	sp,sp,-52
    1c68:	dfc00c15 	stw	ra,48(sp)
    1c6c:	df000b15 	stw	fp,44(sp)
    1c70:	dc000a15 	stw	r16,40(sp)
    1c74:	df000a04 	addi	fp,sp,40
    1c78:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    1c7c:	00bfffc4 	movi	r2,-1
    1c80:	e0bff715 	stw	r2,-36(fp)
    1c84:	00800084 	movi	r2,2
    1c88:	e0bff815 	stw	r2,-32(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    1c8c:	e0bfff17 	ldw	r2,-4(fp)
    1c90:	10800317 	ldw	r2,12(r2)
    1c94:	108002d8 	cmpnei	r2,r2,11
    1c98:	1000021e 	bne	r2,zero,1ca4 <fatFindUnusedCluster+0x40>
    1c9c:	00800104 	movi	r2,4
    1ca0:	00000106 	br	1ca8 <fatFindUnusedCluster+0x44>
    1ca4:	00800084 	movi	r2,2
    1ca8:	e0bffa15 	stw	r2,-24(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    1cac:	e0bfff17 	ldw	r2,-4(fp)
    1cb0:	10c00617 	ldw	r3,24(r2)
    1cb4:	e0bffa17 	ldw	r2,-24(fp)
    1cb8:	1809883a 	mov	r4,r3
    1cbc:	100b883a 	mov	r5,r2
    1cc0:	0005f500 	call	5f50 <__udivsi3>
    1cc4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
    1cc8:	e03ff915 	stw	zero,-28(fp)

    while(!bDone){     
    1ccc:	00003a06 	br	1db8 <fatFindUnusedCluster+0x154>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    1cd0:	e0bfff17 	ldw	r2,-4(fp)
    1cd4:	14000d17 	ldw	r16,52(r2)
    1cd8:	e0fffa17 	ldw	r3,-24(fp)
    1cdc:	e0bff817 	ldw	r2,-32(fp)
    1ce0:	1887383a 	mul	r3,r3,r2
    1ce4:	e0bfff17 	ldw	r2,-4(fp)
    1ce8:	10800617 	ldw	r2,24(r2)
    1cec:	1809883a 	mov	r4,r3
    1cf0:	100b883a 	mov	r5,r2
    1cf4:	0005f500 	call	5f50 <__udivsi3>
    1cf8:	8085883a 	add	r2,r16,r2
    1cfc:	e0bffc15 	stw	r2,-16(fp)
        if (fatReadSecter(pVol, Secter)){
    1d00:	e13fff17 	ldw	r4,-4(fp)
    1d04:	e17ffc17 	ldw	r5,-16(fp)
    1d08:	00029c80 	call	29c8 <fatReadSecter>
    1d0c:	10002526 	beq	r2,zero,1da4 <fatFindUnusedCluster+0x140>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
    1d10:	e0bffb17 	ldw	r2,-20(fp)
    1d14:	e0fff817 	ldw	r3,-32(fp)
    1d18:	1809883a 	mov	r4,r3
    1d1c:	100b883a 	mov	r5,r2
    1d20:	0005f580 	call	5f58 <__umodsi3>
    1d24:	1007883a 	mov	r3,r2
    1d28:	e0bffa17 	ldw	r2,-24(fp)
    1d2c:	1885383a 	mul	r2,r3,r2
    1d30:	10801004 	addi	r2,r2,64
    1d34:	e0ffff17 	ldw	r3,-4(fp)
    1d38:	1885883a 	add	r2,r3,r2
    1d3c:	e0bffd15 	stw	r2,-12(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
    1d40:	e0bfff17 	ldw	r2,-4(fp)
    1d44:	10800317 	ldw	r2,12(r2)
    1d48:	108002d8 	cmpnei	r2,r2,11
    1d4c:	1000071e 	bne	r2,zero,1d6c <fatFindUnusedCluster+0x108>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
    1d50:	e0bffd17 	ldw	r2,-12(fp)
    1d54:	10800017 	ldw	r2,0(r2)
    1d58:	e0bffe15 	stw	r2,-8(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
    1d5c:	e13ffe17 	ldw	r4,-8(fp)
    1d60:	0001a300 	call	1a30 <fat32ClusterType>
    1d64:	e0bff615 	stw	r2,-40(fp)
    1d68:	00000706 	br	1d88 <fatFindUnusedCluster+0x124>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	1080000b 	ldhu	r2,0(r2)
    1d74:	10bfffcc 	andi	r2,r2,65535
    1d78:	e0bffe15 	stw	r2,-8(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
    1d7c:	e13ffe17 	ldw	r4,-8(fp)
    1d80:	00019800 	call	1980 <fat16ClusterType>
    1d84:	e0bff615 	stw	r2,-40(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
    1d88:	e0bff617 	ldw	r2,-40(fp)
    1d8c:	1000071e 	bne	r2,zero,1dac <fatFindUnusedCluster+0x148>
                UnusedCluster = ThisCluster;  // invalid cluster
    1d90:	e0bff817 	ldw	r2,-32(fp)
    1d94:	e0bff715 	stw	r2,-36(fp)
                bDone = TRUE;
    1d98:	00800044 	movi	r2,1
    1d9c:	e0bff915 	stw	r2,-28(fp)
    1da0:	00000206 	br	1dac <fatFindUnusedCluster+0x148>
            }    
        }else{
            bDone = TRUE;
    1da4:	00800044 	movi	r2,1
    1da8:	e0bff915 	stw	r2,-28(fp)
        }     
        ThisCluster++;           
    1dac:	e0bff817 	ldw	r2,-32(fp)
    1db0:	10800044 	addi	r2,r2,1
    1db4:	e0bff815 	stw	r2,-32(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
    1db8:	e0bff917 	ldw	r2,-28(fp)
    1dbc:	103fc426 	beq	r2,zero,1cd0 <_gp+0xfffe5454>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
    1dc0:	e0bff717 	ldw	r2,-36(fp)

}
    1dc4:	e037883a 	mov	sp,fp
    1dc8:	dfc00217 	ldw	ra,8(sp)
    1dcc:	df000117 	ldw	fp,4(sp)
    1dd0:	dc000017 	ldw	r16,0(sp)
    1dd4:	dec00304 	addi	sp,sp,12
    1dd8:	f800283a 	ret

00001ddc <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
    1ddc:	defff204 	addi	sp,sp,-56
    1de0:	dfc00d15 	stw	ra,52(sp)
    1de4:	df000c15 	stw	fp,48(sp)
    1de8:	dc000b15 	stw	r16,44(sp)
    1dec:	df000b04 	addi	fp,sp,44
    1df0:	e13ffe15 	stw	r4,-8(fp)
    1df4:	e17fff15 	stw	r5,-4(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
    1df8:	00800044 	movi	r2,1
    1dfc:	e0bff615 	stw	r2,-40(fp)
    bool bDone = FALSE;
    1e00:	e03ff715 	stw	zero,-36(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    1e04:	e0bffe17 	ldw	r2,-8(fp)
    1e08:	10800317 	ldw	r2,12(r2)
    1e0c:	108002d8 	cmpnei	r2,r2,11
    1e10:	1000021e 	bne	r2,zero,1e1c <fatDelClusterList+0x40>
    1e14:	00800104 	movi	r2,4
    1e18:	00000106 	br	1e20 <fatDelClusterList+0x44>
    1e1c:	00800084 	movi	r2,2
    1e20:	e0bff815 	stw	r2,-32(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	10c00617 	ldw	r3,24(r2)
    1e2c:	e0bff817 	ldw	r2,-32(fp)
    1e30:	1809883a 	mov	r4,r3
    1e34:	100b883a 	mov	r5,r2
    1e38:	0005f500 	call	5f50 <__udivsi3>
    1e3c:	e0bff915 	stw	r2,-28(fp)
     
    ClusterIndex = StartCluster;
    1e40:	e0bfff17 	ldw	r2,-4(fp)
    1e44:	e0bffa15 	stw	r2,-24(fp)
    while(bSuccess && !bDone){
    1e48:	00005406 	br	1f9c <fatDelClusterList+0x1c0>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
    1e4c:	e0bffe17 	ldw	r2,-8(fp)
    1e50:	14000d17 	ldw	r16,52(r2)
    1e54:	e0fff817 	ldw	r3,-32(fp)
    1e58:	e0bffa17 	ldw	r2,-24(fp)
    1e5c:	1887383a 	mul	r3,r3,r2
    1e60:	e0bffe17 	ldw	r2,-8(fp)
    1e64:	10800617 	ldw	r2,24(r2)
    1e68:	1809883a 	mov	r4,r3
    1e6c:	100b883a 	mov	r5,r2
    1e70:	0005f500 	call	5f50 <__udivsi3>
    1e74:	8085883a 	add	r2,r16,r2
    1e78:	e0bffb15 	stw	r2,-20(fp)
        bSuccess = fatReadSecter(pVol, Secter);
    1e7c:	e13ffe17 	ldw	r4,-8(fp)
    1e80:	e17ffb17 	ldw	r5,-20(fp)
    1e84:	00029c80 	call	29c8 <fatReadSecter>
    1e88:	e0bff615 	stw	r2,-40(fp)
        if (bSuccess){
    1e8c:	e0bff617 	ldw	r2,-40(fp)
    1e90:	10004226 	beq	r2,zero,1f9c <fatDelClusterList+0x1c0>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
    1e94:	e0bff917 	ldw	r2,-28(fp)
    1e98:	e0fffa17 	ldw	r3,-24(fp)
    1e9c:	1809883a 	mov	r4,r3
    1ea0:	100b883a 	mov	r5,r2
    1ea4:	0005f580 	call	5f58 <__umodsi3>
    1ea8:	1007883a 	mov	r3,r2
    1eac:	e0bff817 	ldw	r2,-32(fp)
    1eb0:	1885383a 	mul	r2,r3,r2
    1eb4:	10801004 	addi	r2,r2,64
    1eb8:	e0fffe17 	ldw	r3,-8(fp)
    1ebc:	1885883a 	add	r2,r3,r2
    1ec0:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
    1ec4:	e0bffe17 	ldw	r2,-8(fp)
    1ec8:	10800317 	ldw	r2,12(r2)
    1ecc:	108002d8 	cmpnei	r2,r2,11
    1ed0:	1000071e 	bne	r2,zero,1ef0 <fatDelClusterList+0x114>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
    1ed4:	e0bffc17 	ldw	r2,-16(fp)
    1ed8:	10800017 	ldw	r2,0(r2)
    1edc:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
    1ee0:	e13ffd17 	ldw	r4,-12(fp)
    1ee4:	0001a300 	call	1a30 <fat32ClusterType>
    1ee8:	e0bff515 	stw	r2,-44(fp)
    1eec:	00000706 	br	1f0c <fatDelClusterList+0x130>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
    1ef0:	e0bffc17 	ldw	r2,-16(fp)
    1ef4:	1080000b 	ldhu	r2,0(r2)
    1ef8:	10bfffcc 	andi	r2,r2,65535
    1efc:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
    1f00:	e13ffd17 	ldw	r4,-12(fp)
    1f04:	00019800 	call	1980 <fat16ClusterType>
    1f08:	e0bff515 	stw	r2,-44(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
    1f0c:	e0bff517 	ldw	r2,-44(fp)
    1f10:	10800120 	cmpeqi	r2,r2,4
    1f14:	1000071e 	bne	r2,zero,1f34 <fatDelClusterList+0x158>
    1f18:	e0bff517 	ldw	r2,-44(fp)
    1f1c:	108000e0 	cmpeqi	r2,r2,3
    1f20:	1000041e 	bne	r2,zero,1f34 <fatDelClusterList+0x158>
                bDone = TRUE;
    1f24:	00800044 	movi	r2,1
    1f28:	e0bff715 	stw	r2,-36(fp)
                bSuccess = FALSE;
    1f2c:	e03ff615 	stw	zero,-40(fp)
    1f30:	00001a06 	br	1f9c <fatDelClusterList+0x1c0>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
    1f34:	e0bff517 	ldw	r2,-44(fp)
    1f38:	108000d8 	cmpnei	r2,r2,3
    1f3c:	1000021e 	bne	r2,zero,1f48 <fatDelClusterList+0x16c>
                    bDone = TRUE; // the last cluster
    1f40:	00800044 	movi	r2,1
    1f44:	e0bff715 	stw	r2,-36(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
    1f48:	e0bffe17 	ldw	r2,-8(fp)
    1f4c:	10800317 	ldw	r2,12(r2)
    1f50:	108002d8 	cmpnei	r2,r2,11
    1f54:	1000031e 	bne	r2,zero,1f64 <fatDelClusterList+0x188>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
    1f58:	e0bffc17 	ldw	r2,-16(fp)
    1f5c:	10000015 	stw	zero,0(r2)
    1f60:	00000206 	br	1f6c <fatDelClusterList+0x190>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
    1f64:	e0bffc17 	ldw	r2,-16(fp)
    1f68:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	11c00217 	ldw	r7,8(r2)
    1f74:	e0bffe17 	ldw	r2,-8(fp)
    1f78:	11000017 	ldw	r4,0(r2)
    1f7c:	e0bffe17 	ldw	r2,-8(fp)
    1f80:	10c09017 	ldw	r3,576(r2)
    1f84:	e0bffe17 	ldw	r2,-8(fp)
    1f88:	10801004 	addi	r2,r2,64
    1f8c:	180b883a 	mov	r5,r3
    1f90:	100d883a 	mov	r6,r2
    1f94:	383ee83a 	callr	r7
    1f98:	e0bff615 	stw	r2,-40(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
    1f9c:	e0bff617 	ldw	r2,-40(fp)
    1fa0:	10000226 	beq	r2,zero,1fac <fatDelClusterList+0x1d0>
    1fa4:	e0bff717 	ldw	r2,-36(fp)
    1fa8:	103fa826 	beq	r2,zero,1e4c <_gp+0xfffe55d0>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
    1fac:	e0bff617 	ldw	r2,-40(fp)

}
    1fb0:	e037883a 	mov	sp,fp
    1fb4:	dfc00217 	ldw	ra,8(sp)
    1fb8:	df000117 	ldw	fp,4(sp)
    1fbc:	dc000017 	ldw	r16,0(sp)
    1fc0:	dec00304 	addi	sp,sp,12
    1fc4:	f800283a 	ret

00001fc8 <fatDumpDate>:


void fatDumpDate(unsigned short Date){
    1fc8:	defffa04 	addi	sp,sp,-24
    1fcc:	dfc00515 	stw	ra,20(sp)
    1fd0:	df000415 	stw	fp,16(sp)
    1fd4:	df000404 	addi	fp,sp,16
    1fd8:	2005883a 	mov	r2,r4
    1fdc:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
    1fe0:	e0bfff0b 	ldhu	r2,-4(fp)
    1fe4:	1004d27a 	srli	r2,r2,9
    1fe8:	10bfffcc 	andi	r2,r2,65535
    1fec:	108007cc 	andi	r2,r2,31
    1ff0:	1081ef04 	addi	r2,r2,1980
    1ff4:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
    1ff8:	e0bfff0b 	ldhu	r2,-4(fp)
    1ffc:	1004d17a 	srli	r2,r2,5
    2000:	10bfffcc 	andi	r2,r2,65535
    2004:	108003cc 	andi	r2,r2,15
    2008:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
    200c:	e0bfff0b 	ldhu	r2,-4(fp)
    2010:	108007cc 	andi	r2,r2,31
    2014:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
    2018:	01000074 	movhi	r4,1
    201c:	2108b104 	addi	r4,r4,8900
    2020:	00032f00 	call	32f0 <myprintf>
    2024:	01000074 	movhi	r4,1
    2028:	2108b304 	addi	r4,r4,8908
    202c:	e17ffc17 	ldw	r5,-16(fp)
    2030:	e1bffd17 	ldw	r6,-12(fp)
    2034:	e1fffe17 	ldw	r7,-8(fp)
    2038:	00032f00 	call	32f0 <myprintf>
}
    203c:	e037883a 	mov	sp,fp
    2040:	dfc00117 	ldw	ra,4(sp)
    2044:	df000017 	ldw	fp,0(sp)
    2048:	dec00204 	addi	sp,sp,8
    204c:	f800283a 	ret

00002050 <fatDumpTime>:

void fatDumpTime(unsigned short Date){
    2050:	defffa04 	addi	sp,sp,-24
    2054:	dfc00515 	stw	ra,20(sp)
    2058:	df000415 	stw	fp,16(sp)
    205c:	df000404 	addi	fp,sp,16
    2060:	2005883a 	mov	r2,r4
    2064:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
    2068:	e0bfff0b 	ldhu	r2,-4(fp)
    206c:	1004d27a 	srli	r2,r2,9
    2070:	10bfffcc 	andi	r2,r2,65535
    2074:	108007cc 	andi	r2,r2,31
    2078:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
    207c:	e0bfff0b 	ldhu	r2,-4(fp)
    2080:	1004d17a 	srli	r2,r2,5
    2084:	10bfffcc 	andi	r2,r2,65535
    2088:	10800fcc 	andi	r2,r2,63
    208c:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
    2090:	e0bfff0b 	ldhu	r2,-4(fp)
    2094:	108007cc 	andi	r2,r2,31
    2098:	1085883a 	add	r2,r2,r2
    209c:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
    20a0:	01000074 	movhi	r4,1
    20a4:	2108b104 	addi	r4,r4,8900
    20a8:	00032f00 	call	32f0 <myprintf>
    20ac:	01000074 	movhi	r4,1
    20b0:	2108b604 	addi	r4,r4,8920
    20b4:	e17ffc17 	ldw	r5,-16(fp)
    20b8:	e1bffd17 	ldw	r6,-12(fp)
    20bc:	e1fffe17 	ldw	r7,-8(fp)
    20c0:	00032f00 	call	32f0 <myprintf>
}
    20c4:	e037883a 	mov	sp,fp
    20c8:	dfc00117 	ldw	ra,4(sp)
    20cc:	df000017 	ldw	fp,0(sp)
    20d0:	dec00204 	addi	sp,sp,8
    20d4:	f800283a 	ret

000020d8 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    20d8:	defffe04 	addi	sp,sp,-8
    20dc:	df000115 	stw	fp,4(sp)
    20e0:	df000104 	addi	fp,sp,4
    20e4:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
    20e8:	e0bfff17 	ldw	r2,-4(fp)
    20ec:	10800003 	ldbu	r2,0(r2)
    20f0:	10803fcc 	andi	r2,r2,255
    20f4:	1080201c 	xori	r2,r2,128
    20f8:	10bfe004 	addi	r2,r2,-128
    20fc:	1000021e 	bne	r2,zero,2108 <fatIsLastDir+0x30>
        return TRUE;
    2100:	00800044 	movi	r2,1
    2104:	00000106 	br	210c <fatIsLastDir+0x34>
    return FALSE;        
    2108:	0005883a 	mov	r2,zero
}
    210c:	e037883a 	mov	sp,fp
    2110:	df000017 	ldw	fp,0(sp)
    2114:	dec00104 	addi	sp,sp,4
    2118:	f800283a 	ret

0000211c <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
    211c:	defff704 	addi	sp,sp,-36
    2120:	dfc00815 	stw	ra,32(sp)
    2124:	df000715 	stw	fp,28(sp)
    2128:	df000704 	addi	fp,sp,28
    212c:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    2130:	00800074 	movhi	r2,1
    2134:	1088b844 	addi	r2,r2,8929
    2138:	e13ffa04 	addi	r4,fp,-24
    213c:	1007883a 	mov	r3,r2
    2140:	00800444 	movi	r2,17
    2144:	180b883a 	mov	r5,r3
    2148:	100d883a 	mov	r6,r2
    214c:	0006de80 	call	6de8 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
    2150:	e03ff915 	stw	zero,-28(fp)
    2154:	00001206 	br	21a0 <fatIsValidDir+0x84>
        if (pDir->Name[0] == szTest[i]){
    2158:	e0bfff17 	ldw	r2,-4(fp)
    215c:	10c00003 	ldbu	r3,0(r2)
    2160:	e13ffa04 	addi	r4,fp,-24
    2164:	e0bff917 	ldw	r2,-28(fp)
    2168:	2085883a 	add	r2,r4,r2
    216c:	10800003 	ldbu	r2,0(r2)
    2170:	18c03fcc 	andi	r3,r3,255
    2174:	18c0201c 	xori	r3,r3,128
    2178:	18ffe004 	addi	r3,r3,-128
    217c:	10803fcc 	andi	r2,r2,255
    2180:	1080201c 	xori	r2,r2,128
    2184:	10bfe004 	addi	r2,r2,-128
    2188:	1880021e 	bne	r3,r2,2194 <fatIsValidDir+0x78>
            return FALSE;
    218c:	0005883a 	mov	r2,zero
    2190:	00000706 	br	21b0 <fatIsValidDir+0x94>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
    2194:	e0bff917 	ldw	r2,-28(fp)
    2198:	10800044 	addi	r2,r2,1
    219c:	e0bff915 	stw	r2,-28(fp)
    21a0:	e0bff917 	ldw	r2,-28(fp)
    21a4:	10800470 	cmpltui	r2,r2,17
    21a8:	103feb1e 	bne	r2,zero,2158 <_gp+0xfffe58dc>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
    21ac:	00800044 	movi	r2,1
    
}
    21b0:	e037883a 	mov	sp,fp
    21b4:	dfc00117 	ldw	ra,4(sp)
    21b8:	df000017 	ldw	fp,0(sp)
    21bc:	dec00204 	addi	sp,sp,8
    21c0:	f800283a 	ret

000021c4 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    21c4:	defffe04 	addi	sp,sp,-8
    21c8:	df000115 	stw	fp,4(sp)
    21cc:	df000104 	addi	fp,sp,4
    21d0:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
    21d4:	e0bfff17 	ldw	r2,-4(fp)
    21d8:	10800003 	ldbu	r2,0(r2)
    21dc:	10803fcc 	andi	r2,r2,255
    21e0:	1080201c 	xori	r2,r2,128
    21e4:	10bfe004 	addi	r2,r2,-128
    21e8:	10bff958 	cmpnei	r2,r2,-27
    21ec:	1000021e 	bne	r2,zero,21f8 <fatIsUnusedDir+0x34>
        return TRUE;
    21f0:	00800044 	movi	r2,1
    21f4:	00000106 	br	21fc <fatIsUnusedDir+0x38>
    return FALSE; 
    21f8:	0005883a 	mov	r2,zero
}
    21fc:	e037883a 	mov	sp,fp
    2200:	df000017 	ldw	fp,0(sp)
    2204:	dec00104 	addi	sp,sp,4
    2208:	f800283a 	ret

0000220c <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
    220c:	defff304 	addi	sp,sp,-52
    2210:	dfc00c15 	stw	ra,48(sp)
    2214:	df000b15 	stw	fp,44(sp)
    2218:	df000b04 	addi	fp,sp,44
    221c:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    2220:	00800074 	movhi	r2,1
    2224:	10892784 	addi	r2,r2,9374
    2228:	e13ffb04 	addi	r4,fp,-20
    222c:	1007883a 	mov	r3,r2
    2230:	008003c4 	movi	r2,15
    2234:	180b883a 	mov	r5,r3
    2238:	100d883a 	mov	r6,r2
    223c:	0006de80 	call	6de8 <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
    2240:	e0bfff17 	ldw	r2,-4(fp)
    2244:	10800003 	ldbu	r2,0(r2)
    2248:	10803fcc 	andi	r2,r2,255
    224c:	1080201c 	xori	r2,r2,128
    2250:	10bfe004 	addi	r2,r2,-128
    2254:	10bff958 	cmpnei	r2,r2,-27
    2258:	1000071e 	bne	r2,zero,2278 <fatDump+0x6c>
        FAT_DEBUG(("the directory entry is free.\n"));
    225c:	01000074 	movhi	r4,1
    2260:	2108b104 	addi	r4,r4,8900
    2264:	00032f00 	call	32f0 <myprintf>
    2268:	01000074 	movhi	r4,1
    226c:	2108bd04 	addi	r4,r4,8948
    2270:	00032f00 	call	32f0 <myprintf>
    2274:	0001ac06 	br	2928 <fatDump+0x71c>
        return;
    }
    if (pDir->Name[0] == 0x00){
    2278:	e0bfff17 	ldw	r2,-4(fp)
    227c:	10800003 	ldbu	r2,0(r2)
    2280:	10803fcc 	andi	r2,r2,255
    2284:	1080201c 	xori	r2,r2,128
    2288:	10bfe004 	addi	r2,r2,-128
    228c:	1000071e 	bne	r2,zero,22ac <fatDump+0xa0>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
    2290:	01000074 	movhi	r4,1
    2294:	2108b104 	addi	r4,r4,8900
    2298:	00032f00 	call	32f0 <myprintf>
    229c:	01000074 	movhi	r4,1
    22a0:	2108c504 	addi	r4,r4,8980
    22a4:	00032f00 	call	32f0 <myprintf>
    22a8:	00019f06 	br	2928 <fatDump+0x71c>
        return;
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
    22ac:	e0bfff17 	ldw	r2,-4(fp)
    22b0:	10800003 	ldbu	r2,0(r2)
    22b4:	10803fcc 	andi	r2,r2,255
    22b8:	1080201c 	xori	r2,r2,128
    22bc:	10bfe004 	addi	r2,r2,-128
    22c0:	10800848 	cmpgei	r2,r2,33
    22c4:	10000e1e 	bne	r2,zero,2300 <fatDump+0xf4>
    22c8:	e0bfff17 	ldw	r2,-4(fp)
    22cc:	10800003 	ldbu	r2,0(r2)
    22d0:	10803fcc 	andi	r2,r2,255
    22d4:	1080201c 	xori	r2,r2,128
    22d8:	10bfe004 	addi	r2,r2,-128
    22dc:	10800160 	cmpeqi	r2,r2,5
    22e0:	1000071e 	bne	r2,zero,2300 <fatDump+0xf4>
        FAT_DEBUG(("Invalid file name.\n"));
    22e4:	01000074 	movhi	r4,1
    22e8:	2108b104 	addi	r4,r4,8900
    22ec:	00032f00 	call	32f0 <myprintf>
    22f0:	01000074 	movhi	r4,1
    22f4:	2108dc04 	addi	r4,r4,9072
    22f8:	00032f00 	call	32f0 <myprintf>
    22fc:	00018a06 	br	2928 <fatDump+0x71c>
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
    2300:	e03ffa15 	stw	zero,-24(fp)
    2304:	00001706 	br	2364 <fatDump+0x158>
        if (pDir->Name[0] == szInvalidName[i]){
    2308:	e0bfff17 	ldw	r2,-4(fp)
    230c:	10c00003 	ldbu	r3,0(r2)
    2310:	e13ffb04 	addi	r4,fp,-20
    2314:	e0bffa17 	ldw	r2,-24(fp)
    2318:	2085883a 	add	r2,r4,r2
    231c:	10800003 	ldbu	r2,0(r2)
    2320:	18c03fcc 	andi	r3,r3,255
    2324:	18c0201c 	xori	r3,r3,128
    2328:	18ffe004 	addi	r3,r3,-128
    232c:	10803fcc 	andi	r2,r2,255
    2330:	1080201c 	xori	r2,r2,128
    2334:	10bfe004 	addi	r2,r2,-128
    2338:	1880071e 	bne	r3,r2,2358 <fatDump+0x14c>
            FAT_DEBUG(("Invalid file name.\n"));
    233c:	01000074 	movhi	r4,1
    2340:	2108b104 	addi	r4,r4,8900
    2344:	00032f00 	call	32f0 <myprintf>
    2348:	01000074 	movhi	r4,1
    234c:	2108dc04 	addi	r4,r4,9072
    2350:	00032f00 	call	32f0 <myprintf>
    2354:	00017406 	br	2928 <fatDump+0x71c>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
    2358:	e0bffa17 	ldw	r2,-24(fp)
    235c:	10800044 	addi	r2,r2,1
    2360:	e0bffa15 	stw	r2,-24(fp)
    2364:	e0bffa17 	ldw	r2,-24(fp)
    2368:	108003f0 	cmpltui	r2,r2,15
    236c:	103fe61e 	bne	r2,zero,2308 <_gp+0xfffe5a8c>
            return;
        }
    }    
    
    //printf("sizeof(FAT_TABLE):%d\n", (int)sizeof(FAT_TABLE));
    if (pDir->Name[0] == 0x05){
    2370:	e0bfff17 	ldw	r2,-4(fp)
    2374:	10800003 	ldbu	r2,0(r2)
    2378:	10803fcc 	andi	r2,r2,255
    237c:	1080201c 	xori	r2,r2,128
    2380:	10bfe004 	addi	r2,r2,-128
    2384:	10800158 	cmpnei	r2,r2,5
    2388:	1000321e 	bne	r2,zero,2454 <fatDump+0x248>
        FAT_DEBUG(("Name:%c%c%c%c%c%c%c%c\n", 0xE5,pDir->Name[1],pDir->Name[2],pDir->Name[3],pDir->Name[4],pDir->Name[5],pDir->Name[6],pDir->Name[6]));
    238c:	01000074 	movhi	r4,1
    2390:	2108b104 	addi	r4,r4,8900
    2394:	00032f00 	call	32f0 <myprintf>
    2398:	e0bfff17 	ldw	r2,-4(fp)
    239c:	10800043 	ldbu	r2,1(r2)
    23a0:	10c03fcc 	andi	r3,r2,255
    23a4:	18c0201c 	xori	r3,r3,128
    23a8:	18ffe004 	addi	r3,r3,-128
    23ac:	e0bfff17 	ldw	r2,-4(fp)
    23b0:	10800083 	ldbu	r2,2(r2)
    23b4:	10803fcc 	andi	r2,r2,255
    23b8:	1080201c 	xori	r2,r2,128
    23bc:	10bfe004 	addi	r2,r2,-128
    23c0:	e13fff17 	ldw	r4,-4(fp)
    23c4:	210000c3 	ldbu	r4,3(r4)
    23c8:	22003fcc 	andi	r8,r4,255
    23cc:	4200201c 	xori	r8,r8,128
    23d0:	423fe004 	addi	r8,r8,-128
    23d4:	e13fff17 	ldw	r4,-4(fp)
    23d8:	21000103 	ldbu	r4,4(r4)
    23dc:	21c03fcc 	andi	r7,r4,255
    23e0:	39c0201c 	xori	r7,r7,128
    23e4:	39ffe004 	addi	r7,r7,-128
    23e8:	e13fff17 	ldw	r4,-4(fp)
    23ec:	21000143 	ldbu	r4,5(r4)
    23f0:	21803fcc 	andi	r6,r4,255
    23f4:	3180201c 	xori	r6,r6,128
    23f8:	31bfe004 	addi	r6,r6,-128
    23fc:	e13fff17 	ldw	r4,-4(fp)
    2400:	21000183 	ldbu	r4,6(r4)
    2404:	21403fcc 	andi	r5,r4,255
    2408:	2940201c 	xori	r5,r5,128
    240c:	297fe004 	addi	r5,r5,-128
    2410:	e13fff17 	ldw	r4,-4(fp)
    2414:	21000183 	ldbu	r4,6(r4)
    2418:	21003fcc 	andi	r4,r4,255
    241c:	2100201c 	xori	r4,r4,128
    2420:	213fe004 	addi	r4,r4,-128
    2424:	da000015 	stw	r8,0(sp)
    2428:	d9c00115 	stw	r7,4(sp)
    242c:	d9800215 	stw	r6,8(sp)
    2430:	d9400315 	stw	r5,12(sp)
    2434:	d9000415 	stw	r4,16(sp)
    2438:	01000074 	movhi	r4,1
    243c:	2108e104 	addi	r4,r4,9092
    2440:	01403944 	movi	r5,229
    2444:	180d883a 	mov	r6,r3
    2448:	100f883a 	mov	r7,r2
    244c:	00032f00 	call	32f0 <myprintf>
    2450:	00003506 	br	2528 <fatDump+0x31c>
    }else{
        FAT_DEBUG(("Name:%c%c%c%c%c%c%c%c\n", pDir->Name[0],pDir->Name[1],pDir->Name[2],pDir->Name[3],pDir->Name[4],pDir->Name[5],pDir->Name[6],pDir->Name[6]));
    2454:	01000074 	movhi	r4,1
    2458:	2108b104 	addi	r4,r4,8900
    245c:	00032f00 	call	32f0 <myprintf>
    2460:	e0bfff17 	ldw	r2,-4(fp)
    2464:	10800003 	ldbu	r2,0(r2)
    2468:	11403fcc 	andi	r5,r2,255
    246c:	2940201c 	xori	r5,r5,128
    2470:	297fe004 	addi	r5,r5,-128
    2474:	e0bfff17 	ldw	r2,-4(fp)
    2478:	10800043 	ldbu	r2,1(r2)
    247c:	10c03fcc 	andi	r3,r2,255
    2480:	18c0201c 	xori	r3,r3,128
    2484:	18ffe004 	addi	r3,r3,-128
    2488:	e0bfff17 	ldw	r2,-4(fp)
    248c:	10800083 	ldbu	r2,2(r2)
    2490:	10803fcc 	andi	r2,r2,255
    2494:	1080201c 	xori	r2,r2,128
    2498:	10bfe004 	addi	r2,r2,-128
    249c:	e13fff17 	ldw	r4,-4(fp)
    24a0:	210000c3 	ldbu	r4,3(r4)
    24a4:	22403fcc 	andi	r9,r4,255
    24a8:	4a40201c 	xori	r9,r9,128
    24ac:	4a7fe004 	addi	r9,r9,-128
    24b0:	e13fff17 	ldw	r4,-4(fp)
    24b4:	21000103 	ldbu	r4,4(r4)
    24b8:	22003fcc 	andi	r8,r4,255
    24bc:	4200201c 	xori	r8,r8,128
    24c0:	423fe004 	addi	r8,r8,-128
    24c4:	e13fff17 	ldw	r4,-4(fp)
    24c8:	21000143 	ldbu	r4,5(r4)
    24cc:	21c03fcc 	andi	r7,r4,255
    24d0:	39c0201c 	xori	r7,r7,128
    24d4:	39ffe004 	addi	r7,r7,-128
    24d8:	e13fff17 	ldw	r4,-4(fp)
    24dc:	21000183 	ldbu	r4,6(r4)
    24e0:	21803fcc 	andi	r6,r4,255
    24e4:	3180201c 	xori	r6,r6,128
    24e8:	31bfe004 	addi	r6,r6,-128
    24ec:	e13fff17 	ldw	r4,-4(fp)
    24f0:	21000183 	ldbu	r4,6(r4)
    24f4:	21003fcc 	andi	r4,r4,255
    24f8:	2100201c 	xori	r4,r4,128
    24fc:	213fe004 	addi	r4,r4,-128
    2500:	da400015 	stw	r9,0(sp)
    2504:	da000115 	stw	r8,4(sp)
    2508:	d9c00215 	stw	r7,8(sp)
    250c:	d9800315 	stw	r6,12(sp)
    2510:	d9000415 	stw	r4,16(sp)
    2514:	01000074 	movhi	r4,1
    2518:	2108e104 	addi	r4,r4,9092
    251c:	180d883a 	mov	r6,r3
    2520:	100f883a 	mov	r7,r2
    2524:	00032f00 	call	32f0 <myprintf>
    }        
    FAT_DEBUG(("Extention:%c%c%c\n", pDir->Extension[0],pDir->Extension[1],pDir->Extension[2]));
    2528:	01000074 	movhi	r4,1
    252c:	2108b104 	addi	r4,r4,8900
    2530:	00032f00 	call	32f0 <myprintf>
    2534:	e0bfff17 	ldw	r2,-4(fp)
    2538:	10800203 	ldbu	r2,8(r2)
    253c:	11403fcc 	andi	r5,r2,255
    2540:	2940201c 	xori	r5,r5,128
    2544:	297fe004 	addi	r5,r5,-128
    2548:	e0bfff17 	ldw	r2,-4(fp)
    254c:	10800243 	ldbu	r2,9(r2)
    2550:	10c03fcc 	andi	r3,r2,255
    2554:	18c0201c 	xori	r3,r3,128
    2558:	18ffe004 	addi	r3,r3,-128
    255c:	e0bfff17 	ldw	r2,-4(fp)
    2560:	10800283 	ldbu	r2,10(r2)
    2564:	10803fcc 	andi	r2,r2,255
    2568:	1080201c 	xori	r2,r2,128
    256c:	10bfe004 	addi	r2,r2,-128
    2570:	01000074 	movhi	r4,1
    2574:	2108e704 	addi	r4,r4,9116
    2578:	180d883a 	mov	r6,r3
    257c:	100f883a 	mov	r7,r2
    2580:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("Attribute:%02Xh\n", pDir->Attribute));
    2584:	01000074 	movhi	r4,1
    2588:	2108b104 	addi	r4,r4,8900
    258c:	00032f00 	call	32f0 <myprintf>
    2590:	e0bfff17 	ldw	r2,-4(fp)
    2594:	108002c3 	ldbu	r2,11(r2)
    2598:	10803fcc 	andi	r2,r2,255
    259c:	1080201c 	xori	r2,r2,128
    25a0:	10bfe004 	addi	r2,r2,-128
    25a4:	01000074 	movhi	r4,1
    25a8:	2108ec04 	addi	r4,r4,9136
    25ac:	100b883a 	mov	r5,r2
    25b0:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_READ_ONLY)
    25b4:	e0bfff17 	ldw	r2,-4(fp)
    25b8:	108002c3 	ldbu	r2,11(r2)
    25bc:	10803fcc 	andi	r2,r2,255
    25c0:	1080004c 	andi	r2,r2,1
    25c4:	10000626 	beq	r2,zero,25e0 <fatDump+0x3d4>
        FAT_DEBUG(("  Read-Only\n"));
    25c8:	01000074 	movhi	r4,1
    25cc:	2108b104 	addi	r4,r4,8900
    25d0:	00032f00 	call	32f0 <myprintf>
    25d4:	01000074 	movhi	r4,1
    25d8:	2108f104 	addi	r4,r4,9156
    25dc:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_HIDDEN)
    25e0:	e0bfff17 	ldw	r2,-4(fp)
    25e4:	108002c3 	ldbu	r2,11(r2)
    25e8:	10803fcc 	andi	r2,r2,255
    25ec:	1080008c 	andi	r2,r2,2
    25f0:	10000626 	beq	r2,zero,260c <fatDump+0x400>
        FAT_DEBUG(("  Hidden\n"));
    25f4:	01000074 	movhi	r4,1
    25f8:	2108b104 	addi	r4,r4,8900
    25fc:	00032f00 	call	32f0 <myprintf>
    2600:	01000074 	movhi	r4,1
    2604:	2108f504 	addi	r4,r4,9172
    2608:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_SYSTEM)
    260c:	e0bfff17 	ldw	r2,-4(fp)
    2610:	108002c3 	ldbu	r2,11(r2)
    2614:	10803fcc 	andi	r2,r2,255
    2618:	1080010c 	andi	r2,r2,4
    261c:	10000626 	beq	r2,zero,2638 <fatDump+0x42c>
        FAT_DEBUG(("  System\n"));
    2620:	01000074 	movhi	r4,1
    2624:	2108b104 	addi	r4,r4,8900
    2628:	00032f00 	call	32f0 <myprintf>
    262c:	01000074 	movhi	r4,1
    2630:	2108f804 	addi	r4,r4,9184
    2634:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_VOLUME_ID)
    2638:	e0bfff17 	ldw	r2,-4(fp)
    263c:	108002c3 	ldbu	r2,11(r2)
    2640:	10803fcc 	andi	r2,r2,255
    2644:	1080020c 	andi	r2,r2,8
    2648:	10000626 	beq	r2,zero,2664 <fatDump+0x458>
        FAT_DEBUG(("  Volume\n"));
    264c:	01000074 	movhi	r4,1
    2650:	2108b104 	addi	r4,r4,8900
    2654:	00032f00 	call	32f0 <myprintf>
    2658:	01000074 	movhi	r4,1
    265c:	2108fb04 	addi	r4,r4,9196
    2660:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_DIRECTORY)
    2664:	e0bfff17 	ldw	r2,-4(fp)
    2668:	108002c3 	ldbu	r2,11(r2)
    266c:	10803fcc 	andi	r2,r2,255
    2670:	1080040c 	andi	r2,r2,16
    2674:	10000626 	beq	r2,zero,2690 <fatDump+0x484>
        FAT_DEBUG(("  Directory\n"));
    2678:	01000074 	movhi	r4,1
    267c:	2108b104 	addi	r4,r4,8900
    2680:	00032f00 	call	32f0 <myprintf>
    2684:	01000074 	movhi	r4,1
    2688:	2108fe04 	addi	r4,r4,9208
    268c:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_ARCHIVE)
    2690:	e0bfff17 	ldw	r2,-4(fp)
    2694:	108002c3 	ldbu	r2,11(r2)
    2698:	10803fcc 	andi	r2,r2,255
    269c:	1080080c 	andi	r2,r2,32
    26a0:	10000626 	beq	r2,zero,26bc <fatDump+0x4b0>
        FAT_DEBUG(("  Archive\n"));
    26a4:	01000074 	movhi	r4,1
    26a8:	2108b104 	addi	r4,r4,8900
    26ac:	00032f00 	call	32f0 <myprintf>
    26b0:	01000074 	movhi	r4,1
    26b4:	21090204 	addi	r4,r4,9224
    26b8:	00032f00 	call	32f0 <myprintf>
    if (pDir->Attribute & ATTR_LONG_NAME)
    26bc:	e0bfff17 	ldw	r2,-4(fp)
    26c0:	108002c3 	ldbu	r2,11(r2)
    26c4:	10803fcc 	andi	r2,r2,255
    26c8:	108003cc 	andi	r2,r2,15
    26cc:	10000626 	beq	r2,zero,26e8 <fatDump+0x4dc>
        FAT_DEBUG(("  Long Name\n"));
    26d0:	01000074 	movhi	r4,1
    26d4:	2108b104 	addi	r4,r4,8900
    26d8:	00032f00 	call	32f0 <myprintf>
    26dc:	01000074 	movhi	r4,1
    26e0:	21090504 	addi	r4,r4,9236
    26e4:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
    26e8:	01000074 	movhi	r4,1
    26ec:	2108b104 	addi	r4,r4,8900
    26f0:	00032f00 	call	32f0 <myprintf>
    26f4:	01000074 	movhi	r4,1
    26f8:	21090904 	addi	r4,r4,9252
    26fc:	00032f00 	call	32f0 <myprintf>
    2700:	e0bfff17 	ldw	r2,-4(fp)
    2704:	10c00383 	ldbu	r3,14(r2)
    2708:	108003c3 	ldbu	r2,15(r2)
    270c:	1004923a 	slli	r2,r2,8
    2710:	10c4b03a 	or	r2,r2,r3
    2714:	10bfffcc 	andi	r2,r2,65535
    2718:	1009883a 	mov	r4,r2
    271c:	00020500 	call	2050 <fatDumpTime>
    2720:	01000074 	movhi	r4,1
    2724:	2108b104 	addi	r4,r4,8900
    2728:	00032f00 	call	32f0 <myprintf>
    272c:	01000074 	movhi	r4,1
    2730:	21090c04 	addi	r4,r4,9264
    2734:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
    2738:	01000074 	movhi	r4,1
    273c:	2108b104 	addi	r4,r4,8900
    2740:	00032f00 	call	32f0 <myprintf>
    2744:	01000074 	movhi	r4,1
    2748:	21090d04 	addi	r4,r4,9268
    274c:	00032f00 	call	32f0 <myprintf>
    2750:	e0bfff17 	ldw	r2,-4(fp)
    2754:	10c00483 	ldbu	r3,18(r2)
    2758:	108004c3 	ldbu	r2,19(r2)
    275c:	1004923a 	slli	r2,r2,8
    2760:	10c4b03a 	or	r2,r2,r3
    2764:	10bfffcc 	andi	r2,r2,65535
    2768:	1009883a 	mov	r4,r2
    276c:	0001fc80 	call	1fc8 <fatDumpDate>
    2770:	01000074 	movhi	r4,1
    2774:	2108b104 	addi	r4,r4,8900
    2778:	00032f00 	call	32f0 <myprintf>
    277c:	01000074 	movhi	r4,1
    2780:	21090c04 	addi	r4,r4,9264
    2784:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    2788:	01000074 	movhi	r4,1
    278c:	2108b104 	addi	r4,r4,8900
    2790:	00032f00 	call	32f0 <myprintf>
    2794:	e0bfff17 	ldw	r2,-4(fp)
    2798:	10c00503 	ldbu	r3,20(r2)
    279c:	10800543 	ldbu	r2,21(r2)
    27a0:	1004923a 	slli	r2,r2,8
    27a4:	10c4b03a 	or	r2,r2,r3
    27a8:	10bfffcc 	andi	r2,r2,65535
    27ac:	01000074 	movhi	r4,1
    27b0:	21091004 	addi	r4,r4,9280
    27b4:	100b883a 	mov	r5,r2
    27b8:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
    27bc:	01000074 	movhi	r4,1
    27c0:	2108b104 	addi	r4,r4,8900
    27c4:	00032f00 	call	32f0 <myprintf>
    27c8:	01000074 	movhi	r4,1
    27cc:	21091504 	addi	r4,r4,9300
    27d0:	00032f00 	call	32f0 <myprintf>
    27d4:	e0bfff17 	ldw	r2,-4(fp)
    27d8:	10c00583 	ldbu	r3,22(r2)
    27dc:	108005c3 	ldbu	r2,23(r2)
    27e0:	1004923a 	slli	r2,r2,8
    27e4:	10c4b03a 	or	r2,r2,r3
    27e8:	10bfffcc 	andi	r2,r2,65535
    27ec:	1009883a 	mov	r4,r2
    27f0:	00020500 	call	2050 <fatDumpTime>
    27f4:	01000074 	movhi	r4,1
    27f8:	2108b104 	addi	r4,r4,8900
    27fc:	00032f00 	call	32f0 <myprintf>
    2800:	01000074 	movhi	r4,1
    2804:	21090c04 	addi	r4,r4,9264
    2808:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
    280c:	01000074 	movhi	r4,1
    2810:	2108b104 	addi	r4,r4,8900
    2814:	00032f00 	call	32f0 <myprintf>
    2818:	01000074 	movhi	r4,1
    281c:	21091904 	addi	r4,r4,9316
    2820:	00032f00 	call	32f0 <myprintf>
    2824:	e0bfff17 	ldw	r2,-4(fp)
    2828:	10c00603 	ldbu	r3,24(r2)
    282c:	10800643 	ldbu	r2,25(r2)
    2830:	1004923a 	slli	r2,r2,8
    2834:	10c4b03a 	or	r2,r2,r3
    2838:	10bfffcc 	andi	r2,r2,65535
    283c:	1009883a 	mov	r4,r2
    2840:	0001fc80 	call	1fc8 <fatDumpDate>
    2844:	01000074 	movhi	r4,1
    2848:	2108b104 	addi	r4,r4,8900
    284c:	00032f00 	call	32f0 <myprintf>
    2850:	01000074 	movhi	r4,1
    2854:	21090c04 	addi	r4,r4,9264
    2858:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    285c:	01000074 	movhi	r4,1
    2860:	2108b104 	addi	r4,r4,8900
    2864:	00032f00 	call	32f0 <myprintf>
    2868:	e0bfff17 	ldw	r2,-4(fp)
    286c:	10c00683 	ldbu	r3,26(r2)
    2870:	108006c3 	ldbu	r2,27(r2)
    2874:	1004923a 	slli	r2,r2,8
    2878:	10c4b03a 	or	r2,r2,r3
    287c:	10ffffcc 	andi	r3,r2,65535
    2880:	e0bfff17 	ldw	r2,-4(fp)
    2884:	11000683 	ldbu	r4,26(r2)
    2888:	108006c3 	ldbu	r2,27(r2)
    288c:	1004923a 	slli	r2,r2,8
    2890:	1104b03a 	or	r2,r2,r4
    2894:	10bfffcc 	andi	r2,r2,65535
    2898:	01000074 	movhi	r4,1
    289c:	21091d04 	addi	r4,r4,9332
    28a0:	180b883a 	mov	r5,r3
    28a4:	100d883a 	mov	r6,r2
    28a8:	00032f00 	call	32f0 <myprintf>
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
    28ac:	01000074 	movhi	r4,1
    28b0:	2108b104 	addi	r4,r4,8900
    28b4:	00032f00 	call	32f0 <myprintf>
    28b8:	e0bfff17 	ldw	r2,-4(fp)
    28bc:	10c00703 	ldbu	r3,28(r2)
    28c0:	11000743 	ldbu	r4,29(r2)
    28c4:	2008923a 	slli	r4,r4,8
    28c8:	20c6b03a 	or	r3,r4,r3
    28cc:	11000783 	ldbu	r4,30(r2)
    28d0:	2008943a 	slli	r4,r4,16
    28d4:	20c6b03a 	or	r3,r4,r3
    28d8:	108007c3 	ldbu	r2,31(r2)
    28dc:	1004963a 	slli	r2,r2,24
    28e0:	10c4b03a 	or	r2,r2,r3
    28e4:	1007883a 	mov	r3,r2
    28e8:	e0bfff17 	ldw	r2,-4(fp)
    28ec:	11000703 	ldbu	r4,28(r2)
    28f0:	11400743 	ldbu	r5,29(r2)
    28f4:	280a923a 	slli	r5,r5,8
    28f8:	2908b03a 	or	r4,r5,r4
    28fc:	11400783 	ldbu	r5,30(r2)
    2900:	280a943a 	slli	r5,r5,16
    2904:	2908b03a 	or	r4,r5,r4
    2908:	108007c3 	ldbu	r2,31(r2)
    290c:	1004963a 	slli	r2,r2,24
    2910:	1104b03a 	or	r2,r2,r4
    2914:	01000074 	movhi	r4,1
    2918:	21092204 	addi	r4,r4,9352
    291c:	180b883a 	mov	r5,r3
    2920:	100d883a 	mov	r6,r2
    2924:	00032f00 	call	32f0 <myprintf>
}
    2928:	e037883a 	mov	sp,fp
    292c:	dfc00117 	ldw	ra,4(sp)
    2930:	df000017 	ldw	fp,0(sp)
    2934:	dec00204 	addi	sp,sp,8
    2938:	f800283a 	ret

0000293c <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    293c:	defffa04 	addi	sp,sp,-24
    2940:	df000515 	stw	fp,20(sp)
    2944:	df000504 	addi	fp,sp,20
    2948:	e13ffe15 	stw	r4,-8(fp)
    294c:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
    2950:	e0bfff17 	ldw	r2,-4(fp)
    2954:	10bfffc4 	addi	r2,r2,-1
    2958:	e0fffe17 	ldw	r3,-8(fp)
    295c:	1885883a 	add	r2,r3,r2
    2960:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
    2964:	e03ffd15 	stw	zero,-12(fp)
    2968:	00000f06 	br	29a8 <fatArray2Value+0x6c>
        nValue <<= 8;
    296c:	e0bffc17 	ldw	r2,-16(fp)
    2970:	1004923a 	slli	r2,r2,8
    2974:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
    2978:	e0bffb17 	ldw	r2,-20(fp)
    297c:	10800003 	ldbu	r2,0(r2)
    2980:	10803fcc 	andi	r2,r2,255
    2984:	e0fffc17 	ldw	r3,-16(fp)
    2988:	1884b03a 	or	r2,r3,r2
    298c:	e0bffc15 	stw	r2,-16(fp)
    2990:	e0bffb17 	ldw	r2,-20(fp)
    2994:	10bfffc4 	addi	r2,r2,-1
    2998:	e0bffb15 	stw	r2,-20(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
    299c:	e0bffd17 	ldw	r2,-12(fp)
    29a0:	10800044 	addi	r2,r2,1
    29a4:	e0bffd15 	stw	r2,-12(fp)
    29a8:	e0fffd17 	ldw	r3,-12(fp)
    29ac:	e0bfff17 	ldw	r2,-4(fp)
    29b0:	18bfee36 	bltu	r3,r2,296c <_gp+0xfffe60f0>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
    29b4:	e0bffc17 	ldw	r2,-16(fp)
}
    29b8:	e037883a 	mov	sp,fp
    29bc:	df000017 	ldw	fp,0(sp)
    29c0:	dec00104 	addi	sp,sp,4
    29c4:	f800283a 	ret

000029c8 <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    29c8:	defffb04 	addi	sp,sp,-20
    29cc:	dfc00415 	stw	ra,16(sp)
    29d0:	df000315 	stw	fp,12(sp)
    29d4:	df000304 	addi	fp,sp,12
    29d8:	e13ffe15 	stw	r4,-8(fp)
    29dc:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
    29e0:	00800044 	movi	r2,1
    29e4:	e0bffd15 	stw	r2,-12(fp)
    if (nSecter != pVol->Secter_Index){
    29e8:	e0bffe17 	ldw	r2,-8(fp)
    29ec:	10c09017 	ldw	r3,576(r2)
    29f0:	e0bfff17 	ldw	r2,-4(fp)
    29f4:	18801326 	beq	r3,r2,2a44 <fatReadSecter+0x7c>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
    29f8:	e0bffe17 	ldw	r2,-8(fp)
    29fc:	11c00117 	ldw	r7,4(r2)
    2a00:	e0bffe17 	ldw	r2,-8(fp)
    2a04:	10c00017 	ldw	r3,0(r2)
    2a08:	e0bffe17 	ldw	r2,-8(fp)
    2a0c:	10801004 	addi	r2,r2,64
    2a10:	1809883a 	mov	r4,r3
    2a14:	e17fff17 	ldw	r5,-4(fp)
    2a18:	100d883a 	mov	r6,r2
    2a1c:	383ee83a 	callr	r7
    2a20:	1000051e 	bne	r2,zero,2a38 <fatReadSecter+0x70>
            pVol->Secter_Index = -1;
    2a24:	e0bffe17 	ldw	r2,-8(fp)
    2a28:	00ffffc4 	movi	r3,-1
    2a2c:	10c09015 	stw	r3,576(r2)
            bSuccess = FALSE;
    2a30:	e03ffd15 	stw	zero,-12(fp)
    2a34:	00000306 	br	2a44 <fatReadSecter+0x7c>
        }else{
            pVol->Secter_Index = nSecter;
    2a38:	e0bffe17 	ldw	r2,-8(fp)
    2a3c:	e0ffff17 	ldw	r3,-4(fp)
    2a40:	10c09015 	stw	r3,576(r2)
        }
    }
    return bSuccess;          
    2a44:	e0bffd17 	ldw	r2,-12(fp)
}     
    2a48:	e037883a 	mov	sp,fp
    2a4c:	dfc00117 	ldw	ra,4(sp)
    2a50:	df000017 	ldw	fp,0(sp)
    2a54:	dec00204 	addi	sp,sp,8
    2a58:	f800283a 	ret

00002a5c <fatFindDirectory>:

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    2a5c:	defff804 	addi	sp,sp,-32
    2a60:	dfc00715 	stw	ra,28(sp)
    2a64:	df000615 	stw	fp,24(sp)
    2a68:	df000604 	addi	fp,sp,24
    2a6c:	e13ffe15 	stw	r4,-8(fp)
    2a70:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
    2a74:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    2a78:	e0bfff17 	ldw	r2,-4(fp)
    2a7c:	1006917a 	slli	r3,r2,5
    2a80:	e0bffe17 	ldw	r2,-8(fp)
    2a84:	10800617 	ldw	r2,24(r2)
    2a88:	1809883a 	mov	r4,r3
    2a8c:	100b883a 	mov	r5,r2
    2a90:	0005f500 	call	5f50 <__udivsi3>
    2a94:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
    2a98:	e0bffe17 	ldw	r2,-8(fp)
    2a9c:	10c00e17 	ldw	r3,56(r2)
    2aa0:	e0bffb17 	ldw	r2,-20(fp)
    2aa4:	1885883a 	add	r2,r3,r2
    2aa8:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
    2aac:	e13ffe17 	ldw	r4,-8(fp)
    2ab0:	e17ffc17 	ldw	r5,-16(fp)
    2ab4:	00029c80 	call	29c8 <fatReadSecter>
    2ab8:	10000d26 	beq	r2,zero,2af0 <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
    2abc:	e0bfff17 	ldw	r2,-4(fp)
    2ac0:	1006917a 	slli	r3,r2,5
    2ac4:	e0bffe17 	ldw	r2,-8(fp)
    2ac8:	10800617 	ldw	r2,24(r2)
    2acc:	1809883a 	mov	r4,r3
    2ad0:	100b883a 	mov	r5,r2
    2ad4:	0005f580 	call	5f58 <__umodsi3>
    2ad8:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
    2adc:	e0bffd17 	ldw	r2,-12(fp)
    2ae0:	10801004 	addi	r2,r2,64
    2ae4:	e0fffe17 	ldw	r3,-8(fp)
    2ae8:	1885883a 	add	r2,r3,r2
    2aec:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
    2af0:	e0bffa17 	ldw	r2,-24(fp)
}
    2af4:	e037883a 	mov	sp,fp
    2af8:	dfc00117 	ldw	ra,4(sp)
    2afc:	df000017 	ldw	fp,0(sp)
    2b00:	dec00204 	addi	sp,sp,8
    2b04:	f800283a 	ret

00002b08 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
    2b08:	defff604 	addi	sp,sp,-40
    2b0c:	dfc00915 	stw	ra,36(sp)
    2b10:	df000815 	stw	fp,32(sp)
    2b14:	df000804 	addi	fp,sp,32
    2b18:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
    2b1c:	00bfffc4 	movi	r2,-1
    2b20:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
    2b24:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    2b28:	00800084 	movi	r2,2
    2b2c:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
    2b30:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
    2b34:	00003006 	br	2bf8 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    2b38:	e0bff917 	ldw	r2,-28(fp)
    2b3c:	1006917a 	slli	r3,r2,5
    2b40:	e0bfff17 	ldw	r2,-4(fp)
    2b44:	10800617 	ldw	r2,24(r2)
    2b48:	1809883a 	mov	r4,r3
    2b4c:	100b883a 	mov	r5,r2
    2b50:	0005f500 	call	5f50 <__udivsi3>
    2b54:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
    2b58:	e0bfff17 	ldw	r2,-4(fp)
    2b5c:	10c00e17 	ldw	r3,56(r2)
    2b60:	e0bffc17 	ldw	r2,-16(fp)
    2b64:	1885883a 	add	r2,r3,r2
    2b68:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
    2b6c:	e13fff17 	ldw	r4,-4(fp)
    2b70:	e17ffd17 	ldw	r5,-12(fp)
    2b74:	00029c80 	call	29c8 <fatReadSecter>
    2b78:	10001e26 	beq	r2,zero,2bf4 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
    2b7c:	e0bff917 	ldw	r2,-28(fp)
    2b80:	1006917a 	slli	r3,r2,5
    2b84:	e0bfff17 	ldw	r2,-4(fp)
    2b88:	10800617 	ldw	r2,24(r2)
    2b8c:	1809883a 	mov	r4,r3
    2b90:	100b883a 	mov	r5,r2
    2b94:	0005f580 	call	5f58 <__umodsi3>
    2b98:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
    2b9c:	e0bffe17 	ldw	r2,-8(fp)
    2ba0:	10801004 	addi	r2,r2,64
    2ba4:	e0ffff17 	ldw	r3,-4(fp)
    2ba8:	1885883a 	add	r2,r3,r2
    2bac:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
    2bb0:	e13ffb17 	ldw	r4,-20(fp)
    2bb4:	00020d80 	call	20d8 <fatIsLastDir>
    2bb8:	1000031e 	bne	r2,zero,2bc8 <fatFindUnusedDirectory+0xc0>
    2bbc:	e13ffb17 	ldw	r4,-20(fp)
    2bc0:	00021c40 	call	21c4 <fatIsUnusedDir>
    2bc4:	10000726 	beq	r2,zero,2be4 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
    2bc8:	00800044 	movi	r2,1
    2bcc:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
    2bd0:	e13ffb17 	ldw	r4,-20(fp)
    2bd4:	00021c40 	call	21c4 <fatIsUnusedDir>
    2bd8:	10000226 	beq	r2,zero,2be4 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
    2bdc:	e0bff917 	ldw	r2,-28(fp)
    2be0:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
    2be4:	e0bff917 	ldw	r2,-28(fp)
    2be8:	10800044 	addi	r2,r2,1
    2bec:	e0bff915 	stw	r2,-28(fp)
    2bf0:	00000106 	br	2bf8 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
    2bf4:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
    2bf8:	e0bffa17 	ldw	r2,-24(fp)
    2bfc:	103fce26 	beq	r2,zero,2b38 <_gp+0xfffe62bc>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
    2c00:	e0bff817 	ldw	r2,-32(fp)
}
    2c04:	e037883a 	mov	sp,fp
    2c08:	dfc00117 	ldw	ra,4(sp)
    2c0c:	df000017 	ldw	fp,0(sp)
    2c10:	dec00204 	addi	sp,sp,8
    2c14:	f800283a 	ret

00002c18 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
    2c18:	deff7604 	addi	sp,sp,-552
    2c1c:	dfc08915 	stw	ra,548(sp)
    2c20:	df008815 	stw	fp,544(sp)
    2c24:	dc008715 	stw	r16,540(sp)
    2c28:	df008704 	addi	fp,sp,540
    2c2c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
    2c30:	00800044 	movi	r2,1
    2c34:	e0bf7915 	stw	r2,-540(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
    2c38:	e0bfff17 	ldw	r2,-4(fp)
    2c3c:	11c00117 	ldw	r7,4(r2)
    2c40:	e0bfff17 	ldw	r2,-4(fp)
    2c44:	10c00017 	ldw	r3,0(r2)
    2c48:	e0bf7f04 	addi	r2,fp,-516
    2c4c:	1809883a 	mov	r4,r3
    2c50:	000b883a 	mov	r5,zero
    2c54:	100d883a 	mov	r6,r2
    2c58:	383ee83a 	callr	r7
    2c5c:	1000081e 	bne	r2,zero,2c80 <fatMount+0x68>
        FAT_DEBUG(("Read section 0 error.\n"));
    2c60:	01000074 	movhi	r4,1
    2c64:	2108b104 	addi	r4,r4,8900
    2c68:	00032f00 	call	32f0 <myprintf>
    2c6c:	01000074 	movhi	r4,1
    2c70:	21092c04 	addi	r4,r4,9392
    2c74:	00032f00 	call	32f0 <myprintf>
        return FALSE;
    2c78:	0005883a 	mov	r2,zero
    2c7c:	0000d606 	br	2fd8 <fatMount+0x3c0>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
    2c80:	00806f84 	movi	r2,446
    2c84:	e0bf7a15 	stw	r2,-536(fp)
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
    2c88:	e0bfef83 	ldbu	r2,-66(fp)
    2c8c:	10803fcc 	andi	r2,r2,255
    2c90:	e0bf7b15 	stw	r2,-532(fp)
    if (PartitionType == PARTITION_FAT16){
    2c94:	e0bf7b17 	ldw	r2,-532(fp)
    2c98:	10800198 	cmpnei	r2,r2,6
    2c9c:	1000071e 	bne	r2,zero,2cbc <fatMount+0xa4>
        FAT_DEBUG(("FAT16\n"));
    2ca0:	01000074 	movhi	r4,1
    2ca4:	2108b104 	addi	r4,r4,8900
    2ca8:	00032f00 	call	32f0 <myprintf>
    2cac:	01000074 	movhi	r4,1
    2cb0:	21093204 	addi	r4,r4,9416
    2cb4:	00032f00 	call	32f0 <myprintf>
    2cb8:	00001306 	br	2d08 <fatMount+0xf0>
    }else if (PartitionType == PARTITION_FAT32){
    2cbc:	e0bf7b17 	ldw	r2,-532(fp)
    2cc0:	108002d8 	cmpnei	r2,r2,11
    2cc4:	1000071e 	bne	r2,zero,2ce4 <fatMount+0xcc>
        FAT_DEBUG(("FAT32\n"));
    2cc8:	01000074 	movhi	r4,1
    2ccc:	2108b104 	addi	r4,r4,8900
    2cd0:	00032f00 	call	32f0 <myprintf>
    2cd4:	01000074 	movhi	r4,1
    2cd8:	21093404 	addi	r4,r4,9424
    2cdc:	00032f00 	call	32f0 <myprintf>
    2ce0:	00000906 	br	2d08 <fatMount+0xf0>
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
    2ce4:	01000074 	movhi	r4,1
    2ce8:	2108b104 	addi	r4,r4,8900
    2cec:	00032f00 	call	32f0 <myprintf>
    2cf0:	01000074 	movhi	r4,1
    2cf4:	21093604 	addi	r4,r4,9432
    2cf8:	e17f7b17 	ldw	r5,-532(fp)
    2cfc:	00032f00 	call	32f0 <myprintf>
        return FALSE; // only support FAT16 in this example
    2d00:	0005883a 	mov	r2,zero
    2d04:	0000b406 	br	2fd8 <fatMount+0x3c0>
    }       
    pVol->Partition_Type = PartitionType; 
    2d08:	e0ff7b17 	ldw	r3,-532(fp)
    2d0c:	e0bfff17 	ldw	r2,-4(fp)
    2d10:	10c00315 	stw	r3,12(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
    2d14:	e0bf7a17 	ldw	r2,-536(fp)
    2d18:	10800204 	addi	r2,r2,8
    2d1c:	e0ff7f04 	addi	r3,fp,-516
    2d20:	1885883a 	add	r2,r3,r2
    2d24:	1009883a 	mov	r4,r2
    2d28:	01400104 	movi	r5,4
    2d2c:	000293c0 	call	293c <fatArray2Value>
    2d30:	e0bf7c15 	stw	r2,-528(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
    2d34:	e0bfff17 	ldw	r2,-4(fp)
    2d38:	11c00117 	ldw	r7,4(r2)
    2d3c:	e0bfff17 	ldw	r2,-4(fp)
    2d40:	11000017 	ldw	r4,0(r2)
    2d44:	e0ff7c17 	ldw	r3,-528(fp)
    2d48:	e0bf7f04 	addi	r2,fp,-516
    2d4c:	180b883a 	mov	r5,r3
    2d50:	100d883a 	mov	r6,r2
    2d54:	383ee83a 	callr	r7
    2d58:	1000081e 	bne	r2,zero,2d7c <fatMount+0x164>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
    2d5c:	01000074 	movhi	r4,1
    2d60:	2108b104 	addi	r4,r4,8900
    2d64:	00032f00 	call	32f0 <myprintf>
    2d68:	01000074 	movhi	r4,1
    2d6c:	21094104 	addi	r4,r4,9476
    2d70:	00032f00 	call	32f0 <myprintf>
        return FALSE;
    2d74:	0005883a 	mov	r2,zero
    2d78:	00009706 	br	2fd8 <fatMount+0x3c0>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    2d7c:	e0ff7c17 	ldw	r3,-528(fp)
    2d80:	e0bfff17 	ldw	r2,-4(fp)
    2d84:	10c00515 	stw	r3,20(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    2d88:	e0bf8203 	ldbu	r2,-504(fp)
    2d8c:	10803fcc 	andi	r2,r2,255
    2d90:	1006923a 	slli	r3,r2,8
    2d94:	e0bf81c3 	ldbu	r2,-505(fp)
    2d98:	10803fcc 	andi	r2,r2,255
    2d9c:	1885883a 	add	r2,r3,r2
    2da0:	1007883a 	mov	r3,r2
    2da4:	e0bfff17 	ldw	r2,-4(fp)
    2da8:	10c00615 	stw	r3,24(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    2dac:	e0bf8243 	ldbu	r2,-503(fp)
    2db0:	10c03fcc 	andi	r3,r2,255
    2db4:	e0bfff17 	ldw	r2,-4(fp)
    2db8:	10c00715 	stw	r3,28(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    2dbc:	e0bf82c3 	ldbu	r2,-501(fp)
    2dc0:	10803fcc 	andi	r2,r2,255
    2dc4:	1006923a 	slli	r3,r2,8
    2dc8:	e0bf8283 	ldbu	r2,-502(fp)
    2dcc:	10803fcc 	andi	r2,r2,255
    2dd0:	1885883a 	add	r2,r3,r2
    2dd4:	1007883a 	mov	r3,r2
    2dd8:	e0bfff17 	ldw	r2,-4(fp)
    2ddc:	10c00815 	stw	r3,32(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
    2de0:	e0bf8303 	ldbu	r2,-500(fp)
    2de4:	10c03fcc 	andi	r3,r2,255
    2de8:	e0bfff17 	ldw	r2,-4(fp)
    2dec:	10c00915 	stw	r3,36(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    2df0:	e0bf8383 	ldbu	r2,-498(fp)
    2df4:	10803fcc 	andi	r2,r2,255
    2df8:	1006923a 	slli	r3,r2,8
    2dfc:	e0bf8343 	ldbu	r2,-499(fp)
    2e00:	10803fcc 	andi	r2,r2,255
    2e04:	1885883a 	add	r2,r3,r2
    2e08:	1007883a 	mov	r3,r2
    2e0c:	e0bfff17 	ldw	r2,-4(fp)
    2e10:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    2e14:	e0bf84c3 	ldbu	r2,-493(fp)
    2e18:	10803fcc 	andi	r2,r2,255
    2e1c:	1006923a 	slli	r3,r2,8
    2e20:	e0bf8483 	ldbu	r2,-494(fp)
    2e24:	10803fcc 	andi	r2,r2,255
    2e28:	1885883a 	add	r2,r3,r2
    2e2c:	1007883a 	mov	r3,r2
    2e30:	e0bfff17 	ldw	r2,-4(fp)
    2e34:	10c00b15 	stw	r3,44(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
    2e38:	e0bfff17 	ldw	r2,-4(fp)
    2e3c:	00ffffc4 	movi	r3,-1
    2e40:	10c09015 	stw	r3,576(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    2e44:	e0bfff17 	ldw	r2,-4(fp)
    2e48:	10801004 	addi	r2,r2,64
    2e4c:	1009883a 	mov	r4,r2
    2e50:	000b883a 	mov	r5,zero
    2e54:	01808004 	movi	r6,512
    2e58:	0006ee00 	call	6ee0 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
    2e5c:	e0bfff17 	ldw	r2,-4(fp)
    2e60:	10800317 	ldw	r2,12(r2)
    2e64:	108002d8 	cmpnei	r2,r2,11
    2e68:	1000071e 	bne	r2,zero,2e88 <fatMount+0x270>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
    2e6c:	e0bf7f04 	addi	r2,fp,-516
    2e70:	10800904 	addi	r2,r2,36
    2e74:	1009883a 	mov	r4,r2
    2e78:	01400104 	movi	r5,4
    2e7c:	000293c0 	call	293c <fatArray2Value>
    2e80:	e0ffff17 	ldw	r3,-4(fp)
    2e84:	18800b15 	stw	r2,44(r3)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
    2e88:	e0bfff17 	ldw	r2,-4(fp)
    2e8c:	10800617 	ldw	r2,24(r2)
    2e90:	10808020 	cmpeqi	r2,r2,512
    2e94:	1000091e 	bne	r2,zero,2ebc <fatMount+0x2a4>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
    2e98:	01000074 	movhi	r4,1
    2e9c:	2108b104 	addi	r4,r4,8900
    2ea0:	00032f00 	call	32f0 <myprintf>
    2ea4:	01000074 	movhi	r4,1
    2ea8:	21094b04 	addi	r4,r4,9516
    2eac:	01408004 	movi	r5,512
    2eb0:	00032f00 	call	32f0 <myprintf>
        return FALSE; // only support FAT16 in this example
    2eb4:	0005883a 	mov	r2,zero
    2eb8:	00004706 	br	2fd8 <fatMount+0x3c0>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", gVolumeInfo.BPB_NumFATs, gVolumeInfo.BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    2ebc:	e0bfff17 	ldw	r2,-4(fp)
    2ec0:	10c00517 	ldw	r3,20(r2)
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	10800817 	ldw	r2,32(r2)
    2ecc:	1887883a 	add	r3,r3,r2
    2ed0:	e0bfff17 	ldw	r2,-4(fp)
    2ed4:	10c00d15 	stw	r3,52(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    2ed8:	e0bfff17 	ldw	r2,-4(fp)
    2edc:	10c00d17 	ldw	r3,52(r2)
    2ee0:	e0bfff17 	ldw	r2,-4(fp)
    2ee4:	11000917 	ldw	r4,36(r2)
    2ee8:	e0bfff17 	ldw	r2,-4(fp)
    2eec:	10800b17 	ldw	r2,44(r2)
    2ef0:	2085383a 	mul	r2,r4,r2
    2ef4:	1887883a 	add	r3,r3,r2
    2ef8:	e0bfff17 	ldw	r2,-4(fp)
    2efc:	10c00e15 	stw	r3,56(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    2f00:	e0bfff17 	ldw	r2,-4(fp)
    2f04:	14000e17 	ldw	r16,56(r2)
    2f08:	e0bfff17 	ldw	r2,-4(fp)
    2f0c:	10800a17 	ldw	r2,40(r2)
    2f10:	1006917a 	slli	r3,r2,5
    2f14:	e0bfff17 	ldw	r2,-4(fp)
    2f18:	10800617 	ldw	r2,24(r2)
    2f1c:	1885883a 	add	r2,r3,r2
    2f20:	10ffffc4 	addi	r3,r2,-1
    2f24:	e0bfff17 	ldw	r2,-4(fp)
    2f28:	10800617 	ldw	r2,24(r2)
    2f2c:	1809883a 	mov	r4,r3
    2f30:	100b883a 	mov	r5,r2
    2f34:	0005f500 	call	5f50 <__udivsi3>
    2f38:	8087883a 	add	r3,r16,r2
    2f3c:	e0bfff17 	ldw	r2,-4(fp)
    2f40:	10c00f15 	stw	r3,60(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
    2f44:	e0bfff17 	ldw	r2,-4(fp)
    2f48:	10c00617 	ldw	r3,24(r2)
    2f4c:	e0bfff17 	ldw	r2,-4(fp)
    2f50:	10800717 	ldw	r2,28(r2)
    2f54:	1887383a 	mul	r3,r3,r2
    2f58:	e0bfff17 	ldw	r2,-4(fp)
    2f5c:	10c00c15 	stw	r3,48(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
    2f60:	e0bfff17 	ldw	r2,-4(fp)
    2f64:	10c00917 	ldw	r3,36(r2)
    2f68:	e0bfff17 	ldw	r2,-4(fp)
    2f6c:	10800b17 	ldw	r2,44(r2)
    2f70:	1885383a 	mul	r2,r3,r2
    2f74:	e0bf7d15 	stw	r2,-524(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
    2f78:	e0bfff17 	ldw	r2,-4(fp)
    2f7c:	10c00617 	ldw	r3,24(r2)
    2f80:	e0bf7d17 	ldw	r2,-524(fp)
    2f84:	1885383a 	mul	r2,r3,r2
    2f88:	e0bf7e15 	stw	r2,-520(fp)
        pVol->szFatTable = 0;
    }
#endif    
    
  
    if (bSuccess){
    2f8c:	e0bf7917 	ldw	r2,-540(fp)
    2f90:	10000726 	beq	r2,zero,2fb0 <fatMount+0x398>
        FAT_DEBUG(("Fat_Mount success\n"));
    2f94:	01000074 	movhi	r4,1
    2f98:	2108b104 	addi	r4,r4,8900
    2f9c:	00032f00 	call	32f0 <myprintf>
    2fa0:	01000074 	movhi	r4,1
    2fa4:	21095904 	addi	r4,r4,9572
    2fa8:	00032f00 	call	32f0 <myprintf>
    2fac:	00000606 	br	2fc8 <fatMount+0x3b0>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    2fb0:	01000074 	movhi	r4,1
    2fb4:	2108b104 	addi	r4,r4,8900
    2fb8:	00032f00 	call	32f0 <myprintf>
    2fbc:	01000074 	movhi	r4,1
    2fc0:	21095e04 	addi	r4,r4,9592
    2fc4:	00032f00 	call	32f0 <myprintf>
    }        
    pVol->bMount = bSuccess;
    2fc8:	e0bfff17 	ldw	r2,-4(fp)
    2fcc:	e0ff7917 	ldw	r3,-540(fp)
    2fd0:	10c00415 	stw	r3,16(r2)
    return bSuccess;   
    2fd4:	e0bf7917 	ldw	r2,-540(fp)
    

}
    2fd8:	e037883a 	mov	sp,fp
    2fdc:	dfc00217 	ldw	ra,8(sp)
    2fe0:	df000117 	ldw	fp,4(sp)
    2fe4:	dc000017 	ldw	r16,0(sp)
    2fe8:	dec00304 	addi	sp,sp,12
    2fec:	f800283a 	ret

00002ff0 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    2ff0:	defffb04 	addi	sp,sp,-20
    2ff4:	dfc00415 	stw	ra,16(sp)
    2ff8:	df000315 	stw	fp,12(sp)
    2ffc:	df000304 	addi	fp,sp,12
    3000:	e13ffd15 	stw	r4,-12(fp)
    3004:	e17ffe15 	stw	r5,-8(fp)
    3008:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
    300c:	e13ffe17 	ldw	r4,-8(fp)
    3010:	e17fff17 	ldw	r5,-4(fp)
    3014:	000405c0 	call	405c <SDLIB_ReadBlock512>
}
    3018:	e037883a 	mov	sp,fp
    301c:	dfc00117 	ldw	ra,4(sp)
    3020:	df000017 	ldw	fp,0(sp)
    3024:	dec00204 	addi	sp,sp,8
    3028:	f800283a 	ret

0000302c <SD_WriteBlock512>:

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    302c:	defffb04 	addi	sp,sp,-20
    3030:	dfc00415 	stw	ra,16(sp)
    3034:	df000315 	stw	fp,12(sp)
    3038:	df000304 	addi	fp,sp,12
    303c:	e13ffd15 	stw	r4,-12(fp)
    3040:	e17ffe15 	stw	r5,-8(fp)
    3044:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
    3048:	e13ffe17 	ldw	r4,-8(fp)
    304c:	e17fff17 	ldw	r5,-4(fp)
    3050:	00040dc0 	call	40dc <SDLIB_WriteBlock512>
}
    3054:	e037883a 	mov	sp,fp
    3058:	dfc00117 	ldw	ra,4(sp)
    305c:	df000017 	ldw	fp,0(sp)
    3060:	dec00204 	addi	sp,sp,8
    3064:	f800283a 	ret

00003068 <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
    3068:	defff804 	addi	sp,sp,-32
    306c:	dfc00715 	stw	ra,28(sp)
    3070:	df000615 	stw	fp,24(sp)
    3074:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
    3078:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
    307c:	00800284 	movi	r2,10
    3080:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
    3084:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
    3088:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
    308c:	00800044 	movi	r2,1
    3090:	e0bffe15 	stw	r2,-8(fp)
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
    3094:	00000706 	br	30b4 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
    3098:	0003d280 	call	3d28 <SDLIB_Init>
    309c:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
    30a0:	e0bffb17 	ldw	r2,-20(fp)
    30a4:	1000031e 	bne	r2,zero,30b4 <fatMountSdcard+0x4c>
            usleep(100*1000);
    30a8:	010000b4 	movhi	r4,2
    30ac:	2121a804 	addi	r4,r4,-31072
    30b0:	00100f00 	call	100f0 <usleep>
    int nTry=0;
    bool bSuccess = TRUE;
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
    30b4:	e0bffb17 	ldw	r2,-20(fp)
    30b8:	1000081e 	bne	r2,zero,30dc <fatMountSdcard+0x74>
    30bc:	e0fffc17 	ldw	r3,-16(fp)
    30c0:	e0bffd17 	ldw	r2,-12(fp)
    30c4:	1884803a 	cmplt	r2,r3,r2
    30c8:	e0fffc17 	ldw	r3,-16(fp)
    30cc:	18c00044 	addi	r3,r3,1
    30d0:	e0fffc15 	stw	r3,-16(fp)
    30d4:	10803fcc 	andi	r2,r2,255
    30d8:	103fef1e 	bne	r2,zero,3098 <_gp+0xfffe681c>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
    30dc:	e0bffb17 	ldw	r2,-20(fp)
    30e0:	1000081e 	bne	r2,zero,3104 <fatMountSdcard+0x9c>
        FAT_DEBUG(("Cannot find SD card.\n"));
    30e4:	01000074 	movhi	r4,1
    30e8:	2108b104 	addi	r4,r4,8900
    30ec:	00032f00 	call	32f0 <myprintf>
    30f0:	01000074 	movhi	r4,1
    30f4:	21096204 	addi	r4,r4,9608
    30f8:	00032f00 	call	32f0 <myprintf>
        return hFat;
    30fc:	e0bffa17 	ldw	r2,-24(fp)
    3100:	00002606 	br	319c <fatMountSdcard+0x134>
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
    3104:	01009104 	movi	r4,580
    3108:	000663c0 	call	663c <malloc>
    310c:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
    3110:	e0bffa17 	ldw	r2,-24(fp)
    3114:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
    3118:	e0bfff17 	ldw	r2,-4(fp)
    311c:	00c00034 	movhi	r3,0
    3120:	18cbfc04 	addi	r3,r3,12272
    3124:	10c00115 	stw	r3,4(r2)
    pVol->WriteBlock512 = SD_WriteBlock512;
    3128:	e0bfff17 	ldw	r2,-4(fp)
    312c:	00c00034 	movhi	r3,0
    3130:	18cc0b04 	addi	r3,r3,12332
    3134:	10c00215 	stw	r3,8(r2)
    bSuccess = fatMount(pVol);
    3138:	e13fff17 	ldw	r4,-4(fp)
    313c:	0002c180 	call	2c18 <fatMount>
    3140:	e0bffe15 	stw	r2,-8(fp)
        
    
  
    if (bSuccess){
    3144:	e0bffe17 	ldw	r2,-8(fp)
    3148:	10000a26 	beq	r2,zero,3174 <fatMountSdcard+0x10c>
        FAT_DEBUG(("Fat_Mount success\n"));
    314c:	01000074 	movhi	r4,1
    3150:	2108b104 	addi	r4,r4,8900
    3154:	00032f00 	call	32f0 <myprintf>
    3158:	01000074 	movhi	r4,1
    315c:	21095904 	addi	r4,r4,9572
    3160:	00032f00 	call	32f0 <myprintf>
        pVol->bMount = TRUE;
    3164:	e0bfff17 	ldw	r2,-4(fp)
    3168:	00c00044 	movi	r3,1
    316c:	10c00415 	stw	r3,16(r2)
    3170:	00000906 	br	3198 <fatMountSdcard+0x130>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    3174:	01000074 	movhi	r4,1
    3178:	2108b104 	addi	r4,r4,8900
    317c:	00032f00 	call	32f0 <myprintf>
    3180:	01000074 	movhi	r4,1
    3184:	21095e04 	addi	r4,r4,9592
    3188:	00032f00 	call	32f0 <myprintf>
        free((void *)hFat);
    318c:	e13ffa17 	ldw	r4,-24(fp)
    3190:	00066500 	call	6650 <free>
        hFat = 0;
    3194:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;   
    3198:	e0bffa17 	ldw	r2,-24(fp)
}
    319c:	e037883a 	mov	sp,fp
    31a0:	dfc00117 	ldw	ra,4(sp)
    31a4:	df000017 	ldw	fp,0(sp)
    31a8:	dec00204 	addi	sp,sp,8
    31ac:	f800283a 	ret

000031b0 <LED_AllOn>:
#include "LED.h"

#define LED_INIT_MASK   (0x01 << 24)


void LED_AllOn(void){
    31b0:	defffe04 	addi	sp,sp,-8
    31b4:	dfc00115 	stw	ra,4(sp)
    31b8:	df000015 	stw	fp,0(sp)
    31bc:	d839883a 	mov	fp,sp
    LED_Display(0xFFFFFFFF);       
    31c0:	013fffc4 	movi	r4,-1
    31c4:	00032080 	call	3208 <LED_Display>
}
    31c8:	e037883a 	mov	sp,fp
    31cc:	dfc00117 	ldw	ra,4(sp)
    31d0:	df000017 	ldw	fp,0(sp)
    31d4:	dec00204 	addi	sp,sp,8
    31d8:	f800283a 	ret

000031dc <LED_AllOff>:

void LED_AllOff(void){
    31dc:	defffe04 	addi	sp,sp,-8
    31e0:	dfc00115 	stw	ra,4(sp)
    31e4:	df000015 	stw	fp,0(sp)
    31e8:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
    31ec:	0009883a 	mov	r4,zero
    31f0:	00032080 	call	3208 <LED_Display>
}
    31f4:	e037883a 	mov	sp,fp
    31f8:	dfc00117 	ldw	ra,4(sp)
    31fc:	df000017 	ldw	fp,0(sp)
    3200:	dec00204 	addi	sp,sp,8
    3204:	f800283a 	ret

00003208 <LED_Display>:

void LED_Display(alt_u32 Mask){ // 1: light, 0:unlight
    3208:	defffd04 	addi	sp,sp,-12
    320c:	df000215 	stw	fp,8(sp)
    3210:	df000204 	addi	fp,sp,8
    3214:	e13fff15 	stw	r4,-4(fp)
    alt_u32 ThisMask;
    ThisMask = Mask;//~(Mask & 0x7FFFFFF);
    3218:	e0bfff17 	ldw	r2,-4(fp)
    321c:	e0bffe15 	stw	r2,-8(fp)
  //IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, ThisMask);  //0:ligh, 1:unlight
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, ThisMask >> 9);  //0:ligh, 1:unlight
    3220:	e0bffe17 	ldw	r2,-8(fp)
    3224:	1004d27a 	srli	r2,r2,9
    3228:	1007883a 	mov	r3,r2
    322c:	00804034 	movhi	r2,256
    3230:	10801004 	addi	r2,r2,64
    3234:	10c00035 	stwio	r3,0(r2)
    
}
    3238:	e037883a 	mov	sp,fp
    323c:	df000017 	ldw	fp,0(sp)
    3240:	dec00104 	addi	sp,sp,4
    3244:	f800283a 	ret

00003248 <LED_LightCount>:

void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
    3248:	defffc04 	addi	sp,sp,-16
    324c:	df000315 	stw	fp,12(sp)
    3250:	df000304 	addi	fp,sp,12
    3254:	2005883a 	mov	r2,r4
    3258:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 Mask = 0;
    325c:	e03ffd15 	stw	zero,-12(fp)
    int i;
    for(i=0;i<LightCount;i++){
    3260:	e03ffe15 	stw	zero,-8(fp)
    3264:	00000906 	br	328c <LED_LightCount+0x44>
        Mask <<= 1;
    3268:	e0bffd17 	ldw	r2,-12(fp)
    326c:	1085883a 	add	r2,r2,r2
    3270:	e0bffd15 	stw	r2,-12(fp)
        Mask |= 0x01;
    3274:	e0bffd17 	ldw	r2,-12(fp)
    3278:	10800054 	ori	r2,r2,1
    327c:	e0bffd15 	stw	r2,-12(fp)
}

void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
    alt_u32 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
    3280:	e0bffe17 	ldw	r2,-8(fp)
    3284:	10800044 	addi	r2,r2,1
    3288:	e0bffe15 	stw	r2,-8(fp)
    328c:	e0bfff03 	ldbu	r2,-4(fp)
    3290:	e0fffe17 	ldw	r3,-8(fp)
    3294:	18bff416 	blt	r3,r2,3268 <_gp+0xfffe69ec>
        Mask <<= 1;
        Mask |= 0x01;
    }
  //IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, Mask);  //0:ligh, 1:unlight
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, Mask >> 8);  //0:ligh, 1:unlight
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	1004d23a 	srli	r2,r2,8
    32a0:	1007883a 	mov	r3,r2
    32a4:	00804034 	movhi	r2,256
    32a8:	10801004 	addi	r2,r2,64
    32ac:	10c00035 	stwio	r3,0(r2)
    
}
    32b0:	e037883a 	mov	sp,fp
    32b4:	df000017 	ldw	fp,0(sp)
    32b8:	dec00104 	addi	sp,sp,4
    32bc:	f800283a 	ret

000032c0 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
    32c0:	defffd04 	addi	sp,sp,-12
    32c4:	dfc00215 	stw	ra,8(sp)
    32c8:	df000115 	stw	fp,4(sp)
    32cc:	df000104 	addi	fp,sp,4
    32d0:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
    32d4:	e13fff17 	ldw	r4,-4(fp)
    32d8:	0006fe80 	call	6fe8 <printf>
}
    32dc:	e037883a 	mov	sp,fp
    32e0:	dfc00117 	ldw	ra,4(sp)
    32e4:	df000017 	ldw	fp,0(sp)
    32e8:	dec00204 	addi	sp,sp,8
    32ec:	f800283a 	ret

000032f0 <myprintf>:





int myprintf(char *format, ...){
    32f0:	deff7804 	addi	sp,sp,-544
    32f4:	dfc08415 	stw	ra,528(sp)
    32f8:	df008315 	stw	fp,524(sp)
    32fc:	df008304 	addi	fp,sp,524
    3300:	e1400215 	stw	r5,8(fp)
    3304:	e1800315 	stw	r6,12(fp)
    3308:	e1c00415 	stw	r7,16(fp)
    330c:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    3310:	e0800204 	addi	r2,fp,8
    3314:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
    3318:	e0bffe17 	ldw	r2,-8(fp)
    331c:	e0ff7e04 	addi	r3,fp,-520
    3320:	1809883a 	mov	r4,r3
    3324:	01408004 	movi	r5,512
    3328:	e1bfff17 	ldw	r6,-4(fp)
    332c:	100f883a 	mov	r7,r2
    3330:	00092e80 	call	92e8 <vsnprintf>
    3334:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
    3338:	e0bf7e04 	addi	r2,fp,-520
    333c:	1009883a 	mov	r4,r2
    3340:	00032c00 	call	32c0 <debug_output>

    return rc;    
    3344:	e0bf7d17 	ldw	r2,-524(fp)
}
    3348:	e037883a 	mov	sp,fp
    334c:	dfc00117 	ldw	ra,4(sp)
    3350:	df000017 	ldw	fp,0(sp)
    3354:	dec00504 	addi	sp,sp,20
    3358:	f800283a 	ret

0000335c <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
    335c:	defff704 	addi	sp,sp,-36
    3360:	dfc00815 	stw	ra,32(sp)
    3364:	df000715 	stw	fp,28(sp)
    3368:	df000704 	addi	fp,sp,28
    336c:	e13ffe15 	stw	r4,-8(fp)
    3370:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    3374:	e03ff915 	stw	zero,-28(fp)
    3378:	00001106 	br	33c0 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
    337c:	e0bff917 	ldw	r2,-28(fp)
    3380:	e0fffe17 	ldw	r3,-8(fp)
    3384:	1885883a 	add	r2,r3,r2
    3388:	10800003 	ldbu	r2,0(r2)
    338c:	10803fcc 	andi	r2,r2,255
    3390:	e0fffa04 	addi	r3,fp,-24
    3394:	1809883a 	mov	r4,r3
    3398:	01400074 	movhi	r5,1
    339c:	29496804 	addi	r5,r5,9632
    33a0:	100d883a 	mov	r6,r2
    33a4:	000719c0 	call	719c <sprintf>
        DEBUG((szText));
    33a8:	e0bffa04 	addi	r2,fp,-24
    33ac:	1009883a 	mov	r4,r2
    33b0:	00032f00 	call	32f0 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
    33b4:	e0bff917 	ldw	r2,-28(fp)
    33b8:	10800044 	addi	r2,r2,1
    33bc:	e0bff915 	stw	r2,-28(fp)
    33c0:	e0fff917 	ldw	r3,-28(fp)
    33c4:	e0bfff17 	ldw	r2,-4(fp)
    33c8:	18bfec16 	blt	r3,r2,337c <_gp+0xfffe6b00>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
    33cc:	e0bfff17 	ldw	r2,-4(fp)
}
    33d0:	e037883a 	mov	sp,fp
    33d4:	dfc00117 	ldw	ra,4(sp)
    33d8:	df000017 	ldw	fp,0(sp)
    33dc:	dec00204 	addi	sp,sp,8
    33e0:	f800283a 	ret

000033e4 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    33e4:	defff704 	addi	sp,sp,-36
    33e8:	dfc00815 	stw	ra,32(sp)
    33ec:	df000715 	stw	fp,28(sp)
    33f0:	df000704 	addi	fp,sp,28
    33f4:	e13ffe15 	stw	r4,-8(fp)
    33f8:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    33fc:	e03ff915 	stw	zero,-28(fp)
    3400:	00001206 	br	344c <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
    3404:	e0bff917 	ldw	r2,-28(fp)
    3408:	1085883a 	add	r2,r2,r2
    340c:	1085883a 	add	r2,r2,r2
    3410:	e0fffe17 	ldw	r3,-8(fp)
    3414:	1885883a 	add	r2,r3,r2
    3418:	10800017 	ldw	r2,0(r2)
    341c:	e0fffa04 	addi	r3,fp,-24
    3420:	1809883a 	mov	r4,r3
    3424:	01400074 	movhi	r5,1
    3428:	29496a04 	addi	r5,r5,9640
    342c:	100d883a 	mov	r6,r2
    3430:	000719c0 	call	719c <sprintf>
        DEBUG((szText));
    3434:	e0bffa04 	addi	r2,fp,-24
    3438:	1009883a 	mov	r4,r2
    343c:	00032f00 	call	32f0 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
    3440:	e0bff917 	ldw	r2,-28(fp)
    3444:	10800044 	addi	r2,r2,1
    3448:	e0bff915 	stw	r2,-28(fp)
    344c:	e0fff917 	ldw	r3,-28(fp)
    3450:	e0bfff17 	ldw	r2,-4(fp)
    3454:	18bfeb16 	blt	r3,r2,3404 <_gp+0xfffe6b88>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
    3458:	e0bfff17 	ldw	r2,-4(fp)
}
    345c:	e037883a 	mov	sp,fp
    3460:	dfc00117 	ldw	ra,4(sp)
    3464:	df000017 	ldw	fp,0(sp)
    3468:	dec00204 	addi	sp,sp,8
    346c:	f800283a 	ret

00003470 <crc16>:
    0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
    0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
alt_u16 crc16(const alt_u8 *buffer, int len){
    3470:	defffb04 	addi	sp,sp,-20
    3474:	df000415 	stw	fp,16(sp)
    3478:	df000404 	addi	fp,sp,16
    347c:	e13ffe15 	stw	r4,-8(fp)
    3480:	e17fff15 	stw	r5,-4(fp)

    int counter;
    alt_u16 crc = 0;
    3484:	e03ffd0d 	sth	zero,-12(fp)
    for( counter = 0; counter < len; counter++)
    3488:	e03ffc15 	stw	zero,-16(fp)
    348c:	00001a06 	br	34f8 <crc16+0x88>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    3490:	e0bffd0b 	ldhu	r2,-12(fp)
    3494:	1004923a 	slli	r2,r2,8
    3498:	1007883a 	mov	r3,r2
    349c:	e0bffd0b 	ldhu	r2,-12(fp)
    34a0:	1004d23a 	srli	r2,r2,8
    34a4:	113fffcc 	andi	r4,r2,65535
    34a8:	e0bffe17 	ldw	r2,-8(fp)
    34ac:	10800003 	ldbu	r2,0(r2)
    34b0:	10803fcc 	andi	r2,r2,255
    34b4:	1080201c 	xori	r2,r2,128
    34b8:	10bfe004 	addi	r2,r2,-128
    34bc:	2084f03a 	xor	r2,r4,r2
    34c0:	10803fcc 	andi	r2,r2,255
    34c4:	01000074 	movhi	r4,1
    34c8:	21096c04 	addi	r4,r4,9648
    34cc:	1085883a 	add	r2,r2,r2
    34d0:	2085883a 	add	r2,r4,r2
    34d4:	1080000b 	ldhu	r2,0(r2)
    34d8:	1884f03a 	xor	r2,r3,r2
    34dc:	e0bffd0d 	sth	r2,-12(fp)
    34e0:	e0bffe17 	ldw	r2,-8(fp)
    34e4:	10800044 	addi	r2,r2,1
    34e8:	e0bffe15 	stw	r2,-8(fp)
  
alt_u16 crc16(const alt_u8 *buffer, int len){

    int counter;
    alt_u16 crc = 0;
    for( counter = 0; counter < len; counter++)
    34ec:	e0bffc17 	ldw	r2,-16(fp)
    34f0:	10800044 	addi	r2,r2,1
    34f4:	e0bffc15 	stw	r2,-16(fp)
    34f8:	e0fffc17 	ldw	r3,-16(fp)
    34fc:	e0bfff17 	ldw	r2,-4(fp)
    3500:	18bfe316 	blt	r3,r2,3490 <_gp+0xfffe6c14>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
    return crc;
    3504:	e0bffd0b 	ldhu	r2,-12(fp)
}
    3508:	e037883a 	mov	sp,fp
    350c:	df000017 	ldw	fp,0(sp)
    3510:	dec00104 	addi	sp,sp,4
    3514:	f800283a 	ret

00003518 <crc7_byte>:
      0x0e, 0x07, 0x1c, 0x15, 0x2a, 0x23, 0x38, 0x31,
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
    3518:	defffd04 	addi	sp,sp,-12
    351c:	df000215 	stw	fp,8(sp)
    3520:	df000204 	addi	fp,sp,8
    3524:	2007883a 	mov	r3,r4
    3528:	2805883a 	mov	r2,r5
    352c:	e0fffe05 	stb	r3,-8(fp)
    3530:	e0bfff05 	stb	r2,-4(fp)
        return crc7_syndrome_table[(crc << 1) ^ data];
    3534:	e0bffe03 	ldbu	r2,-8(fp)
    3538:	1085883a 	add	r2,r2,r2
    353c:	1007883a 	mov	r3,r2
    3540:	e0bfff03 	ldbu	r2,-4(fp)
    3544:	1884f03a 	xor	r2,r3,r2
    3548:	00c00074 	movhi	r3,1
    354c:	18c9ec04 	addi	r3,r3,10160
    3550:	1885883a 	add	r2,r3,r2
    3554:	10800003 	ldbu	r2,0(r2)
}
    3558:	e037883a 	mov	sp,fp
    355c:	df000017 	ldw	fp,0(sp)
    3560:	dec00104 	addi	sp,sp,4
    3564:	f800283a 	ret

00003568 <crc7>:
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
    3568:	defffb04 	addi	sp,sp,-20
    356c:	dfc00415 	stw	ra,16(sp)
    3570:	df000315 	stw	fp,12(sp)
    3574:	df000304 	addi	fp,sp,12
    3578:	2005883a 	mov	r2,r4
    357c:	e17ffe15 	stw	r5,-8(fp)
    3580:	e1bfff15 	stw	r6,-4(fp)
    3584:	e0bffd05 	stb	r2,-12(fp)
      while (len--)
    3588:	00000b06 	br	35b8 <crc7+0x50>
            crc = crc7_byte(crc, *buffer++);
    358c:	e0fffd03 	ldbu	r3,-12(fp)
    3590:	e0bffe17 	ldw	r2,-8(fp)
    3594:	10800003 	ldbu	r2,0(r2)
    3598:	10803fcc 	andi	r2,r2,255
    359c:	e13ffe17 	ldw	r4,-8(fp)
    35a0:	21000044 	addi	r4,r4,1
    35a4:	e13ffe15 	stw	r4,-8(fp)
    35a8:	1809883a 	mov	r4,r3
    35ac:	100b883a 	mov	r5,r2
    35b0:	00035180 	call	3518 <crc7_byte>
    35b4:	e0bffd05 	stb	r2,-12(fp)
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
      while (len--)
    35b8:	e0bfff17 	ldw	r2,-4(fp)
    35bc:	1004c03a 	cmpne	r2,r2,zero
    35c0:	e0ffff17 	ldw	r3,-4(fp)
    35c4:	18ffffc4 	addi	r3,r3,-1
    35c8:	e0ffff15 	stw	r3,-4(fp)
    35cc:	10803fcc 	andi	r2,r2,255
    35d0:	103fee1e 	bne	r2,zero,358c <_gp+0xfffe6d10>
            crc = crc7_byte(crc, *buffer++);
      return crc;
    35d4:	e0bffd03 	ldbu	r2,-12(fp)
}
    35d8:	e037883a 	mov	sp,fp
    35dc:	dfc00117 	ldw	ra,4(sp)
    35e0:	df000017 	ldw	fp,0(sp)
    35e4:	dec00204 	addi	sp,sp,8
    35e8:	f800283a 	ret

000035ec <SDHAL_IsSupport4Bits>:
#include "sd_hal.h"
#include "sd_hw.h"
#include "crc16.h"


bool SDHAL_IsSupport4Bits(void){
    35ec:	defffe04 	addi	sp,sp,-8
    35f0:	df000115 	stw	fp,4(sp)
    35f4:	df000104 	addi	fp,sp,4
    bool bYes = FALSE;
    35f8:	e03fff15 	stw	zero,-4(fp)
#ifdef SD_4BIT_MODE
    bYes = TRUE;
    35fc:	00800044 	movi	r2,1
    3600:	e0bfff15 	stw	r2,-4(fp)
#endif    
    return bYes;
    3604:	e0bfff17 	ldw	r2,-4(fp)
}
    3608:	e037883a 	mov	sp,fp
    360c:	df000017 	ldw	fp,0(sp)
    3610:	dec00104 	addi	sp,sp,4
    3614:	f800283a 	ret

00003618 <SDHAL_Init>:

void SDHAL_Init(void){
    3618:	deffff04 	addi	sp,sp,-4
    361c:	df000015 	stw	fp,0(sp)
    3620:	d839883a 	mov	fp,sp
    SD_CMD_OUT;
    3624:	00c00044 	movi	r3,1
    3628:	00804034 	movhi	r2,256
    362c:	10801d04 	addi	r2,r2,116
    3630:	10c00035 	stwio	r3,0(r2)
    SD_DAT_IN;
    3634:	0007883a 	mov	r3,zero
    3638:	00804034 	movhi	r2,256
    363c:	10801904 	addi	r2,r2,100
    3640:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
    3644:	00c00044 	movi	r3,1
    3648:	00804034 	movhi	r2,256
    364c:	10802004 	addi	r2,r2,128
    3650:	10c00035 	stwio	r3,0(r2)
    SD_CMD_HIGH;
    3654:	00c00044 	movi	r3,1
    3658:	00804034 	movhi	r2,256
    365c:	10801c04 	addi	r2,r2,112
    3660:	10c00035 	stwio	r3,0(r2)
    SD_DAT_LOW;    
    3664:	0007883a 	mov	r3,zero
    3668:	00804034 	movhi	r2,256
    366c:	10801804 	addi	r2,r2,96
    3670:	10c00035 	stwio	r3,0(r2)
}
    3674:	e037883a 	mov	sp,fp
    3678:	df000017 	ldw	fp,0(sp)
    367c:	dec00104 	addi	sp,sp,4
    3680:	f800283a 	ret

00003684 <SDHAL_SendCmd>:

void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen){
    3684:	defffa04 	addi	sp,sp,-24
    3688:	df000515 	stw	fp,20(sp)
    368c:	df000504 	addi	fp,sp,20
    3690:	e13ffe15 	stw	r4,-8(fp)
    3694:	e17fff15 	stw	r5,-4(fp)

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    3698:	00c00044 	movi	r3,1
    369c:	00804034 	movhi	r2,256
    36a0:	10801d04 	addi	r2,r2,116
    36a4:	10c00035 	stwio	r3,0(r2)
    for(i=0;i<nCmdLen;i++){
    36a8:	e03ffb15 	stw	zero,-20(fp)
    36ac:	00002b06 	br	375c <SDHAL_SendCmd+0xd8>
        Mask = 0x80;
    36b0:	00bfe004 	movi	r2,-128
    36b4:	e0bffd05 	stb	r2,-12(fp)
        Data = szCommand[i];
    36b8:	e0bffb17 	ldw	r2,-20(fp)
    36bc:	e0fffe17 	ldw	r3,-8(fp)
    36c0:	1885883a 	add	r2,r3,r2
    36c4:	10800003 	ldbu	r2,0(r2)
    36c8:	e0bffd45 	stb	r2,-11(fp)
        for(k=0;k<8;k++){
    36cc:	e03ffc15 	stw	zero,-16(fp)
    36d0:	00001c06 	br	3744 <SDHAL_SendCmd+0xc0>
            SD_CLK_LOW;
    36d4:	0007883a 	mov	r3,zero
    36d8:	00804034 	movhi	r2,256
    36dc:	10802004 	addi	r2,r2,128
    36e0:	10c00035 	stwio	r3,0(r2)
            if (Data & Mask)
    36e4:	e0fffd43 	ldbu	r3,-11(fp)
    36e8:	e0bffd03 	ldbu	r2,-12(fp)
    36ec:	1884703a 	and	r2,r3,r2
    36f0:	10803fcc 	andi	r2,r2,255
    36f4:	10000526 	beq	r2,zero,370c <SDHAL_SendCmd+0x88>
                SD_CMD_HIGH;
    36f8:	00c00044 	movi	r3,1
    36fc:	00804034 	movhi	r2,256
    3700:	10801c04 	addi	r2,r2,112
    3704:	10c00035 	stwio	r3,0(r2)
    3708:	00000406 	br	371c <SDHAL_SendCmd+0x98>
            else
                SD_CMD_LOW;
    370c:	0007883a 	mov	r3,zero
    3710:	00804034 	movhi	r2,256
    3714:	10801c04 	addi	r2,r2,112
    3718:	10c00035 	stwio	r3,0(r2)
            SD_CLK_HIGH;    
    371c:	00c00044 	movi	r3,1
    3720:	00804034 	movhi	r2,256
    3724:	10802004 	addi	r2,r2,128
    3728:	10c00035 	stwio	r3,0(r2)
            //    
            Mask >>= 1;
    372c:	e0bffd03 	ldbu	r2,-12(fp)
    3730:	1004d07a 	srli	r2,r2,1
    3734:	e0bffd05 	stb	r2,-12(fp)
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
        Mask = 0x80;
        Data = szCommand[i];
        for(k=0;k<8;k++){
    3738:	e0bffc17 	ldw	r2,-16(fp)
    373c:	10800044 	addi	r2,r2,1
    3740:	e0bffc15 	stw	r2,-16(fp)
    3744:	e0bffc17 	ldw	r2,-16(fp)
    3748:	10800210 	cmplti	r2,r2,8
    374c:	103fe11e 	bne	r2,zero,36d4 <_gp+0xfffe6e58>

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
    for(i=0;i<nCmdLen;i++){
    3750:	e0bffb17 	ldw	r2,-20(fp)
    3754:	10800044 	addi	r2,r2,1
    3758:	e0bffb15 	stw	r2,-20(fp)
    375c:	e0fffb17 	ldw	r3,-20(fp)
    3760:	e0bfff17 	ldw	r2,-4(fp)
    3764:	18bfd216 	blt	r3,r2,36b0 <_gp+0xfffe6e34>
            //    
            Mask >>= 1;
           // usleep(1);
        }
    }
}
    3768:	e037883a 	mov	sp,fp
    376c:	df000017 	ldw	fp,0(sp)
    3770:	dec00104 	addi	sp,sp,4
    3774:	f800283a 	ret

00003778 <SDHAL_GetResponse>:




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
    3778:	defff504 	addi	sp,sp,-44
    377c:	dfc00a15 	stw	ra,40(sp)
    3780:	df000915 	stw	fp,36(sp)
    3784:	df000904 	addi	fp,sp,36
    3788:	e13ffe15 	stw	r4,-8(fp)
    378c:	e17fff15 	stw	r5,-4(fp)
    bool bDone, bTimeout;
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
    3790:	00800504 	movi	r2,20
    3794:	e0bffc15 	stw	r2,-16(fp)
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
    3798:	0007883a 	mov	r3,zero
    379c:	00804034 	movhi	r2,256
    37a0:	10801d04 	addi	r2,r2,116
    37a4:	10c00035 	stwio	r3,0(r2)
    
    //===== check start bit == 0
    nCnt = 0;
    37a8:	e03ff915 	stw	zero,-28(fp)
    bDone = FALSE;
    37ac:	e03ff715 	stw	zero,-36(fp)
    bTimeout = FALSE;
    37b0:	e03ff815 	stw	zero,-32(fp)
    while(!bDone && !bTimeout){
    37b4:	00001906 	br	381c <SDHAL_GetResponse+0xa4>
        SD_CLK_LOW;
    37b8:	0007883a 	mov	r3,zero
    37bc:	00804034 	movhi	r2,256
    37c0:	10802004 	addi	r2,r2,128
    37c4:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
    37c8:	00c00044 	movi	r3,1
    37cc:	00804034 	movhi	r2,256
    37d0:	10802004 	addi	r2,r2,128
    37d4:	10c00035 	stwio	r3,0(r2)
        if(!(SD_TEST_CMD))
    37d8:	00804034 	movhi	r2,256
    37dc:	10801c04 	addi	r2,r2,112
    37e0:	10800037 	ldwio	r2,0(r2)
    37e4:	1000031e 	bne	r2,zero,37f4 <SDHAL_GetResponse+0x7c>
            bDone = TRUE;
    37e8:	00800044 	movi	r2,1
    37ec:	e0bff715 	stw	r2,-36(fp)
    37f0:	00000a06 	br	381c <SDHAL_GetResponse+0xa4>
        else if(nCnt++ > nMaxCnt)
    37f4:	e0bff917 	ldw	r2,-28(fp)
    37f8:	e0fffc17 	ldw	r3,-16(fp)
    37fc:	1884803a 	cmplt	r2,r3,r2
    3800:	e0fff917 	ldw	r3,-28(fp)
    3804:	18c00044 	addi	r3,r3,1
    3808:	e0fff915 	stw	r3,-28(fp)
    380c:	10803fcc 	andi	r2,r2,255
    3810:	10000226 	beq	r2,zero,381c <SDHAL_GetResponse+0xa4>
            bTimeout = TRUE;
    3814:	00800044 	movi	r2,1
    3818:	e0bff815 	stw	r2,-32(fp)
    
    //===== check start bit == 0
    nCnt = 0;
    bDone = FALSE;
    bTimeout = FALSE;
    while(!bDone && !bTimeout){
    381c:	e0bff717 	ldw	r2,-36(fp)
    3820:	1000021e 	bne	r2,zero,382c <SDHAL_GetResponse+0xb4>
    3824:	e0bff817 	ldw	r2,-32(fp)
    3828:	103fe326 	beq	r2,zero,37b8 <_gp+0xfffe6f3c>
            bDone = TRUE;
        else if(nCnt++ > nMaxCnt)
            bTimeout = TRUE;
    }
    
    if (!bDone || bTimeout)
    382c:	e0bff717 	ldw	r2,-36(fp)
    3830:	10000226 	beq	r2,zero,383c <SDHAL_GetResponse+0xc4>
    3834:	e0bff817 	ldw	r2,-32(fp)
    3838:	10000226 	beq	r2,zero,3844 <SDHAL_GetResponse+0xcc>
        return FALSE;
    383c:	0005883a 	mov	r2,zero
    3840:	00004e06 	br	397c <SDHAL_GetResponse+0x204>
  
    //===== check transmitter bit == 0

    SD_CLK_LOW;
    3844:	0007883a 	mov	r3,zero
    3848:	00804034 	movhi	r2,256
    384c:	10802004 	addi	r2,r2,128
    3850:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
    3854:	00c00044 	movi	r3,1
    3858:	00804034 	movhi	r2,256
    385c:	10802004 	addi	r2,r2,128
    3860:	10c00035 	stwio	r3,0(r2)
    if (SD_TEST_CMD)
    3864:	00804034 	movhi	r2,256
    3868:	10801c04 	addi	r2,r2,112
    386c:	10800037 	ldwio	r2,0(r2)
    3870:	10000226 	beq	r2,zero,387c <SDHAL_GetResponse+0x104>
        return FALSE;   // 0 is expected
    3874:	0005883a 	mov	r2,zero
    3878:	00004006 	br	397c <SDHAL_GetResponse+0x204>

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    387c:	00800084 	movi	r2,2
    3880:	e0bffa15 	stw	r2,-24(fp)
    nBitCnt = nLen*8;
    3884:	e0bfff17 	ldw	r2,-4(fp)
    3888:	100490fa 	slli	r2,r2,3
    388c:	e0bffd15 	stw	r2,-12(fp)
    bDone = FALSE;
    3890:	e03ff715 	stw	zero,-36(fp)
    Value = 0;
    3894:	e03ffb05 	stb	zero,-20(fp)
    while(nIndex < nBitCnt){
    3898:	00003206 	br	3964 <SDHAL_GetResponse+0x1ec>
        SD_CLK_LOW;
    389c:	0007883a 	mov	r3,zero
    38a0:	00804034 	movhi	r2,256
    38a4:	10802004 	addi	r2,r2,128
    38a8:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
    38ac:	00c00044 	movi	r3,1
    38b0:	00804034 	movhi	r2,256
    38b4:	10802004 	addi	r2,r2,128
    38b8:	10c00035 	stwio	r3,0(r2)
        if (SD_TEST_CMD){
    38bc:	00804034 	movhi	r2,256
    38c0:	10801c04 	addi	r2,r2,112
    38c4:	10800037 	ldwio	r2,0(r2)
    38c8:	10000f26 	beq	r2,zero,3908 <SDHAL_GetResponse+0x190>
            Value |= 0x80 >> (nIndex % 8);
    38cc:	e0fffa17 	ldw	r3,-24(fp)
    38d0:	00a00034 	movhi	r2,32768
    38d4:	108001c4 	addi	r2,r2,7
    38d8:	1884703a 	and	r2,r3,r2
    38dc:	1000040e 	bge	r2,zero,38f0 <SDHAL_GetResponse+0x178>
    38e0:	10bfffc4 	addi	r2,r2,-1
    38e4:	00fffe04 	movi	r3,-8
    38e8:	10c4b03a 	or	r2,r2,r3
    38ec:	10800044 	addi	r2,r2,1
    38f0:	00c02004 	movi	r3,128
    38f4:	1885d83a 	sra	r2,r3,r2
    38f8:	1007883a 	mov	r3,r2
    38fc:	e0bffb03 	ldbu	r2,-20(fp)
    3900:	1884b03a 	or	r2,r3,r2
    3904:	e0bffb05 	stb	r2,-20(fp)
        }
        if (nIndex%8 == 7){
    3908:	e0fffa17 	ldw	r3,-24(fp)
    390c:	00a00034 	movhi	r2,32768
    3910:	108001c4 	addi	r2,r2,7
    3914:	1884703a 	and	r2,r3,r2
    3918:	1000040e 	bge	r2,zero,392c <SDHAL_GetResponse+0x1b4>
    391c:	10bfffc4 	addi	r2,r2,-1
    3920:	00fffe04 	movi	r3,-8
    3924:	10c4b03a 	or	r2,r2,r3
    3928:	10800044 	addi	r2,r2,1
    392c:	108001d8 	cmpnei	r2,r2,7
    3930:	1000091e 	bne	r2,zero,3958 <SDHAL_GetResponse+0x1e0>
            szResponse[nIndex/8] = Value;
    3934:	e0bffa17 	ldw	r2,-24(fp)
    3938:	1000010e 	bge	r2,zero,3940 <SDHAL_GetResponse+0x1c8>
    393c:	108001c4 	addi	r2,r2,7
    3940:	1005d0fa 	srai	r2,r2,3
    3944:	e0fffe17 	ldw	r3,-8(fp)
    3948:	1885883a 	add	r2,r3,r2
    394c:	e0fffb03 	ldbu	r3,-20(fp)
    3950:	10c00005 	stb	r3,0(r2)
            Value = 0;
    3954:	e03ffb05 	stb	zero,-20(fp)
        }
        nIndex++;
    3958:	e0bffa17 	ldw	r2,-24(fp)
    395c:	10800044 	addi	r2,r2,1
    3960:	e0bffa15 	stw	r2,-24(fp)
    //===== read content + CRC + end-bits ======
    nIndex = 2;
    nBitCnt = nLen*8;
    bDone = FALSE;
    Value = 0;
    while(nIndex < nBitCnt){
    3964:	e0fffa17 	ldw	r3,-24(fp)
    3968:	e0bffd17 	ldw	r2,-12(fp)
    396c:	18bfcb16 	blt	r3,r2,389c <_gp+0xfffe7020>
        }
        nIndex++;
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
    3970:	01000204 	movi	r4,8
    3974:	0003cc80 	call	3cc8 <SDHAL_DummyClock>
    
    return TRUE;
    3978:	00800044 	movi	r2,1
}
    397c:	e037883a 	mov	sp,fp
    3980:	dfc00117 	ldw	ra,4(sp)
    3984:	df000017 	ldw	fp,0(sp)
    3988:	dec00204 	addi	sp,sp,8
    398c:	f800283a 	ret

00003990 <SDHAL_ReadData>:


bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen){
    3990:	defff704 	addi	sp,sp,-36
    3994:	df000815 	stw	fp,32(sp)
    3998:	df000804 	addi	fp,sp,32
    399c:	e13ffe15 	stw	r4,-8(fp)
    39a0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
    39a4:	00800044 	movi	r2,1
    39a8:	e0bffc15 	stw	r2,-16(fp)
    int nTry = 0;
    39ac:	e03ff815 	stw	zero,-32(fp)
    const  int nMaxTry = 9000;
    39b0:	0088ca04 	movi	r2,9000
    39b4:	e0bffd15 	stw	r2,-12(fp)
    alt_u8 Data8;
#ifndef SD_4BIT_MODE     
    alt_u16 DataCrc16, MyCrc16;
#endif    
    
    SD_DAT_IN;
    39b8:	0007883a 	mov	r3,zero
    39bc:	00804034 	movhi	r2,256
    39c0:	10801904 	addi	r2,r2,100
    39c4:	10c00035 	stwio	r3,0(r2)
    39c8:	00000106 	br	39d0 <SDHAL_ReadData+0x40>
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    }    
    39cc:	0001883a 	nop
    
    SD_DAT_IN;
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
    39d0:	0007883a 	mov	r3,zero
    39d4:	00804034 	movhi	r2,256
    39d8:	10802004 	addi	r2,r2,128
    39dc:	10c00035 	stwio	r3,0(r2)
      SD_CLK_HIGH;
    39e0:	00c00044 	movi	r3,1
    39e4:	00804034 	movhi	r2,256
    39e8:	10802004 	addi	r2,r2,128
    39ec:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
    39f0:	00804034 	movhi	r2,256
    39f4:	10801804 	addi	r2,r2,96
    39f8:	10800037 	ldwio	r2,0(r2)
    39fc:	108003cc 	andi	r2,r2,15
    3a00:	10000a26 	beq	r2,zero,3a2c <SDHAL_ReadData+0x9c>
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
    3a04:	e0bff817 	ldw	r2,-32(fp)
    3a08:	e0fffd17 	ldw	r3,-12(fp)
    3a0c:	1884803a 	cmplt	r2,r3,r2
    3a10:	e0fff817 	ldw	r3,-32(fp)
    3a14:	18c00044 	addi	r3,r3,1
    3a18:	e0fff815 	stw	r3,-32(fp)
    3a1c:	10803fcc 	andi	r2,r2,255
    3a20:	103fea26 	beq	r2,zero,39cc <_gp+0xfffe7150>
        return FALSE;        
    3a24:	0005883a 	mov	r2,zero
    3a28:	00002b06 	br	3ad8 <SDHAL_ReadData+0x148>
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
    3a2c:	0001883a 	nop
      if (nTry++ > nMaxTry)
        return FALSE;        
    }    
    
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
    3a30:	e03ff915 	stw	zero,-28(fp)
    3a34:	00002406 	br	3ac8 <SDHAL_ReadData+0x138>
    {
      Data8 = 0;
    3a38:	e03ffb05 	stb	zero,-20(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
    3a3c:	e03ffa15 	stw	zero,-24(fp)
    3a40:	00001606 	br	3a9c <SDHAL_ReadData+0x10c>
      {
        SD_CLK_LOW;
    3a44:	0007883a 	mov	r3,zero
    3a48:	00804034 	movhi	r2,256
    3a4c:	10802004 	addi	r2,r2,128
    3a50:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
    3a54:	00c00044 	movi	r3,1
    3a58:	00804034 	movhi	r2,256
    3a5c:	10802004 	addi	r2,r2,128
    3a60:	10c00035 	stwio	r3,0(r2)
        Data8 <<= 4; 
    3a64:	e0bffb03 	ldbu	r2,-20(fp)
    3a68:	1004913a 	slli	r2,r2,4
    3a6c:	e0bffb05 	stb	r2,-20(fp)
        Data8 |= (SD_TEST_DAT & 0x0F);
    3a70:	00804034 	movhi	r2,256
    3a74:	10801804 	addi	r2,r2,96
    3a78:	10800037 	ldwio	r2,0(r2)
    3a7c:	108003cc 	andi	r2,r2,15
    3a80:	1007883a 	mov	r3,r2
    3a84:	e0bffb03 	ldbu	r2,-20(fp)
    3a88:	1884b03a 	or	r2,r3,r2
    3a8c:	e0bffb05 	stb	r2,-20(fp)
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
    {
      Data8 = 0;
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
    3a90:	e0bffa17 	ldw	r2,-24(fp)
    3a94:	10800044 	addi	r2,r2,1
    3a98:	e0bffa15 	stw	r2,-24(fp)
    3a9c:	e0bffa17 	ldw	r2,-24(fp)
    3aa0:	10800090 	cmplti	r2,r2,2
    3aa4:	103fe71e 	bne	r2,zero,3a44 <_gp+0xfffe71c8>
        if(SD_TEST_DAT & 0x01)  // check bit0
            Data8 |= 0x01;
      } 
#endif  

      szBuf[i]=Data8;
    3aa8:	e0bff917 	ldw	r2,-28(fp)
    3aac:	e0fffe17 	ldw	r3,-8(fp)
    3ab0:	1885883a 	add	r2,r3,r2
    3ab4:	e0fffb03 	ldbu	r3,-20(fp)
    3ab8:	10c00005 	stb	r3,0(r2)
      if (nTry++ > nMaxTry)
        return FALSE;        
    }    
    
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
    3abc:	e0bff917 	ldw	r2,-28(fp)
    3ac0:	10800044 	addi	r2,r2,1
    3ac4:	e0bff915 	stw	r2,-28(fp)
    3ac8:	e0fff917 	ldw	r3,-28(fp)
    3acc:	e0bfff17 	ldw	r2,-4(fp)
    3ad0:	18bfd916 	blt	r3,r2,3a38 <_gp+0xfffe71bc>
    }            
    
#endif

    
    return bSuccess;
    3ad4:	e0bffc17 	ldw	r2,-16(fp)
    
}
    3ad8:	e037883a 	mov	sp,fp
    3adc:	df000017 	ldw	fp,0(sp)
    3ae0:	dec00104 	addi	sp,sp,4
    3ae4:	f800283a 	ret

00003ae8 <SDHAL_WriteData>:

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
    3ae8:	defff604 	addi	sp,sp,-40
    3aec:	dfc00915 	stw	ra,36(sp)
    3af0:	df000815 	stw	fp,32(sp)
    3af4:	df000804 	addi	fp,sp,32
    3af8:	e13ffe15 	stw	r4,-8(fp)
    3afc:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
    3b00:	00800044 	movi	r2,1
    3b04:	e0bff815 	stw	r2,-32(fp)
  //  const int nMaxTry = 5000; 
    int i, j;   
    alt_u8 Data8;
    alt_u16 DataCrc16;
    
    DataCrc16 = crc16(szDataWrite, nDataLen);
    3b08:	e13ffe17 	ldw	r4,-8(fp)
    3b0c:	e17fff17 	ldw	r5,-4(fp)
    3b10:	00034700 	call	3470 <crc16>
    3b14:	e0bffd0d 	sth	r2,-12(fp)
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    } */    
    
    SD_DAT_OUT;
    3b18:	00c00044 	movi	r3,1
    3b1c:	00804034 	movhi	r2,256
    3b20:	10801904 	addi	r2,r2,100
    3b24:	10c00035 	stwio	r3,0(r2)
    // start bits (zero value)
    SD_CLK_LOW;
    3b28:	0007883a 	mov	r3,zero
    3b2c:	00804034 	movhi	r2,256
    3b30:	10802004 	addi	r2,r2,128
    3b34:	10c00035 	stwio	r3,0(r2)
    SD_DAT_WRITE(0x00);  
    3b38:	0007883a 	mov	r3,zero
    3b3c:	00804034 	movhi	r2,256
    3b40:	10801804 	addi	r2,r2,96
    3b44:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
    3b48:	00c00044 	movi	r3,1
    3b4c:	00804034 	movhi	r2,256
    3b50:	10802004 	addi	r2,r2,128
    3b54:	10c00035 	stwio	r3,0(r2)
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    3b58:	e03ff915 	stw	zero,-28(fp)
    3b5c:	00002206 	br	3be8 <SDHAL_WriteData+0x100>
    {
      Data8 = szDataWrite[i];
    3b60:	e0bff917 	ldw	r2,-28(fp)
    3b64:	e0fffe17 	ldw	r3,-8(fp)
    3b68:	1885883a 	add	r2,r3,r2
    3b6c:	10800003 	ldbu	r2,0(r2)
    3b70:	e0bffb05 	stb	r2,-20(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
    3b74:	e03ffa15 	stw	zero,-24(fp)
    3b78:	00001506 	br	3bd0 <SDHAL_WriteData+0xe8>
      {
        SD_CLK_LOW;
    3b7c:	0007883a 	mov	r3,zero
    3b80:	00804034 	movhi	r2,256
    3b84:	10802004 	addi	r2,r2,128
    3b88:	10c00035 	stwio	r3,0(r2)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
    3b8c:	e0bffb03 	ldbu	r2,-20(fp)
    3b90:	1004d13a 	srli	r2,r2,4
    3b94:	10803fcc 	andi	r2,r2,255
    3b98:	10c003cc 	andi	r3,r2,15
    3b9c:	00804034 	movhi	r2,256
    3ba0:	10801804 	addi	r2,r2,96
    3ba4:	10c00035 	stwio	r3,0(r2)
        //            
        SD_CLK_HIGH;
    3ba8:	00c00044 	movi	r3,1
    3bac:	00804034 	movhi	r2,256
    3bb0:	10802004 	addi	r2,r2,128
    3bb4:	10c00035 	stwio	r3,0(r2)
        Data8 <<= 4; 
    3bb8:	e0bffb03 	ldbu	r2,-20(fp)
    3bbc:	1004913a 	slli	r2,r2,4
    3bc0:	e0bffb05 	stb	r2,-20(fp)
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    {
      Data8 = szDataWrite[i];
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
    3bc4:	e0bffa17 	ldw	r2,-24(fp)
    3bc8:	10800044 	addi	r2,r2,1
    3bcc:	e0bffa15 	stw	r2,-24(fp)
    3bd0:	e0bffa17 	ldw	r2,-24(fp)
    3bd4:	10800090 	cmplti	r2,r2,2
    3bd8:	103fe81e 	bne	r2,zero,3b7c <_gp+0xfffe7300>
    SD_CLK_LOW;
    SD_DAT_WRITE(0x00);  
    SD_CLK_HIGH;
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
    3bdc:	e0bff917 	ldw	r2,-28(fp)
    3be0:	10800044 	addi	r2,r2,1
    3be4:	e0bff915 	stw	r2,-28(fp)
    3be8:	e0fff917 	ldw	r3,-28(fp)
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	18bfdb16 	blt	r3,r2,3b60 <_gp+0xfffe72e4>

    
#endif    

    // stop bits (value 'one')
    SD_CLK_LOW;
    3bf4:	0007883a 	mov	r3,zero
    3bf8:	00804034 	movhi	r2,256
    3bfc:	10802004 	addi	r2,r2,128
    3c00:	10c00035 	stwio	r3,0(r2)
#ifdef SD_4BIT_MODE
    SD_DAT_WRITE(0x0F);
    3c04:	00c003c4 	movi	r3,15
    3c08:	00804034 	movhi	r2,256
    3c0c:	10801804 	addi	r2,r2,96
    3c10:	10c00035 	stwio	r3,0(r2)
#else    
    SD_DAT_HIGH;
#endif     
    SD_CLK_HIGH;
    3c14:	00c00044 	movi	r3,1
    3c18:	00804034 	movhi	r2,256
    3c1c:	10802004 	addi	r2,r2,128
    3c20:	10c00035 	stwio	r3,0(r2)
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
    3c24:	0007883a 	mov	r3,zero
    3c28:	00804034 	movhi	r2,256
    3c2c:	10801904 	addi	r2,r2,100
    3c30:	10c00035 	stwio	r3,0(r2)
bool bWriteSuccess = FALSE;    
    3c34:	e03ffc15 	stw	zero,-16(fp)
for(i=0;i<32 && !bWriteSuccess;i++){        
    3c38:	e03ff915 	stw	zero,-28(fp)
    3c3c:	00001206 	br	3c88 <SDHAL_WriteData+0x1a0>
    SD_CLK_LOW;
    3c40:	0007883a 	mov	r3,zero
    3c44:	00804034 	movhi	r2,256
    3c48:	10802004 	addi	r2,r2,128
    3c4c:	10c00035 	stwio	r3,0(r2)
    SD_CLK_HIGH;
    3c50:	00c00044 	movi	r3,1
    3c54:	00804034 	movhi	r2,256
    3c58:	10802004 	addi	r2,r2,128
    3c5c:	10c00035 	stwio	r3,0(r2)
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
    3c60:	00804034 	movhi	r2,256
    3c64:	10801804 	addi	r2,r2,96
    3c68:	10800037 	ldwio	r2,0(r2)
    3c6c:	1080004c 	andi	r2,r2,1
    3c70:	10000226 	beq	r2,zero,3c7c <SDHAL_WriteData+0x194>
        bWriteSuccess = TRUE;
    3c74:	00800044 	movi	r2,1
    3c78:	e0bffc15 	stw	r2,-16(fp)
    SD_CLK_HIGH;
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
bool bWriteSuccess = FALSE;    
for(i=0;i<32 && !bWriteSuccess;i++){        
    3c7c:	e0bff917 	ldw	r2,-28(fp)
    3c80:	10800044 	addi	r2,r2,1
    3c84:	e0bff915 	stw	r2,-28(fp)
    3c88:	e0bff917 	ldw	r2,-28(fp)
    3c8c:	10800808 	cmpgei	r2,r2,32
    3c90:	1000021e 	bne	r2,zero,3c9c <SDHAL_WriteData+0x1b4>
    3c94:	e0bffc17 	ldw	r2,-16(fp)
    3c98:	103fe926 	beq	r2,zero,3c40 <_gp+0xfffe73c4>
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
        bWriteSuccess = TRUE;
}
    if (!bWriteSuccess)
    3c9c:	e0bffc17 	ldw	r2,-16(fp)
    3ca0:	1000011e 	bne	r2,zero,3ca8 <SDHAL_WriteData+0x1c0>
        bSuccess = FALSE;
    3ca4:	e03ff815 	stw	zero,-32(fp)
                
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
    3ca8:	01000204 	movi	r4,8
    3cac:	0003cc80 	call	3cc8 <SDHAL_DummyClock>
    for(i=0; i<16; i++){
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }*/
    
    return bSuccess;
    3cb0:	e0bff817 	ldw	r2,-32(fp)
    
}
    3cb4:	e037883a 	mov	sp,fp
    3cb8:	dfc00117 	ldw	ra,4(sp)
    3cbc:	df000017 	ldw	fp,0(sp)
    3cc0:	dec00204 	addi	sp,sp,8
    3cc4:	f800283a 	ret

00003cc8 <SDHAL_DummyClock>:


void SDHAL_DummyClock(int nClockCnt){
    3cc8:	defffd04 	addi	sp,sp,-12
    3ccc:	df000215 	stw	fp,8(sp)
    3cd0:	df000204 	addi	fp,sp,8
    3cd4:	e13fff15 	stw	r4,-4(fp)
    int i;
    for(i=0;i<nClockCnt;i++){
    3cd8:	e03ffe15 	stw	zero,-8(fp)
    3cdc:	00000b06 	br	3d0c <SDHAL_DummyClock+0x44>
        SD_CLK_LOW;
    3ce0:	0007883a 	mov	r3,zero
    3ce4:	00804034 	movhi	r2,256
    3ce8:	10802004 	addi	r2,r2,128
    3cec:	10c00035 	stwio	r3,0(r2)
        SD_CLK_HIGH;
    3cf0:	00c00044 	movi	r3,1
    3cf4:	00804034 	movhi	r2,256
    3cf8:	10802004 	addi	r2,r2,128
    3cfc:	10c00035 	stwio	r3,0(r2)
}


void SDHAL_DummyClock(int nClockCnt){
    int i;
    for(i=0;i<nClockCnt;i++){
    3d00:	e0bffe17 	ldw	r2,-8(fp)
    3d04:	10800044 	addi	r2,r2,1
    3d08:	e0bffe15 	stw	r2,-8(fp)
    3d0c:	e0fffe17 	ldw	r3,-8(fp)
    3d10:	e0bfff17 	ldw	r2,-4(fp)
    3d14:	18bff216 	blt	r3,r2,3ce0 <_gp+0xfffe7464>
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }
}
    3d18:	e037883a 	mov	sp,fp
    3d1c:	df000017 	ldw	fp,0(sp)
    3d20:	dec00104 	addi	sp,sp,4
    3d24:	f800283a 	ret

00003d28 <SDLIB_Init>:
static SD_INFO gSdInfo;


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
    3d28:	defff604 	addi	sp,sp,-40
    3d2c:	dfc00915 	stw	ra,36(sp)
    3d30:	df000815 	stw	fp,32(sp)
    3d34:	df000804 	addi	fp,sp,32
    bool bSuccess = FALSE, bTimeout = FALSE;
    3d38:	e03ff815 	stw	zero,-32(fp)
    3d3c:	e03ff915 	stw	zero,-28(fp)
    3d40:	00800074 	movhi	r2,1
    3d44:	1098d004 	addi	r2,r2,25408
    3d48:	10800017 	ldw	r2,0(r2)
    alt_u8  szThisCID[16];
    const int nTimeout = alt_ticks_per_second();
    3d4c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
    3d50:	01000074 	movhi	r4,1
    3d54:	2118d304 	addi	r4,r4,25420
    3d58:	000b883a 	mov	r5,zero
    3d5c:	01800e04 	movi	r6,56
    3d60:	0006ee00 	call	6ee0 <memset>
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
    3d64:	00041840 	call	4184 <SD_IsSupport4Bits>
    3d68:	00c00074 	movhi	r3,1
    3d6c:	18d8d304 	addi	r3,r3,25420
    3d70:	18800015 	stw	r2,0(r3)

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
    3d74:	0100b904 	movi	r4,740
    3d78:	00100f00 	call	100f0 <usleep>
    
    SD_Init();
    3d7c:	000415c0 	call	415c <SD_Init>

    
    //========================== CMD0 (None Response) ========
    // Reset all cards to idle state
    SD_CMD0();
    3d80:	00041ac0 	call	41ac <SD_CMD0>
    usleep(100*1000);
    3d84:	010000b4 	movhi	r4,2
    3d88:	2121a804 	addi	r4,r4,-31072
    3d8c:	00100f00 	call	100f0 <usleep>
    
    //========================== CMD8 (Response R7) ==========
    //Sends SD Memory Card interface condition (Added in SDHC 2.0)
    if (SD_CMD8(SD_VHS_2V7_3V6, CMD8_DEFAULT_TEST_PATTERN)){
    3d90:	01000044 	movi	r4,1
    3d94:	01402a84 	movi	r5,170
    3d98:	00042340 	call	4234 <SD_CMD8>
    3d9c:	10000e26 	beq	r2,zero,3dd8 <SDLIB_Init+0xb0>
        // OCR: Operation Condistions Register
        //gSdInfo.HostOCR32 = 0x01 << 30; //argument=0x40FF8000; // support HC
        gSdInfo.HostOCR32 = 0x40FF8000;
    3da0:	00800074 	movhi	r2,1
    3da4:	1098d304 	addi	r2,r2,25420
    3da8:	00d04034 	movhi	r3,16640
    3dac:	18e00004 	addi	r3,r3,-32768
    3db0:	10c00315 	stw	r3,12(r2)
        gSdInfo.bVer2 = TRUE;
    3db4:	00800074 	movhi	r2,1
    3db8:	1098d304 	addi	r2,r2,25420
    3dbc:	00c00044 	movi	r3,1
    3dc0:	10c00115 	stw	r3,4(r2)
        gSdInfo.bSDHC = TRUE;
    3dc4:	00800074 	movhi	r2,1
    3dc8:	1098d304 	addi	r2,r2,25420
    3dcc:	00c00044 	movi	r3,1
    3dd0:	10c00215 	stw	r3,8(r2)
    3dd4:	00000806 	br	3df8 <SDLIB_Init+0xd0>
        SDCARD_DEBUG((" 2.0 \r\n"));
    }else{
        gSdInfo.HostOCR32 = 0x00040000;   
    3dd8:	00800074 	movhi	r2,1
    3ddc:	1098d304 	addi	r2,r2,25420
    3de0:	00c00134 	movhi	r3,4
    3de4:	10c00315 	stw	r3,12(r2)
        SDCARD_TRACE(("CMD8 not supported\r\n"));
        
        // Reset cards to idle state
        SD_CMD0();
    3de8:	00041ac0 	call	41ac <SD_CMD0>
        usleep(100*1000);        
    3dec:	010000b4 	movhi	r4,2
    3df0:	2121a804 	addi	r4,r4,-31072
    3df4:	00100f00 	call	100f0 <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    3df8:	00800074 	movhi	r2,1
    3dfc:	1098d104 	addi	r2,r2,25412
    3e00:	10800017 	ldw	r2,0(r2)
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    3e04:	e0bffb15 	stw	r2,-20(fp)
    while(!bSuccess && !bTimeout){
    3e08:	00002f06 	br	3ec8 <SDLIB_Init+0x1a0>
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
    3e0c:	00800074 	movhi	r2,1
    3e10:	1098d304 	addi	r2,r2,25420
    3e14:	1080050b 	ldhu	r2,20(r2)
    3e18:	10bfffcc 	andi	r2,r2,65535
    3e1c:	1009883a 	mov	r4,r2
    3e20:	000b883a 	mov	r5,zero
    3e24:	00043c00 	call	43c0 <SD_CMD55>
    3e28:	1000021e 	bne	r2,zero,3e34 <SDLIB_Init+0x10c>
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
    3e2c:	0005883a 	mov	r2,zero
    3e30:	00008506 	br	4048 <SDLIB_Init+0x320>
        }else{    
            bSuccess = SD_ACMD41(gSdInfo.HostOCR32, &gSdInfo.OCR32);
    3e34:	00800074 	movhi	r2,1
    3e38:	1098d304 	addi	r2,r2,25420
    3e3c:	10800317 	ldw	r2,12(r2)
    3e40:	1009883a 	mov	r4,r2
    3e44:	01400074 	movhi	r5,1
    3e48:	2958d704 	addi	r5,r5,25436
    3e4c:	00045400 	call	4540 <SD_ACMD41>
    3e50:	e0bff815 	stw	r2,-32(fp)
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
    3e54:	e0bff817 	ldw	r2,-32(fp)
    3e58:	10000c26 	beq	r2,zero,3e8c <SDLIB_Init+0x164>
    3e5c:	00800074 	movhi	r2,1
    3e60:	1098d304 	addi	r2,r2,25420
    3e64:	10800217 	ldw	r2,8(r2)
    3e68:	10000826 	beq	r2,zero,3e8c <SDLIB_Init+0x164>
    3e6c:	00800074 	movhi	r2,1
    3e70:	1098d304 	addi	r2,r2,25420
    3e74:	10800417 	ldw	r2,16(r2)
    3e78:	1090002c 	andhi	r2,r2,16384
    3e7c:	1000031e 	bne	r2,zero,3e8c <SDLIB_Init+0x164>
                gSdInfo.bSDHC = FALSE;
    3e80:	00800074 	movhi	r2,1
    3e84:	1098d304 	addi	r2,r2,25420
    3e88:	10000215 	stw	zero,8(r2)
            }    
            // check timeout
            if (!bSuccess){
    3e8c:	e0bff817 	ldw	r2,-32(fp)
    3e90:	10000d1e 	bne	r2,zero,3ec8 <SDLIB_Init+0x1a0>
    3e94:	00800074 	movhi	r2,1
    3e98:	1098d104 	addi	r2,r2,25412
    3e9c:	10800017 	ldw	r2,0(r2)
                if ((alt_nticks() - TimeStart) > nTimeout){
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bffb17 	ldw	r2,-20(fp)
    3ea8:	1885c83a 	sub	r2,r3,r2
    3eac:	e0fffa17 	ldw	r3,-24(fp)
    3eb0:	1880032e 	bgeu	r3,r2,3ec0 <SDLIB_Init+0x198>
                    SDCARD_ERROR(("ACMD41[SD_APP_OP_COND] fail\r\n"));
                    bTimeout = TRUE;
    3eb4:	00800044 	movi	r2,1
    3eb8:	e0bff915 	stw	r2,-28(fp)
    3ebc:	00000206 	br	3ec8 <SDLIB_Init+0x1a0>
                }else{
                    usleep(10*1000);
    3ec0:	0109c404 	movi	r4,10000
    3ec4:	00100f00 	call	100f0 <usleep>
        SD_CMD0();
        usleep(100*1000);        
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
    while(!bSuccess && !bTimeout){
    3ec8:	e0bff817 	ldw	r2,-32(fp)
    3ecc:	1000021e 	bne	r2,zero,3ed8 <SDLIB_Init+0x1b0>
    3ed0:	e0bff917 	ldw	r2,-28(fp)
    3ed4:	103fcd26 	beq	r2,zero,3e0c <_gp+0xfffe7590>
                    usleep(10*1000);
                }    
            }
        }
    }
    if (!bSuccess){
    3ed8:	e0bff817 	ldw	r2,-32(fp)
    3edc:	1000021e 	bne	r2,zero,3ee8 <SDLIB_Init+0x1c0>
        return FALSE;
    3ee0:	0005883a 	mov	r2,zero
    3ee4:	00005806 	br	4048 <SDLIB_Init+0x320>
    }
   
    //========================== CMD2 ========================    
    // issue cmd2 & wait response 
    // ALL_SEND_CID (CMD2): Asks any card to send the CID numbers on the CMD line
    if (!SD_CMD2(gSdInfo.szCID, sizeof(gSdInfo.szCID))){
    3ee8:	01000074 	movhi	r4,1
    3eec:	2118d884 	addi	r4,r4,25442
    3ef0:	01400444 	movi	r5,17
    3ef4:	00046dc0 	call	46dc <SD_CMD2>
    3ef8:	1000021e 	bne	r2,zero,3f04 <SDLIB_Init+0x1dc>
        SDCARD_ERROR(("CMD2 fail\r\n"));
        return FALSE;
    3efc:	0005883a 	mov	r2,zero
    3f00:	00005106 	br	4048 <SDLIB_Init+0x320>
    SDCARD_TRACE(("--- Power On, Card Identification Mode, Identification State\r\n"));

    //========================== CMD3 ========================        
    // issue cmd3 & wait response, finally get RCA
    // CMD3 (SEND_RELATIVE_ADDR): Ask the card to publish a new relative address (RCA)
    if (!SD_CMD3(&gSdInfo.RCA16)){
    3f04:	01000074 	movhi	r4,1
    3f08:	2118d804 	addi	r4,r4,25440
    3f0c:	00048740 	call	4874 <SD_CMD3>
    3f10:	1000021e 	bne	r2,zero,3f1c <SDLIB_Init+0x1f4>
        SDCARD_ERROR(("CMD3 fail\r\n"));
        return FALSE;
    3f14:	0005883a 	mov	r2,zero
    3f18:	00004b06 	br	4048 <SDLIB_Init+0x320>
    //### Standby-by state in Data-transfer mode
    
    //========================== CMD9 ========================
    SDCARD_DEBUG(("--- enter data-transfer mode, Standby state\r\n"));
    // issue cmd9 with given RCA & wait response 
    if (!SD_CMD9(gSdInfo.RCA16, gSdInfo.szCSD, sizeof(gSdInfo.szCSD))){
    3f1c:	00800074 	movhi	r2,1
    3f20:	1098d304 	addi	r2,r2,25420
    3f24:	1080050b 	ldhu	r2,20(r2)
    3f28:	10bfffcc 	andi	r2,r2,65535
    3f2c:	1009883a 	mov	r4,r2
    3f30:	01400074 	movhi	r5,1
    3f34:	2958dcc4 	addi	r5,r5,25459
    3f38:	01800444 	movi	r6,17
    3f3c:	0004a100 	call	4a10 <SD_CMD9>
    3f40:	1000021e 	bne	r2,zero,3f4c <SDLIB_Init+0x224>
        SDCARD_DEBUG(("CMD9 fail\r\n"));
        return FALSE;
    3f44:	0005883a 	mov	r2,zero
    3f48:	00003f06 	br	4048 <SDLIB_Init+0x320>
    }
    
    //========================== CMD10 ========================
    // richard add  (query card identification)  
    if (!SD_CMD10(gSdInfo.RCA16, szThisCID, sizeof(szThisCID))){
    3f4c:	00800074 	movhi	r2,1
    3f50:	1098d304 	addi	r2,r2,25420
    3f54:	1080050b 	ldhu	r2,20(r2)
    3f58:	10ffffcc 	andi	r3,r2,65535
    3f5c:	e0bffc04 	addi	r2,fp,-16
    3f60:	1809883a 	mov	r4,r3
    3f64:	100b883a 	mov	r5,r2
    3f68:	01800404 	movi	r6,16
    3f6c:	0004bd00 	call	4bd0 <SD_CMD10>
    3f70:	1000021e 	bne	r2,zero,3f7c <SDLIB_Init+0x254>
        SDCARD_DEBUG(("CMD10 fail\r\n"));
        return FALSE;
    3f74:	0005883a 	mov	r2,zero
    3f78:	00003306 	br	4048 <SDLIB_Init+0x320>
    // issue cmd9 with given RCA & wait response
    
    //========================== CMD7 ========================
    // richard: issue cmd7 to enter transfer state
    // cmd7: toggle between Standy-by and Trasfer State
    if (!SD_CMD7(gSdInfo.RCA16)){
    3f7c:	00800074 	movhi	r2,1
    3f80:	1098d304 	addi	r2,r2,25420
    3f84:	1080050b 	ldhu	r2,20(r2)
    3f88:	10bfffcc 	andi	r2,r2,65535
    3f8c:	1009883a 	mov	r4,r2
    3f90:	0004d900 	call	4d90 <SD_CMD7>
    3f94:	1000021e 	bne	r2,zero,3fa0 <SDLIB_Init+0x278>
        SDCARD_DEBUG(("CMD7 fail\r\n"));
        return FALSE;
    3f98:	0005883a 	mov	r2,zero
    3f9c:	00002a06 	br	4048 <SDLIB_Init+0x320>
    //### Transfer state in Data-transfer mode     
    SDCARD_DEBUG(("--- enter data-transfer mode, Transfer state\r\n"));
       
    //========================== CMD16 ========================   
    // issue cmd16 (select a block length) & wait response
    if (!SD_CMD16(512)){  // 512 bytes
    3fa0:	01008004 	movi	r4,512
    3fa4:	0004f100 	call	4f10 <SD_CMD16>
    3fa8:	1000021e 	bne	r2,zero,3fb4 <SDLIB_Init+0x28c>
        SDCARD_DEBUG(("CMD16 fail\r\n"));
        return FALSE;
    3fac:	0005883a 	mov	r2,zero
    3fb0:	00002506 	br	4048 <SDLIB_Init+0x320>
    }       
    
    if (gSdInfo.bSupport4Bits){ 
    3fb4:	00800074 	movhi	r2,1
    3fb8:	1098d304 	addi	r2,r2,25420
    3fbc:	10800017 	ldw	r2,0(r2)
    3fc0:	10002026 	beq	r2,zero,4044 <SDLIB_Init+0x31c>
        // richard add: set bus width
        // Note. This command is valid only in "transfer state", i.e. after CMD7 is issued

        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
    3fc4:	00800074 	movhi	r2,1
    3fc8:	1098d304 	addi	r2,r2,25420
    3fcc:	1080050b 	ldhu	r2,20(r2)
    3fd0:	10bfffcc 	andi	r2,r2,65535
    3fd4:	1009883a 	mov	r4,r2
    3fd8:	01400104 	movi	r5,4
    3fdc:	00043c00 	call	43c0 <SD_CMD55>
    3fe0:	1000021e 	bne	r2,zero,3fec <SDLIB_Init+0x2c4>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
    3fe4:	0005883a 	mov	r2,zero
    3fe8:	00001706 	br	4048 <SDLIB_Init+0x320>
        }       
    
        SDCARD_DEBUG(("ACMD6[SET_BUS_WIDTH], 4-bit\r\n"));
        if (!SD_ACMD6(TRUE, SD_STATE_TRAN)){  // 4-bit mode
    3fec:	01000044 	movi	r4,1
    3ff0:	01400104 	movi	r5,4
    3ff4:	00050b00 	call	50b0 <SD_ACMD6>
    3ff8:	1000021e 	bne	r2,zero,4004 <SDLIB_Init+0x2dc>
            SDCARD_DEBUG(("ACMD6 NG\r\n"));
            return FALSE;
    3ffc:	0005883a 	mov	r2,zero
    4000:	00001106 	br	4048 <SDLIB_Init+0x320>
        }         
    
    
        //
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
    4004:	00800074 	movhi	r2,1
    4008:	1098d304 	addi	r2,r2,25420
    400c:	1080050b 	ldhu	r2,20(r2)
    4010:	10bfffcc 	andi	r2,r2,65535
    4014:	1009883a 	mov	r4,r2
    4018:	01400104 	movi	r5,4
    401c:	00043c00 	call	43c0 <SD_CMD55>
    4020:	1000021e 	bne	r2,zero,402c <SDLIB_Init+0x304>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
    4024:	0005883a 	mov	r2,zero
    4028:	00000706 	br	4048 <SDLIB_Init+0x320>
        }    
    
       
        SDCARD_DEBUG(("ACMD42[SET_CLR_CARD_DETECT], connect card\r\n"));
        if (!SD_ACMD42(TRUE, SD_STATE_TRAN)){  // connect card
    402c:	01000044 	movi	r4,1
    4030:	01400104 	movi	r5,4
    4034:	000523c0 	call	523c <SD_ACMD42>
    4038:	1000021e 	bne	r2,zero,4044 <SDLIB_Init+0x31c>
            SDCARD_DEBUG(("ACMD42 NG\r\n"));
            return FALSE;
    403c:	0005883a 	mov	r2,zero
    4040:	00000106 	br	4048 <SDLIB_Init+0x320>
        printf("!!!!!write ng\r\n");
#endif
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
    4044:	00800044 	movi	r2,1
}
    4048:	e037883a 	mov	sp,fp
    404c:	dfc00117 	ldw	ra,4(sp)
    4050:	df000017 	ldw	fp,0(sp)
    4054:	dec00204 	addi	sp,sp,8
    4058:	f800283a 	ret

0000405c <SDLIB_ReadBlock512>:


bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff)
{
    405c:	defffa04 	addi	sp,sp,-24
    4060:	dfc00515 	stw	ra,20(sp)
    4064:	df000415 	stw	fp,16(sp)
    4068:	df000404 	addi	fp,sp,16
    406c:	e13ffe15 	stw	r4,-8(fp)
    4070:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
    4074:	00800074 	movhi	r2,1
    4078:	1098d304 	addi	r2,r2,25420
    407c:	10800217 	ldw	r2,8(r2)
    4080:	10000326 	beq	r2,zero,4090 <SDLIB_ReadBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
    4084:	e0bffe17 	ldw	r2,-8(fp)
    4088:	e0bffc15 	stw	r2,-16(fp)
    408c:	00000306 	br	409c <SDLIB_ReadBlock512+0x40>
    else 
        addr = block_number * 512;
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	1004927a 	slli	r2,r2,9
    4098:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD17(addr, SD_STATE_TRAN)){  // 4-bit mode
    409c:	e13ffc17 	ldw	r4,-16(fp)
    40a0:	01400104 	movi	r5,4
    40a4:	00053bc0 	call	53bc <SD_CMD17>
    40a8:	1000021e 	bne	r2,zero,40b4 <SDLIB_ReadBlock512+0x58>
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
    40ac:	0005883a 	mov	r2,zero
    40b0:	00000506 	br	40c8 <SDLIB_ReadBlock512+0x6c>
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
    40b4:	e13fff17 	ldw	r4,-4(fp)
    40b8:	01408004 	movi	r5,512
    40bc:	000570c0 	call	570c <SD_ReadData>
    40c0:	e0bffd15 	stw	r2,-12(fp)
    
    //
    return bSuccess;
    40c4:	e0bffd17 	ldw	r2,-12(fp)
}
    40c8:	e037883a 	mov	sp,fp
    40cc:	dfc00117 	ldw	ra,4(sp)
    40d0:	df000017 	ldw	fp,0(sp)
    40d4:	dec00204 	addi	sp,sp,8
    40d8:	f800283a 	ret

000040dc <SDLIB_WriteBlock512>:

bool SDLIB_WriteBlock512(alt_u32 block_number, alt_u8 *szDataWrite)
{
    40dc:	defffa04 	addi	sp,sp,-24
    40e0:	dfc00515 	stw	ra,20(sp)
    40e4:	df000415 	stw	fp,16(sp)
    40e8:	df000404 	addi	fp,sp,16
    40ec:	e13ffe15 	stw	r4,-8(fp)
    40f0:	e17fff15 	stw	r5,-4(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
    40f4:	00800074 	movhi	r2,1
    40f8:	1098d304 	addi	r2,r2,25420
    40fc:	10800217 	ldw	r2,8(r2)
    4100:	10000326 	beq	r2,zero,4110 <SDLIB_WriteBlock512+0x34>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
    4104:	e0bffe17 	ldw	r2,-8(fp)
    4108:	e0bffc15 	stw	r2,-16(fp)
    410c:	00000306 	br	411c <SDLIB_WriteBlock512+0x40>
    else 
        addr = block_number * 512;
    4110:	e0bffe17 	ldw	r2,-8(fp)
    4114:	1004927a 	slli	r2,r2,9
    4118:	e0bffc15 	stw	r2,-16(fp)
    if (!SD_CMD24(addr, SD_STATE_TRAN)){ 
    411c:	e13ffc17 	ldw	r4,-16(fp)
    4120:	01400104 	movi	r5,4
    4124:	00055640 	call	5564 <SD_CMD24>
    4128:	1000021e 	bne	r2,zero,4134 <SDLIB_WriteBlock512+0x58>
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
    412c:	0005883a 	mov	r2,zero
    4130:	00000506 	br	4148 <SDLIB_WriteBlock512+0x6c>
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
    4134:	e13fff17 	ldw	r4,-4(fp)
    4138:	01408004 	movi	r5,512
    413c:	000574c0 	call	574c <SD_WriteData>
    4140:	e0bffd15 	stw	r2,-12(fp)
    
    //
    return bSuccess;
    4144:	e0bffd17 	ldw	r2,-12(fp)
}
    4148:	e037883a 	mov	sp,fp
    414c:	dfc00117 	ldw	ra,4(sp)
    4150:	df000017 	ldw	fp,0(sp)
    4154:	dec00204 	addi	sp,sp,8
    4158:	f800283a 	ret

0000415c <SD_Init>:
// internal function
alt_u32 ArrayToU32(alt_u8 szData[]);

//============================================================

void SD_Init(void){
    415c:	defffe04 	addi	sp,sp,-8
    4160:	dfc00115 	stw	ra,4(sp)
    4164:	df000015 	stw	fp,0(sp)
    4168:	d839883a 	mov	fp,sp
    SDHAL_Init();
    416c:	00036180 	call	3618 <SDHAL_Init>
}
    4170:	e037883a 	mov	sp,fp
    4174:	dfc00117 	ldw	ra,4(sp)
    4178:	df000017 	ldw	fp,0(sp)
    417c:	dec00204 	addi	sp,sp,8
    4180:	f800283a 	ret

00004184 <SD_IsSupport4Bits>:

bool SD_IsSupport4Bits(void){
    4184:	defffe04 	addi	sp,sp,-8
    4188:	dfc00115 	stw	ra,4(sp)
    418c:	df000015 	stw	fp,0(sp)
    4190:	d839883a 	mov	fp,sp
    return SDHAL_IsSupport4Bits();
    4194:	00035ec0 	call	35ec <SDHAL_IsSupport4Bits>
}
    4198:	e037883a 	mov	sp,fp
    419c:	dfc00117 	ldw	ra,4(sp)
    41a0:	df000017 	ldw	fp,0(sp)
    41a4:	dec00204 	addi	sp,sp,8
    41a8:	f800283a 	ret

000041ac <SD_CMD0>:



void SD_CMD0(void){
    41ac:	defffc04 	addi	sp,sp,-16
    41b0:	dfc00315 	stw	ra,12(sp)
    41b4:	df000215 	stw	fp,8(sp)
    41b8:	df000204 	addi	fp,sp,8
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    41bc:	00801004 	movi	r2,64
    41c0:	e0bffe45 	stb	r2,-7(fp)
    41c4:	e03ffe85 	stb	zero,-6(fp)
    41c8:	e03ffec5 	stb	zero,-5(fp)
    41cc:	e03fff05 	stb	zero,-4(fp)
    41d0:	e03fff45 	stb	zero,-3(fp)
    41d4:	e03fff85 	stb	zero,-2(fp)

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
    41d8:	e0bffe43 	ldbu	r2,-7(fp)
    41dc:	e0bffe45 	stb	r2,-7(fp)
    crc = crc7(0, szCmd, 5);
    41e0:	e0bffe44 	addi	r2,fp,-7
    41e4:	0009883a 	mov	r4,zero
    41e8:	100b883a 	mov	r5,r2
    41ec:	01800144 	movi	r6,5
    41f0:	00035680 	call	3568 <crc7>
    41f4:	e0bffe05 	stb	r2,-8(fp)
    szCmd[5] = (crc << 1) | 0x01;
    41f8:	e0bffe03 	ldbu	r2,-8(fp)
    41fc:	1085883a 	add	r2,r2,r2
    4200:	10800054 	ori	r2,r2,1
    4204:	e0bfff85 	stb	r2,-2(fp)
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4208:	e0bffe44 	addi	r2,fp,-7
    420c:	1009883a 	mov	r4,r2
    4210:	01400184 	movi	r5,6
    4214:	00036840 	call	3684 <SDHAL_SendCmd>
    
    // A command with no response. 8 clocks after the host command end bit.
    // !!!!!!!!!! Note. Remember to add dummy clock here
    SDHAL_DummyClock(8);
    4218:	01000204 	movi	r4,8
    421c:	0003cc80 	call	3cc8 <SDHAL_DummyClock>
    
}
    4220:	e037883a 	mov	sp,fp
    4224:	dfc00117 	ldw	ra,4(sp)
    4228:	df000017 	ldw	fp,0(sp)
    422c:	dec00204 	addi	sp,sp,8
    4230:	f800283a 	ret

00004234 <SD_CMD8>:


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
    4234:	defff704 	addi	sp,sp,-36
    4238:	dfc00815 	stw	ra,32(sp)
    423c:	df000715 	stw	fp,28(sp)
    4240:	df000704 	addi	fp,sp,28
    4244:	2007883a 	mov	r3,r4
    4248:	2805883a 	mov	r2,r5
    424c:	e0fffe05 	stb	r3,-8(fp)
    4250:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 8;
    4254:	00800204 	movi	r2,8
    4258:	e0bffa05 	stb	r2,-24(fp)
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    425c:	00801004 	movi	r2,64
    4260:	e0bffc45 	stb	r2,-15(fp)
    4264:	e03ffc85 	stb	zero,-14(fp)
    4268:	e03ffcc5 	stb	zero,-13(fp)
    426c:	e03ffd05 	stb	zero,-12(fp)
    4270:	e03ffd45 	stb	zero,-11(fp)
    4274:	e03ffd85 	stb	zero,-10(fp)

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    4278:	e0fffc43 	ldbu	r3,-15(fp)
    427c:	e0bffa03 	ldbu	r2,-24(fp)
    4280:	1884b03a 	or	r2,r3,r2
    4284:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (VolId & 0x0F);
    4288:	e0bffd03 	ldbu	r2,-12(fp)
    428c:	1007883a 	mov	r3,r2
    4290:	e0bffe03 	ldbu	r2,-8(fp)
    4294:	108003cc 	andi	r2,r2,15
    4298:	1884b03a 	or	r2,r3,r2
    429c:	e0bffd05 	stb	r2,-12(fp)
    szCmd[4] = TestPattern;
    42a0:	e0bfff03 	ldbu	r2,-4(fp)
    42a4:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
    42a8:	e0bffc44 	addi	r2,fp,-15
    42ac:	0009883a 	mov	r4,zero
    42b0:	100b883a 	mov	r5,r2
    42b4:	01800144 	movi	r6,5
    42b8:	00035680 	call	3568 <crc7>
    42bc:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
    42c0:	e0bffa43 	ldbu	r2,-23(fp)
    42c4:	1085883a 	add	r2,r2,r2
    42c8:	10800054 	ori	r2,r2,1
    42cc:	e0bffd85 	stb	r2,-10(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    42d0:	e0bffc44 	addi	r2,fp,-15
    42d4:	1009883a 	mov	r4,r2
    42d8:	01400184 	movi	r5,6
    42dc:	00036840 	call	3684 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    42e0:	e0bffac4 	addi	r2,fp,-21
    42e4:	1009883a 	mov	r4,r2
    42e8:	01400184 	movi	r5,6
    42ec:	00037780 	call	3778 <SDHAL_GetResponse>
    42f0:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
    42f4:	e0bff917 	ldw	r2,-28(fp)
    42f8:	10002b26 	beq	r2,zero,43a8 <SD_CMD8+0x174>
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    42fc:	e0bff917 	ldw	r2,-28(fp)
    4300:	10000526 	beq	r2,zero,4318 <SD_CMD8+0xe4>
    4304:	e0bffac3 	ldbu	r2,-21(fp)
    4308:	10c03fcc 	andi	r3,r2,255
    430c:	e0bffa03 	ldbu	r2,-24(fp)
    4310:	18800126 	beq	r3,r2,4318 <SD_CMD8+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
    4314:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check voltage supplied        
        if (bSuccess && szResponse[3] != VolId){
    4318:	e0bff917 	ldw	r2,-28(fp)
    431c:	10000526 	beq	r2,zero,4334 <SD_CMD8+0x100>
    4320:	e0bffb83 	ldbu	r2,-18(fp)
    4324:	10c03fcc 	andi	r3,r2,255
    4328:	e0bffe03 	ldbu	r2,-8(fp)
    432c:	18800126 	beq	r3,r2,4334 <SD_CMD8+0x100>
            SDCARD_DEBUG(("CMD%d Response: Invalid Void Id\r\n", Cmd));
            bSuccess = FALSE;
    4330:	e03ff915 	stw	zero,-28(fp)
        }        

        // check test pattern        
        if (bSuccess && szResponse[4] != TestPattern){
    4334:	e0bff917 	ldw	r2,-28(fp)
    4338:	10000526 	beq	r2,zero,4350 <SD_CMD8+0x11c>
    433c:	e0bffbc3 	ldbu	r2,-17(fp)
    4340:	10c03fcc 	andi	r3,r2,255
    4344:	e0bfff03 	ldbu	r2,-4(fp)
    4348:	18800126 	beq	r3,r2,4350 <SD_CMD8+0x11c>
            SDCARD_DEBUG(("CMD%d Response: Invalid Test pattern\r\n", Cmd));
            bSuccess = FALSE;
    434c:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
    4350:	e0bff917 	ldw	r2,-28(fp)
    4354:	10000d26 	beq	r2,zero,438c <SD_CMD8+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    4358:	e0bffac4 	addi	r2,fp,-21
    435c:	0009883a 	mov	r4,zero
    4360:	100b883a 	mov	r5,r2
    4364:	01800144 	movi	r6,5
    4368:	00035680 	call	3568 <crc7>
    436c:	e0bffa85 	stb	r2,-22(fp)
            if (crc != (szResponse[5] >> 1)){
    4370:	e0bffc03 	ldbu	r2,-16(fp)
    4374:	10803fcc 	andi	r2,r2,255
    4378:	1004d07a 	srli	r2,r2,1
    437c:	10c03fcc 	andi	r3,r2,255
    4380:	e0bffa83 	ldbu	r2,-22(fp)
    4384:	18800126 	beq	r3,r2,438c <SD_CMD8+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    4388:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    438c:	e0bff917 	ldw	r2,-28(fp)
    4390:	10000526 	beq	r2,zero,43a8 <SD_CMD8+0x174>
    4394:	e0bffc03 	ldbu	r2,-16(fp)
    4398:	10803fcc 	andi	r2,r2,255
    439c:	1080004c 	andi	r2,r2,1
    43a0:	1000011e 	bne	r2,zero,43a8 <SD_CMD8+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    43a4:	e03ff915 	stw	zero,-28(fp)
        }
        
         
    }
    
    return bSuccess;
    43a8:	e0bff917 	ldw	r2,-28(fp)
    
}
    43ac:	e037883a 	mov	sp,fp
    43b0:	dfc00117 	ldw	ra,4(sp)
    43b4:	df000017 	ldw	fp,0(sp)
    43b8:	dec00204 	addi	sp,sp,8
    43bc:	f800283a 	ret

000043c0 <SD_CMD55>:

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
    43c0:	defff404 	addi	sp,sp,-48
    43c4:	dfc00b15 	stw	ra,44(sp)
    43c8:	df000a15 	stw	fp,40(sp)
    43cc:	df000a04 	addi	fp,sp,40
    43d0:	2007883a 	mov	r3,r4
    43d4:	2805883a 	mov	r2,r5
    43d8:	e0fffe0d 	sth	r3,-8(fp)
    43dc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 55;
    43e0:	00800dc4 	movi	r2,55
    43e4:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    43e8:	00801004 	movi	r2,64
    43ec:	e0bffbc5 	stb	r2,-17(fp)
    43f0:	e03ffc05 	stb	zero,-16(fp)
    43f4:	e03ffc45 	stb	zero,-15(fp)
    43f8:	e03ffc85 	stb	zero,-14(fp)
    43fc:	e03ffcc5 	stb	zero,-13(fp)
    4400:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    4404:	e0fffbc3 	ldbu	r3,-17(fp)
    4408:	e0bff703 	ldbu	r2,-36(fp)
    440c:	1884b03a 	or	r2,r3,r2
    4410:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] = RCA16 >> 8;
    4414:	e0bffe0b 	ldhu	r2,-8(fp)
    4418:	1004d23a 	srli	r2,r2,8
    441c:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] = RCA16 & 0xFF;
    4420:	e0bffe0b 	ldhu	r2,-8(fp)
    4424:	e0bffc45 	stb	r2,-15(fp)
    crc = crc7(0, szCmd, 5);
    4428:	e0bffbc4 	addi	r2,fp,-17
    442c:	0009883a 	mov	r4,zero
    4430:	100b883a 	mov	r5,r2
    4434:	01800144 	movi	r6,5
    4438:	00035680 	call	3568 <crc7>
    443c:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
    4440:	e0bff743 	ldbu	r2,-35(fp)
    4444:	1085883a 	add	r2,r2,r2
    4448:	10800054 	ori	r2,r2,1
    444c:	e0bffd05 	stb	r2,-12(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4450:	e0bffbc4 	addi	r2,fp,-17
    4454:	1009883a 	mov	r4,r2
    4458:	01400184 	movi	r5,6
    445c:	00036840 	call	3684 <SDHAL_SendCmd>
  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    4460:	e0bffa44 	addi	r2,fp,-23
    4464:	1009883a 	mov	r4,r2
    4468:	01400184 	movi	r5,6
    446c:	00037780 	call	3778 <SDHAL_GetResponse>
    4470:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
    4474:	e0bff617 	ldw	r2,-40(fp)
    4478:	10002b26 	beq	r2,zero,4528 <SD_CMD55+0x168>
        alt_u32 CardStatus, ExpectedStatus;  // define in 4.10
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    447c:	e0bff617 	ldw	r2,-40(fp)
    4480:	10000526 	beq	r2,zero,4498 <SD_CMD55+0xd8>
    4484:	e0bffa43 	ldbu	r2,-23(fp)
    4488:	10c03fcc 	andi	r3,r2,255
    448c:	e0bff703 	ldbu	r2,-36(fp)
    4490:	18800126 	beq	r3,r2,4498 <SD_CMD55+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
    4494:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    4498:	e0bffa44 	addi	r2,fp,-23
    449c:	10800044 	addi	r2,r2,1
    44a0:	1009883a 	mov	r4,r2
    44a4:	000578c0 	call	578c <ArrayToU32>
    44a8:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
    44ac:	e0bfff03 	ldbu	r2,-4(fp)
    44b0:	108003cc 	andi	r2,r2,15
    44b4:	1004927a 	slli	r2,r2,9
    44b8:	10804814 	ori	r2,r2,288
    44bc:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
    44c0:	e0fff817 	ldw	r3,-32(fp)
    44c4:	e0bff917 	ldw	r2,-28(fp)
    44c8:	18800126 	beq	r3,r2,44d0 <SD_CMD55+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    44cc:	e03ff615 	stw	zero,-40(fp)
        }
        
        // check crc
        if (bSuccess){
    44d0:	e0bff617 	ldw	r2,-40(fp)
    44d4:	10000d26 	beq	r2,zero,450c <SD_CMD55+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    44d8:	e0bffa44 	addi	r2,fp,-23
    44dc:	0009883a 	mov	r4,zero
    44e0:	100b883a 	mov	r5,r2
    44e4:	01800144 	movi	r6,5
    44e8:	00035680 	call	3568 <crc7>
    44ec:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
    44f0:	e0bffb83 	ldbu	r2,-18(fp)
    44f4:	10803fcc 	andi	r2,r2,255
    44f8:	1004d07a 	srli	r2,r2,1
    44fc:	10c03fcc 	andi	r3,r2,255
    4500:	e0bffa03 	ldbu	r2,-24(fp)
    4504:	18800126 	beq	r3,r2,450c <SD_CMD55+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    4508:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    450c:	e0bff617 	ldw	r2,-40(fp)
    4510:	10000526 	beq	r2,zero,4528 <SD_CMD55+0x168>
    4514:	e0bffb83 	ldbu	r2,-18(fp)
    4518:	10803fcc 	andi	r2,r2,255
    451c:	1080004c 	andi	r2,r2,1
    4520:	1000011e 	bne	r2,zero,4528 <SD_CMD55+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    4524:	e03ff615 	stw	zero,-40(fp)
        }
          
    }
    
    return bSuccess;
    4528:	e0bff617 	ldw	r2,-40(fp)
    
}
    452c:	e037883a 	mov	sp,fp
    4530:	dfc00117 	ldw	ra,4(sp)
    4534:	df000017 	ldw	fp,0(sp)
    4538:	dec00204 	addi	sp,sp,8
    453c:	f800283a 	ret

00004540 <SD_ACMD41>:

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
    4540:	defff504 	addi	sp,sp,-44
    4544:	dfc00a15 	stw	ra,40(sp)
    4548:	df000915 	stw	fp,36(sp)
    454c:	df000904 	addi	fp,sp,36
    4550:	e13ffe15 	stw	r4,-8(fp)
    4554:	e17fff15 	stw	r5,-4(fp)
    alt_u32 OCR;
    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 41;
    4558:	00800a44 	movi	r2,41
    455c:	e0bffa05 	stb	r2,-24(fp)
    //alt_u8 szCmd[6]  = {0x40,0x0f,0xf0,0x00,0x00, 0x00}, crc;
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
    4560:	00801004 	movi	r2,64
    4564:	e0bffc05 	stb	r2,-16(fp)
    4568:	e03ffc45 	stb	zero,-15(fp)
    456c:	e03ffc85 	stb	zero,-14(fp)
    4570:	e03ffcc5 	stb	zero,-13(fp)
    4574:	e03ffd05 	stb	zero,-12(fp)
    4578:	e03ffd45 	stb	zero,-11(fp)
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    457c:	e0fffc03 	ldbu	r3,-16(fp)
    4580:	e0bffa03 	ldbu	r2,-24(fp)
    4584:	1884b03a 	or	r2,r3,r2
    4588:	e0bffc05 	stb	r2,-16(fp)
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
    458c:	e0fffc43 	ldbu	r3,-15(fp)
    4590:	e0bffe17 	ldw	r2,-8(fp)
    4594:	1004d63a 	srli	r2,r2,24
    4598:	1080100c 	andi	r2,r2,64
    459c:	1884b03a 	or	r2,r3,r2
    45a0:	e0bffc45 	stb	r2,-15(fp)
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
    45a4:	e0bffe17 	ldw	r2,-8(fp)
    45a8:	1004d43a 	srli	r2,r2,16
    45ac:	e0bffc85 	stb	r2,-14(fp)
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
    45b0:	e0bffe17 	ldw	r2,-8(fp)
    45b4:	1004d23a 	srli	r2,r2,8
    45b8:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[4] = HostOCR32 & 0xFF;
    45bc:	e0bffe17 	ldw	r2,-8(fp)
    45c0:	e0bffd05 	stb	r2,-12(fp)
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
    45c4:	e0bffc04 	addi	r2,fp,-16
    45c8:	0009883a 	mov	r4,zero
    45cc:	100b883a 	mov	r5,r2
    45d0:	01800144 	movi	r6,5
    45d4:	00035680 	call	3568 <crc7>
    45d8:	e0bffa45 	stb	r2,-23(fp)
    szCmd[5] = (crc << 1) | 0x01;
    45dc:	e0bffa43 	ldbu	r2,-23(fp)
    45e0:	1085883a 	add	r2,r2,r2
    45e4:	10800054 	ori	r2,r2,1
    45e8:	e0bffd45 	stb	r2,-11(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    45ec:	e0bffc04 	addi	r2,fp,-16
    45f0:	1009883a 	mov	r4,r2
    45f4:	01400184 	movi	r5,6
    45f8:	00036840 	call	3684 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    45fc:	e0bffa84 	addi	r2,fp,-22
    4600:	1009883a 	mov	r4,r2
    4604:	01400184 	movi	r5,6
    4608:	00037780 	call	3778 <SDHAL_GetResponse>
    460c:	e0bff815 	stw	r2,-32(fp)
    
    if (bSuccess){
    4610:	e0bff817 	ldw	r2,-32(fp)
    4614:	10002626 	beq	r2,zero,46b0 <SD_ACMD41+0x170>
        int i;
        // check command
        if (bSuccess && szResponse[0] != 0x3F){
    4618:	e0bff817 	ldw	r2,-32(fp)
    461c:	10000526 	beq	r2,zero,4634 <SD_ACMD41+0xf4>
    4620:	e0bffa83 	ldbu	r2,-22(fp)
    4624:	10803fcc 	andi	r2,r2,255
    4628:	10800fe0 	cmpeqi	r2,r2,63
    462c:	1000011e 	bne	r2,zero,4634 <SD_ACMD41+0xf4>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
    4630:	e03ff815 	stw	zero,-32(fp)
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
    4634:	e03ff715 	stw	zero,-36(fp)
        for(i=0;i<4;i++){
    4638:	e03ff915 	stw	zero,-28(fp)
    463c:	00000f06 	br	467c <SD_ACMD41+0x13c>
            OCR <<= 8;
    4640:	e0bff717 	ldw	r2,-36(fp)
    4644:	1004923a 	slli	r2,r2,8
    4648:	e0bff715 	stw	r2,-36(fp)
            OCR |= szResponse[i+1];
    464c:	e0bff917 	ldw	r2,-28(fp)
    4650:	10800044 	addi	r2,r2,1
    4654:	e0fffa84 	addi	r3,fp,-22
    4658:	1885883a 	add	r2,r3,r2
    465c:	10800003 	ldbu	r2,0(r2)
    4660:	10803fcc 	andi	r2,r2,255
    4664:	e0fff717 	ldw	r3,-36(fp)
    4668:	1884b03a 	or	r2,r3,r2
    466c:	e0bff715 	stw	r2,-36(fp)
            bSuccess = FALSE;
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
        for(i=0;i<4;i++){
    4670:	e0bff917 	ldw	r2,-28(fp)
    4674:	10800044 	addi	r2,r2,1
    4678:	e0bff915 	stw	r2,-28(fp)
    467c:	e0bff917 	ldw	r2,-28(fp)
    4680:	10800110 	cmplti	r2,r2,4
    4684:	103fee1e 	bne	r2,zero,4640 <_gp+0xfffe7dc4>
            OCR <<= 8;
            OCR |= szResponse[i+1];
        }           
        
        //!!!!!!!!!! note. bit31(Card power up status bit) is LOW when the card is busy.
        if ((OCR & 0x80000000) != 0x80000000){
    4688:	e0bff717 	ldw	r2,-36(fp)
    468c:	10000116 	blt	r2,zero,4694 <SD_ACMD41+0x154>
            // busy
            SDCARD_DEBUG(("ACMD%d Response: card is busy\r\n", Cmd));
            bSuccess = FALSE;
    4690:	e03ff815 	stw	zero,-32(fp)
        } 
        
        // check reserved bits and end-bits
        if (bSuccess && (szResponse[5] != 0xFF)){
    4694:	e0bff817 	ldw	r2,-32(fp)
    4698:	10000526 	beq	r2,zero,46b0 <SD_ACMD41+0x170>
    469c:	e0bffbc3 	ldbu	r2,-17(fp)
    46a0:	10803fcc 	andi	r2,r2,255
    46a4:	10803fe0 	cmpeqi	r2,r2,255
    46a8:	1000011e 	bne	r2,zero,46b0 <SD_ACMD41+0x170>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved & end-bits\r\n", Cmd));
            bSuccess = FALSE;
    46ac:	e03ff815 	stw	zero,-32(fp)
        }
          
    }      
    
   if (bSuccess)
    46b0:	e0bff817 	ldw	r2,-32(fp)
    46b4:	10000326 	beq	r2,zero,46c4 <SD_ACMD41+0x184>
      *pOCR32 = OCR;  
    46b8:	e0bfff17 	ldw	r2,-4(fp)
    46bc:	e0fff717 	ldw	r3,-36(fp)
    46c0:	10c00015 	stw	r3,0(r2)

    return bSuccess;
    46c4:	e0bff817 	ldw	r2,-32(fp)
}
    46c8:	e037883a 	mov	sp,fp
    46cc:	dfc00117 	ldw	ra,4(sp)
    46d0:	df000017 	ldw	fp,0(sp)
    46d4:	dec00204 	addi	sp,sp,8
    46d8:	f800283a 	ret

000046dc <SD_CMD2>:

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
    46dc:	defff204 	addi	sp,sp,-56
    46e0:	dfc00d15 	stw	ra,52(sp)
    46e4:	df000c15 	stw	fp,48(sp)
    46e8:	df000c04 	addi	fp,sp,48
    46ec:	e13ffe15 	stw	r4,-8(fp)
    46f0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[17];  // 136/8 = 17
    const alt_u8 Cmd = 2;
    46f4:	00800084 	movi	r2,2
    46f8:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    46fc:	00801004 	movi	r2,64
    4700:	e0bffc05 	stb	r2,-16(fp)
    4704:	e03ffc45 	stb	zero,-15(fp)
    4708:	e03ffc85 	stb	zero,-14(fp)
    470c:	e03ffcc5 	stb	zero,-13(fp)
    4710:	e03ffd05 	stb	zero,-12(fp)
    4714:	e03ffd45 	stb	zero,-11(fp)

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    4718:	e0fffc03 	ldbu	r3,-16(fp)
    471c:	e0bff703 	ldbu	r2,-36(fp)
    4720:	1884b03a 	or	r2,r3,r2
    4724:	e0bffc05 	stb	r2,-16(fp)
    crc = crc7(0, szCmd, 5);
    4728:	e0bffc04 	addi	r2,fp,-16
    472c:	0009883a 	mov	r4,zero
    4730:	100b883a 	mov	r5,r2
    4734:	01800144 	movi	r6,5
    4738:	00035680 	call	3568 <crc7>
    473c:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
    4740:	e0bff743 	ldbu	r2,-35(fp)
    4744:	1085883a 	add	r2,r2,r2
    4748:	10800054 	ori	r2,r2,1
    474c:	e0bffd45 	stb	r2,-11(fp)
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4750:	e0bffc04 	addi	r2,fp,-16
    4754:	1009883a 	mov	r4,r2
    4758:	01400184 	movi	r5,6
    475c:	00036840 	call	3684 <SDHAL_SendCmd>
  //  sd_Ncr();
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    4760:	e0bff7c4 	addi	r2,fp,-33
    4764:	1009883a 	mov	r4,r2
    4768:	01400444 	movi	r5,17
    476c:	00037780 	call	3778 <SDHAL_GetResponse>
    4770:	e0bff415 	stw	r2,-48(fp)
    
    // check response content
    if (bSuccess){
    4774:	e0bff417 	ldw	r2,-48(fp)
    4778:	10001e26 	beq	r2,zero,47f4 <SD_CMD2+0x118>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
    477c:	e0bff417 	ldw	r2,-48(fp)
    4780:	10000526 	beq	r2,zero,4798 <SD_CMD2+0xbc>
    4784:	e0bff7c3 	ldbu	r2,-33(fp)
    4788:	10803fcc 	andi	r2,r2,255
    478c:	10800fe0 	cmpeqi	r2,r2,63
    4790:	1000011e 	bne	r2,zero,4798 <SD_CMD2+0xbc>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    4794:	e03ff415 	stw	zero,-48(fp)
        }
        
        
        // check crc
        if (bSuccess){
    4798:	e0bff417 	ldw	r2,-48(fp)
    479c:	10000e26 	beq	r2,zero,47d8 <SD_CMD2+0xfc>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
    47a0:	e0bff7c4 	addi	r2,fp,-33
    47a4:	10800044 	addi	r2,r2,1
    47a8:	0009883a 	mov	r4,zero
    47ac:	100b883a 	mov	r5,r2
    47b0:	018003c4 	movi	r6,15
    47b4:	00035680 	call	3568 <crc7>
    47b8:	e0bff785 	stb	r2,-34(fp)
            if (crc != (szResponse[16] >> 1)){
    47bc:	e0bffbc3 	ldbu	r2,-17(fp)
    47c0:	10803fcc 	andi	r2,r2,255
    47c4:	1004d07a 	srli	r2,r2,1
    47c8:	10c03fcc 	andi	r3,r2,255
    47cc:	e0bff783 	ldbu	r2,-34(fp)
    47d0:	18800126 	beq	r3,r2,47d8 <SD_CMD2+0xfc>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    47d4:	e03ff415 	stw	zero,-48(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    47d8:	e0bff417 	ldw	r2,-48(fp)
    47dc:	10000526 	beq	r2,zero,47f4 <SD_CMD2+0x118>
    47e0:	e0bffbc3 	ldbu	r2,-17(fp)
    47e4:	10803fcc 	andi	r2,r2,255
    47e8:	1080004c 	andi	r2,r2,1
    47ec:	1000011e 	bne	r2,zero,47f4 <SD_CMD2+0x118>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    47f0:	e03ff415 	stw	zero,-48(fp)
        }
          
    }
    
    if (bSuccess){
    47f4:	e0bff417 	ldw	r2,-48(fp)
    47f8:	10001826 	beq	r2,zero,485c <SD_CMD2+0x180>
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
    47fc:	e0bfff17 	ldw	r2,-4(fp)
    4800:	e0bff515 	stw	r2,-44(fp)
        if (nCopyLen > 16)
    4804:	e0bff517 	ldw	r2,-44(fp)
    4808:	10800450 	cmplti	r2,r2,17
    480c:	1000021e 	bne	r2,zero,4818 <SD_CMD2+0x13c>
            nCopyLen = 16;
    4810:	00800404 	movi	r2,16
    4814:	e0bff515 	stw	r2,-44(fp)
        for(x=0;x<nCopyLen;x++)
    4818:	e03ff615 	stw	zero,-40(fp)
    481c:	00000c06 	br	4850 <SD_CMD2+0x174>
            szCID[x] = szResponse[x+1];
    4820:	e0bff617 	ldw	r2,-40(fp)
    4824:	e0fffe17 	ldw	r3,-8(fp)
    4828:	1885883a 	add	r2,r3,r2
    482c:	e0fff617 	ldw	r3,-40(fp)
    4830:	18c00044 	addi	r3,r3,1
    4834:	e13ff7c4 	addi	r4,fp,-33
    4838:	20c7883a 	add	r3,r4,r3
    483c:	18c00003 	ldbu	r3,0(r3)
    4840:	10c00005 	stb	r3,0(r2)
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    4844:	e0bff617 	ldw	r2,-40(fp)
    4848:	10800044 	addi	r2,r2,1
    484c:	e0bff615 	stw	r2,-40(fp)
    4850:	e0fff617 	ldw	r3,-40(fp)
    4854:	e0bff517 	ldw	r2,-44(fp)
    4858:	18bff116 	blt	r3,r2,4820 <_gp+0xfffe7fa4>
            szCID[x] = szResponse[x+1];
        
    }
    
    return bSuccess;
    485c:	e0bff417 	ldw	r2,-48(fp)
    
}
    4860:	e037883a 	mov	sp,fp
    4864:	dfc00117 	ldw	ra,4(sp)
    4868:	df000017 	ldw	fp,0(sp)
    486c:	dec00204 	addi	sp,sp,8
    4870:	f800283a 	ret

00004874 <SD_CMD3>:

//
bool SD_CMD3(alt_u16 *pRCA16){
    4874:	defff704 	addi	sp,sp,-36
    4878:	dfc00815 	stw	ra,32(sp)
    487c:	df000715 	stw	fp,28(sp)
    4880:	df000704 	addi	fp,sp,28
    4884:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 RCA16;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 3;
    4888:	008000c4 	movi	r2,3
    488c:	e0bffa85 	stb	r2,-22(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    4890:	00801004 	movi	r2,64
    4894:	e0bffd85 	stb	r2,-10(fp)
    4898:	e03ffdc5 	stb	zero,-9(fp)
    489c:	e03ffe05 	stb	zero,-8(fp)
    48a0:	e03ffe45 	stb	zero,-7(fp)
    48a4:	e03ffe85 	stb	zero,-6(fp)
    48a8:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    48ac:	e0fffd83 	ldbu	r3,-10(fp)
    48b0:	e0bffa83 	ldbu	r2,-22(fp)
    48b4:	1884b03a 	or	r2,r3,r2
    48b8:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
    48bc:	e0bffd84 	addi	r2,fp,-10
    48c0:	0009883a 	mov	r4,zero
    48c4:	100b883a 	mov	r5,r2
    48c8:	01800144 	movi	r6,5
    48cc:	00035680 	call	3568 <crc7>
    48d0:	e0bffac5 	stb	r2,-21(fp)
    szCmd[5] = (crc << 1) | 0x01;
    48d4:	e0bffac3 	ldbu	r2,-21(fp)
    48d8:	1085883a 	add	r2,r2,r2
    48dc:	10800054 	ori	r2,r2,1
    48e0:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    48e4:	e0bffd84 	addi	r2,fp,-10
    48e8:	1009883a 	mov	r4,r2
    48ec:	01400184 	movi	r5,6
    48f0:	00036840 	call	3684 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    48f4:	e0bffc04 	addi	r2,fp,-16
    48f8:	1009883a 	mov	r4,r2
    48fc:	01400184 	movi	r5,6
    4900:	00037780 	call	3778 <SDHAL_GetResponse>
    4904:	e0bff915 	stw	r2,-28(fp)
    
    // check response content
    if (bSuccess){
    4908:	e0bff917 	ldw	r2,-28(fp)
    490c:	10003526 	beq	r2,zero,49e4 <SD_CMD3+0x170>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    4910:	e0bff917 	ldw	r2,-28(fp)
    4914:	10000526 	beq	r2,zero,492c <SD_CMD3+0xb8>
    4918:	e0bffc03 	ldbu	r2,-16(fp)
    491c:	10c03fcc 	andi	r3,r2,255
    4920:	e0bffa83 	ldbu	r2,-22(fp)
    4924:	18800126 	beq	r3,r2,492c <SD_CMD3+0xb8>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    4928:	e03ff915 	stw	zero,-28(fp)
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
    492c:	e0bffc43 	ldbu	r2,-15(fp)
    4930:	10803fcc 	andi	r2,r2,255
    4934:	1004923a 	slli	r2,r2,8
    4938:	1007883a 	mov	r3,r2
    493c:	e0bffc83 	ldbu	r2,-14(fp)
    4940:	10803fcc 	andi	r2,r2,255
    4944:	1884b03a 	or	r2,r3,r2
    4948:	e0bffa0d 	sth	r2,-24(fp)
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
    494c:	e0bffcc3 	ldbu	r2,-13(fp)
    4950:	10803fcc 	andi	r2,r2,255
    4954:	1004923a 	slli	r2,r2,8
    4958:	1007883a 	mov	r3,r2
    495c:	e0bffd03 	ldbu	r2,-12(fp)
    4960:	10803fcc 	andi	r2,r2,255
    4964:	1884b03a 	or	r2,r3,r2
    4968:	e0bffb0d 	sth	r2,-20(fp)
        State8 = SD_CURRENT_STATE_DECODE(Status16);
    496c:	e0bffb0b 	ldhu	r2,-20(fp)
    4970:	1004d27a 	srli	r2,r2,9
    4974:	108003cc 	andi	r2,r2,15
    4978:	e0bffb85 	stb	r2,-18(fp)
        if (State8 != SD_STATE_IDENT){
    497c:	e0bffb83 	ldbu	r2,-18(fp)
    4980:	108000a0 	cmpeqi	r2,r2,2
    4984:	1000011e 	bne	r2,zero,498c <SD_CMD3+0x118>
           SDCARD_DEBUG(("CMD%d Response: Unexpected CURRENT_STATE\r\n", Cmd));
           bSuccess = FALSE;
    4988:	e03ff915 	stw	zero,-28(fp)
        }
        
        // check crc
        if (bSuccess){
    498c:	e0bff917 	ldw	r2,-28(fp)
    4990:	10000d26 	beq	r2,zero,49c8 <SD_CMD3+0x154>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    4994:	e0bffc04 	addi	r2,fp,-16
    4998:	0009883a 	mov	r4,zero
    499c:	100b883a 	mov	r5,r2
    49a0:	01800144 	movi	r6,5
    49a4:	00035680 	call	3568 <crc7>
    49a8:	e0bffbc5 	stb	r2,-17(fp)
            if (crc != (szResponse[5] >> 1)){
    49ac:	e0bffd43 	ldbu	r2,-11(fp)
    49b0:	10803fcc 	andi	r2,r2,255
    49b4:	1004d07a 	srli	r2,r2,1
    49b8:	10c03fcc 	andi	r3,r2,255
    49bc:	e0bffbc3 	ldbu	r2,-17(fp)
    49c0:	18800126 	beq	r3,r2,49c8 <SD_CMD3+0x154>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    49c4:	e03ff915 	stw	zero,-28(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    49c8:	e0bff917 	ldw	r2,-28(fp)
    49cc:	10000526 	beq	r2,zero,49e4 <SD_CMD3+0x170>
    49d0:	e0bffd43 	ldbu	r2,-11(fp)
    49d4:	10803fcc 	andi	r2,r2,255
    49d8:	1080004c 	andi	r2,r2,1
    49dc:	1000011e 	bne	r2,zero,49e4 <SD_CMD3+0x170>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    49e0:	e03ff915 	stw	zero,-28(fp)
        }
          
    }
    
    if (bSuccess)
    49e4:	e0bff917 	ldw	r2,-28(fp)
    49e8:	10000326 	beq	r2,zero,49f8 <SD_CMD3+0x184>
        *pRCA16 = RCA16;
    49ec:	e0bfff17 	ldw	r2,-4(fp)
    49f0:	e0fffa0b 	ldhu	r3,-24(fp)
    49f4:	10c0000d 	sth	r3,0(r2)
    
    return bSuccess;
    49f8:	e0bff917 	ldw	r2,-28(fp)
    
}
    49fc:	e037883a 	mov	sp,fp
    4a00:	dfc00117 	ldw	ra,4(sp)
    4a04:	df000017 	ldw	fp,0(sp)
    4a08:	dec00204 	addi	sp,sp,8
    4a0c:	f800283a 	ret

00004a10 <SD_CMD9>:

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
    4a10:	defff104 	addi	sp,sp,-60
    4a14:	dfc00e15 	stw	ra,56(sp)
    4a18:	df000d15 	stw	fp,52(sp)
    4a1c:	df000d04 	addi	fp,sp,52
    4a20:	2005883a 	mov	r2,r4
    4a24:	e17ffe15 	stw	r5,-8(fp)
    4a28:	e1bfff15 	stw	r6,-4(fp)
    4a2c:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 9;
    4a30:	00800244 	movi	r2,9
    4a34:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    4a38:	00801004 	movi	r2,64
    4a3c:	e0bffb05 	stb	r2,-20(fp)
    4a40:	e03ffb45 	stb	zero,-19(fp)
    4a44:	e03ffb85 	stb	zero,-18(fp)
    4a48:	e03ffbc5 	stb	zero,-17(fp)
    4a4c:	e03ffc05 	stb	zero,-16(fp)
    4a50:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    4a54:	e0fffb03 	ldbu	r3,-20(fp)
    4a58:	e0bff603 	ldbu	r2,-40(fp)
    4a5c:	1884b03a 	or	r2,r3,r2
    4a60:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
    4a64:	e0fffb43 	ldbu	r3,-19(fp)
    4a68:	e0bffd0b 	ldhu	r2,-12(fp)
    4a6c:	1004d23a 	srli	r2,r2,8
    4a70:	1884b03a 	or	r2,r3,r2
    4a74:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
    4a78:	e0bffb83 	ldbu	r2,-18(fp)
    4a7c:	1007883a 	mov	r3,r2
    4a80:	e0bffd0b 	ldhu	r2,-12(fp)
    4a84:	1884b03a 	or	r2,r3,r2
    4a88:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
    4a8c:	e0bffb04 	addi	r2,fp,-20
    4a90:	0009883a 	mov	r4,zero
    4a94:	100b883a 	mov	r5,r2
    4a98:	01800144 	movi	r6,5
    4a9c:	00035680 	call	3568 <crc7>
    4aa0:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
    4aa4:	e0bff643 	ldbu	r2,-39(fp)
    4aa8:	1085883a 	add	r2,r2,r2
    4aac:	10800054 	ori	r2,r2,1
    4ab0:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4ab4:	e0bffb04 	addi	r2,fp,-20
    4ab8:	1009883a 	mov	r4,r2
    4abc:	01400184 	movi	r5,6
    4ac0:	00036840 	call	3684 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    4ac4:	e0bff6c4 	addi	r2,fp,-37
    4ac8:	1009883a 	mov	r4,r2
    4acc:	01400444 	movi	r5,17
    4ad0:	00037780 	call	3778 <SDHAL_GetResponse>
    4ad4:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
    4ad8:	e0bff317 	ldw	r2,-52(fp)
    4adc:	10001e26 	beq	r2,zero,4b58 <SD_CMD9+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
    4ae0:	e0bff317 	ldw	r2,-52(fp)
    4ae4:	10000526 	beq	r2,zero,4afc <SD_CMD9+0xec>
    4ae8:	e0bff6c3 	ldbu	r2,-37(fp)
    4aec:	10803fcc 	andi	r2,r2,255
    4af0:	10800fe0 	cmpeqi	r2,r2,63
    4af4:	1000011e 	bne	r2,zero,4afc <SD_CMD9+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    4af8:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
    4afc:	e0bff317 	ldw	r2,-52(fp)
    4b00:	10000e26 	beq	r2,zero,4b3c <SD_CMD9+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
    4b04:	e0bff6c4 	addi	r2,fp,-37
    4b08:	10800044 	addi	r2,r2,1
    4b0c:	0009883a 	mov	r4,zero
    4b10:	100b883a 	mov	r5,r2
    4b14:	018003c4 	movi	r6,15
    4b18:	00035680 	call	3568 <crc7>
    4b1c:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
    4b20:	e0bffac3 	ldbu	r2,-21(fp)
    4b24:	10803fcc 	andi	r2,r2,255
    4b28:	1004d07a 	srli	r2,r2,1
    4b2c:	10c03fcc 	andi	r3,r2,255
    4b30:	e0bff683 	ldbu	r2,-38(fp)
    4b34:	18800126 	beq	r3,r2,4b3c <SD_CMD9+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    4b38:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    4b3c:	e0bff317 	ldw	r2,-52(fp)
    4b40:	10000526 	beq	r2,zero,4b58 <SD_CMD9+0x148>
    4b44:	e0bffac3 	ldbu	r2,-21(fp)
    4b48:	10803fcc 	andi	r2,r2,255
    4b4c:	1080004c 	andi	r2,r2,1
    4b50:	1000011e 	bne	r2,zero,4b58 <SD_CMD9+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    4b54:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
    4b58:	e0bff317 	ldw	r2,-52(fp)
    4b5c:	10001626 	beq	r2,zero,4bb8 <SD_CMD9+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
    4b60:	e0bff417 	ldw	r2,-48(fp)
    4b64:	10800450 	cmplti	r2,r2,17
    4b68:	1000021e 	bne	r2,zero,4b74 <SD_CMD9+0x164>
            nCopyLen = 16;
    4b6c:	00800404 	movi	r2,16
    4b70:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
    4b74:	e03ff515 	stw	zero,-44(fp)
    4b78:	00000c06 	br	4bac <SD_CMD9+0x19c>
            szCSD[x] = szResponse[x+1];           
    4b7c:	e0bff517 	ldw	r2,-44(fp)
    4b80:	e0fffe17 	ldw	r3,-8(fp)
    4b84:	1885883a 	add	r2,r3,r2
    4b88:	e0fff517 	ldw	r3,-44(fp)
    4b8c:	18c00044 	addi	r3,r3,1
    4b90:	e13ff6c4 	addi	r4,fp,-37
    4b94:	20c7883a 	add	r3,r4,r3
    4b98:	18c00003 	ldbu	r3,0(r3)
    4b9c:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    4ba0:	e0bff517 	ldw	r2,-44(fp)
    4ba4:	10800044 	addi	r2,r2,1
    4ba8:	e0bff515 	stw	r2,-44(fp)
    4bac:	e0fff517 	ldw	r3,-44(fp)
    4bb0:	e0bff417 	ldw	r2,-48(fp)
    4bb4:	18bff116 	blt	r3,r2,4b7c <_gp+0xfffe8300>
            szCSD[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
    4bb8:	e0bff317 	ldw	r2,-52(fp)
}
    4bbc:	e037883a 	mov	sp,fp
    4bc0:	dfc00117 	ldw	ra,4(sp)
    4bc4:	df000017 	ldw	fp,0(sp)
    4bc8:	dec00204 	addi	sp,sp,8
    4bcc:	f800283a 	ret

00004bd0 <SD_CMD10>:

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
    4bd0:	defff104 	addi	sp,sp,-60
    4bd4:	dfc00e15 	stw	ra,56(sp)
    4bd8:	df000d15 	stw	fp,52(sp)
    4bdc:	df000d04 	addi	fp,sp,52
    4be0:	2005883a 	mov	r2,r4
    4be4:	e17ffe15 	stw	r5,-8(fp)
    4be8:	e1bfff15 	stw	r6,-4(fp)
    4bec:	e0bffd0d 	sth	r2,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 10;
    4bf0:	00800284 	movi	r2,10
    4bf4:	e0bff605 	stb	r2,-40(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    4bf8:	00801004 	movi	r2,64
    4bfc:	e0bffb05 	stb	r2,-20(fp)
    4c00:	e03ffb45 	stb	zero,-19(fp)
    4c04:	e03ffb85 	stb	zero,-18(fp)
    4c08:	e03ffbc5 	stb	zero,-17(fp)
    4c0c:	e03ffc05 	stb	zero,-16(fp)
    4c10:	e03ffc45 	stb	zero,-15(fp)

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    4c14:	e0fffb03 	ldbu	r3,-20(fp)
    4c18:	e0bff603 	ldbu	r2,-40(fp)
    4c1c:	1884b03a 	or	r2,r3,r2
    4c20:	e0bffb05 	stb	r2,-20(fp)
    szCmd[1] |= RCA16 >> 8;
    4c24:	e0fffb43 	ldbu	r3,-19(fp)
    4c28:	e0bffd0b 	ldhu	r2,-12(fp)
    4c2c:	1004d23a 	srli	r2,r2,8
    4c30:	1884b03a 	or	r2,r3,r2
    4c34:	e0bffb45 	stb	r2,-19(fp)
    szCmd[2] |= RCA16 & 0xFF;
    4c38:	e0bffb83 	ldbu	r2,-18(fp)
    4c3c:	1007883a 	mov	r3,r2
    4c40:	e0bffd0b 	ldhu	r2,-12(fp)
    4c44:	1884b03a 	or	r2,r3,r2
    4c48:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
    4c4c:	e0bffb04 	addi	r2,fp,-20
    4c50:	0009883a 	mov	r4,zero
    4c54:	100b883a 	mov	r5,r2
    4c58:	01800144 	movi	r6,5
    4c5c:	00035680 	call	3568 <crc7>
    4c60:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
    4c64:	e0bff643 	ldbu	r2,-39(fp)
    4c68:	1085883a 	add	r2,r2,r2
    4c6c:	10800054 	ori	r2,r2,1
    4c70:	e0bffc45 	stb	r2,-15(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4c74:	e0bffb04 	addi	r2,fp,-20
    4c78:	1009883a 	mov	r4,r2
    4c7c:	01400184 	movi	r5,6
    4c80:	00036840 	call	3684 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    4c84:	e0bff6c4 	addi	r2,fp,-37
    4c88:	1009883a 	mov	r4,r2
    4c8c:	01400444 	movi	r5,17
    4c90:	00037780 	call	3778 <SDHAL_GetResponse>
    4c94:	e0bff315 	stw	r2,-52(fp)
    
    // check response content
    if (bSuccess){
    4c98:	e0bff317 	ldw	r2,-52(fp)
    4c9c:	10001e26 	beq	r2,zero,4d18 <SD_CMD10+0x148>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
    4ca0:	e0bff317 	ldw	r2,-52(fp)
    4ca4:	10000526 	beq	r2,zero,4cbc <SD_CMD10+0xec>
    4ca8:	e0bff6c3 	ldbu	r2,-37(fp)
    4cac:	10803fcc 	andi	r2,r2,255
    4cb0:	10800fe0 	cmpeqi	r2,r2,63
    4cb4:	1000011e 	bne	r2,zero,4cbc <SD_CMD10+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    4cb8:	e03ff315 	stw	zero,-52(fp)
        }
        
        // check crc
        if (bSuccess){
    4cbc:	e0bff317 	ldw	r2,-52(fp)
    4cc0:	10000e26 	beq	r2,zero,4cfc <SD_CMD10+0x12c>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
    4cc4:	e0bff6c4 	addi	r2,fp,-37
    4cc8:	10800044 	addi	r2,r2,1
    4ccc:	0009883a 	mov	r4,zero
    4cd0:	100b883a 	mov	r5,r2
    4cd4:	018003c4 	movi	r6,15
    4cd8:	00035680 	call	3568 <crc7>
    4cdc:	e0bff685 	stb	r2,-38(fp)
            if (crc != (szResponse[16] >> 1)){
    4ce0:	e0bffac3 	ldbu	r2,-21(fp)
    4ce4:	10803fcc 	andi	r2,r2,255
    4ce8:	1004d07a 	srli	r2,r2,1
    4cec:	10c03fcc 	andi	r3,r2,255
    4cf0:	e0bff683 	ldbu	r2,-38(fp)
    4cf4:	18800126 	beq	r3,r2,4cfc <SD_CMD10+0x12c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    4cf8:	e03ff315 	stw	zero,-52(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
    4cfc:	e0bff317 	ldw	r2,-52(fp)
    4d00:	10000526 	beq	r2,zero,4d18 <SD_CMD10+0x148>
    4d04:	e0bffac3 	ldbu	r2,-21(fp)
    4d08:	10803fcc 	andi	r2,r2,255
    4d0c:	1080004c 	andi	r2,r2,1
    4d10:	1000011e 	bne	r2,zero,4d18 <SD_CMD10+0x148>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    4d14:	e03ff315 	stw	zero,-52(fp)
        }
          
    }
    
    if (bSuccess){
    4d18:	e0bff317 	ldw	r2,-52(fp)
    4d1c:	10001626 	beq	r2,zero,4d78 <SD_CMD10+0x1a8>
        int nCopyLen, x;
        if (nCopyLen > 16)
    4d20:	e0bff417 	ldw	r2,-48(fp)
    4d24:	10800450 	cmplti	r2,r2,17
    4d28:	1000021e 	bne	r2,zero,4d34 <SD_CMD10+0x164>
            nCopyLen = 16;
    4d2c:	00800404 	movi	r2,16
    4d30:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
    4d34:	e03ff515 	stw	zero,-44(fp)
    4d38:	00000c06 	br	4d6c <SD_CMD10+0x19c>
            szCID[x] = szResponse[x+1];           
    4d3c:	e0bff517 	ldw	r2,-44(fp)
    4d40:	e0fffe17 	ldw	r3,-8(fp)
    4d44:	1885883a 	add	r2,r3,r2
    4d48:	e0fff517 	ldw	r3,-44(fp)
    4d4c:	18c00044 	addi	r3,r3,1
    4d50:	e13ff6c4 	addi	r4,fp,-37
    4d54:	20c7883a 	add	r3,r4,r3
    4d58:	18c00003 	ldbu	r3,0(r3)
    4d5c:	10c00005 	stb	r3,0(r2)
    
    if (bSuccess){
        int nCopyLen, x;
        if (nCopyLen > 16)
            nCopyLen = 16;
        for(x=0;x<nCopyLen;x++)
    4d60:	e0bff517 	ldw	r2,-44(fp)
    4d64:	10800044 	addi	r2,r2,1
    4d68:	e0bff515 	stw	r2,-44(fp)
    4d6c:	e0fff517 	ldw	r3,-44(fp)
    4d70:	e0bff417 	ldw	r2,-48(fp)
    4d74:	18bff116 	blt	r3,r2,4d3c <_gp+0xfffe84c0>
            szCID[x] = szResponse[x+1];           
    }        
    
    return bSuccess;
    4d78:	e0bff317 	ldw	r2,-52(fp)
}
    4d7c:	e037883a 	mov	sp,fp
    4d80:	dfc00117 	ldw	ra,4(sp)
    4d84:	df000017 	ldw	fp,0(sp)
    4d88:	dec00204 	addi	sp,sp,8
    4d8c:	f800283a 	ret

00004d90 <SD_CMD7>:


bool SD_CMD7(alt_u16 RCA16){
    4d90:	defff504 	addi	sp,sp,-44
    4d94:	dfc00a15 	stw	ra,40(sp)
    4d98:	df000915 	stw	fp,36(sp)
    4d9c:	df000904 	addi	fp,sp,36
    4da0:	2005883a 	mov	r2,r4
    4da4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 7;
    4da8:	008001c4 	movi	r2,7
    4dac:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    4db0:	00801004 	movi	r2,64
    4db4:	e0bffcc5 	stb	r2,-13(fp)
    4db8:	e03ffd05 	stb	zero,-12(fp)
    4dbc:	e03ffd45 	stb	zero,-11(fp)
    4dc0:	e03ffd85 	stb	zero,-10(fp)
    4dc4:	e03ffdc5 	stb	zero,-9(fp)
    4dc8:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    4dcc:	e0fffcc3 	ldbu	r3,-13(fp)
    4dd0:	e0bff803 	ldbu	r2,-32(fp)
    4dd4:	1884b03a 	or	r2,r3,r2
    4dd8:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= RCA16 >> 8;
    4ddc:	e0fffd03 	ldbu	r3,-12(fp)
    4de0:	e0bfff0b 	ldhu	r2,-4(fp)
    4de4:	1004d23a 	srli	r2,r2,8
    4de8:	1884b03a 	or	r2,r3,r2
    4dec:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= RCA16 & 0xFF;
    4df0:	e0bffd43 	ldbu	r2,-11(fp)
    4df4:	1007883a 	mov	r3,r2
    4df8:	e0bfff0b 	ldhu	r2,-4(fp)
    4dfc:	1884b03a 	or	r2,r3,r2
    4e00:	e0bffd45 	stb	r2,-11(fp)
    crc = crc7(0, szCmd, 5);
    4e04:	e0bffcc4 	addi	r2,fp,-13
    4e08:	0009883a 	mov	r4,zero
    4e0c:	100b883a 	mov	r5,r2
    4e10:	01800144 	movi	r6,5
    4e14:	00035680 	call	3568 <crc7>
    4e18:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
    4e1c:	e0bff843 	ldbu	r2,-31(fp)
    4e20:	1085883a 	add	r2,r2,r2
    4e24:	10800054 	ori	r2,r2,1
    4e28:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4e2c:	e0bffcc4 	addi	r2,fp,-13
    4e30:	1009883a 	mov	r4,r2
    4e34:	01400184 	movi	r5,6
    4e38:	00036840 	call	3684 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    4e3c:	e0bffb44 	addi	r2,fp,-19
    4e40:	1009883a 	mov	r4,r2
    4e44:	01400184 	movi	r5,6
    4e48:	00037780 	call	3778 <SDHAL_GetResponse>
    4e4c:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
    4e50:	e0bff717 	ldw	r2,-36(fp)
    4e54:	10002826 	beq	r2,zero,4ef8 <SD_CMD7+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    4e58:	e0bff717 	ldw	r2,-36(fp)
    4e5c:	10000526 	beq	r2,zero,4e74 <SD_CMD7+0xe4>
    4e60:	e0bffb43 	ldbu	r2,-19(fp)
    4e64:	10c03fcc 	andi	r3,r2,255
    4e68:	e0bff803 	ldbu	r2,-32(fp)
    4e6c:	18800126 	beq	r3,r2,4e74 <SD_CMD7+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    4e70:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    4e74:	e0bffb44 	addi	r2,fp,-19
    4e78:	10800044 	addi	r2,r2,1
    4e7c:	1009883a 	mov	r4,r2
    4e80:	000578c0 	call	578c <ArrayToU32>
    4e84:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_STBY);
    4e88:	0081c004 	movi	r2,1792
    4e8c:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
    4e90:	e0fff917 	ldw	r3,-28(fp)
    4e94:	e0bffa17 	ldw	r2,-24(fp)
    4e98:	18800126 	beq	r3,r2,4ea0 <SD_CMD7+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    4e9c:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
    4ea0:	e0bff717 	ldw	r2,-36(fp)
    4ea4:	10000d26 	beq	r2,zero,4edc <SD_CMD7+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    4ea8:	e0bffb44 	addi	r2,fp,-19
    4eac:	0009883a 	mov	r4,zero
    4eb0:	100b883a 	mov	r5,r2
    4eb4:	01800144 	movi	r6,5
    4eb8:	00035680 	call	3568 <crc7>
    4ebc:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
    4ec0:	e0bffc83 	ldbu	r2,-14(fp)
    4ec4:	10803fcc 	andi	r2,r2,255
    4ec8:	1004d07a 	srli	r2,r2,1
    4ecc:	10c03fcc 	andi	r3,r2,255
    4ed0:	e0bffb03 	ldbu	r2,-20(fp)
    4ed4:	18800126 	beq	r3,r2,4edc <SD_CMD7+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    4ed8:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    4edc:	e0bff717 	ldw	r2,-36(fp)
    4ee0:	10000526 	beq	r2,zero,4ef8 <SD_CMD7+0x168>
    4ee4:	e0bffc83 	ldbu	r2,-14(fp)
    4ee8:	10803fcc 	andi	r2,r2,255
    4eec:	1080004c 	andi	r2,r2,1
    4ef0:	1000011e 	bne	r2,zero,4ef8 <SD_CMD7+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    4ef4:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
    4ef8:	e0bff717 	ldw	r2,-36(fp)
}
    4efc:	e037883a 	mov	sp,fp
    4f00:	dfc00117 	ldw	ra,4(sp)
    4f04:	df000017 	ldw	fp,0(sp)
    4f08:	dec00204 	addi	sp,sp,8
    4f0c:	f800283a 	ret

00004f10 <SD_CMD16>:

bool SD_CMD16(alt_u32 BlockSize){
    4f10:	defff504 	addi	sp,sp,-44
    4f14:	dfc00a15 	stw	ra,40(sp)
    4f18:	df000915 	stw	fp,36(sp)
    4f1c:	df000904 	addi	fp,sp,36
    4f20:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 16;
    4f24:	00800404 	movi	r2,16
    4f28:	e0bff805 	stb	r2,-32(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    4f2c:	00801004 	movi	r2,64
    4f30:	e0bffcc5 	stb	r2,-13(fp)
    4f34:	e03ffd05 	stb	zero,-12(fp)
    4f38:	e03ffd45 	stb	zero,-11(fp)
    4f3c:	e03ffd85 	stb	zero,-10(fp)
    4f40:	e03ffdc5 	stb	zero,-9(fp)
    4f44:	e03ffe05 	stb	zero,-8(fp)

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    4f48:	e0fffcc3 	ldbu	r3,-13(fp)
    4f4c:	e0bff803 	ldbu	r2,-32(fp)
    4f50:	1884b03a 	or	r2,r3,r2
    4f54:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[1] |= BlockSize >> 24;
    4f58:	e0fffd03 	ldbu	r3,-12(fp)
    4f5c:	e0bfff17 	ldw	r2,-4(fp)
    4f60:	1004d63a 	srli	r2,r2,24
    4f64:	1884b03a 	or	r2,r3,r2
    4f68:	e0bffd05 	stb	r2,-12(fp)
    szCmd[2] |= BlockSize >> 16;
    4f6c:	e0fffd43 	ldbu	r3,-11(fp)
    4f70:	e0bfff17 	ldw	r2,-4(fp)
    4f74:	1004d43a 	srli	r2,r2,16
    4f78:	1884b03a 	or	r2,r3,r2
    4f7c:	e0bffd45 	stb	r2,-11(fp)
    szCmd[3] |= BlockSize >> 8;
    4f80:	e0fffd83 	ldbu	r3,-10(fp)
    4f84:	e0bfff17 	ldw	r2,-4(fp)
    4f88:	1004d23a 	srli	r2,r2,8
    4f8c:	1884b03a 	or	r2,r3,r2
    4f90:	e0bffd85 	stb	r2,-10(fp)
    szCmd[4] |= BlockSize & 0xFF;
    4f94:	e0fffdc3 	ldbu	r3,-9(fp)
    4f98:	e0bfff17 	ldw	r2,-4(fp)
    4f9c:	1884b03a 	or	r2,r3,r2
    4fa0:	e0bffdc5 	stb	r2,-9(fp)
    crc = crc7(0, szCmd, 5);
    4fa4:	e0bffcc4 	addi	r2,fp,-13
    4fa8:	0009883a 	mov	r4,zero
    4fac:	100b883a 	mov	r5,r2
    4fb0:	01800144 	movi	r6,5
    4fb4:	00035680 	call	3568 <crc7>
    4fb8:	e0bff845 	stb	r2,-31(fp)
    szCmd[5] = (crc << 1) | 0x01;
    4fbc:	e0bff843 	ldbu	r2,-31(fp)
    4fc0:	1085883a 	add	r2,r2,r2
    4fc4:	10800054 	ori	r2,r2,1
    4fc8:	e0bffe05 	stb	r2,-8(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    4fcc:	e0bffcc4 	addi	r2,fp,-13
    4fd0:	1009883a 	mov	r4,r2
    4fd4:	01400184 	movi	r5,6
    4fd8:	00036840 	call	3684 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    4fdc:	e0bffb44 	addi	r2,fp,-19
    4fe0:	1009883a 	mov	r4,r2
    4fe4:	01400184 	movi	r5,6
    4fe8:	00037780 	call	3778 <SDHAL_GetResponse>
    4fec:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
    4ff0:	e0bff717 	ldw	r2,-36(fp)
    4ff4:	10002826 	beq	r2,zero,5098 <SD_CMD16+0x188>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    4ff8:	e0bff717 	ldw	r2,-36(fp)
    4ffc:	10000526 	beq	r2,zero,5014 <SD_CMD16+0x104>
    5000:	e0bffb43 	ldbu	r2,-19(fp)
    5004:	10c03fcc 	andi	r3,r2,255
    5008:	e0bff803 	ldbu	r2,-32(fp)
    500c:	18800126 	beq	r3,r2,5014 <SD_CMD16+0x104>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    5010:	e03ff715 	stw	zero,-36(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    5014:	e0bffb44 	addi	r2,fp,-19
    5018:	10800044 	addi	r2,r2,1
    501c:	1009883a 	mov	r4,r2
    5020:	000578c0 	call	578c <ArrayToU32>
    5024:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
    5028:	00824004 	movi	r2,2304
    502c:	e0bffa15 	stw	r2,-24(fp)
        if (CardStatus != ExpectedStatus){
    5030:	e0fff917 	ldw	r3,-28(fp)
    5034:	e0bffa17 	ldw	r2,-24(fp)
    5038:	18800126 	beq	r3,r2,5040 <SD_CMD16+0x130>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    503c:	e03ff715 	stw	zero,-36(fp)
        }        
        
        // check crc
        if (bSuccess){
    5040:	e0bff717 	ldw	r2,-36(fp)
    5044:	10000d26 	beq	r2,zero,507c <SD_CMD16+0x16c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    5048:	e0bffb44 	addi	r2,fp,-19
    504c:	0009883a 	mov	r4,zero
    5050:	100b883a 	mov	r5,r2
    5054:	01800144 	movi	r6,5
    5058:	00035680 	call	3568 <crc7>
    505c:	e0bffb05 	stb	r2,-20(fp)
            if (crc != (szResponse[5] >> 1)){
    5060:	e0bffc83 	ldbu	r2,-14(fp)
    5064:	10803fcc 	andi	r2,r2,255
    5068:	1004d07a 	srli	r2,r2,1
    506c:	10c03fcc 	andi	r3,r2,255
    5070:	e0bffb03 	ldbu	r2,-20(fp)
    5074:	18800126 	beq	r3,r2,507c <SD_CMD16+0x16c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    5078:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    507c:	e0bff717 	ldw	r2,-36(fp)
    5080:	10000526 	beq	r2,zero,5098 <SD_CMD16+0x188>
    5084:	e0bffc83 	ldbu	r2,-14(fp)
    5088:	10803fcc 	andi	r2,r2,255
    508c:	1080004c 	andi	r2,r2,1
    5090:	1000011e 	bne	r2,zero,5098 <SD_CMD16+0x188>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    5094:	e03ff715 	stw	zero,-36(fp)
          
    }
    
     
    
    return bSuccess;
    5098:	e0bff717 	ldw	r2,-36(fp)
}
    509c:	e037883a 	mov	sp,fp
    50a0:	dfc00117 	ldw	ra,4(sp)
    50a4:	df000017 	ldw	fp,0(sp)
    50a8:	dec00204 	addi	sp,sp,8
    50ac:	f800283a 	ret

000050b0 <SD_ACMD6>:

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
    50b0:	defff404 	addi	sp,sp,-48
    50b4:	dfc00b15 	stw	ra,44(sp)
    50b8:	df000a15 	stw	fp,40(sp)
    50bc:	df000a04 	addi	fp,sp,40
    50c0:	e13ffe15 	stw	r4,-8(fp)
    50c4:	2805883a 	mov	r2,r5
    50c8:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 6;
    50cc:	00800184 	movi	r2,6
    50d0:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
    50d4:	00801004 	movi	r2,64
    50d8:	e0bffbc5 	stb	r2,-17(fp)
    50dc:	e03ffc05 	stb	zero,-16(fp)
    50e0:	e03ffc45 	stb	zero,-15(fp)
    50e4:	e03ffc85 	stb	zero,-14(fp)
    50e8:	e03ffcc5 	stb	zero,-13(fp)
    50ec:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    50f0:	e0fffbc3 	ldbu	r3,-17(fp)
    50f4:	e0bff703 	ldbu	r2,-36(fp)
    50f8:	1884b03a 	or	r2,r3,r2
    50fc:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?2:0;
    5100:	e0bffcc3 	ldbu	r2,-13(fp)
    5104:	1007883a 	mov	r3,r2
    5108:	e0bffe17 	ldw	r2,-8(fp)
    510c:	10000226 	beq	r2,zero,5118 <SD_ACMD6+0x68>
    5110:	00800084 	movi	r2,2
    5114:	00000106 	br	511c <SD_ACMD6+0x6c>
    5118:	0005883a 	mov	r2,zero
    511c:	1884b03a 	or	r2,r3,r2
    5120:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
    5124:	e0bffbc4 	addi	r2,fp,-17
    5128:	0009883a 	mov	r4,zero
    512c:	100b883a 	mov	r5,r2
    5130:	01800144 	movi	r6,5
    5134:	00035680 	call	3568 <crc7>
    5138:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
    513c:	e0bff743 	ldbu	r2,-35(fp)
    5140:	1085883a 	add	r2,r2,r2
    5144:	10800054 	ori	r2,r2,1
    5148:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    514c:	e0bffbc4 	addi	r2,fp,-17
    5150:	1009883a 	mov	r4,r2
    5154:	01400184 	movi	r5,6
    5158:	00036840 	call	3684 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    515c:	e0bffa44 	addi	r2,fp,-23
    5160:	1009883a 	mov	r4,r2
    5164:	01400184 	movi	r5,6
    5168:	00037780 	call	3778 <SDHAL_GetResponse>
    516c:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
    5170:	e0bff617 	ldw	r2,-40(fp)
    5174:	10002b26 	beq	r2,zero,5224 <SD_ACMD6+0x174>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    5178:	e0bff617 	ldw	r2,-40(fp)
    517c:	10000526 	beq	r2,zero,5194 <SD_ACMD6+0xe4>
    5180:	e0bffa43 	ldbu	r2,-23(fp)
    5184:	10c03fcc 	andi	r3,r2,255
    5188:	e0bff703 	ldbu	r2,-36(fp)
    518c:	18800126 	beq	r3,r2,5194 <SD_ACMD6+0xe4>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
    5190:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
    5194:	e0bffa44 	addi	r2,fp,-23
    5198:	10800044 	addi	r2,r2,1
    519c:	1009883a 	mov	r4,r2
    51a0:	000578c0 	call	578c <ArrayToU32>
    51a4:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
    51a8:	e0bfff03 	ldbu	r2,-4(fp)
    51ac:	108003cc 	andi	r2,r2,15
    51b0:	1004927a 	slli	r2,r2,9
    51b4:	10804814 	ori	r2,r2,288
    51b8:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
    51bc:	e0fff817 	ldw	r3,-32(fp)
    51c0:	e0bff917 	ldw	r2,-28(fp)
    51c4:	18800126 	beq	r3,r2,51cc <SD_ACMD6+0x11c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    51c8:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
    51cc:	e0bff617 	ldw	r2,-40(fp)
    51d0:	10000d26 	beq	r2,zero,5208 <SD_ACMD6+0x158>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    51d4:	e0bffa44 	addi	r2,fp,-23
    51d8:	0009883a 	mov	r4,zero
    51dc:	100b883a 	mov	r5,r2
    51e0:	01800144 	movi	r6,5
    51e4:	00035680 	call	3568 <crc7>
    51e8:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
    51ec:	e0bffb83 	ldbu	r2,-18(fp)
    51f0:	10803fcc 	andi	r2,r2,255
    51f4:	1004d07a 	srli	r2,r2,1
    51f8:	10c03fcc 	andi	r3,r2,255
    51fc:	e0bffa03 	ldbu	r2,-24(fp)
    5200:	18800126 	beq	r3,r2,5208 <SD_ACMD6+0x158>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    5204:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    5208:	e0bff617 	ldw	r2,-40(fp)
    520c:	10000526 	beq	r2,zero,5224 <SD_ACMD6+0x174>
    5210:	e0bffb83 	ldbu	r2,-18(fp)
    5214:	10803fcc 	andi	r2,r2,255
    5218:	1080004c 	andi	r2,r2,1
    521c:	1000011e 	bne	r2,zero,5224 <SD_ACMD6+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    5220:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
    5224:	e0bff617 	ldw	r2,-40(fp)
}
    5228:	e037883a 	mov	sp,fp
    522c:	dfc00117 	ldw	ra,4(sp)
    5230:	df000017 	ldw	fp,0(sp)
    5234:	dec00204 	addi	sp,sp,8
    5238:	f800283a 	ret

0000523c <SD_ACMD42>:

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
    523c:	defff404 	addi	sp,sp,-48
    5240:	dfc00b15 	stw	ra,44(sp)
    5244:	df000a15 	stw	fp,40(sp)
    5248:	df000a04 	addi	fp,sp,40
    524c:	e13ffe15 	stw	r4,-8(fp)
    5250:	2805883a 	mov	r2,r5
    5254:	e0bfff05 	stb	r2,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 42;
    5258:	00800a84 	movi	r2,42
    525c:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
    5260:	00801004 	movi	r2,64
    5264:	e0bffbc5 	stb	r2,-17(fp)
    5268:	e03ffc05 	stb	zero,-16(fp)
    526c:	e03ffc45 	stb	zero,-15(fp)
    5270:	e03ffc85 	stb	zero,-14(fp)
    5274:	e03ffcc5 	stb	zero,-13(fp)
    5278:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
    527c:	e0fffbc3 	ldbu	r3,-17(fp)
    5280:	e0bff703 	ldbu	r2,-36(fp)
    5284:	1884b03a 	or	r2,r3,r2
    5288:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[4] |= b4BitsBus?1:0;
    528c:	e0bffcc3 	ldbu	r2,-13(fp)
    5290:	1007883a 	mov	r3,r2
    5294:	e0bffe17 	ldw	r2,-8(fp)
    5298:	1004c03a 	cmpne	r2,r2,zero
    529c:	1884b03a 	or	r2,r3,r2
    52a0:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
    52a4:	e0bffbc4 	addi	r2,fp,-17
    52a8:	0009883a 	mov	r4,zero
    52ac:	100b883a 	mov	r5,r2
    52b0:	01800144 	movi	r6,5
    52b4:	00035680 	call	3568 <crc7>
    52b8:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
    52bc:	e0bff743 	ldbu	r2,-35(fp)
    52c0:	1085883a 	add	r2,r2,r2
    52c4:	10800054 	ori	r2,r2,1
    52c8:	e0bffd05 	stb	r2,-12(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    52cc:	e0bffbc4 	addi	r2,fp,-17
    52d0:	1009883a 	mov	r4,r2
    52d4:	01400184 	movi	r5,6
    52d8:	00036840 	call	3684 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    52dc:	e0bffa44 	addi	r2,fp,-23
    52e0:	1009883a 	mov	r4,r2
    52e4:	01400184 	movi	r5,6
    52e8:	00037780 	call	3778 <SDHAL_GetResponse>
    52ec:	e0bff615 	stw	r2,-40(fp)
    
    if (bSuccess){
    52f0:	e0bff617 	ldw	r2,-40(fp)
    52f4:	10002b26 	beq	r2,zero,53a4 <SD_ACMD42+0x168>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
    52f8:	e0bff617 	ldw	r2,-40(fp)
    52fc:	10000526 	beq	r2,zero,5314 <SD_ACMD42+0xd8>
    5300:	e0bffa43 	ldbu	r2,-23(fp)
    5304:	10c03fcc 	andi	r3,r2,255
    5308:	e0bff703 	ldbu	r2,-36(fp)
    530c:	18800126 	beq	r3,r2,5314 <SD_ACMD42+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
    5310:	e03ff615 	stw	zero,-40(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
    5314:	e0bffa44 	addi	r2,fp,-23
    5318:	10800044 	addi	r2,r2,1
    531c:	1009883a 	mov	r4,r2
    5320:	000578c0 	call	578c <ArrayToU32>
    5324:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
    5328:	e0bfff03 	ldbu	r2,-4(fp)
    532c:	108003cc 	andi	r2,r2,15
    5330:	1004927a 	slli	r2,r2,9
    5334:	10804814 	ori	r2,r2,288
    5338:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
    533c:	e0fff817 	ldw	r3,-32(fp)
    5340:	e0bff917 	ldw	r2,-28(fp)
    5344:	18800126 	beq	r3,r2,534c <SD_ACMD42+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    5348:	e03ff615 	stw	zero,-40(fp)
        }
                
        // check crc
        if (bSuccess){
    534c:	e0bff617 	ldw	r2,-40(fp)
    5350:	10000d26 	beq	r2,zero,5388 <SD_ACMD42+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    5354:	e0bffa44 	addi	r2,fp,-23
    5358:	0009883a 	mov	r4,zero
    535c:	100b883a 	mov	r5,r2
    5360:	01800144 	movi	r6,5
    5364:	00035680 	call	3568 <crc7>
    5368:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
    536c:	e0bffb83 	ldbu	r2,-18(fp)
    5370:	10803fcc 	andi	r2,r2,255
    5374:	1004d07a 	srli	r2,r2,1
    5378:	10c03fcc 	andi	r3,r2,255
    537c:	e0bffa03 	ldbu	r2,-24(fp)
    5380:	18800126 	beq	r3,r2,5388 <SD_ACMD42+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    5384:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    5388:	e0bff617 	ldw	r2,-40(fp)
    538c:	10000526 	beq	r2,zero,53a4 <SD_ACMD42+0x168>
    5390:	e0bffb83 	ldbu	r2,-18(fp)
    5394:	10803fcc 	andi	r2,r2,255
    5398:	1080004c 	andi	r2,r2,1
    539c:	1000011e 	bne	r2,zero,53a4 <SD_ACMD42+0x168>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    53a0:	e03ff615 	stw	zero,-40(fp)
        }
          
    }      
    

    return bSuccess;
    53a4:	e0bff617 	ldw	r2,-40(fp)
}
    53a8:	e037883a 	mov	sp,fp
    53ac:	dfc00117 	ldw	ra,4(sp)
    53b0:	df000017 	ldw	fp,0(sp)
    53b4:	dec00204 	addi	sp,sp,8
    53b8:	f800283a 	ret

000053bc <SD_CMD17>:


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
    53bc:	defff404 	addi	sp,sp,-48
    53c0:	dfc00b15 	stw	ra,44(sp)
    53c4:	df000a15 	stw	fp,40(sp)
    53c8:	df000a04 	addi	fp,sp,40
    53cc:	e13ffe15 	stw	r4,-8(fp)
    53d0:	2805883a 	mov	r2,r5
    53d4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 17;
    53d8:	00800444 	movi	r2,17
    53dc:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    53e0:	00801004 	movi	r2,64
    53e4:	e0bffbc5 	stb	r2,-17(fp)
    53e8:	e03ffc05 	stb	zero,-16(fp)
    53ec:	e03ffc45 	stb	zero,-15(fp)
    53f0:	e03ffc85 	stb	zero,-14(fp)
    53f4:	e03ffcc5 	stb	zero,-13(fp)
    53f8:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    53fc:	e0fffbc3 	ldbu	r3,-17(fp)
    5400:	e0bff703 	ldbu	r2,-36(fp)
    5404:	1884b03a 	or	r2,r3,r2
    5408:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
    540c:	e0fffc03 	ldbu	r3,-16(fp)
    5410:	e0bffe17 	ldw	r2,-8(fp)
    5414:	1004d63a 	srli	r2,r2,24
    5418:	1884b03a 	or	r2,r3,r2
    541c:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
    5420:	e0fffc43 	ldbu	r3,-15(fp)
    5424:	e0bffe17 	ldw	r2,-8(fp)
    5428:	1004d43a 	srli	r2,r2,16
    542c:	1884b03a 	or	r2,r3,r2
    5430:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
    5434:	e0fffc83 	ldbu	r3,-14(fp)
    5438:	e0bffe17 	ldw	r2,-8(fp)
    543c:	1004d23a 	srli	r2,r2,8
    5440:	1884b03a 	or	r2,r3,r2
    5444:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
    5448:	e0fffcc3 	ldbu	r3,-13(fp)
    544c:	e0bffe17 	ldw	r2,-8(fp)
    5450:	1884b03a 	or	r2,r3,r2
    5454:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
    5458:	e0bffbc4 	addi	r2,fp,-17
    545c:	0009883a 	mov	r4,zero
    5460:	100b883a 	mov	r5,r2
    5464:	01800144 	movi	r6,5
    5468:	00035680 	call	3568 <crc7>
    546c:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
    5470:	e0bff743 	ldbu	r2,-35(fp)
    5474:	1085883a 	add	r2,r2,r2
    5478:	10800054 	ori	r2,r2,1
    547c:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    5480:	e0bffbc4 	addi	r2,fp,-17
    5484:	1009883a 	mov	r4,r2
    5488:	01400184 	movi	r5,6
    548c:	00036840 	call	3684 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    5490:	e0bffa44 	addi	r2,fp,-23
    5494:	1009883a 	mov	r4,r2
    5498:	01400184 	movi	r5,6
    549c:	00037780 	call	3778 <SDHAL_GetResponse>
    54a0:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
    54a4:	e0bff617 	ldw	r2,-40(fp)
    54a8:	10002826 	beq	r2,zero,554c <SD_CMD17+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    54ac:	e0bff617 	ldw	r2,-40(fp)
    54b0:	10000526 	beq	r2,zero,54c8 <SD_CMD17+0x10c>
    54b4:	e0bffa43 	ldbu	r2,-23(fp)
    54b8:	10c03fcc 	andi	r3,r2,255
    54bc:	e0bff703 	ldbu	r2,-36(fp)
    54c0:	18800126 	beq	r3,r2,54c8 <SD_CMD17+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    54c4:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    54c8:	e0bffa44 	addi	r2,fp,-23
    54cc:	10800044 	addi	r2,r2,1
    54d0:	1009883a 	mov	r4,r2
    54d4:	000578c0 	call	578c <ArrayToU32>
    54d8:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
    54dc:	00824004 	movi	r2,2304
    54e0:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
    54e4:	e0fff817 	ldw	r3,-32(fp)
    54e8:	e0bff917 	ldw	r2,-28(fp)
    54ec:	18800126 	beq	r3,r2,54f4 <SD_CMD17+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    54f0:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
    54f4:	e0bff617 	ldw	r2,-40(fp)
    54f8:	10000d26 	beq	r2,zero,5530 <SD_CMD17+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    54fc:	e0bffa44 	addi	r2,fp,-23
    5500:	0009883a 	mov	r4,zero
    5504:	100b883a 	mov	r5,r2
    5508:	01800144 	movi	r6,5
    550c:	00035680 	call	3568 <crc7>
    5510:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
    5514:	e0bffb83 	ldbu	r2,-18(fp)
    5518:	10803fcc 	andi	r2,r2,255
    551c:	1004d07a 	srli	r2,r2,1
    5520:	10c03fcc 	andi	r3,r2,255
    5524:	e0bffa03 	ldbu	r2,-24(fp)
    5528:	18800126 	beq	r3,r2,5530 <SD_CMD17+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    552c:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    5530:	e0bff617 	ldw	r2,-40(fp)
    5534:	10000526 	beq	r2,zero,554c <SD_CMD17+0x190>
    5538:	e0bffb83 	ldbu	r2,-18(fp)
    553c:	10803fcc 	andi	r2,r2,255
    5540:	1080004c 	andi	r2,r2,1
    5544:	1000011e 	bne	r2,zero,554c <SD_CMD17+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    5548:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
    554c:	e0bff617 	ldw	r2,-40(fp)
}
    5550:	e037883a 	mov	sp,fp
    5554:	dfc00117 	ldw	ra,4(sp)
    5558:	df000017 	ldw	fp,0(sp)
    555c:	dec00204 	addi	sp,sp,8
    5560:	f800283a 	ret

00005564 <SD_CMD24>:

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
    5564:	defff404 	addi	sp,sp,-48
    5568:	dfc00b15 	stw	ra,44(sp)
    556c:	df000a15 	stw	fp,40(sp)
    5570:	df000a04 	addi	fp,sp,40
    5574:	e13ffe15 	stw	r4,-8(fp)
    5578:	2805883a 	mov	r2,r5
    557c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 24;
    5580:	00800604 	movi	r2,24
    5584:	e0bff705 	stb	r2,-36(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
    5588:	00801004 	movi	r2,64
    558c:	e0bffbc5 	stb	r2,-17(fp)
    5590:	e03ffc05 	stb	zero,-16(fp)
    5594:	e03ffc45 	stb	zero,-15(fp)
    5598:	e03ffc85 	stb	zero,-14(fp)
    559c:	e03ffcc5 	stb	zero,-13(fp)
    55a0:	e03ffd05 	stb	zero,-12(fp)

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
    55a4:	e0fffbc3 	ldbu	r3,-17(fp)
    55a8:	e0bff703 	ldbu	r2,-36(fp)
    55ac:	1884b03a 	or	r2,r3,r2
    55b0:	e0bffbc5 	stb	r2,-17(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
    55b4:	e0fffc03 	ldbu	r3,-16(fp)
    55b8:	e0bffe17 	ldw	r2,-8(fp)
    55bc:	1004d63a 	srli	r2,r2,24
    55c0:	1884b03a 	or	r2,r3,r2
    55c4:	e0bffc05 	stb	r2,-16(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
    55c8:	e0fffc43 	ldbu	r3,-15(fp)
    55cc:	e0bffe17 	ldw	r2,-8(fp)
    55d0:	1004d43a 	srli	r2,r2,16
    55d4:	1884b03a 	or	r2,r3,r2
    55d8:	e0bffc45 	stb	r2,-15(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
    55dc:	e0fffc83 	ldbu	r3,-14(fp)
    55e0:	e0bffe17 	ldw	r2,-8(fp)
    55e4:	1004d23a 	srli	r2,r2,8
    55e8:	1884b03a 	or	r2,r3,r2
    55ec:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= Addr & 0xFF;
    55f0:	e0fffcc3 	ldbu	r3,-13(fp)
    55f4:	e0bffe17 	ldw	r2,-8(fp)
    55f8:	1884b03a 	or	r2,r3,r2
    55fc:	e0bffcc5 	stb	r2,-13(fp)
    crc = crc7(0, szCmd, 5);
    5600:	e0bffbc4 	addi	r2,fp,-17
    5604:	0009883a 	mov	r4,zero
    5608:	100b883a 	mov	r5,r2
    560c:	01800144 	movi	r6,5
    5610:	00035680 	call	3568 <crc7>
    5614:	e0bff745 	stb	r2,-35(fp)
    szCmd[5] = (crc << 1) | 0x01;
    5618:	e0bff743 	ldbu	r2,-35(fp)
    561c:	1085883a 	add	r2,r2,r2
    5620:	10800054 	ori	r2,r2,1
    5624:	e0bffd05 	stb	r2,-12(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
    5628:	e0bffbc4 	addi	r2,fp,-17
    562c:	1009883a 	mov	r4,r2
    5630:	01400184 	movi	r5,6
    5634:	00036840 	call	3684 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
    5638:	e0bffa44 	addi	r2,fp,-23
    563c:	1009883a 	mov	r4,r2
    5640:	01400184 	movi	r5,6
    5644:	00037780 	call	3778 <SDHAL_GetResponse>
    5648:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
    564c:	e0bff617 	ldw	r2,-40(fp)
    5650:	10002826 	beq	r2,zero,56f4 <SD_CMD24+0x190>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
    5654:	e0bff617 	ldw	r2,-40(fp)
    5658:	10000526 	beq	r2,zero,5670 <SD_CMD24+0x10c>
    565c:	e0bffa43 	ldbu	r2,-23(fp)
    5660:	10c03fcc 	andi	r3,r2,255
    5664:	e0bff703 	ldbu	r2,-36(fp)
    5668:	18800126 	beq	r3,r2,5670 <SD_CMD24+0x10c>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
    566c:	e03ff615 	stw	zero,-40(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
    5670:	e0bffa44 	addi	r2,fp,-23
    5674:	10800044 	addi	r2,r2,1
    5678:	1009883a 	mov	r4,r2
    567c:	000578c0 	call	578c <ArrayToU32>
    5680:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
    5684:	00824004 	movi	r2,2304
    5688:	e0bff915 	stw	r2,-28(fp)
        if (CardStatus != ExpectedStatus){
    568c:	e0fff817 	ldw	r3,-32(fp)
    5690:	e0bff917 	ldw	r2,-28(fp)
    5694:	18800126 	beq	r3,r2,569c <SD_CMD24+0x138>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
    5698:	e03ff615 	stw	zero,-40(fp)
        }        
        
        // check crc
        if (bSuccess){
    569c:	e0bff617 	ldw	r2,-40(fp)
    56a0:	10000d26 	beq	r2,zero,56d8 <SD_CMD24+0x174>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
    56a4:	e0bffa44 	addi	r2,fp,-23
    56a8:	0009883a 	mov	r4,zero
    56ac:	100b883a 	mov	r5,r2
    56b0:	01800144 	movi	r6,5
    56b4:	00035680 	call	3568 <crc7>
    56b8:	e0bffa05 	stb	r2,-24(fp)
            if (crc != (szResponse[5] >> 1)){
    56bc:	e0bffb83 	ldbu	r2,-18(fp)
    56c0:	10803fcc 	andi	r2,r2,255
    56c4:	1004d07a 	srli	r2,r2,1
    56c8:	10c03fcc 	andi	r3,r2,255
    56cc:	e0bffa03 	ldbu	r2,-24(fp)
    56d0:	18800126 	beq	r3,r2,56d8 <SD_CMD24+0x174>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
    56d4:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
    56d8:	e0bff617 	ldw	r2,-40(fp)
    56dc:	10000526 	beq	r2,zero,56f4 <SD_CMD24+0x190>
    56e0:	e0bffb83 	ldbu	r2,-18(fp)
    56e4:	10803fcc 	andi	r2,r2,255
    56e8:	1080004c 	andi	r2,r2,1
    56ec:	1000011e 	bne	r2,zero,56f4 <SD_CMD24+0x190>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
    56f0:	e03ff615 	stw	zero,-40(fp)
          
    }
    
     
    
    return bSuccess;
    56f4:	e0bff617 	ldw	r2,-40(fp)
}
    56f8:	e037883a 	mov	sp,fp
    56fc:	dfc00117 	ldw	ra,4(sp)
    5700:	df000017 	ldw	fp,0(sp)
    5704:	dec00204 	addi	sp,sp,8
    5708:	f800283a 	ret

0000570c <SD_ReadData>:


bool SD_ReadData(alt_u8 szBuf[], int nBufLen){
    570c:	defffb04 	addi	sp,sp,-20
    5710:	dfc00415 	stw	ra,16(sp)
    5714:	df000315 	stw	fp,12(sp)
    5718:	df000304 	addi	fp,sp,12
    571c:	e13ffe15 	stw	r4,-8(fp)
    5720:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_ReadData(szBuf, nBufLen);
    5724:	e13ffe17 	ldw	r4,-8(fp)
    5728:	e17fff17 	ldw	r5,-4(fp)
    572c:	00039900 	call	3990 <SDHAL_ReadData>
    5730:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
    5734:	e0bffd17 	ldw	r2,-12(fp)
}
    5738:	e037883a 	mov	sp,fp
    573c:	dfc00117 	ldw	ra,4(sp)
    5740:	df000017 	ldw	fp,0(sp)
    5744:	dec00204 	addi	sp,sp,8
    5748:	f800283a 	ret

0000574c <SD_WriteData>:

bool SD_WriteData(alt_u8 szDataWrite[], int nDataLen){
    574c:	defffb04 	addi	sp,sp,-20
    5750:	dfc00415 	stw	ra,16(sp)
    5754:	df000315 	stw	fp,12(sp)
    5758:	df000304 	addi	fp,sp,12
    575c:	e13ffe15 	stw	r4,-8(fp)
    5760:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_WriteData(szDataWrite, nDataLen);
    5764:	e13ffe17 	ldw	r4,-8(fp)
    5768:	e17fff17 	ldw	r5,-4(fp)
    576c:	0003ae80 	call	3ae8 <SDHAL_WriteData>
    5770:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
    5774:	e0bffd17 	ldw	r2,-12(fp)
}
    5778:	e037883a 	mov	sp,fp
    577c:	dfc00117 	ldw	ra,4(sp)
    5780:	df000017 	ldw	fp,0(sp)
    5784:	dec00204 	addi	sp,sp,8
    5788:	f800283a 	ret

0000578c <ArrayToU32>:


alt_u32 ArrayToU32(alt_u8 szData[]){
    578c:	defffc04 	addi	sp,sp,-16
    5790:	df000315 	stw	fp,12(sp)
    5794:	df000304 	addi	fp,sp,12
    5798:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Value32 = 0;
    579c:	e03ffd15 	stw	zero,-12(fp)
    int i;
    
    for(i=0;i<4;i++){
    57a0:	e03ffe15 	stw	zero,-8(fp)
    57a4:	00000e06 	br	57e0 <ArrayToU32+0x54>
        Value32 <<= 8;
    57a8:	e0bffd17 	ldw	r2,-12(fp)
    57ac:	1004923a 	slli	r2,r2,8
    57b0:	e0bffd15 	stw	r2,-12(fp)
        Value32 |= szData[i];
    57b4:	e0bffe17 	ldw	r2,-8(fp)
    57b8:	e0ffff17 	ldw	r3,-4(fp)
    57bc:	1885883a 	add	r2,r3,r2
    57c0:	10800003 	ldbu	r2,0(r2)
    57c4:	10803fcc 	andi	r2,r2,255
    57c8:	e0fffd17 	ldw	r3,-12(fp)
    57cc:	1884b03a 	or	r2,r3,r2
    57d0:	e0bffd15 	stw	r2,-12(fp)

alt_u32 ArrayToU32(alt_u8 szData[]){
    alt_u32 Value32 = 0;
    int i;
    
    for(i=0;i<4;i++){
    57d4:	e0bffe17 	ldw	r2,-8(fp)
    57d8:	10800044 	addi	r2,r2,1
    57dc:	e0bffe15 	stw	r2,-8(fp)
    57e0:	e0bffe17 	ldw	r2,-8(fp)
    57e4:	10800110 	cmplti	r2,r2,4
    57e8:	103fef1e 	bne	r2,zero,57a8 <_gp+0xfffe8f2c>
        Value32 <<= 8;
        Value32 |= szData[i];
    }
    return Value32;
    57ec:	e0bffd17 	ldw	r2,-12(fp)
}
    57f0:	e037883a 	mov	sp,fp
    57f4:	df000017 	ldw	fp,0(sp)
    57f8:	dec00104 	addi	sp,sp,4
    57fc:	f800283a 	ret

00005800 <__mulsf3>:
    5800:	defff104 	addi	sp,sp,-60
    5804:	d9000d15 	stw	r4,52(sp)
    5808:	d9400c15 	stw	r5,48(sp)
    580c:	d9000d04 	addi	r4,sp,52
    5810:	d9400804 	addi	r5,sp,32
    5814:	dfc00e15 	stw	ra,56(sp)
    5818:	00061980 	call	6198 <__unpack_f>
    581c:	d9000c04 	addi	r4,sp,48
    5820:	d9400404 	addi	r5,sp,16
    5824:	00061980 	call	6198 <__unpack_f>
    5828:	d8c00817 	ldw	r3,32(sp)
    582c:	00800044 	movi	r2,1
    5830:	10c00936 	bltu	r2,r3,5858 <__mulsf3+0x58>
    5834:	d8c00917 	ldw	r3,36(sp)
    5838:	d8800517 	ldw	r2,20(sp)
    583c:	d9000804 	addi	r4,sp,32
    5840:	1884c03a 	cmpne	r2,r3,r2
    5844:	d8800915 	stw	r2,36(sp)
    5848:	000606c0 	call	606c <__pack_f>
    584c:	dfc00e17 	ldw	ra,56(sp)
    5850:	dec00f04 	addi	sp,sp,60
    5854:	f800283a 	ret
    5858:	d9000417 	ldw	r4,16(sp)
    585c:	11000936 	bltu	r2,r4,5884 <__mulsf3+0x84>
    5860:	d8800517 	ldw	r2,20(sp)
    5864:	d8c00917 	ldw	r3,36(sp)
    5868:	d9000404 	addi	r4,sp,16
    586c:	1884c03a 	cmpne	r2,r3,r2
    5870:	d8800515 	stw	r2,20(sp)
    5874:	000606c0 	call	606c <__pack_f>
    5878:	dfc00e17 	ldw	ra,56(sp)
    587c:	dec00f04 	addi	sp,sp,60
    5880:	f800283a 	ret
    5884:	00800104 	movi	r2,4
    5888:	1880051e 	bne	r3,r2,58a0 <__mulsf3+0xa0>
    588c:	00800084 	movi	r2,2
    5890:	20bfe81e 	bne	r4,r2,5834 <_gp+0xfffe8fb8>
    5894:	01000074 	movhi	r4,1
    5898:	210a2c04 	addi	r4,r4,10416
    589c:	003fea06 	br	5848 <_gp+0xfffe8fcc>
    58a0:	2080031e 	bne	r4,r2,58b0 <__mulsf3+0xb0>
    58a4:	00800084 	movi	r2,2
    58a8:	18bffa26 	beq	r3,r2,5894 <_gp+0xfffe9018>
    58ac:	003fec06 	br	5860 <_gp+0xfffe8fe4>
    58b0:	00800084 	movi	r2,2
    58b4:	18bfdf26 	beq	r3,r2,5834 <_gp+0xfffe8fb8>
    58b8:	20bfe926 	beq	r4,r2,5860 <_gp+0xfffe8fe4>
    58bc:	d9000717 	ldw	r4,28(sp)
    58c0:	d9800b17 	ldw	r6,44(sp)
    58c4:	000b883a 	mov	r5,zero
    58c8:	000f883a 	mov	r7,zero
    58cc:	0005f600 	call	5f60 <__muldi3>
    58d0:	d9000617 	ldw	r4,24(sp)
    58d4:	d9400a17 	ldw	r5,40(sp)
    58d8:	d9c00917 	ldw	r7,36(sp)
    58dc:	290b883a 	add	r5,r5,r4
    58e0:	d9000517 	ldw	r4,20(sp)
    58e4:	29800084 	addi	r6,r5,2
    58e8:	d9800215 	stw	r6,8(sp)
    58ec:	3908c03a 	cmpne	r4,r7,r4
    58f0:	d9000115 	stw	r4,4(sp)
    58f4:	1809883a 	mov	r4,r3
    58f8:	1800070e 	bge	r3,zero,5918 <__mulsf3+0x118>
    58fc:	1900004c 	andi	r4,r3,1
    5900:	294000c4 	addi	r5,r5,3
    5904:	20000226 	beq	r4,zero,5910 <__mulsf3+0x110>
    5908:	1004d07a 	srli	r2,r2,1
    590c:	10a00034 	orhi	r2,r2,32768
    5910:	1808d07a 	srli	r4,r3,1
    5914:	d9400215 	stw	r5,8(sp)
    5918:	01900034 	movhi	r6,16384
    591c:	31bfffc4 	addi	r6,r6,-1
    5920:	31000c36 	bltu	r6,r4,5954 <__mulsf3+0x154>
    5924:	d8c00217 	ldw	r3,8(sp)
    5928:	18ffffc4 	addi	r3,r3,-1
    592c:	00000306 	br	593c <__mulsf3+0x13c>
    5930:	1085883a 	add	r2,r2,r2
    5934:	18ffffc4 	addi	r3,r3,-1
    5938:	31000536 	bltu	r6,r4,5950 <__mulsf3+0x150>
    593c:	2109883a 	add	r4,r4,r4
    5940:	180b883a 	mov	r5,r3
    5944:	103ffa0e 	bge	r2,zero,5930 <_gp+0xfffe90b4>
    5948:	21000054 	ori	r4,r4,1
    594c:	003ff806 	br	5930 <_gp+0xfffe90b4>
    5950:	d9400215 	stw	r5,8(sp)
    5954:	21401fcc 	andi	r5,r4,127
    5958:	00c01004 	movi	r3,64
    595c:	28c00526 	beq	r5,r3,5974 <__mulsf3+0x174>
    5960:	008000c4 	movi	r2,3
    5964:	d9000315 	stw	r4,12(sp)
    5968:	d8800015 	stw	r2,0(sp)
    596c:	d809883a 	mov	r4,sp
    5970:	003fb506 	br	5848 <_gp+0xfffe8fcc>
    5974:	20c0200c 	andi	r3,r4,128
    5978:	183ff91e 	bne	r3,zero,5960 <_gp+0xfffe90e4>
    597c:	103ff826 	beq	r2,zero,5960 <_gp+0xfffe90e4>
    5980:	21001004 	addi	r4,r4,64
    5984:	00bfe004 	movi	r2,-128
    5988:	2088703a 	and	r4,r4,r2
    598c:	003ff406 	br	5960 <_gp+0xfffe90e4>

00005990 <__divsf3>:
    5990:	defff504 	addi	sp,sp,-44
    5994:	d9000915 	stw	r4,36(sp)
    5998:	d9400815 	stw	r5,32(sp)
    599c:	d9000904 	addi	r4,sp,36
    59a0:	d9400404 	addi	r5,sp,16
    59a4:	dfc00a15 	stw	ra,40(sp)
    59a8:	00061980 	call	6198 <__unpack_f>
    59ac:	d9000804 	addi	r4,sp,32
    59b0:	d80b883a 	mov	r5,sp
    59b4:	00061980 	call	6198 <__unpack_f>
    59b8:	d8c00417 	ldw	r3,16(sp)
    59bc:	00800044 	movi	r2,1
    59c0:	10c00536 	bltu	r2,r3,59d8 <__divsf3+0x48>
    59c4:	d9000404 	addi	r4,sp,16
    59c8:	000606c0 	call	606c <__pack_f>
    59cc:	dfc00a17 	ldw	ra,40(sp)
    59d0:	dec00b04 	addi	sp,sp,44
    59d4:	f800283a 	ret
    59d8:	d9000017 	ldw	r4,0(sp)
    59dc:	11000536 	bltu	r2,r4,59f4 <__divsf3+0x64>
    59e0:	d809883a 	mov	r4,sp
    59e4:	000606c0 	call	606c <__pack_f>
    59e8:	dfc00a17 	ldw	ra,40(sp)
    59ec:	dec00b04 	addi	sp,sp,44
    59f0:	f800283a 	ret
    59f4:	d9800517 	ldw	r6,20(sp)
    59f8:	d9400117 	ldw	r5,4(sp)
    59fc:	00800104 	movi	r2,4
    5a00:	314af03a 	xor	r5,r6,r5
    5a04:	d9400515 	stw	r5,20(sp)
    5a08:	18800226 	beq	r3,r2,5a14 <__divsf3+0x84>
    5a0c:	01400084 	movi	r5,2
    5a10:	1940041e 	bne	r3,r5,5a24 <__divsf3+0x94>
    5a14:	193feb1e 	bne	r3,r4,59c4 <_gp+0xfffe9148>
    5a18:	01000074 	movhi	r4,1
    5a1c:	210a2c04 	addi	r4,r4,10416
    5a20:	003fe906 	br	59c8 <_gp+0xfffe914c>
    5a24:	20802226 	beq	r4,r2,5ab0 <__divsf3+0x120>
    5a28:	21402526 	beq	r4,r5,5ac0 <__divsf3+0x130>
    5a2c:	d9000617 	ldw	r4,24(sp)
    5a30:	d8c00217 	ldw	r3,8(sp)
    5a34:	d8800717 	ldw	r2,28(sp)
    5a38:	d9400317 	ldw	r5,12(sp)
    5a3c:	20c7c83a 	sub	r3,r4,r3
    5a40:	d8c00615 	stw	r3,24(sp)
    5a44:	1140032e 	bgeu	r2,r5,5a54 <__divsf3+0xc4>
    5a48:	18ffffc4 	addi	r3,r3,-1
    5a4c:	1085883a 	add	r2,r2,r2
    5a50:	d8c00615 	stw	r3,24(sp)
    5a54:	00c007c4 	movi	r3,31
    5a58:	01100034 	movhi	r4,16384
    5a5c:	000d883a 	mov	r6,zero
    5a60:	18ffffc4 	addi	r3,r3,-1
    5a64:	11400236 	bltu	r2,r5,5a70 <__divsf3+0xe0>
    5a68:	310cb03a 	or	r6,r6,r4
    5a6c:	1145c83a 	sub	r2,r2,r5
    5a70:	2008d07a 	srli	r4,r4,1
    5a74:	1085883a 	add	r2,r2,r2
    5a78:	183ff91e 	bne	r3,zero,5a60 <_gp+0xfffe91e4>
    5a7c:	31001fcc 	andi	r4,r6,127
    5a80:	00c01004 	movi	r3,64
    5a84:	20c00226 	beq	r4,r3,5a90 <__divsf3+0x100>
    5a88:	d9800715 	stw	r6,28(sp)
    5a8c:	003fcd06 	br	59c4 <_gp+0xfffe9148>
    5a90:	30c0200c 	andi	r3,r6,128
    5a94:	183ffc1e 	bne	r3,zero,5a88 <_gp+0xfffe920c>
    5a98:	103ffb26 	beq	r2,zero,5a88 <_gp+0xfffe920c>
    5a9c:	31801004 	addi	r6,r6,64
    5aa0:	00bfe004 	movi	r2,-128
    5aa4:	308c703a 	and	r6,r6,r2
    5aa8:	d9800715 	stw	r6,28(sp)
    5aac:	003fc506 	br	59c4 <_gp+0xfffe9148>
    5ab0:	d8000715 	stw	zero,28(sp)
    5ab4:	d8000615 	stw	zero,24(sp)
    5ab8:	d9000404 	addi	r4,sp,16
    5abc:	003fc206 	br	59c8 <_gp+0xfffe914c>
    5ac0:	d8800415 	stw	r2,16(sp)
    5ac4:	d9000404 	addi	r4,sp,16
    5ac8:	003fbf06 	br	59c8 <_gp+0xfffe914c>

00005acc <__extendsfdf2>:
    5acc:	defff904 	addi	sp,sp,-28
    5ad0:	d9000515 	stw	r4,20(sp)
    5ad4:	d9400104 	addi	r5,sp,4
    5ad8:	d9000504 	addi	r4,sp,20
    5adc:	dfc00615 	stw	ra,24(sp)
    5ae0:	00061980 	call	6198 <__unpack_f>
    5ae4:	d9c00417 	ldw	r7,16(sp)
    5ae8:	d9000117 	ldw	r4,4(sp)
    5aec:	d9400217 	ldw	r5,8(sp)
    5af0:	3804d0ba 	srli	r2,r7,2
    5af4:	d9800317 	ldw	r6,12(sp)
    5af8:	380e97ba 	slli	r7,r7,30
    5afc:	d8800015 	stw	r2,0(sp)
    5b00:	0005d980 	call	5d98 <__make_dp>
    5b04:	dfc00617 	ldw	ra,24(sp)
    5b08:	dec00704 	addi	sp,sp,28
    5b0c:	f800283a 	ret

00005b10 <__floatunsisf>:
    5b10:	defffa04 	addi	sp,sp,-24
    5b14:	dc000415 	stw	r16,16(sp)
    5b18:	dfc00515 	stw	ra,20(sp)
    5b1c:	d8000115 	stw	zero,4(sp)
    5b20:	2021883a 	mov	r16,r4
    5b24:	20001326 	beq	r4,zero,5b74 <__floatunsisf+0x64>
    5b28:	008000c4 	movi	r2,3
    5b2c:	d8800015 	stw	r2,0(sp)
    5b30:	00800784 	movi	r2,30
    5b34:	d8800215 	stw	r2,8(sp)
    5b38:	0005fc00 	call	5fc0 <__clzsi2>
    5b3c:	10ffffc4 	addi	r3,r2,-1
    5b40:	18001416 	blt	r3,zero,5b94 <__floatunsisf+0x84>
    5b44:	18002526 	beq	r3,zero,5bdc <__floatunsisf+0xcc>
    5b48:	80e0983a 	sll	r16,r16,r3
    5b4c:	00c007c4 	movi	r3,31
    5b50:	1885c83a 	sub	r2,r3,r2
    5b54:	dc000315 	stw	r16,12(sp)
    5b58:	d8800215 	stw	r2,8(sp)
    5b5c:	d809883a 	mov	r4,sp
    5b60:	000606c0 	call	606c <__pack_f>
    5b64:	dfc00517 	ldw	ra,20(sp)
    5b68:	dc000417 	ldw	r16,16(sp)
    5b6c:	dec00604 	addi	sp,sp,24
    5b70:	f800283a 	ret
    5b74:	00800084 	movi	r2,2
    5b78:	d809883a 	mov	r4,sp
    5b7c:	d8800015 	stw	r2,0(sp)
    5b80:	000606c0 	call	606c <__pack_f>
    5b84:	dfc00517 	ldw	ra,20(sp)
    5b88:	dc000417 	ldw	r16,16(sp)
    5b8c:	dec00604 	addi	sp,sp,24
    5b90:	f800283a 	ret
    5b94:	00c7c83a 	sub	r3,zero,r3
    5b98:	01000044 	movi	r4,1
    5b9c:	20c8983a 	sll	r4,r4,r3
    5ba0:	80c6d83a 	srl	r3,r16,r3
    5ba4:	213fffc4 	addi	r4,r4,-1
    5ba8:	2420703a 	and	r16,r4,r16
    5bac:	8020c03a 	cmpne	r16,r16,zero
    5bb0:	010007c4 	movi	r4,31
    5bb4:	80c6b03a 	or	r3,r16,r3
    5bb8:	2085c83a 	sub	r2,r4,r2
    5bbc:	d809883a 	mov	r4,sp
    5bc0:	d8c00315 	stw	r3,12(sp)
    5bc4:	d8800215 	stw	r2,8(sp)
    5bc8:	000606c0 	call	606c <__pack_f>
    5bcc:	dfc00517 	ldw	ra,20(sp)
    5bd0:	dc000417 	ldw	r16,16(sp)
    5bd4:	dec00604 	addi	sp,sp,24
    5bd8:	f800283a 	ret
    5bdc:	dc000315 	stw	r16,12(sp)
    5be0:	003fde06 	br	5b5c <_gp+0xfffe92e0>

00005be4 <__divdf3>:
    5be4:	defff104 	addi	sp,sp,-60
    5be8:	d9000c15 	stw	r4,48(sp)
    5bec:	d9400d15 	stw	r5,52(sp)
    5bf0:	d9000c04 	addi	r4,sp,48
    5bf4:	d9400504 	addi	r5,sp,20
    5bf8:	dfc00e15 	stw	ra,56(sp)
    5bfc:	d9800a15 	stw	r6,40(sp)
    5c00:	d9c00b15 	stw	r7,44(sp)
    5c04:	00064b00 	call	64b0 <__unpack_d>
    5c08:	d9000a04 	addi	r4,sp,40
    5c0c:	d80b883a 	mov	r5,sp
    5c10:	00064b00 	call	64b0 <__unpack_d>
    5c14:	d8c00517 	ldw	r3,20(sp)
    5c18:	00800044 	movi	r2,1
    5c1c:	10c00536 	bltu	r2,r3,5c34 <__divdf3+0x50>
    5c20:	d9000504 	addi	r4,sp,20
    5c24:	000628c0 	call	628c <__pack_d>
    5c28:	dfc00e17 	ldw	ra,56(sp)
    5c2c:	dec00f04 	addi	sp,sp,60
    5c30:	f800283a 	ret
    5c34:	d9000017 	ldw	r4,0(sp)
    5c38:	11000536 	bltu	r2,r4,5c50 <__divdf3+0x6c>
    5c3c:	d809883a 	mov	r4,sp
    5c40:	000628c0 	call	628c <__pack_d>
    5c44:	dfc00e17 	ldw	ra,56(sp)
    5c48:	dec00f04 	addi	sp,sp,60
    5c4c:	f800283a 	ret
    5c50:	d9800617 	ldw	r6,24(sp)
    5c54:	d9400117 	ldw	r5,4(sp)
    5c58:	00800104 	movi	r2,4
    5c5c:	314af03a 	xor	r5,r6,r5
    5c60:	d9400615 	stw	r5,24(sp)
    5c64:	18800226 	beq	r3,r2,5c70 <__divdf3+0x8c>
    5c68:	01400084 	movi	r5,2
    5c6c:	1940041e 	bne	r3,r5,5c80 <__divdf3+0x9c>
    5c70:	193feb1e 	bne	r3,r4,5c20 <_gp+0xfffe93a4>
    5c74:	01000074 	movhi	r4,1
    5c78:	210a3004 	addi	r4,r4,10432
    5c7c:	003fe906 	br	5c24 <_gp+0xfffe93a8>
    5c80:	20803326 	beq	r4,r2,5d50 <__divdf3+0x16c>
    5c84:	21403726 	beq	r4,r5,5d64 <__divdf3+0x180>
    5c88:	d8800217 	ldw	r2,8(sp)
    5c8c:	d9000717 	ldw	r4,28(sp)
    5c90:	d8c00917 	ldw	r3,36(sp)
    5c94:	da000417 	ldw	r8,16(sp)
    5c98:	2089c83a 	sub	r4,r4,r2
    5c9c:	d9000715 	stw	r4,28(sp)
    5ca0:	d8800817 	ldw	r2,32(sp)
    5ca4:	dbc00317 	ldw	r15,12(sp)
    5ca8:	1a000236 	bltu	r3,r8,5cb4 <__divdf3+0xd0>
    5cac:	40c0081e 	bne	r8,r3,5cd0 <__divdf3+0xec>
    5cb0:	13c0072e 	bgeu	r2,r15,5cd0 <__divdf3+0xec>
    5cb4:	108b883a 	add	r5,r2,r2
    5cb8:	288d803a 	cmpltu	r6,r5,r2
    5cbc:	18c7883a 	add	r3,r3,r3
    5cc0:	213fffc4 	addi	r4,r4,-1
    5cc4:	2805883a 	mov	r2,r5
    5cc8:	30c7883a 	add	r3,r6,r3
    5ccc:	d9000715 	stw	r4,28(sp)
    5cd0:	01400f44 	movi	r5,61
    5cd4:	000f883a 	mov	r7,zero
    5cd8:	01040034 	movhi	r4,4096
    5cdc:	0019883a 	mov	r12,zero
    5ce0:	001b883a 	mov	r13,zero
    5ce4:	201697fa 	slli	r11,r4,31
    5ce8:	3814d07a 	srli	r10,r7,1
    5cec:	297fffc4 	addi	r5,r5,-1
    5cf0:	1a000936 	bltu	r3,r8,5d18 <__divdf3+0x134>
    5cf4:	13cdc83a 	sub	r6,r2,r15
    5cf8:	1193803a 	cmpltu	r9,r2,r6
    5cfc:	1a1dc83a 	sub	r14,r3,r8
    5d00:	40c0011e 	bne	r8,r3,5d08 <__divdf3+0x124>
    5d04:	13c00436 	bltu	r2,r15,5d18 <__divdf3+0x134>
    5d08:	3005883a 	mov	r2,r6
    5d0c:	7247c83a 	sub	r3,r14,r9
    5d10:	61d8b03a 	or	r12,r12,r7
    5d14:	691ab03a 	or	r13,r13,r4
    5d18:	108d883a 	add	r6,r2,r2
    5d1c:	3093803a 	cmpltu	r9,r6,r2
    5d20:	18c7883a 	add	r3,r3,r3
    5d24:	5a8eb03a 	or	r7,r11,r10
    5d28:	2008d07a 	srli	r4,r4,1
    5d2c:	3005883a 	mov	r2,r6
    5d30:	48c7883a 	add	r3,r9,r3
    5d34:	283feb1e 	bne	r5,zero,5ce4 <_gp+0xfffe9468>
    5d38:	61003fcc 	andi	r4,r12,255
    5d3c:	01402004 	movi	r5,128
    5d40:	21400b26 	beq	r4,r5,5d70 <__divdf3+0x18c>
    5d44:	db000815 	stw	r12,32(sp)
    5d48:	db400915 	stw	r13,36(sp)
    5d4c:	003fb406 	br	5c20 <_gp+0xfffe93a4>
    5d50:	d8000815 	stw	zero,32(sp)
    5d54:	d8000915 	stw	zero,36(sp)
    5d58:	d8000715 	stw	zero,28(sp)
    5d5c:	d9000504 	addi	r4,sp,20
    5d60:	003fb006 	br	5c24 <_gp+0xfffe93a8>
    5d64:	d8800515 	stw	r2,20(sp)
    5d68:	d9000504 	addi	r4,sp,20
    5d6c:	003fad06 	br	5c24 <_gp+0xfffe93a8>
    5d70:	6140400c 	andi	r5,r12,256
    5d74:	283ff31e 	bne	r5,zero,5d44 <_gp+0xfffe94c8>
    5d78:	30c4b03a 	or	r2,r6,r3
    5d7c:	103ff126 	beq	r2,zero,5d44 <_gp+0xfffe94c8>
    5d80:	6109883a 	add	r4,r12,r4
    5d84:	2305803a 	cmpltu	r2,r4,r12
    5d88:	033fc004 	movi	r12,-256
    5d8c:	2318703a 	and	r12,r4,r12
    5d90:	135b883a 	add	r13,r2,r13
    5d94:	003feb06 	br	5d44 <_gp+0xfffe94c8>

00005d98 <__make_dp>:
    5d98:	defff904 	addi	sp,sp,-28
    5d9c:	d8800717 	ldw	r2,28(sp)
    5da0:	d9000015 	stw	r4,0(sp)
    5da4:	d809883a 	mov	r4,sp
    5da8:	dfc00515 	stw	ra,20(sp)
    5dac:	d9c00615 	stw	r7,24(sp)
    5db0:	d9400115 	stw	r5,4(sp)
    5db4:	d9800215 	stw	r6,8(sp)
    5db8:	d9c00315 	stw	r7,12(sp)
    5dbc:	d8800415 	stw	r2,16(sp)
    5dc0:	000628c0 	call	628c <__pack_d>
    5dc4:	dfc00517 	ldw	ra,20(sp)
    5dc8:	dec00704 	addi	sp,sp,28
    5dcc:	f800283a 	ret

00005dd0 <__truncdfsf2>:
    5dd0:	defff804 	addi	sp,sp,-32
    5dd4:	d9000515 	stw	r4,20(sp)
    5dd8:	d9400615 	stw	r5,24(sp)
    5ddc:	d9000504 	addi	r4,sp,20
    5de0:	d80b883a 	mov	r5,sp
    5de4:	dfc00715 	stw	ra,28(sp)
    5de8:	00064b00 	call	64b0 <__unpack_d>
    5dec:	d8800317 	ldw	r2,12(sp)
    5df0:	d8c00417 	ldw	r3,16(sp)
    5df4:	01100034 	movhi	r4,16384
    5df8:	213fffc4 	addi	r4,r4,-1
    5dfc:	100ed7ba 	srli	r7,r2,30
    5e00:	180690ba 	slli	r3,r3,2
    5e04:	1104703a 	and	r2,r2,r4
    5e08:	19ceb03a 	or	r7,r3,r7
    5e0c:	10000126 	beq	r2,zero,5e14 <__truncdfsf2+0x44>
    5e10:	39c00054 	ori	r7,r7,1
    5e14:	d9000017 	ldw	r4,0(sp)
    5e18:	d9400117 	ldw	r5,4(sp)
    5e1c:	d9800217 	ldw	r6,8(sp)
    5e20:	00062600 	call	6260 <__make_fp>
    5e24:	dfc00717 	ldw	ra,28(sp)
    5e28:	dec00804 	addi	sp,sp,32
    5e2c:	f800283a 	ret

00005e30 <udivmodsi4>:
    5e30:	2005883a 	mov	r2,r4
    5e34:	2900182e 	bgeu	r5,r4,5e98 <udivmodsi4+0x68>
    5e38:	28001716 	blt	r5,zero,5e98 <udivmodsi4+0x68>
    5e3c:	01000804 	movi	r4,32
    5e40:	00c00044 	movi	r3,1
    5e44:	00000206 	br	5e50 <udivmodsi4+0x20>
    5e48:	20001126 	beq	r4,zero,5e90 <udivmodsi4+0x60>
    5e4c:	28000516 	blt	r5,zero,5e64 <udivmodsi4+0x34>
    5e50:	294b883a 	add	r5,r5,r5
    5e54:	213fffc4 	addi	r4,r4,-1
    5e58:	18c7883a 	add	r3,r3,r3
    5e5c:	28bffa36 	bltu	r5,r2,5e48 <_gp+0xfffe95cc>
    5e60:	18000b26 	beq	r3,zero,5e90 <udivmodsi4+0x60>
    5e64:	0009883a 	mov	r4,zero
    5e68:	11400236 	bltu	r2,r5,5e74 <udivmodsi4+0x44>
    5e6c:	1145c83a 	sub	r2,r2,r5
    5e70:	20c8b03a 	or	r4,r4,r3
    5e74:	1806d07a 	srli	r3,r3,1
    5e78:	280ad07a 	srli	r5,r5,1
    5e7c:	183ffa1e 	bne	r3,zero,5e68 <_gp+0xfffe95ec>
    5e80:	3000021e 	bne	r6,zero,5e8c <udivmodsi4+0x5c>
    5e84:	2005883a 	mov	r2,r4
    5e88:	f800283a 	ret
    5e8c:	f800283a 	ret
    5e90:	0009883a 	mov	r4,zero
    5e94:	003ffa06 	br	5e80 <_gp+0xfffe9604>
    5e98:	00c00044 	movi	r3,1
    5e9c:	0009883a 	mov	r4,zero
    5ea0:	003ff106 	br	5e68 <_gp+0xfffe95ec>

00005ea4 <__divsi3>:
    5ea4:	defffe04 	addi	sp,sp,-8
    5ea8:	dfc00115 	stw	ra,4(sp)
    5eac:	dc000015 	stw	r16,0(sp)
    5eb0:	20000a16 	blt	r4,zero,5edc <__divsi3+0x38>
    5eb4:	0021883a 	mov	r16,zero
    5eb8:	28000b16 	blt	r5,zero,5ee8 <__divsi3+0x44>
    5ebc:	000d883a 	mov	r6,zero
    5ec0:	0005e300 	call	5e30 <udivmodsi4>
    5ec4:	80000126 	beq	r16,zero,5ecc <__divsi3+0x28>
    5ec8:	0085c83a 	sub	r2,zero,r2
    5ecc:	dfc00117 	ldw	ra,4(sp)
    5ed0:	dc000017 	ldw	r16,0(sp)
    5ed4:	dec00204 	addi	sp,sp,8
    5ed8:	f800283a 	ret
    5edc:	0109c83a 	sub	r4,zero,r4
    5ee0:	04000044 	movi	r16,1
    5ee4:	283ff50e 	bge	r5,zero,5ebc <_gp+0xfffe9640>
    5ee8:	014bc83a 	sub	r5,zero,r5
    5eec:	8400005c 	xori	r16,r16,1
    5ef0:	003ff206 	br	5ebc <_gp+0xfffe9640>

00005ef4 <__modsi3>:
    5ef4:	deffff04 	addi	sp,sp,-4
    5ef8:	dfc00015 	stw	ra,0(sp)
    5efc:	20000516 	blt	r4,zero,5f14 <__modsi3+0x20>
    5f00:	28000c16 	blt	r5,zero,5f34 <__modsi3+0x40>
    5f04:	01800044 	movi	r6,1
    5f08:	dfc00017 	ldw	ra,0(sp)
    5f0c:	dec00104 	addi	sp,sp,4
    5f10:	0005e301 	jmpi	5e30 <udivmodsi4>
    5f14:	0109c83a 	sub	r4,zero,r4
    5f18:	28000b16 	blt	r5,zero,5f48 <__modsi3+0x54>
    5f1c:	01800044 	movi	r6,1
    5f20:	0005e300 	call	5e30 <udivmodsi4>
    5f24:	0085c83a 	sub	r2,zero,r2
    5f28:	dfc00017 	ldw	ra,0(sp)
    5f2c:	dec00104 	addi	sp,sp,4
    5f30:	f800283a 	ret
    5f34:	014bc83a 	sub	r5,zero,r5
    5f38:	01800044 	movi	r6,1
    5f3c:	dfc00017 	ldw	ra,0(sp)
    5f40:	dec00104 	addi	sp,sp,4
    5f44:	0005e301 	jmpi	5e30 <udivmodsi4>
    5f48:	014bc83a 	sub	r5,zero,r5
    5f4c:	003ff306 	br	5f1c <_gp+0xfffe96a0>

00005f50 <__udivsi3>:
    5f50:	000d883a 	mov	r6,zero
    5f54:	0005e301 	jmpi	5e30 <udivmodsi4>

00005f58 <__umodsi3>:
    5f58:	01800044 	movi	r6,1
    5f5c:	0005e301 	jmpi	5e30 <udivmodsi4>

00005f60 <__muldi3>:
    5f60:	20bfffcc 	andi	r2,r4,65535
    5f64:	2010d43a 	srli	r8,r4,16
    5f68:	30ffffcc 	andi	r3,r6,65535
    5f6c:	3014d43a 	srli	r10,r6,16
    5f70:	1893383a 	mul	r9,r3,r2
    5f74:	1a07383a 	mul	r3,r3,r8
    5f78:	5085383a 	mul	r2,r10,r2
    5f7c:	4816d43a 	srli	r11,r9,16
    5f80:	5211383a 	mul	r8,r10,r8
    5f84:	1885883a 	add	r2,r3,r2
    5f88:	12c5883a 	add	r2,r2,r11
    5f8c:	10c0022e 	bgeu	r2,r3,5f98 <__muldi3+0x38>
    5f90:	00c00074 	movhi	r3,1
    5f94:	40d1883a 	add	r8,r8,r3
    5f98:	1014d43a 	srli	r10,r2,16
    5f9c:	21c9383a 	mul	r4,r4,r7
    5fa0:	314d383a 	mul	r6,r6,r5
    5fa4:	1004943a 	slli	r2,r2,16
    5fa8:	4291883a 	add	r8,r8,r10
    5fac:	4a7fffcc 	andi	r9,r9,65535
    5fb0:	2187883a 	add	r3,r4,r6
    5fb4:	1245883a 	add	r2,r2,r9
    5fb8:	1a07883a 	add	r3,r3,r8
    5fbc:	f800283a 	ret

00005fc0 <__clzsi2>:
    5fc0:	00bfffd4 	movui	r2,65535
    5fc4:	11000b36 	bltu	r2,r4,5ff4 <__clzsi2+0x34>
    5fc8:	00803fc4 	movi	r2,255
    5fcc:	11001e2e 	bgeu	r2,r4,6048 <__clzsi2+0x88>
    5fd0:	00c00204 	movi	r3,8
    5fd4:	20c8d83a 	srl	r4,r4,r3
    5fd8:	00c00074 	movhi	r3,1
    5fdc:	18ca3504 	addi	r3,r3,10452
    5fe0:	00800604 	movi	r2,24
    5fe4:	1909883a 	add	r4,r3,r4
    5fe8:	20c00003 	ldbu	r3,0(r4)
    5fec:	10c5c83a 	sub	r2,r2,r3
    5ff0:	f800283a 	ret
    5ff4:	00804034 	movhi	r2,256
    5ff8:	10bfffc4 	addi	r2,r2,-1
    5ffc:	11000936 	bltu	r2,r4,6024 <__clzsi2+0x64>
    6000:	00800404 	movi	r2,16
    6004:	1007883a 	mov	r3,r2
    6008:	20c8d83a 	srl	r4,r4,r3
    600c:	00c00074 	movhi	r3,1
    6010:	18ca3504 	addi	r3,r3,10452
    6014:	1909883a 	add	r4,r3,r4
    6018:	20c00003 	ldbu	r3,0(r4)
    601c:	10c5c83a 	sub	r2,r2,r3
    6020:	f800283a 	ret
    6024:	00c00604 	movi	r3,24
    6028:	20c8d83a 	srl	r4,r4,r3
    602c:	00c00074 	movhi	r3,1
    6030:	18ca3504 	addi	r3,r3,10452
    6034:	00800204 	movi	r2,8
    6038:	1909883a 	add	r4,r3,r4
    603c:	20c00003 	ldbu	r3,0(r4)
    6040:	10c5c83a 	sub	r2,r2,r3
    6044:	f800283a 	ret
    6048:	0007883a 	mov	r3,zero
    604c:	20c8d83a 	srl	r4,r4,r3
    6050:	00c00074 	movhi	r3,1
    6054:	18ca3504 	addi	r3,r3,10452
    6058:	00800804 	movi	r2,32
    605c:	1909883a 	add	r4,r3,r4
    6060:	20c00003 	ldbu	r3,0(r4)
    6064:	10c5c83a 	sub	r2,r2,r3
    6068:	f800283a 	ret

0000606c <__pack_f>:
    606c:	21400017 	ldw	r5,0(r4)
    6070:	01800044 	movi	r6,1
    6074:	20c00317 	ldw	r3,12(r4)
    6078:	21c00117 	ldw	r7,4(r4)
    607c:	3140282e 	bgeu	r6,r5,6120 <__pack_f+0xb4>
    6080:	00800104 	movi	r2,4
    6084:	28802326 	beq	r5,r2,6114 <__pack_f+0xa8>
    6088:	00800084 	movi	r2,2
    608c:	28800f26 	beq	r5,r2,60cc <__pack_f+0x60>
    6090:	18000e26 	beq	r3,zero,60cc <__pack_f+0x60>
    6094:	21000217 	ldw	r4,8(r4)
    6098:	00bfe084 	movi	r2,-126
    609c:	20802616 	blt	r4,r2,6138 <__pack_f+0xcc>
    60a0:	00801fc4 	movi	r2,127
    60a4:	11001b16 	blt	r2,r4,6114 <__pack_f+0xa8>
    60a8:	188a703a 	and	r5,r3,r2
    60ac:	00801004 	movi	r2,64
    60b0:	28801126 	beq	r5,r2,60f8 <__pack_f+0x8c>
    60b4:	18c00fc4 	addi	r3,r3,63
    60b8:	18001316 	blt	r3,zero,6108 <__pack_f+0x9c>
    60bc:	21001fc4 	addi	r4,r4,127
    60c0:	180690ba 	slli	r3,r3,2
    60c4:	1806d27a 	srli	r3,r3,9
    60c8:	00000206 	br	60d4 <__pack_f+0x68>
    60cc:	0009883a 	mov	r4,zero
    60d0:	0007883a 	mov	r3,zero
    60d4:	21003fcc 	andi	r4,r4,255
    60d8:	200895fa 	slli	r4,r4,23
    60dc:	380a97fa 	slli	r5,r7,31
    60e0:	00802034 	movhi	r2,128
    60e4:	10bfffc4 	addi	r2,r2,-1
    60e8:	1886703a 	and	r3,r3,r2
    60ec:	1904b03a 	or	r2,r3,r4
    60f0:	1144b03a 	or	r2,r2,r5
    60f4:	f800283a 	ret
    60f8:	1880200c 	andi	r2,r3,128
    60fc:	103fee26 	beq	r2,zero,60b8 <_gp+0xfffe983c>
    6100:	18c01004 	addi	r3,r3,64
    6104:	183fed0e 	bge	r3,zero,60bc <_gp+0xfffe9840>
    6108:	1806d07a 	srli	r3,r3,1
    610c:	21002004 	addi	r4,r4,128
    6110:	003feb06 	br	60c0 <_gp+0xfffe9844>
    6114:	013fffc4 	movi	r4,-1
    6118:	0007883a 	mov	r3,zero
    611c:	003fed06 	br	60d4 <_gp+0xfffe9858>
    6120:	18c00434 	orhi	r3,r3,16
    6124:	00802034 	movhi	r2,128
    6128:	10bfffc4 	addi	r2,r2,-1
    612c:	1886703a 	and	r3,r3,r2
    6130:	013fffc4 	movi	r4,-1
    6134:	003fe706 	br	60d4 <_gp+0xfffe9858>
    6138:	1105c83a 	sub	r2,r2,r4
    613c:	01000644 	movi	r4,25
    6140:	20801216 	blt	r4,r2,618c <__pack_f+0x120>
    6144:	3088983a 	sll	r4,r6,r2
    6148:	1884d83a 	srl	r2,r3,r2
    614c:	213fffc4 	addi	r4,r4,-1
    6150:	20c6703a 	and	r3,r4,r3
    6154:	1806c03a 	cmpne	r3,r3,zero
    6158:	1884b03a 	or	r2,r3,r2
    615c:	11001fcc 	andi	r4,r2,127
    6160:	00c01004 	movi	r3,64
    6164:	20c00a1e 	bne	r4,r3,6190 <__pack_f+0x124>
    6168:	10c0200c 	andi	r3,r2,128
    616c:	18000126 	beq	r3,zero,6174 <__pack_f+0x108>
    6170:	10801004 	addi	r2,r2,64
    6174:	100690ba 	slli	r3,r2,2
    6178:	01100034 	movhi	r4,16384
    617c:	1105403a 	cmpgeu	r2,r2,r4
    6180:	1806d27a 	srli	r3,r3,9
    6184:	1009883a 	mov	r4,r2
    6188:	003fd206 	br	60d4 <_gp+0xfffe9858>
    618c:	0005883a 	mov	r2,zero
    6190:	10800fc4 	addi	r2,r2,63
    6194:	003ff706 	br	6174 <_gp+0xfffe98f8>

00006198 <__unpack_f>:
    6198:	20c00017 	ldw	r3,0(r4)
    619c:	00802034 	movhi	r2,128
    61a0:	10bfffc4 	addi	r2,r2,-1
    61a4:	1808d5fa 	srli	r4,r3,23
    61a8:	180cd7fa 	srli	r6,r3,31
    61ac:	1884703a 	and	r2,r3,r2
    61b0:	21003fcc 	andi	r4,r4,255
    61b4:	29800115 	stw	r6,4(r5)
    61b8:	2000111e 	bne	r4,zero,6200 <__unpack_f+0x68>
    61bc:	10001a26 	beq	r2,zero,6228 <__unpack_f+0x90>
    61c0:	00ffe084 	movi	r3,-126
    61c4:	100491fa 	slli	r2,r2,7
    61c8:	28c00215 	stw	r3,8(r5)
    61cc:	00c000c4 	movi	r3,3
    61d0:	28c00015 	stw	r3,0(r5)
    61d4:	01900034 	movhi	r6,16384
    61d8:	31bfffc4 	addi	r6,r6,-1
    61dc:	30801036 	bltu	r6,r2,6220 <__unpack_f+0x88>
    61e0:	00ffe044 	movi	r3,-127
    61e4:	1085883a 	add	r2,r2,r2
    61e8:	1809883a 	mov	r4,r3
    61ec:	18ffffc4 	addi	r3,r3,-1
    61f0:	30bffc2e 	bgeu	r6,r2,61e4 <_gp+0xfffe9968>
    61f4:	29000215 	stw	r4,8(r5)
    61f8:	28800315 	stw	r2,12(r5)
    61fc:	f800283a 	ret
    6200:	01803fc4 	movi	r6,255
    6204:	21800b26 	beq	r4,r6,6234 <__unpack_f+0x9c>
    6208:	100491fa 	slli	r2,r2,7
    620c:	213fe044 	addi	r4,r4,-127
    6210:	00c000c4 	movi	r3,3
    6214:	10900034 	orhi	r2,r2,16384
    6218:	29000215 	stw	r4,8(r5)
    621c:	28c00015 	stw	r3,0(r5)
    6220:	28800315 	stw	r2,12(r5)
    6224:	f800283a 	ret
    6228:	00800084 	movi	r2,2
    622c:	28800015 	stw	r2,0(r5)
    6230:	f800283a 	ret
    6234:	10000526 	beq	r2,zero,624c <__unpack_f+0xb4>
    6238:	18c0042c 	andhi	r3,r3,16
    623c:	18000626 	beq	r3,zero,6258 <__unpack_f+0xc0>
    6240:	00c00044 	movi	r3,1
    6244:	28c00015 	stw	r3,0(r5)
    6248:	003ff506 	br	6220 <_gp+0xfffe99a4>
    624c:	00800104 	movi	r2,4
    6250:	28800015 	stw	r2,0(r5)
    6254:	f800283a 	ret
    6258:	28000015 	stw	zero,0(r5)
    625c:	003ff006 	br	6220 <_gp+0xfffe99a4>

00006260 <__make_fp>:
    6260:	defffb04 	addi	sp,sp,-20
    6264:	d9000015 	stw	r4,0(sp)
    6268:	d809883a 	mov	r4,sp
    626c:	dfc00415 	stw	ra,16(sp)
    6270:	d9400115 	stw	r5,4(sp)
    6274:	d9800215 	stw	r6,8(sp)
    6278:	d9c00315 	stw	r7,12(sp)
    627c:	000606c0 	call	606c <__pack_f>
    6280:	dfc00417 	ldw	ra,16(sp)
    6284:	dec00504 	addi	sp,sp,20
    6288:	f800283a 	ret

0000628c <__pack_d>:
    628c:	20800017 	ldw	r2,0(r4)
    6290:	defff804 	addi	sp,sp,-32
    6294:	dcc00315 	stw	r19,12(sp)
    6298:	dc800215 	stw	r18,8(sp)
    629c:	dfc00715 	stw	ra,28(sp)
    62a0:	dd800615 	stw	r22,24(sp)
    62a4:	dd400515 	stw	r21,20(sp)
    62a8:	dd000415 	stw	r20,16(sp)
    62ac:	dc400115 	stw	r17,4(sp)
    62b0:	dc000015 	stw	r16,0(sp)
    62b4:	04800044 	movi	r18,1
    62b8:	24400317 	ldw	r17,12(r4)
    62bc:	24000417 	ldw	r16,16(r4)
    62c0:	24c00117 	ldw	r19,4(r4)
    62c4:	9080422e 	bgeu	r18,r2,63d0 <__pack_d+0x144>
    62c8:	00c00104 	movi	r3,4
    62cc:	10c03c26 	beq	r2,r3,63c0 <__pack_d+0x134>
    62d0:	00c00084 	movi	r3,2
    62d4:	10c01926 	beq	r2,r3,633c <__pack_d+0xb0>
    62d8:	8c04b03a 	or	r2,r17,r16
    62dc:	10001726 	beq	r2,zero,633c <__pack_d+0xb0>
    62e0:	21000217 	ldw	r4,8(r4)
    62e4:	00bf0084 	movi	r2,-1022
    62e8:	20804016 	blt	r4,r2,63ec <__pack_d+0x160>
    62ec:	0080ffc4 	movi	r2,1023
    62f0:	11003316 	blt	r2,r4,63c0 <__pack_d+0x134>
    62f4:	88803fcc 	andi	r2,r17,255
    62f8:	00c02004 	movi	r3,128
    62fc:	10c02926 	beq	r2,r3,63a4 <__pack_d+0x118>
    6300:	88801fc4 	addi	r2,r17,127
    6304:	1463803a 	cmpltu	r17,r2,r17
    6308:	8c21883a 	add	r16,r17,r16
    630c:	1023883a 	mov	r17,r2
    6310:	00880034 	movhi	r2,8192
    6314:	10bfffc4 	addi	r2,r2,-1
    6318:	14001c36 	bltu	r2,r16,638c <__pack_d+0x100>
    631c:	2100ffc4 	addi	r4,r4,1023
    6320:	8006963a 	slli	r3,r16,24
    6324:	8804d23a 	srli	r2,r17,8
    6328:	8020913a 	slli	r16,r16,4
    632c:	2101ffcc 	andi	r4,r4,2047
    6330:	1884b03a 	or	r2,r3,r2
    6334:	8020d33a 	srli	r16,r16,12
    6338:	00000306 	br	6348 <__pack_d+0xbc>
    633c:	0009883a 	mov	r4,zero
    6340:	0005883a 	mov	r2,zero
    6344:	0021883a 	mov	r16,zero
    6348:	2008953a 	slli	r4,r4,20
    634c:	982697fa 	slli	r19,r19,31
    6350:	00c00434 	movhi	r3,16
    6354:	18ffffc4 	addi	r3,r3,-1
    6358:	80e0703a 	and	r16,r16,r3
    635c:	8106b03a 	or	r3,r16,r4
    6360:	1cc6b03a 	or	r3,r3,r19
    6364:	dfc00717 	ldw	ra,28(sp)
    6368:	dd800617 	ldw	r22,24(sp)
    636c:	dd400517 	ldw	r21,20(sp)
    6370:	dd000417 	ldw	r20,16(sp)
    6374:	dcc00317 	ldw	r19,12(sp)
    6378:	dc800217 	ldw	r18,8(sp)
    637c:	dc400117 	ldw	r17,4(sp)
    6380:	dc000017 	ldw	r16,0(sp)
    6384:	dec00804 	addi	sp,sp,32
    6388:	f800283a 	ret
    638c:	800697fa 	slli	r3,r16,31
    6390:	8804d07a 	srli	r2,r17,1
    6394:	21010004 	addi	r4,r4,1024
    6398:	8020d07a 	srli	r16,r16,1
    639c:	18a2b03a 	or	r17,r3,r2
    63a0:	003fdf06 	br	6320 <_gp+0xfffe9aa4>
    63a4:	88c0400c 	andi	r3,r17,256
    63a8:	183fd926 	beq	r3,zero,6310 <_gp+0xfffe9a94>
    63ac:	8885883a 	add	r2,r17,r2
    63b0:	1463803a 	cmpltu	r17,r2,r17
    63b4:	8c21883a 	add	r16,r17,r16
    63b8:	1023883a 	mov	r17,r2
    63bc:	003fd406 	br	6310 <_gp+0xfffe9a94>
    63c0:	0101ffc4 	movi	r4,2047
    63c4:	0005883a 	mov	r2,zero
    63c8:	0021883a 	mov	r16,zero
    63cc:	003fde06 	br	6348 <_gp+0xfffe9acc>
    63d0:	84000234 	orhi	r16,r16,8
    63d4:	00c00434 	movhi	r3,16
    63d8:	18ffffc4 	addi	r3,r3,-1
    63dc:	8805883a 	mov	r2,r17
    63e0:	80e0703a 	and	r16,r16,r3
    63e4:	0101ffc4 	movi	r4,2047
    63e8:	003fd706 	br	6348 <_gp+0xfffe9acc>
    63ec:	1129c83a 	sub	r20,r2,r4
    63f0:	00800e04 	movi	r2,56
    63f4:	15002716 	blt	r2,r20,6494 <__pack_d+0x208>
    63f8:	800b883a 	mov	r5,r16
    63fc:	a00d883a 	mov	r6,r20
    6400:	8809883a 	mov	r4,r17
    6404:	00065b40 	call	65b4 <__lshrdi3>
    6408:	9009883a 	mov	r4,r18
    640c:	000b883a 	mov	r5,zero
    6410:	a00d883a 	mov	r6,r20
    6414:	102d883a 	mov	r22,r2
    6418:	182b883a 	mov	r21,r3
    641c:	00065f80 	call	65f8 <__ashldi3>
    6420:	1009003a 	cmpeq	r4,r2,zero
    6424:	1907c83a 	sub	r3,r3,r4
    6428:	10bfffc4 	addi	r2,r2,-1
    642c:	1c20703a 	and	r16,r3,r16
    6430:	1444703a 	and	r2,r2,r17
    6434:	1404b03a 	or	r2,r2,r16
    6438:	1004c03a 	cmpne	r2,r2,zero
    643c:	1584b03a 	or	r2,r2,r22
    6440:	11003fcc 	andi	r4,r2,255
    6444:	01402004 	movi	r5,128
    6448:	a807883a 	mov	r3,r21
    644c:	2140131e 	bne	r4,r5,649c <__pack_d+0x210>
    6450:	1140400c 	andi	r5,r2,256
    6454:	28000426 	beq	r5,zero,6468 <__pack_d+0x1dc>
    6458:	1109883a 	add	r4,r2,r4
    645c:	2085803a 	cmpltu	r2,r4,r2
    6460:	1547883a 	add	r3,r2,r21
    6464:	2005883a 	mov	r2,r4
    6468:	1808963a 	slli	r4,r3,24
    646c:	1004d23a 	srli	r2,r2,8
    6470:	1820913a 	slli	r16,r3,4
    6474:	01440034 	movhi	r5,4096
    6478:	297fffc4 	addi	r5,r5,-1
    647c:	2084b03a 	or	r2,r4,r2
    6480:	8020d33a 	srli	r16,r16,12
    6484:	01000044 	movi	r4,1
    6488:	28ffaf36 	bltu	r5,r3,6348 <_gp+0xfffe9acc>
    648c:	0009883a 	mov	r4,zero
    6490:	003fad06 	br	6348 <_gp+0xfffe9acc>
    6494:	0005883a 	mov	r2,zero
    6498:	0007883a 	mov	r3,zero
    649c:	11001fc4 	addi	r4,r2,127
    64a0:	2085803a 	cmpltu	r2,r4,r2
    64a4:	10c7883a 	add	r3,r2,r3
    64a8:	2005883a 	mov	r2,r4
    64ac:	003fee06 	br	6468 <_gp+0xfffe9bec>

000064b0 <__unpack_d>:
    64b0:	21800117 	ldw	r6,4(r4)
    64b4:	20c00017 	ldw	r3,0(r4)
    64b8:	3004d7fa 	srli	r2,r6,31
    64bc:	3008d53a 	srli	r4,r6,20
    64c0:	28800115 	stw	r2,4(r5)
    64c4:	2101ffcc 	andi	r4,r4,2047
    64c8:	00800434 	movhi	r2,16
    64cc:	10bfffc4 	addi	r2,r2,-1
    64d0:	3084703a 	and	r2,r6,r2
    64d4:	20001a1e 	bne	r4,zero,6540 <__unpack_d+0x90>
    64d8:	1888b03a 	or	r4,r3,r2
    64dc:	20002626 	beq	r4,zero,6578 <__unpack_d+0xc8>
    64e0:	1808d63a 	srli	r4,r3,24
    64e4:	1004923a 	slli	r2,r2,8
    64e8:	01bf0084 	movi	r6,-1022
    64ec:	29800215 	stw	r6,8(r5)
    64f0:	2084b03a 	or	r2,r4,r2
    64f4:	010000c4 	movi	r4,3
    64f8:	29000015 	stw	r4,0(r5)
    64fc:	02040034 	movhi	r8,4096
    6500:	423fffc4 	addi	r8,r8,-1
    6504:	1806923a 	slli	r3,r3,8
    6508:	40801836 	bltu	r8,r2,656c <__unpack_d+0xbc>
    650c:	013f0044 	movi	r4,-1023
    6510:	18cd883a 	add	r6,r3,r3
    6514:	30c7803a 	cmpltu	r3,r6,r3
    6518:	1085883a 	add	r2,r2,r2
    651c:	1885883a 	add	r2,r3,r2
    6520:	200f883a 	mov	r7,r4
    6524:	3007883a 	mov	r3,r6
    6528:	213fffc4 	addi	r4,r4,-1
    652c:	40bff82e 	bgeu	r8,r2,6510 <_gp+0xfffe9c94>
    6530:	29c00215 	stw	r7,8(r5)
    6534:	28c00315 	stw	r3,12(r5)
    6538:	28800415 	stw	r2,16(r5)
    653c:	f800283a 	ret
    6540:	01c1ffc4 	movi	r7,2047
    6544:	21c00f26 	beq	r4,r7,6584 <__unpack_d+0xd4>
    6548:	180cd63a 	srli	r6,r3,24
    654c:	1004923a 	slli	r2,r2,8
    6550:	213f0044 	addi	r4,r4,-1023
    6554:	1806923a 	slli	r3,r3,8
    6558:	3084b03a 	or	r2,r6,r2
    655c:	29000215 	stw	r4,8(r5)
    6560:	010000c4 	movi	r4,3
    6564:	10840034 	orhi	r2,r2,4096
    6568:	29000015 	stw	r4,0(r5)
    656c:	28c00315 	stw	r3,12(r5)
    6570:	28800415 	stw	r2,16(r5)
    6574:	f800283a 	ret
    6578:	00800084 	movi	r2,2
    657c:	28800015 	stw	r2,0(r5)
    6580:	f800283a 	ret
    6584:	1888b03a 	or	r4,r3,r2
    6588:	20000526 	beq	r4,zero,65a0 <__unpack_d+0xf0>
    658c:	3180022c 	andhi	r6,r6,8
    6590:	30000626 	beq	r6,zero,65ac <__unpack_d+0xfc>
    6594:	01000044 	movi	r4,1
    6598:	29000015 	stw	r4,0(r5)
    659c:	003ff306 	br	656c <_gp+0xfffe9cf0>
    65a0:	00800104 	movi	r2,4
    65a4:	28800015 	stw	r2,0(r5)
    65a8:	f800283a 	ret
    65ac:	28000015 	stw	zero,0(r5)
    65b0:	003fee06 	br	656c <_gp+0xfffe9cf0>

000065b4 <__lshrdi3>:
    65b4:	2005883a 	mov	r2,r4
    65b8:	2807883a 	mov	r3,r5
    65bc:	30000826 	beq	r6,zero,65e0 <__lshrdi3+0x2c>
    65c0:	01000804 	movi	r4,32
    65c4:	2189c83a 	sub	r4,r4,r6
    65c8:	0100060e 	bge	zero,r4,65e4 <__lshrdi3+0x30>
    65cc:	1184d83a 	srl	r2,r2,r6
    65d0:	2908983a 	sll	r4,r5,r4
    65d4:	298cd83a 	srl	r6,r5,r6
    65d8:	2084b03a 	or	r2,r4,r2
    65dc:	3007883a 	mov	r3,r6
    65e0:	f800283a 	ret
    65e4:	0105c83a 	sub	r2,zero,r4
    65e8:	000d883a 	mov	r6,zero
    65ec:	2884d83a 	srl	r2,r5,r2
    65f0:	3007883a 	mov	r3,r6
    65f4:	003ffa06 	br	65e0 <_gp+0xfffe9d64>

000065f8 <__ashldi3>:
    65f8:	2005883a 	mov	r2,r4
    65fc:	2807883a 	mov	r3,r5
    6600:	30000826 	beq	r6,zero,6624 <__ashldi3+0x2c>
    6604:	01000804 	movi	r4,32
    6608:	2189c83a 	sub	r4,r4,r6
    660c:	0100060e 	bge	zero,r4,6628 <__ashldi3+0x30>
    6610:	1108d83a 	srl	r4,r2,r4
    6614:	2986983a 	sll	r3,r5,r6
    6618:	118c983a 	sll	r6,r2,r6
    661c:	20c6b03a 	or	r3,r4,r3
    6620:	3005883a 	mov	r2,r6
    6624:	f800283a 	ret
    6628:	0107c83a 	sub	r3,zero,r4
    662c:	000d883a 	mov	r6,zero
    6630:	10c6983a 	sll	r3,r2,r3
    6634:	3005883a 	mov	r2,r6
    6638:	003ffa06 	br	6624 <_gp+0xfffe9da8>

0000663c <malloc>:
    663c:	00800074 	movhi	r2,1
    6640:	10922304 	addi	r2,r2,18572
    6644:	200b883a 	mov	r5,r4
    6648:	11000017 	ldw	r4,0(r2)
    664c:	00066641 	jmpi	6664 <_malloc_r>

00006650 <free>:
    6650:	00800074 	movhi	r2,1
    6654:	10922304 	addi	r2,r2,18572
    6658:	200b883a 	mov	r5,r4
    665c:	11000017 	ldw	r4,0(r2)
    6660:	000b2ec1 	jmpi	b2ec <_free_r>

00006664 <_malloc_r>:
    6664:	defff604 	addi	sp,sp,-40
    6668:	dc800215 	stw	r18,8(sp)
    666c:	dfc00915 	stw	ra,36(sp)
    6670:	df000815 	stw	fp,32(sp)
    6674:	ddc00715 	stw	r23,28(sp)
    6678:	dd800615 	stw	r22,24(sp)
    667c:	dd400515 	stw	r21,20(sp)
    6680:	dd000415 	stw	r20,16(sp)
    6684:	dcc00315 	stw	r19,12(sp)
    6688:	dc400115 	stw	r17,4(sp)
    668c:	dc000015 	stw	r16,0(sp)
    6690:	288002c4 	addi	r2,r5,11
    6694:	00c00584 	movi	r3,22
    6698:	2025883a 	mov	r18,r4
    669c:	18802b2e 	bgeu	r3,r2,674c <_malloc_r+0xe8>
    66a0:	047ffe04 	movi	r17,-8
    66a4:	1462703a 	and	r17,r2,r17
    66a8:	88002a16 	blt	r17,zero,6754 <_malloc_r+0xf0>
    66ac:	89402936 	bltu	r17,r5,6754 <_malloc_r+0xf0>
    66b0:	9009883a 	mov	r4,r18
    66b4:	000fcc40 	call	fcc4 <__malloc_lock>
    66b8:	00807dc4 	movi	r2,503
    66bc:	14402936 	bltu	r2,r17,6764 <_malloc_r+0x100>
    66c0:	8808d0fa 	srli	r4,r17,3
    66c4:	04c00074 	movhi	r19,1
    66c8:	9ccb9804 	addi	r19,r19,11872
    66cc:	2105883a 	add	r2,r4,r4
    66d0:	1085883a 	add	r2,r2,r2
    66d4:	1085883a 	add	r2,r2,r2
    66d8:	9885883a 	add	r2,r19,r2
    66dc:	14000317 	ldw	r16,12(r2)
    66e0:	80815526 	beq	r16,r2,6c38 <_malloc_r+0x5d4>
    66e4:	81000117 	ldw	r4,4(r16)
    66e8:	00bfff04 	movi	r2,-4
    66ec:	80c00317 	ldw	r3,12(r16)
    66f0:	2084703a 	and	r2,r4,r2
    66f4:	8085883a 	add	r2,r16,r2
    66f8:	11800117 	ldw	r6,4(r2)
    66fc:	81400217 	ldw	r5,8(r16)
    6700:	9009883a 	mov	r4,r18
    6704:	31800054 	ori	r6,r6,1
    6708:	11800115 	stw	r6,4(r2)
    670c:	28c00315 	stw	r3,12(r5)
    6710:	19400215 	stw	r5,8(r3)
    6714:	000fce40 	call	fce4 <__malloc_unlock>
    6718:	80800204 	addi	r2,r16,8
    671c:	dfc00917 	ldw	ra,36(sp)
    6720:	df000817 	ldw	fp,32(sp)
    6724:	ddc00717 	ldw	r23,28(sp)
    6728:	dd800617 	ldw	r22,24(sp)
    672c:	dd400517 	ldw	r21,20(sp)
    6730:	dd000417 	ldw	r20,16(sp)
    6734:	dcc00317 	ldw	r19,12(sp)
    6738:	dc800217 	ldw	r18,8(sp)
    673c:	dc400117 	ldw	r17,4(sp)
    6740:	dc000017 	ldw	r16,0(sp)
    6744:	dec00a04 	addi	sp,sp,40
    6748:	f800283a 	ret
    674c:	04400404 	movi	r17,16
    6750:	897fd72e 	bgeu	r17,r5,66b0 <_gp+0xfffe9e34>
    6754:	00800304 	movi	r2,12
    6758:	90800015 	stw	r2,0(r18)
    675c:	0005883a 	mov	r2,zero
    6760:	003fee06 	br	671c <_gp+0xfffe9ea0>
    6764:	8808d27a 	srli	r4,r17,9
    6768:	20007126 	beq	r4,zero,6930 <_malloc_r+0x2cc>
    676c:	00800104 	movi	r2,4
    6770:	1100eb36 	bltu	r2,r4,6b20 <_malloc_r+0x4bc>
    6774:	8808d1ba 	srli	r4,r17,6
    6778:	21000e04 	addi	r4,r4,56
    677c:	210b883a 	add	r5,r4,r4
    6780:	294b883a 	add	r5,r5,r5
    6784:	294b883a 	add	r5,r5,r5
    6788:	04c00074 	movhi	r19,1
    678c:	9ccb9804 	addi	r19,r19,11872
    6790:	994b883a 	add	r5,r19,r5
    6794:	2c000317 	ldw	r16,12(r5)
    6798:	2c000e26 	beq	r5,r16,67d4 <_malloc_r+0x170>
    679c:	80c00117 	ldw	r3,4(r16)
    67a0:	01ffff04 	movi	r7,-4
    67a4:	018003c4 	movi	r6,15
    67a8:	19c6703a 	and	r3,r3,r7
    67ac:	1c45c83a 	sub	r2,r3,r17
    67b0:	30800716 	blt	r6,r2,67d0 <_malloc_r+0x16c>
    67b4:	1000610e 	bge	r2,zero,693c <_malloc_r+0x2d8>
    67b8:	84000317 	ldw	r16,12(r16)
    67bc:	2c000526 	beq	r5,r16,67d4 <_malloc_r+0x170>
    67c0:	80c00117 	ldw	r3,4(r16)
    67c4:	19c6703a 	and	r3,r3,r7
    67c8:	1c45c83a 	sub	r2,r3,r17
    67cc:	30bff90e 	bge	r6,r2,67b4 <_gp+0xfffe9f38>
    67d0:	213fffc4 	addi	r4,r4,-1
    67d4:	21000044 	addi	r4,r4,1
    67d8:	9c000417 	ldw	r16,16(r19)
    67dc:	00c00074 	movhi	r3,1
    67e0:	18cb9804 	addi	r3,r3,11872
    67e4:	1a400204 	addi	r9,r3,8
    67e8:	8240ff26 	beq	r16,r9,6be8 <_malloc_r+0x584>
    67ec:	81400117 	ldw	r5,4(r16)
    67f0:	00bfff04 	movi	r2,-4
    67f4:	018003c4 	movi	r6,15
    67f8:	2884703a 	and	r2,r5,r2
    67fc:	144bc83a 	sub	r5,r2,r17
    6800:	3140ea16 	blt	r6,r5,6bac <_malloc_r+0x548>
    6804:	1a400515 	stw	r9,20(r3)
    6808:	1a400415 	stw	r9,16(r3)
    680c:	2800570e 	bge	r5,zero,696c <_malloc_r+0x308>
    6810:	01407fc4 	movi	r5,511
    6814:	2880ca36 	bltu	r5,r2,6b40 <_malloc_r+0x4dc>
    6818:	1004d0fa 	srli	r2,r2,3
    681c:	02000044 	movi	r8,1
    6820:	19c00117 	ldw	r7,4(r3)
    6824:	108b883a 	add	r5,r2,r2
    6828:	294b883a 	add	r5,r5,r5
    682c:	1005d0ba 	srai	r2,r2,2
    6830:	294b883a 	add	r5,r5,r5
    6834:	28cb883a 	add	r5,r5,r3
    6838:	29800217 	ldw	r6,8(r5)
    683c:	4084983a 	sll	r2,r8,r2
    6840:	81400315 	stw	r5,12(r16)
    6844:	81800215 	stw	r6,8(r16)
    6848:	11c4b03a 	or	r2,r2,r7
    684c:	18800115 	stw	r2,4(r3)
    6850:	2c000215 	stw	r16,8(r5)
    6854:	34000315 	stw	r16,12(r6)
    6858:	200bd0ba 	srai	r5,r4,2
    685c:	00c00044 	movi	r3,1
    6860:	194a983a 	sll	r5,r3,r5
    6864:	11404936 	bltu	r2,r5,698c <_malloc_r+0x328>
    6868:	1146703a 	and	r3,r2,r5
    686c:	18000a1e 	bne	r3,zero,6898 <_malloc_r+0x234>
    6870:	00ffff04 	movi	r3,-4
    6874:	294b883a 	add	r5,r5,r5
    6878:	20c8703a 	and	r4,r4,r3
    687c:	1146703a 	and	r3,r2,r5
    6880:	21000104 	addi	r4,r4,4
    6884:	1800041e 	bne	r3,zero,6898 <_malloc_r+0x234>
    6888:	294b883a 	add	r5,r5,r5
    688c:	1146703a 	and	r3,r2,r5
    6890:	21000104 	addi	r4,r4,4
    6894:	183ffc26 	beq	r3,zero,6888 <_gp+0xfffea00c>
    6898:	023fff04 	movi	r8,-4
    689c:	01c003c4 	movi	r7,15
    68a0:	2105883a 	add	r2,r4,r4
    68a4:	1085883a 	add	r2,r2,r2
    68a8:	1085883a 	add	r2,r2,r2
    68ac:	9899883a 	add	r12,r19,r2
    68b0:	62800304 	addi	r10,r12,12
    68b4:	2017883a 	mov	r11,r4
    68b8:	54000017 	ldw	r16,0(r10)
    68bc:	51bffd04 	addi	r6,r10,-12
    68c0:	8180041e 	bne	r16,r6,68d4 <_malloc_r+0x270>
    68c4:	0000ca06 	br	6bf0 <_malloc_r+0x58c>
    68c8:	10001c0e 	bge	r2,zero,693c <_malloc_r+0x2d8>
    68cc:	84000317 	ldw	r16,12(r16)
    68d0:	8180c726 	beq	r16,r6,6bf0 <_malloc_r+0x58c>
    68d4:	80c00117 	ldw	r3,4(r16)
    68d8:	1a06703a 	and	r3,r3,r8
    68dc:	1c45c83a 	sub	r2,r3,r17
    68e0:	38bff90e 	bge	r7,r2,68c8 <_gp+0xfffea04c>
    68e4:	81000317 	ldw	r4,12(r16)
    68e8:	81400217 	ldw	r5,8(r16)
    68ec:	8447883a 	add	r3,r16,r17
    68f0:	8c400054 	ori	r17,r17,1
    68f4:	29000315 	stw	r4,12(r5)
    68f8:	21400215 	stw	r5,8(r4)
    68fc:	84400115 	stw	r17,4(r16)
    6900:	1889883a 	add	r4,r3,r2
    6904:	11400054 	ori	r5,r2,1
    6908:	98c00515 	stw	r3,20(r19)
    690c:	98c00415 	stw	r3,16(r19)
    6910:	20800015 	stw	r2,0(r4)
    6914:	1a400315 	stw	r9,12(r3)
    6918:	1a400215 	stw	r9,8(r3)
    691c:	19400115 	stw	r5,4(r3)
    6920:	9009883a 	mov	r4,r18
    6924:	000fce40 	call	fce4 <__malloc_unlock>
    6928:	80800204 	addi	r2,r16,8
    692c:	003f7b06 	br	671c <_gp+0xfffe9ea0>
    6930:	8808d0fa 	srli	r4,r17,3
    6934:	210b883a 	add	r5,r4,r4
    6938:	003f9106 	br	6780 <_gp+0xfffe9f04>
    693c:	80c7883a 	add	r3,r16,r3
    6940:	19400117 	ldw	r5,4(r3)
    6944:	80800317 	ldw	r2,12(r16)
    6948:	81000217 	ldw	r4,8(r16)
    694c:	29400054 	ori	r5,r5,1
    6950:	19400115 	stw	r5,4(r3)
    6954:	20800315 	stw	r2,12(r4)
    6958:	11000215 	stw	r4,8(r2)
    695c:	9009883a 	mov	r4,r18
    6960:	000fce40 	call	fce4 <__malloc_unlock>
    6964:	80800204 	addi	r2,r16,8
    6968:	003f6c06 	br	671c <_gp+0xfffe9ea0>
    696c:	8085883a 	add	r2,r16,r2
    6970:	10c00117 	ldw	r3,4(r2)
    6974:	9009883a 	mov	r4,r18
    6978:	18c00054 	ori	r3,r3,1
    697c:	10c00115 	stw	r3,4(r2)
    6980:	000fce40 	call	fce4 <__malloc_unlock>
    6984:	80800204 	addi	r2,r16,8
    6988:	003f6406 	br	671c <_gp+0xfffe9ea0>
    698c:	9c000217 	ldw	r16,8(r19)
    6990:	00bfff04 	movi	r2,-4
    6994:	85400117 	ldw	r21,4(r16)
    6998:	a8aa703a 	and	r21,r21,r2
    699c:	ac400336 	bltu	r21,r17,69ac <_malloc_r+0x348>
    69a0:	ac45c83a 	sub	r2,r21,r17
    69a4:	00c003c4 	movi	r3,15
    69a8:	18805316 	blt	r3,r2,6af8 <_malloc_r+0x494>
    69ac:	d5e6a917 	ldw	r23,-25948(gp)
    69b0:	d0e00017 	ldw	r3,-32768(gp)
    69b4:	00bfffc4 	movi	r2,-1
    69b8:	8579883a 	add	fp,r16,r21
    69bc:	8def883a 	add	r23,r17,r23
    69c0:	1880d226 	beq	r3,r2,6d0c <_malloc_r+0x6a8>
    69c4:	bdc403c4 	addi	r23,r23,4111
    69c8:	00bc0004 	movi	r2,-4096
    69cc:	b8ae703a 	and	r23,r23,r2
    69d0:	9009883a 	mov	r4,r18
    69d4:	b80b883a 	mov	r5,r23
    69d8:	00070e00 	call	70e0 <_sbrk_r>
    69dc:	1029883a 	mov	r20,r2
    69e0:	00bfffc4 	movi	r2,-1
    69e4:	a080d126 	beq	r20,r2,6d2c <_malloc_r+0x6c8>
    69e8:	a7009f36 	bltu	r20,fp,6c68 <_malloc_r+0x604>
    69ec:	05800074 	movhi	r22,1
    69f0:	b598e104 	addi	r22,r22,25476
    69f4:	b0800017 	ldw	r2,0(r22)
    69f8:	b885883a 	add	r2,r23,r2
    69fc:	b0800015 	stw	r2,0(r22)
    6a00:	e500cf26 	beq	fp,r20,6d40 <_malloc_r+0x6dc>
    6a04:	d1200017 	ldw	r4,-32768(gp)
    6a08:	00ffffc4 	movi	r3,-1
    6a0c:	20c0e026 	beq	r4,r3,6d90 <_malloc_r+0x72c>
    6a10:	a739c83a 	sub	fp,r20,fp
    6a14:	1705883a 	add	r2,r2,fp
    6a18:	b0800015 	stw	r2,0(r22)
    6a1c:	a08001cc 	andi	r2,r20,7
    6a20:	1000a526 	beq	r2,zero,6cb8 <_malloc_r+0x654>
    6a24:	a0a9c83a 	sub	r20,r20,r2
    6a28:	00c40204 	movi	r3,4104
    6a2c:	a5000204 	addi	r20,r20,8
    6a30:	1885c83a 	sub	r2,r3,r2
    6a34:	a5c7883a 	add	r3,r20,r23
    6a38:	18c3ffcc 	andi	r3,r3,4095
    6a3c:	10efc83a 	sub	r23,r2,r3
    6a40:	9009883a 	mov	r4,r18
    6a44:	b80b883a 	mov	r5,r23
    6a48:	00070e00 	call	70e0 <_sbrk_r>
    6a4c:	00ffffc4 	movi	r3,-1
    6a50:	10c0cc26 	beq	r2,r3,6d84 <_malloc_r+0x720>
    6a54:	1505c83a 	sub	r2,r2,r20
    6a58:	b887883a 	add	r3,r23,r2
    6a5c:	18c00054 	ori	r3,r3,1
    6a60:	b0800017 	ldw	r2,0(r22)
    6a64:	9d000215 	stw	r20,8(r19)
    6a68:	a0c00115 	stw	r3,4(r20)
    6a6c:	b885883a 	add	r2,r23,r2
    6a70:	b0800015 	stw	r2,0(r22)
    6a74:	84c00e26 	beq	r16,r19,6ab0 <_malloc_r+0x44c>
    6a78:	00c003c4 	movi	r3,15
    6a7c:	1d40902e 	bgeu	r3,r21,6cc0 <_malloc_r+0x65c>
    6a80:	ad7ffd04 	addi	r21,r21,-12
    6a84:	013ffe04 	movi	r4,-8
    6a88:	a908703a 	and	r4,r21,r4
    6a8c:	810b883a 	add	r5,r16,r4
    6a90:	01800144 	movi	r6,5
    6a94:	29800115 	stw	r6,4(r5)
    6a98:	29800215 	stw	r6,8(r5)
    6a9c:	81400117 	ldw	r5,4(r16)
    6aa0:	2940004c 	andi	r5,r5,1
    6aa4:	214ab03a 	or	r5,r4,r5
    6aa8:	81400115 	stw	r5,4(r16)
    6aac:	1900ae36 	bltu	r3,r4,6d68 <_malloc_r+0x704>
    6ab0:	d0e6a817 	ldw	r3,-25952(gp)
    6ab4:	1880012e 	bgeu	r3,r2,6abc <_malloc_r+0x458>
    6ab8:	d0a6a815 	stw	r2,-25952(gp)
    6abc:	d0e6a717 	ldw	r3,-25956(gp)
    6ac0:	9c000217 	ldw	r16,8(r19)
    6ac4:	1880012e 	bgeu	r3,r2,6acc <_malloc_r+0x468>
    6ac8:	d0a6a715 	stw	r2,-25956(gp)
    6acc:	80c00117 	ldw	r3,4(r16)
    6ad0:	00bfff04 	movi	r2,-4
    6ad4:	1886703a 	and	r3,r3,r2
    6ad8:	1c45c83a 	sub	r2,r3,r17
    6adc:	1c400236 	bltu	r3,r17,6ae8 <_malloc_r+0x484>
    6ae0:	00c003c4 	movi	r3,15
    6ae4:	18800416 	blt	r3,r2,6af8 <_malloc_r+0x494>
    6ae8:	9009883a 	mov	r4,r18
    6aec:	000fce40 	call	fce4 <__malloc_unlock>
    6af0:	0005883a 	mov	r2,zero
    6af4:	003f0906 	br	671c <_gp+0xfffe9ea0>
    6af8:	88c00054 	ori	r3,r17,1
    6afc:	10800054 	ori	r2,r2,1
    6b00:	80c00115 	stw	r3,4(r16)
    6b04:	8463883a 	add	r17,r16,r17
    6b08:	88800115 	stw	r2,4(r17)
    6b0c:	9009883a 	mov	r4,r18
    6b10:	9c400215 	stw	r17,8(r19)
    6b14:	000fce40 	call	fce4 <__malloc_unlock>
    6b18:	80800204 	addi	r2,r16,8
    6b1c:	003eff06 	br	671c <_gp+0xfffe9ea0>
    6b20:	00800504 	movi	r2,20
    6b24:	1100492e 	bgeu	r2,r4,6c4c <_malloc_r+0x5e8>
    6b28:	00801504 	movi	r2,84
    6b2c:	11005c36 	bltu	r2,r4,6ca0 <_malloc_r+0x63c>
    6b30:	8808d33a 	srli	r4,r17,12
    6b34:	21001b84 	addi	r4,r4,110
    6b38:	210b883a 	add	r5,r4,r4
    6b3c:	003f1006 	br	6780 <_gp+0xfffe9f04>
    6b40:	1006d27a 	srli	r3,r2,9
    6b44:	01400104 	movi	r5,4
    6b48:	28c0432e 	bgeu	r5,r3,6c58 <_malloc_r+0x5f4>
    6b4c:	01400504 	movi	r5,20
    6b50:	28c07036 	bltu	r5,r3,6d14 <_malloc_r+0x6b0>
    6b54:	194016c4 	addi	r5,r3,91
    6b58:	294d883a 	add	r6,r5,r5
    6b5c:	318d883a 	add	r6,r6,r6
    6b60:	318d883a 	add	r6,r6,r6
    6b64:	998d883a 	add	r6,r19,r6
    6b68:	30c00217 	ldw	r3,8(r6)
    6b6c:	01c00074 	movhi	r7,1
    6b70:	39cb9804 	addi	r7,r7,11872
    6b74:	19805726 	beq	r3,r6,6cd4 <_malloc_r+0x670>
    6b78:	01ffff04 	movi	r7,-4
    6b7c:	19400117 	ldw	r5,4(r3)
    6b80:	29ca703a 	and	r5,r5,r7
    6b84:	1140022e 	bgeu	r2,r5,6b90 <_malloc_r+0x52c>
    6b88:	18c00217 	ldw	r3,8(r3)
    6b8c:	30fffb1e 	bne	r6,r3,6b7c <_gp+0xfffea300>
    6b90:	19400317 	ldw	r5,12(r3)
    6b94:	98800117 	ldw	r2,4(r19)
    6b98:	81400315 	stw	r5,12(r16)
    6b9c:	80c00215 	stw	r3,8(r16)
    6ba0:	2c000215 	stw	r16,8(r5)
    6ba4:	1c000315 	stw	r16,12(r3)
    6ba8:	003f2b06 	br	6858 <_gp+0xfffe9fdc>
    6bac:	8445883a 	add	r2,r16,r17
    6bb0:	8c400054 	ori	r17,r17,1
    6bb4:	18800515 	stw	r2,20(r3)
    6bb8:	18800415 	stw	r2,16(r3)
    6bbc:	29000054 	ori	r4,r5,1
    6bc0:	1147883a 	add	r3,r2,r5
    6bc4:	84400115 	stw	r17,4(r16)
    6bc8:	11000115 	stw	r4,4(r2)
    6bcc:	12400315 	stw	r9,12(r2)
    6bd0:	12400215 	stw	r9,8(r2)
    6bd4:	19400015 	stw	r5,0(r3)
    6bd8:	9009883a 	mov	r4,r18
    6bdc:	000fce40 	call	fce4 <__malloc_unlock>
    6be0:	80800204 	addi	r2,r16,8
    6be4:	003ecd06 	br	671c <_gp+0xfffe9ea0>
    6be8:	18800117 	ldw	r2,4(r3)
    6bec:	003f1a06 	br	6858 <_gp+0xfffe9fdc>
    6bf0:	5ac00044 	addi	r11,r11,1
    6bf4:	588000cc 	andi	r2,r11,3
    6bf8:	52800204 	addi	r10,r10,8
    6bfc:	103f2e1e 	bne	r2,zero,68b8 <_gp+0xfffea03c>
    6c00:	20c000cc 	andi	r3,r4,3
    6c04:	60bffe04 	addi	r2,r12,-8
    6c08:	18006f26 	beq	r3,zero,6dc8 <_malloc_r+0x764>
    6c0c:	63000017 	ldw	r12,0(r12)
    6c10:	213fffc4 	addi	r4,r4,-1
    6c14:	60bffa26 	beq	r12,r2,6c00 <_gp+0xfffea384>
    6c18:	98800117 	ldw	r2,4(r19)
    6c1c:	294b883a 	add	r5,r5,r5
    6c20:	117f5a36 	bltu	r2,r5,698c <_gp+0xfffea110>
    6c24:	283f5926 	beq	r5,zero,698c <_gp+0xfffea110>
    6c28:	1146703a 	and	r3,r2,r5
    6c2c:	18001626 	beq	r3,zero,6c88 <_malloc_r+0x624>
    6c30:	5809883a 	mov	r4,r11
    6c34:	003f1a06 	br	68a0 <_gp+0xfffea024>
    6c38:	80800204 	addi	r2,r16,8
    6c3c:	84000517 	ldw	r16,20(r16)
    6c40:	143ea81e 	bne	r2,r16,66e4 <_gp+0xfffe9e68>
    6c44:	21000084 	addi	r4,r4,2
    6c48:	003ee306 	br	67d8 <_gp+0xfffe9f5c>
    6c4c:	210016c4 	addi	r4,r4,91
    6c50:	210b883a 	add	r5,r4,r4
    6c54:	003eca06 	br	6780 <_gp+0xfffe9f04>
    6c58:	100ad1ba 	srli	r5,r2,6
    6c5c:	29400e04 	addi	r5,r5,56
    6c60:	294d883a 	add	r6,r5,r5
    6c64:	003fbd06 	br	6b5c <_gp+0xfffea2e0>
    6c68:	84ff6026 	beq	r16,r19,69ec <_gp+0xfffea170>
    6c6c:	00800074 	movhi	r2,1
    6c70:	108b9804 	addi	r2,r2,11872
    6c74:	14000217 	ldw	r16,8(r2)
    6c78:	00bfff04 	movi	r2,-4
    6c7c:	80c00117 	ldw	r3,4(r16)
    6c80:	1886703a 	and	r3,r3,r2
    6c84:	003f9406 	br	6ad8 <_gp+0xfffea25c>
    6c88:	294b883a 	add	r5,r5,r5
    6c8c:	1146703a 	and	r3,r2,r5
    6c90:	5ac00104 	addi	r11,r11,4
    6c94:	183ffc26 	beq	r3,zero,6c88 <_gp+0xfffea40c>
    6c98:	5809883a 	mov	r4,r11
    6c9c:	003f0006 	br	68a0 <_gp+0xfffea024>
    6ca0:	00805504 	movi	r2,340
    6ca4:	11001336 	bltu	r2,r4,6cf4 <_malloc_r+0x690>
    6ca8:	8808d3fa 	srli	r4,r17,15
    6cac:	21001dc4 	addi	r4,r4,119
    6cb0:	210b883a 	add	r5,r4,r4
    6cb4:	003eb206 	br	6780 <_gp+0xfffe9f04>
    6cb8:	00840004 	movi	r2,4096
    6cbc:	003f5d06 	br	6a34 <_gp+0xfffea1b8>
    6cc0:	00800044 	movi	r2,1
    6cc4:	a0800115 	stw	r2,4(r20)
    6cc8:	a021883a 	mov	r16,r20
    6ccc:	0007883a 	mov	r3,zero
    6cd0:	003f8106 	br	6ad8 <_gp+0xfffea25c>
    6cd4:	280bd0ba 	srai	r5,r5,2
    6cd8:	01800044 	movi	r6,1
    6cdc:	38800117 	ldw	r2,4(r7)
    6ce0:	314c983a 	sll	r6,r6,r5
    6ce4:	180b883a 	mov	r5,r3
    6ce8:	3084b03a 	or	r2,r6,r2
    6cec:	38800115 	stw	r2,4(r7)
    6cf0:	003fa906 	br	6b98 <_gp+0xfffea31c>
    6cf4:	00815504 	movi	r2,1364
    6cf8:	11001836 	bltu	r2,r4,6d5c <_malloc_r+0x6f8>
    6cfc:	8808d4ba 	srli	r4,r17,18
    6d00:	21001f04 	addi	r4,r4,124
    6d04:	210b883a 	add	r5,r4,r4
    6d08:	003e9d06 	br	6780 <_gp+0xfffe9f04>
    6d0c:	bdc00404 	addi	r23,r23,16
    6d10:	003f2f06 	br	69d0 <_gp+0xfffea154>
    6d14:	01401504 	movi	r5,84
    6d18:	28c01f36 	bltu	r5,r3,6d98 <_malloc_r+0x734>
    6d1c:	100ad33a 	srli	r5,r2,12
    6d20:	29401b84 	addi	r5,r5,110
    6d24:	294d883a 	add	r6,r5,r5
    6d28:	003f8c06 	br	6b5c <_gp+0xfffea2e0>
    6d2c:	9c000217 	ldw	r16,8(r19)
    6d30:	00bfff04 	movi	r2,-4
    6d34:	80c00117 	ldw	r3,4(r16)
    6d38:	1886703a 	and	r3,r3,r2
    6d3c:	003f6606 	br	6ad8 <_gp+0xfffea25c>
    6d40:	e0c3ffcc 	andi	r3,fp,4095
    6d44:	183f2f1e 	bne	r3,zero,6a04 <_gp+0xfffea188>
    6d48:	98c00217 	ldw	r3,8(r19)
    6d4c:	bd49883a 	add	r4,r23,r21
    6d50:	21000054 	ori	r4,r4,1
    6d54:	19000115 	stw	r4,4(r3)
    6d58:	003f5506 	br	6ab0 <_gp+0xfffea234>
    6d5c:	01403f04 	movi	r5,252
    6d60:	01001f84 	movi	r4,126
    6d64:	003e8606 	br	6780 <_gp+0xfffe9f04>
    6d68:	9009883a 	mov	r4,r18
    6d6c:	81400204 	addi	r5,r16,8
    6d70:	000b2ec0 	call	b2ec <_free_r>
    6d74:	00800074 	movhi	r2,1
    6d78:	1098e104 	addi	r2,r2,25476
    6d7c:	10800017 	ldw	r2,0(r2)
    6d80:	003f4b06 	br	6ab0 <_gp+0xfffea234>
    6d84:	00c00044 	movi	r3,1
    6d88:	002f883a 	mov	r23,zero
    6d8c:	003f3406 	br	6a60 <_gp+0xfffea1e4>
    6d90:	d5200015 	stw	r20,-32768(gp)
    6d94:	003f2106 	br	6a1c <_gp+0xfffea1a0>
    6d98:	01405504 	movi	r5,340
    6d9c:	28c00436 	bltu	r5,r3,6db0 <_malloc_r+0x74c>
    6da0:	100ad3fa 	srli	r5,r2,15
    6da4:	29401dc4 	addi	r5,r5,119
    6da8:	294d883a 	add	r6,r5,r5
    6dac:	003f6b06 	br	6b5c <_gp+0xfffea2e0>
    6db0:	01415504 	movi	r5,1364
    6db4:	28c00936 	bltu	r5,r3,6ddc <_malloc_r+0x778>
    6db8:	100ad4ba 	srli	r5,r2,18
    6dbc:	29401f04 	addi	r5,r5,124
    6dc0:	294d883a 	add	r6,r5,r5
    6dc4:	003f6506 	br	6b5c <_gp+0xfffea2e0>
    6dc8:	98800117 	ldw	r2,4(r19)
    6dcc:	0146303a 	nor	r3,zero,r5
    6dd0:	1884703a 	and	r2,r3,r2
    6dd4:	98800115 	stw	r2,4(r19)
    6dd8:	003f9006 	br	6c1c <_gp+0xfffea3a0>
    6ddc:	01803f04 	movi	r6,252
    6de0:	01401f84 	movi	r5,126
    6de4:	003f5d06 	br	6b5c <_gp+0xfffea2e0>

00006de8 <memcpy>:
    6de8:	00c003c4 	movi	r3,15
    6dec:	2005883a 	mov	r2,r4
    6df0:	3009883a 	mov	r4,r6
    6df4:	1980032e 	bgeu	r3,r6,6e04 <memcpy+0x1c>
    6df8:	2886b03a 	or	r3,r5,r2
    6dfc:	18c000cc 	andi	r3,r3,3
    6e00:	18000926 	beq	r3,zero,6e28 <memcpy+0x40>
    6e04:	1007883a 	mov	r3,r2
    6e08:	290f883a 	add	r7,r5,r4
    6e0c:	20000526 	beq	r4,zero,6e24 <memcpy+0x3c>
    6e10:	29800003 	ldbu	r6,0(r5)
    6e14:	18c00044 	addi	r3,r3,1
    6e18:	29400044 	addi	r5,r5,1
    6e1c:	19bfffc5 	stb	r6,-1(r3)
    6e20:	29fffb1e 	bne	r5,r7,6e10 <_gp+0xfffea594>
    6e24:	f800283a 	ret
    6e28:	327ffc04 	addi	r9,r6,-16
    6e2c:	4812d13a 	srli	r9,r9,4
    6e30:	11000404 	addi	r4,r2,16
    6e34:	1007883a 	mov	r3,r2
    6e38:	4810913a 	slli	r8,r9,4
    6e3c:	280f883a 	mov	r7,r5
    6e40:	2209883a 	add	r4,r4,r8
    6e44:	3a000017 	ldw	r8,0(r7)
    6e48:	18c00404 	addi	r3,r3,16
    6e4c:	39c00404 	addi	r7,r7,16
    6e50:	1a3ffc15 	stw	r8,-16(r3)
    6e54:	3a3ffd17 	ldw	r8,-12(r7)
    6e58:	1a3ffd15 	stw	r8,-12(r3)
    6e5c:	3a3ffe17 	ldw	r8,-8(r7)
    6e60:	1a3ffe15 	stw	r8,-8(r3)
    6e64:	3a3fff17 	ldw	r8,-4(r7)
    6e68:	1a3fff15 	stw	r8,-4(r3)
    6e6c:	193ff51e 	bne	r3,r4,6e44 <_gp+0xfffea5c8>
    6e70:	49c00044 	addi	r7,r9,1
    6e74:	380e913a 	slli	r7,r7,4
    6e78:	310003cc 	andi	r4,r6,15
    6e7c:	018000c4 	movi	r6,3
    6e80:	11c7883a 	add	r3,r2,r7
    6e84:	29cb883a 	add	r5,r5,r7
    6e88:	313fdf2e 	bgeu	r6,r4,6e08 <_gp+0xfffea58c>
    6e8c:	213fff04 	addi	r4,r4,-4
    6e90:	2014d0ba 	srli	r10,r4,2
    6e94:	1a400104 	addi	r9,r3,4
    6e98:	180d883a 	mov	r6,r3
    6e9c:	528f883a 	add	r7,r10,r10
    6ea0:	39cf883a 	add	r7,r7,r7
    6ea4:	49d3883a 	add	r9,r9,r7
    6ea8:	280f883a 	mov	r7,r5
    6eac:	3a000017 	ldw	r8,0(r7)
    6eb0:	31800104 	addi	r6,r6,4
    6eb4:	39c00104 	addi	r7,r7,4
    6eb8:	323fff15 	stw	r8,-4(r6)
    6ebc:	327ffb1e 	bne	r6,r9,6eac <_gp+0xfffea630>
    6ec0:	51800044 	addi	r6,r10,1
    6ec4:	52bfff24 	muli	r10,r10,-4
    6ec8:	318d883a 	add	r6,r6,r6
    6ecc:	318d883a 	add	r6,r6,r6
    6ed0:	5109883a 	add	r4,r10,r4
    6ed4:	298b883a 	add	r5,r5,r6
    6ed8:	1987883a 	add	r3,r3,r6
    6edc:	003fca06 	br	6e08 <_gp+0xfffea58c>

00006ee0 <memset>:
    6ee0:	00c000c4 	movi	r3,3
    6ee4:	2005883a 	mov	r2,r4
    6ee8:	29403fcc 	andi	r5,r5,255
    6eec:	19802d2e 	bgeu	r3,r6,6fa4 <memset+0xc4>
    6ef0:	20c6703a 	and	r3,r4,r3
    6ef4:	18002e1e 	bne	r3,zero,6fb0 <memset+0xd0>
    6ef8:	2806923a 	slli	r3,r5,8
    6efc:	010003c4 	movi	r4,15
    6f00:	3011883a 	mov	r8,r6
    6f04:	1946b03a 	or	r3,r3,r5
    6f08:	180e943a 	slli	r7,r3,16
    6f0c:	38ceb03a 	or	r7,r7,r3
    6f10:	1007883a 	mov	r3,r2
    6f14:	21800f2e 	bgeu	r4,r6,6f54 <memset+0x74>
    6f18:	19c00015 	stw	r7,0(r3)
    6f1c:	19c00115 	stw	r7,4(r3)
    6f20:	19c00215 	stw	r7,8(r3)
    6f24:	19c00315 	stw	r7,12(r3)
    6f28:	423ffc04 	addi	r8,r8,-16
    6f2c:	18c00404 	addi	r3,r3,16
    6f30:	223ff936 	bltu	r4,r8,6f18 <_gp+0xfffea69c>
    6f34:	30fffc04 	addi	r3,r6,-16
    6f38:	1806d13a 	srli	r3,r3,4
    6f3c:	318003cc 	andi	r6,r6,15
    6f40:	010000c4 	movi	r4,3
    6f44:	18c00044 	addi	r3,r3,1
    6f48:	1806913a 	slli	r3,r3,4
    6f4c:	10c7883a 	add	r3,r2,r3
    6f50:	21800e2e 	bgeu	r4,r6,6f8c <memset+0xac>
    6f54:	1813883a 	mov	r9,r3
    6f58:	3011883a 	mov	r8,r6
    6f5c:	010000c4 	movi	r4,3
    6f60:	49c00015 	stw	r7,0(r9)
    6f64:	423fff04 	addi	r8,r8,-4
    6f68:	4a400104 	addi	r9,r9,4
    6f6c:	223ffc36 	bltu	r4,r8,6f60 <_gp+0xfffea6e4>
    6f70:	313fff04 	addi	r4,r6,-4
    6f74:	2008d0ba 	srli	r4,r4,2
    6f78:	318000cc 	andi	r6,r6,3
    6f7c:	21000044 	addi	r4,r4,1
    6f80:	2109883a 	add	r4,r4,r4
    6f84:	2109883a 	add	r4,r4,r4
    6f88:	1907883a 	add	r3,r3,r4
    6f8c:	30000a26 	beq	r6,zero,6fb8 <memset+0xd8>
    6f90:	198d883a 	add	r6,r3,r6
    6f94:	19400005 	stb	r5,0(r3)
    6f98:	18c00044 	addi	r3,r3,1
    6f9c:	19bffd1e 	bne	r3,r6,6f94 <_gp+0xfffea718>
    6fa0:	f800283a 	ret
    6fa4:	2007883a 	mov	r3,r4
    6fa8:	303ff91e 	bne	r6,zero,6f90 <_gp+0xfffea714>
    6fac:	00000206 	br	6fb8 <memset+0xd8>
    6fb0:	2007883a 	mov	r3,r4
    6fb4:	003ff606 	br	6f90 <_gp+0xfffea714>
    6fb8:	f800283a 	ret

00006fbc <_printf_r>:
    6fbc:	defffd04 	addi	sp,sp,-12
    6fc0:	dfc00015 	stw	ra,0(sp)
    6fc4:	d9800115 	stw	r6,4(sp)
    6fc8:	d9c00215 	stw	r7,8(sp)
    6fcc:	280d883a 	mov	r6,r5
    6fd0:	21400217 	ldw	r5,8(r4)
    6fd4:	d9c00104 	addi	r7,sp,4
    6fd8:	00074200 	call	7420 <___vfprintf_internal_r>
    6fdc:	dfc00017 	ldw	ra,0(sp)
    6fe0:	dec00304 	addi	sp,sp,12
    6fe4:	f800283a 	ret

00006fe8 <printf>:
    6fe8:	defffc04 	addi	sp,sp,-16
    6fec:	dfc00015 	stw	ra,0(sp)
    6ff0:	d9400115 	stw	r5,4(sp)
    6ff4:	d9800215 	stw	r6,8(sp)
    6ff8:	d9c00315 	stw	r7,12(sp)
    6ffc:	00800074 	movhi	r2,1
    7000:	10922304 	addi	r2,r2,18572
    7004:	10800017 	ldw	r2,0(r2)
    7008:	200b883a 	mov	r5,r4
    700c:	d9800104 	addi	r6,sp,4
    7010:	11000217 	ldw	r4,8(r2)
    7014:	00092180 	call	9218 <__vfprintf_internal>
    7018:	dfc00017 	ldw	ra,0(sp)
    701c:	dec00404 	addi	sp,sp,16
    7020:	f800283a 	ret

00007024 <_putchar_r>:
    7024:	21800217 	ldw	r6,8(r4)
    7028:	000d04c1 	jmpi	d04c <_putc_r>

0000702c <putchar>:
    702c:	00800074 	movhi	r2,1
    7030:	10922304 	addi	r2,r2,18572
    7034:	10800017 	ldw	r2,0(r2)
    7038:	200b883a 	mov	r5,r4
    703c:	11800217 	ldw	r6,8(r2)
    7040:	1009883a 	mov	r4,r2
    7044:	000d04c1 	jmpi	d04c <_putc_r>

00007048 <_puts_r>:
    7048:	defff604 	addi	sp,sp,-40
    704c:	dc400815 	stw	r17,32(sp)
    7050:	2023883a 	mov	r17,r4
    7054:	2809883a 	mov	r4,r5
    7058:	dc000715 	stw	r16,28(sp)
    705c:	dfc00915 	stw	ra,36(sp)
    7060:	2821883a 	mov	r16,r5
    7064:	00073600 	call	7360 <strlen>
    7068:	10c00044 	addi	r3,r2,1
    706c:	d8800115 	stw	r2,4(sp)
    7070:	89400217 	ldw	r5,8(r17)
    7074:	00800074 	movhi	r2,1
    7078:	108a7504 	addi	r2,r2,10708
    707c:	d8800215 	stw	r2,8(sp)
    7080:	00800044 	movi	r2,1
    7084:	d8800315 	stw	r2,12(sp)
    7088:	8809883a 	mov	r4,r17
    708c:	00800084 	movi	r2,2
    7090:	d9800404 	addi	r6,sp,16
    7094:	dc000015 	stw	r16,0(sp)
    7098:	d8c00615 	stw	r3,24(sp)
    709c:	dec00415 	stw	sp,16(sp)
    70a0:	d8800515 	stw	r2,20(sp)
    70a4:	000b5bc0 	call	b5bc <__sfvwrite_r>
    70a8:	1000061e 	bne	r2,zero,70c4 <_puts_r+0x7c>
    70ac:	00800284 	movi	r2,10
    70b0:	dfc00917 	ldw	ra,36(sp)
    70b4:	dc400817 	ldw	r17,32(sp)
    70b8:	dc000717 	ldw	r16,28(sp)
    70bc:	dec00a04 	addi	sp,sp,40
    70c0:	f800283a 	ret
    70c4:	00bfffc4 	movi	r2,-1
    70c8:	003ff906 	br	70b0 <_gp+0xfffea834>

000070cc <puts>:
    70cc:	00800074 	movhi	r2,1
    70d0:	10922304 	addi	r2,r2,18572
    70d4:	200b883a 	mov	r5,r4
    70d8:	11000017 	ldw	r4,0(r2)
    70dc:	00070481 	jmpi	7048 <_puts_r>

000070e0 <_sbrk_r>:
    70e0:	defffd04 	addi	sp,sp,-12
    70e4:	dc400115 	stw	r17,4(sp)
    70e8:	dc000015 	stw	r16,0(sp)
    70ec:	2023883a 	mov	r17,r4
    70f0:	04000074 	movhi	r16,1
    70f4:	8418c904 	addi	r16,r16,25380
    70f8:	2809883a 	mov	r4,r5
    70fc:	dfc00215 	stw	ra,8(sp)
    7100:	80000015 	stw	zero,0(r16)
    7104:	000fea40 	call	fea4 <sbrk>
    7108:	00ffffc4 	movi	r3,-1
    710c:	10c00526 	beq	r2,r3,7124 <_sbrk_r+0x44>
    7110:	dfc00217 	ldw	ra,8(sp)
    7114:	dc400117 	ldw	r17,4(sp)
    7118:	dc000017 	ldw	r16,0(sp)
    711c:	dec00304 	addi	sp,sp,12
    7120:	f800283a 	ret
    7124:	80c00017 	ldw	r3,0(r16)
    7128:	183ff926 	beq	r3,zero,7110 <_gp+0xfffea894>
    712c:	88c00015 	stw	r3,0(r17)
    7130:	dfc00217 	ldw	ra,8(sp)
    7134:	dc400117 	ldw	r17,4(sp)
    7138:	dc000017 	ldw	r16,0(sp)
    713c:	dec00304 	addi	sp,sp,12
    7140:	f800283a 	ret

00007144 <_sprintf_r>:
    7144:	deffe704 	addi	sp,sp,-100
    7148:	2807883a 	mov	r3,r5
    714c:	dfc01715 	stw	ra,92(sp)
    7150:	d9c01815 	stw	r7,96(sp)
    7154:	00a00034 	movhi	r2,32768
    7158:	10bfffc4 	addi	r2,r2,-1
    715c:	02008204 	movi	r8,520
    7160:	d8800215 	stw	r2,8(sp)
    7164:	d8800515 	stw	r2,20(sp)
    7168:	d80b883a 	mov	r5,sp
    716c:	d9c01804 	addi	r7,sp,96
    7170:	00bfffc4 	movi	r2,-1
    7174:	d8c00015 	stw	r3,0(sp)
    7178:	d8c00415 	stw	r3,16(sp)
    717c:	da00030d 	sth	r8,12(sp)
    7180:	d880038d 	sth	r2,14(sp)
    7184:	00074200 	call	7420 <___vfprintf_internal_r>
    7188:	d8c00017 	ldw	r3,0(sp)
    718c:	18000005 	stb	zero,0(r3)
    7190:	dfc01717 	ldw	ra,92(sp)
    7194:	dec01904 	addi	sp,sp,100
    7198:	f800283a 	ret

0000719c <sprintf>:
    719c:	deffe604 	addi	sp,sp,-104
    71a0:	2007883a 	mov	r3,r4
    71a4:	dfc01715 	stw	ra,92(sp)
    71a8:	d9801815 	stw	r6,96(sp)
    71ac:	d9c01915 	stw	r7,100(sp)
    71b0:	00800074 	movhi	r2,1
    71b4:	10922304 	addi	r2,r2,18572
    71b8:	11000017 	ldw	r4,0(r2)
    71bc:	00a00034 	movhi	r2,32768
    71c0:	10bfffc4 	addi	r2,r2,-1
    71c4:	280d883a 	mov	r6,r5
    71c8:	02008204 	movi	r8,520
    71cc:	d8800215 	stw	r2,8(sp)
    71d0:	d8800515 	stw	r2,20(sp)
    71d4:	d80b883a 	mov	r5,sp
    71d8:	d9c01804 	addi	r7,sp,96
    71dc:	00bfffc4 	movi	r2,-1
    71e0:	d8c00015 	stw	r3,0(sp)
    71e4:	d8c00415 	stw	r3,16(sp)
    71e8:	da00030d 	sth	r8,12(sp)
    71ec:	d880038d 	sth	r2,14(sp)
    71f0:	00074200 	call	7420 <___vfprintf_internal_r>
    71f4:	d8c00017 	ldw	r3,0(sp)
    71f8:	18000005 	stb	zero,0(r3)
    71fc:	dfc01717 	ldw	ra,92(sp)
    7200:	dec01a04 	addi	sp,sp,104
    7204:	f800283a 	ret

00007208 <strcasecmp>:
    7208:	21c00003 	ldbu	r7,0(r4)
    720c:	00800074 	movhi	r2,1
    7210:	10922104 	addi	r2,r2,18564
    7214:	11800017 	ldw	r6,0(r2)
    7218:	38c03fcc 	andi	r3,r7,255
    721c:	18c0201c 	xori	r3,r3,128
    7220:	18ffe004 	addi	r3,r3,-128
    7224:	18001326 	beq	r3,zero,7274 <strcasecmp+0x6c>
    7228:	30c5883a 	add	r2,r6,r3
    722c:	10800003 	ldbu	r2,0(r2)
    7230:	21000044 	addi	r4,r4,1
    7234:	1080004c 	andi	r2,r2,1
    7238:	10000126 	beq	r2,zero,7240 <strcasecmp+0x38>
    723c:	18c00804 	addi	r3,r3,32
    7240:	28800007 	ldb	r2,0(r5)
    7244:	3091883a 	add	r8,r6,r2
    7248:	42000003 	ldbu	r8,0(r8)
    724c:	4200004c 	andi	r8,r8,1
    7250:	40000126 	beq	r8,zero,7258 <strcasecmp+0x50>
    7254:	10800804 	addi	r2,r2,32
    7258:	1880151e 	bne	r3,r2,72b0 <strcasecmp+0xa8>
    725c:	21c00003 	ldbu	r7,0(r4)
    7260:	29400044 	addi	r5,r5,1
    7264:	38c03fcc 	andi	r3,r7,255
    7268:	18c0201c 	xori	r3,r3,128
    726c:	18ffe004 	addi	r3,r3,-128
    7270:	183fed1e 	bne	r3,zero,7228 <_gp+0xfffea9ac>
    7274:	0005883a 	mov	r2,zero
    7278:	000f883a 	mov	r7,zero
    727c:	3085883a 	add	r2,r6,r2
    7280:	10800003 	ldbu	r2,0(r2)
    7284:	1080004c 	andi	r2,r2,1
    7288:	10000126 	beq	r2,zero,7290 <strcasecmp+0x88>
    728c:	39c00804 	addi	r7,r7,32
    7290:	28800003 	ldbu	r2,0(r5)
    7294:	308d883a 	add	r6,r6,r2
    7298:	30c00003 	ldbu	r3,0(r6)
    729c:	18c0004c 	andi	r3,r3,1
    72a0:	18000126 	beq	r3,zero,72a8 <strcasecmp+0xa0>
    72a4:	10800804 	addi	r2,r2,32
    72a8:	3885c83a 	sub	r2,r7,r2
    72ac:	f800283a 	ret
    72b0:	39c03fcc 	andi	r7,r7,255
    72b4:	3805883a 	mov	r2,r7
    72b8:	003ff006 	br	727c <_gp+0xfffeaa00>

000072bc <strcmp>:
    72bc:	2904b03a 	or	r2,r5,r4
    72c0:	108000cc 	andi	r2,r2,3
    72c4:	1000171e 	bne	r2,zero,7324 <strcmp+0x68>
    72c8:	20800017 	ldw	r2,0(r4)
    72cc:	28c00017 	ldw	r3,0(r5)
    72d0:	10c0141e 	bne	r2,r3,7324 <strcmp+0x68>
    72d4:	027fbff4 	movhi	r9,65279
    72d8:	4a7fbfc4 	addi	r9,r9,-257
    72dc:	1247883a 	add	r3,r2,r9
    72e0:	0084303a 	nor	r2,zero,r2
    72e4:	1884703a 	and	r2,r3,r2
    72e8:	02202074 	movhi	r8,32897
    72ec:	42202004 	addi	r8,r8,-32640
    72f0:	1204703a 	and	r2,r2,r8
    72f4:	10000226 	beq	r2,zero,7300 <strcmp+0x44>
    72f8:	00001706 	br	7358 <strcmp+0x9c>
    72fc:	3000161e 	bne	r6,zero,7358 <strcmp+0x9c>
    7300:	21000104 	addi	r4,r4,4
    7304:	20800017 	ldw	r2,0(r4)
    7308:	29400104 	addi	r5,r5,4
    730c:	28c00017 	ldw	r3,0(r5)
    7310:	124f883a 	add	r7,r2,r9
    7314:	008c303a 	nor	r6,zero,r2
    7318:	398c703a 	and	r6,r7,r6
    731c:	320c703a 	and	r6,r6,r8
    7320:	10fff626 	beq	r2,r3,72fc <_gp+0xfffeaa80>
    7324:	20800007 	ldb	r2,0(r4)
    7328:	1000051e 	bne	r2,zero,7340 <strcmp+0x84>
    732c:	00000606 	br	7348 <strcmp+0x8c>
    7330:	21000044 	addi	r4,r4,1
    7334:	20800007 	ldb	r2,0(r4)
    7338:	29400044 	addi	r5,r5,1
    733c:	10000226 	beq	r2,zero,7348 <strcmp+0x8c>
    7340:	28c00007 	ldb	r3,0(r5)
    7344:	10fffa26 	beq	r2,r3,7330 <_gp+0xfffeaab4>
    7348:	20c00003 	ldbu	r3,0(r4)
    734c:	28800003 	ldbu	r2,0(r5)
    7350:	1885c83a 	sub	r2,r3,r2
    7354:	f800283a 	ret
    7358:	0005883a 	mov	r2,zero
    735c:	f800283a 	ret

00007360 <strlen>:
    7360:	208000cc 	andi	r2,r4,3
    7364:	10001f1e 	bne	r2,zero,73e4 <strlen+0x84>
    7368:	20800017 	ldw	r2,0(r4)
    736c:	01ffbff4 	movhi	r7,65279
    7370:	39ffbfc4 	addi	r7,r7,-257
    7374:	01a02074 	movhi	r6,32897
    7378:	31a02004 	addi	r6,r6,-32640
    737c:	11c7883a 	add	r3,r2,r7
    7380:	0084303a 	nor	r2,zero,r2
    7384:	1886703a 	and	r3,r3,r2
    7388:	1986703a 	and	r3,r3,r6
    738c:	2005883a 	mov	r2,r4
    7390:	1800101e 	bne	r3,zero,73d4 <strlen+0x74>
    7394:	10800104 	addi	r2,r2,4
    7398:	10c00017 	ldw	r3,0(r2)
    739c:	19cb883a 	add	r5,r3,r7
    73a0:	00c6303a 	nor	r3,zero,r3
    73a4:	28c6703a 	and	r3,r5,r3
    73a8:	1986703a 	and	r3,r3,r6
    73ac:	1800091e 	bne	r3,zero,73d4 <strlen+0x74>
    73b0:	10800104 	addi	r2,r2,4
    73b4:	10c00017 	ldw	r3,0(r2)
    73b8:	19cb883a 	add	r5,r3,r7
    73bc:	00c6303a 	nor	r3,zero,r3
    73c0:	28c6703a 	and	r3,r5,r3
    73c4:	1986703a 	and	r3,r3,r6
    73c8:	183ff226 	beq	r3,zero,7394 <_gp+0xfffeab18>
    73cc:	00000106 	br	73d4 <strlen+0x74>
    73d0:	10800044 	addi	r2,r2,1
    73d4:	10c00007 	ldb	r3,0(r2)
    73d8:	183ffd1e 	bne	r3,zero,73d0 <_gp+0xfffeab54>
    73dc:	1105c83a 	sub	r2,r2,r4
    73e0:	f800283a 	ret
    73e4:	2005883a 	mov	r2,r4
    73e8:	003ffa06 	br	73d4 <_gp+0xfffeab58>

000073ec <__sprint_r>:
    73ec:	30800217 	ldw	r2,8(r6)
    73f0:	defffe04 	addi	sp,sp,-8
    73f4:	dc000015 	stw	r16,0(sp)
    73f8:	dfc00115 	stw	ra,4(sp)
    73fc:	3021883a 	mov	r16,r6
    7400:	10000226 	beq	r2,zero,740c <__sprint_r+0x20>
    7404:	000b5bc0 	call	b5bc <__sfvwrite_r>
    7408:	80000215 	stw	zero,8(r16)
    740c:	80000115 	stw	zero,4(r16)
    7410:	dfc00117 	ldw	ra,4(sp)
    7414:	dc000017 	ldw	r16,0(sp)
    7418:	dec00204 	addi	sp,sp,8
    741c:	f800283a 	ret

00007420 <___vfprintf_internal_r>:
    7420:	defeb904 	addi	sp,sp,-1308
    7424:	dc013d15 	stw	r16,1268(sp)
    7428:	d9013015 	stw	r4,1216(sp)
    742c:	dfc14615 	stw	ra,1304(sp)
    7430:	df014515 	stw	fp,1300(sp)
    7434:	ddc14415 	stw	r23,1296(sp)
    7438:	dd814315 	stw	r22,1292(sp)
    743c:	dd414215 	stw	r21,1288(sp)
    7440:	dd014115 	stw	r20,1284(sp)
    7444:	dcc14015 	stw	r19,1280(sp)
    7448:	dc813f15 	stw	r18,1276(sp)
    744c:	dc413e15 	stw	r17,1272(sp)
    7450:	d9412915 	stw	r5,1188(sp)
    7454:	3021883a 	mov	r16,r6
    7458:	d9c12d15 	stw	r7,1204(sp)
    745c:	000bca80 	call	bca8 <_localeconv_r>
    7460:	10800017 	ldw	r2,0(r2)
    7464:	d9013017 	ldw	r4,1216(sp)
    7468:	d8013315 	stw	zero,1228(sp)
    746c:	d8813715 	stw	r2,1244(sp)
    7470:	d8013415 	stw	zero,1232(sp)
    7474:	20000226 	beq	r4,zero,7480 <___vfprintf_internal_r+0x60>
    7478:	20800e17 	ldw	r2,56(r4)
    747c:	10019826 	beq	r2,zero,7ae0 <___vfprintf_internal_r+0x6c0>
    7480:	da012917 	ldw	r8,1188(sp)
    7484:	4080030b 	ldhu	r2,12(r8)
    7488:	10c0020c 	andi	r3,r2,8
    748c:	18ffffcc 	andi	r3,r3,65535
    7490:	18e0001c 	xori	r3,r3,32768
    7494:	18e00004 	addi	r3,r3,-32768
    7498:	18013a26 	beq	r3,zero,7984 <___vfprintf_internal_r+0x564>
    749c:	40c00417 	ldw	r3,16(r8)
    74a0:	18013826 	beq	r3,zero,7984 <___vfprintf_internal_r+0x564>
    74a4:	1100068c 	andi	r4,r2,26
    74a8:	00c00284 	movi	r3,10
    74ac:	20c13e26 	beq	r4,r3,79a8 <___vfprintf_internal_r+0x588>
    74b0:	da010dc4 	addi	r8,sp,1079
    74b4:	d8800404 	addi	r2,sp,16
    74b8:	da012615 	stw	r8,1176(sp)
    74bc:	d8811b15 	stw	r2,1132(sp)
    74c0:	1013883a 	mov	r9,r2
    74c4:	d8812617 	ldw	r2,1176(sp)
    74c8:	da010e04 	addi	r8,sp,1080
    74cc:	dc413017 	ldw	r17,1216(sp)
    74d0:	da012715 	stw	r8,1180(sp)
    74d4:	4091c83a 	sub	r8,r8,r2
    74d8:	d8011d15 	stw	zero,1140(sp)
    74dc:	d8011c15 	stw	zero,1136(sp)
    74e0:	802b883a 	mov	r21,r16
    74e4:	d8013215 	stw	zero,1224(sp)
    74e8:	d8013615 	stw	zero,1240(sp)
    74ec:	d8013515 	stw	zero,1236(sp)
    74f0:	d8012c15 	stw	zero,1200(sp)
    74f4:	da013915 	stw	r8,1252(sp)
    74f8:	a8800007 	ldb	r2,0(r21)
    74fc:	1002ec26 	beq	r2,zero,80b0 <___vfprintf_internal_r+0xc90>
    7500:	00c00944 	movi	r3,37
    7504:	a825883a 	mov	r18,r21
    7508:	10c0021e 	bne	r2,r3,7514 <___vfprintf_internal_r+0xf4>
    750c:	00001406 	br	7560 <___vfprintf_internal_r+0x140>
    7510:	10c00326 	beq	r2,r3,7520 <___vfprintf_internal_r+0x100>
    7514:	94800044 	addi	r18,r18,1
    7518:	90800007 	ldb	r2,0(r18)
    751c:	103ffc1e 	bne	r2,zero,7510 <_gp+0xfffeac94>
    7520:	9561c83a 	sub	r16,r18,r21
    7524:	80000e26 	beq	r16,zero,7560 <___vfprintf_internal_r+0x140>
    7528:	da011d17 	ldw	r8,1140(sp)
    752c:	d8c11c17 	ldw	r3,1136(sp)
    7530:	4d400015 	stw	r21,0(r9)
    7534:	4c000115 	stw	r16,4(r9)
    7538:	4411883a 	add	r8,r8,r16
    753c:	18c00044 	addi	r3,r3,1
    7540:	da011d15 	stw	r8,1140(sp)
    7544:	d8c11c15 	stw	r3,1136(sp)
    7548:	008001c4 	movi	r2,7
    754c:	10c15d16 	blt	r2,r3,7ac4 <___vfprintf_internal_r+0x6a4>
    7550:	4a400204 	addi	r9,r9,8
    7554:	d8812c17 	ldw	r2,1200(sp)
    7558:	1405883a 	add	r2,r2,r16
    755c:	d8812c15 	stw	r2,1200(sp)
    7560:	90800007 	ldb	r2,0(r18)
    7564:	10013b26 	beq	r2,zero,7a54 <___vfprintf_internal_r+0x634>
    7568:	95400044 	addi	r21,r18,1
    756c:	94800047 	ldb	r18,1(r18)
    7570:	d8012585 	stb	zero,1174(sp)
    7574:	073fffc4 	movi	fp,-1
    7578:	d8012e15 	stw	zero,1208(sp)
    757c:	0021883a 	mov	r16,zero
    7580:	00c01604 	movi	r3,88
    7584:	01400244 	movi	r5,9
    7588:	02800a84 	movi	r10,42
    758c:	01c01b04 	movi	r7,108
    7590:	01800ac4 	movi	r6,43
    7594:	02c00804 	movi	r11,32
    7598:	ad400044 	addi	r21,r21,1
    759c:	90bff804 	addi	r2,r18,-32
    75a0:	1880092e 	bgeu	r3,r2,75c8 <___vfprintf_internal_r+0x1a8>
    75a4:	90012b26 	beq	r18,zero,7a54 <___vfprintf_internal_r+0x634>
    75a8:	00c00044 	movi	r3,1
    75ac:	d8c12815 	stw	r3,1184(sp)
    75b0:	dc810405 	stb	r18,1040(sp)
    75b4:	d8012585 	stb	zero,1174(sp)
    75b8:	d8c12b15 	stw	r3,1196(sp)
    75bc:	dcc10404 	addi	r19,sp,1040
    75c0:	d8013115 	stw	zero,1220(sp)
    75c4:	00008806 	br	77e8 <___vfprintf_internal_r+0x3c8>
    75c8:	1085883a 	add	r2,r2,r2
    75cc:	1085883a 	add	r2,r2,r2
    75d0:	01000034 	movhi	r4,0
    75d4:	211d7904 	addi	r4,r4,30180
    75d8:	1105883a 	add	r2,r2,r4
    75dc:	10800017 	ldw	r2,0(r2)
    75e0:	1000683a 	jmp	r2
    75e4:	00007b98 	cmpnei	zero,zero,494
    75e8:	000075a4 	muli	zero,zero,470
    75ec:	000075a4 	muli	zero,zero,470
    75f0:	00007bac 	andhi	zero,zero,494
    75f4:	000075a4 	muli	zero,zero,470
    75f8:	000075a4 	muli	zero,zero,470
    75fc:	000075a4 	muli	zero,zero,470
    7600:	000075a4 	muli	zero,zero,470
    7604:	000075a4 	muli	zero,zero,470
    7608:	000075a4 	muli	zero,zero,470
    760c:	00007c94 	movui	zero,498
    7610:	00007b50 	cmplti	zero,zero,493
    7614:	000075a4 	muli	zero,zero,470
    7618:	00007978 	rdprs	zero,zero,485
    761c:	00007b5c 	xori	zero,zero,493
    7620:	000075a4 	muli	zero,zero,470
    7624:	00007bb8 	rdprs	zero,zero,494
    7628:	00007cb8 	rdprs	zero,zero,498
    762c:	00007cb8 	rdprs	zero,zero,498
    7630:	00007cb8 	rdprs	zero,zero,498
    7634:	00007cb8 	rdprs	zero,zero,498
    7638:	00007cb8 	rdprs	zero,zero,498
    763c:	00007cb8 	rdprs	zero,zero,498
    7640:	00007cb8 	rdprs	zero,zero,498
    7644:	00007cb8 	rdprs	zero,zero,498
    7648:	00007cb8 	rdprs	zero,zero,498
    764c:	000075a4 	muli	zero,zero,470
    7650:	000075a4 	muli	zero,zero,470
    7654:	000075a4 	muli	zero,zero,470
    7658:	000075a4 	muli	zero,zero,470
    765c:	000075a4 	muli	zero,zero,470
    7660:	000075a4 	muli	zero,zero,470
    7664:	000075a4 	muli	zero,zero,470
    7668:	000075a4 	muli	zero,zero,470
    766c:	000075a4 	muli	zero,zero,470
    7670:	000075a4 	muli	zero,zero,470
    7674:	00007914 	movui	zero,484
    7678:	00007ce0 	cmpeqi	zero,zero,499
    767c:	000075a4 	muli	zero,zero,470
    7680:	00007ce0 	cmpeqi	zero,zero,499
    7684:	000075a4 	muli	zero,zero,470
    7688:	000075a4 	muli	zero,zero,470
    768c:	000075a4 	muli	zero,zero,470
    7690:	000075a4 	muli	zero,zero,470
    7694:	00007e50 	cmplti	zero,zero,505
    7698:	000075a4 	muli	zero,zero,470
    769c:	000075a4 	muli	zero,zero,470
    76a0:	000078dc 	xori	zero,zero,483
    76a4:	000075a4 	muli	zero,zero,470
    76a8:	000075a4 	muli	zero,zero,470
    76ac:	000075a4 	muli	zero,zero,470
    76b0:	000075a4 	muli	zero,zero,470
    76b4:	000075a4 	muli	zero,zero,470
    76b8:	00007748 	cmpgei	zero,zero,477
    76bc:	000075a4 	muli	zero,zero,470
    76c0:	000075a4 	muli	zero,zero,470
    76c4:	00007bc4 	movi	zero,495
    76c8:	000075a4 	muli	zero,zero,470
    76cc:	000075a4 	muli	zero,zero,470
    76d0:	000075a4 	muli	zero,zero,470
    76d4:	000075a4 	muli	zero,zero,470
    76d8:	000075a4 	muli	zero,zero,470
    76dc:	000075a4 	muli	zero,zero,470
    76e0:	000075a4 	muli	zero,zero,470
    76e4:	000075a4 	muli	zero,zero,470
    76e8:	000075a4 	muli	zero,zero,470
    76ec:	000075a4 	muli	zero,zero,470
    76f0:	00007c38 	rdprs	zero,zero,496
    76f4:	00007918 	cmpnei	zero,zero,484
    76f8:	00007ce0 	cmpeqi	zero,zero,499
    76fc:	00007ce0 	cmpeqi	zero,zero,499
    7700:	00007ce0 	cmpeqi	zero,zero,499
    7704:	00007c18 	cmpnei	zero,zero,496
    7708:	00007918 	cmpnei	zero,zero,484
    770c:	000075a4 	muli	zero,zero,470
    7710:	000075a4 	muli	zero,zero,470
    7714:	00007c24 	muli	zero,zero,496
    7718:	000075a4 	muli	zero,zero,470
    771c:	00007c68 	cmpgeui	zero,zero,497
    7720:	000078e0 	cmpeqi	zero,zero,483
    7724:	00007d68 	cmpgeui	zero,zero,501
    7728:	00007db4 	movhi	zero,502
    772c:	000075a4 	muli	zero,zero,470
    7730:	00007dc0 	call	7dc <Fat_FileBrowseNext+0x64>
    7734:	000075a4 	muli	zero,zero,470
    7738:	0000774c 	andi	zero,zero,477
    773c:	000075a4 	muli	zero,zero,470
    7740:	000075a4 	muli	zero,zero,470
    7744:	00007e1c 	xori	zero,zero,504
    7748:	84000414 	ori	r16,r16,16
    774c:	8080080c 	andi	r2,r16,32
    7750:	1000f51e 	bne	r2,zero,7b28 <___vfprintf_internal_r+0x708>
    7754:	8080040c 	andi	r2,r16,16
    7758:	10042c26 	beq	r2,zero,880c <___vfprintf_internal_r+0x13ec>
    775c:	da012d17 	ldw	r8,1204(sp)
    7760:	002d883a 	mov	r22,zero
    7764:	00c00044 	movi	r3,1
    7768:	45c00017 	ldw	r23,0(r8)
    776c:	42000104 	addi	r8,r8,4
    7770:	da012d15 	stw	r8,1204(sp)
    7774:	b805883a 	mov	r2,r23
    7778:	d8012585 	stb	zero,1174(sp)
    777c:	e0000216 	blt	fp,zero,7788 <___vfprintf_internal_r+0x368>
    7780:	013fdfc4 	movi	r4,-129
    7784:	8120703a 	and	r16,r16,r4
    7788:	1002671e 	bne	r2,zero,8128 <___vfprintf_internal_r+0xd08>
    778c:	e002661e 	bne	fp,zero,8128 <___vfprintf_internal_r+0xd08>
    7790:	18c03fcc 	andi	r3,r3,255
    7794:	1803561e 	bne	r3,zero,84f0 <___vfprintf_internal_r+0x10d0>
    7798:	8080004c 	andi	r2,r16,1
    779c:	10035426 	beq	r2,zero,84f0 <___vfprintf_internal_r+0x10d0>
    77a0:	da013917 	ldw	r8,1252(sp)
    77a4:	00800c04 	movi	r2,48
    77a8:	d8810dc5 	stb	r2,1079(sp)
    77ac:	da012b15 	stw	r8,1196(sp)
    77b0:	dcc10dc4 	addi	r19,sp,1079
    77b4:	d8812b17 	ldw	r2,1196(sp)
    77b8:	d8812815 	stw	r2,1184(sp)
    77bc:	1700010e 	bge	r2,fp,77c4 <___vfprintf_internal_r+0x3a4>
    77c0:	df012815 	stw	fp,1184(sp)
    77c4:	d8812583 	ldbu	r2,1174(sp)
    77c8:	df013115 	stw	fp,1220(sp)
    77cc:	10803fcc 	andi	r2,r2,255
    77d0:	1080201c 	xori	r2,r2,128
    77d4:	10bfe004 	addi	r2,r2,-128
    77d8:	10000326 	beq	r2,zero,77e8 <___vfprintf_internal_r+0x3c8>
    77dc:	da012817 	ldw	r8,1184(sp)
    77e0:	42000044 	addi	r8,r8,1
    77e4:	da012815 	stw	r8,1184(sp)
    77e8:	80c0008c 	andi	r3,r16,2
    77ec:	d8c12a15 	stw	r3,1192(sp)
    77f0:	18000326 	beq	r3,zero,7800 <___vfprintf_internal_r+0x3e0>
    77f4:	da012817 	ldw	r8,1184(sp)
    77f8:	42000084 	addi	r8,r8,2
    77fc:	da012815 	stw	r8,1184(sp)
    7800:	80c0210c 	andi	r3,r16,132
    7804:	d8c12f15 	stw	r3,1212(sp)
    7808:	1801941e 	bne	r3,zero,7e5c <___vfprintf_internal_r+0xa3c>
    780c:	da012e17 	ldw	r8,1208(sp)
    7810:	d8c12817 	ldw	r3,1184(sp)
    7814:	40edc83a 	sub	r22,r8,r3
    7818:	0581900e 	bge	zero,r22,7e5c <___vfprintf_internal_r+0xa3c>
    781c:	02800404 	movi	r10,16
    7820:	da011d17 	ldw	r8,1140(sp)
    7824:	d8c11c17 	ldw	r3,1136(sp)
    7828:	05c00074 	movhi	r23,1
    782c:	bdca8684 	addi	r23,r23,10778
    7830:	5580200e 	bge	r10,r22,78b4 <___vfprintf_internal_r+0x494>
    7834:	dc813815 	stw	r18,1248(sp)
    7838:	5039883a 	mov	fp,r10
    783c:	b825883a 	mov	r18,r23
    7840:	050001c4 	movi	r20,7
    7844:	b02f883a 	mov	r23,r22
    7848:	802d883a 	mov	r22,r16
    784c:	dc012917 	ldw	r16,1188(sp)
    7850:	00000306 	br	7860 <___vfprintf_internal_r+0x440>
    7854:	bdfffc04 	addi	r23,r23,-16
    7858:	4a400204 	addi	r9,r9,8
    785c:	e5c0110e 	bge	fp,r23,78a4 <___vfprintf_internal_r+0x484>
    7860:	4c800015 	stw	r18,0(r9)
    7864:	4f000115 	stw	fp,4(r9)
    7868:	42000404 	addi	r8,r8,16
    786c:	18c00044 	addi	r3,r3,1
    7870:	da011d15 	stw	r8,1140(sp)
    7874:	d8c11c15 	stw	r3,1136(sp)
    7878:	a0fff60e 	bge	r20,r3,7854 <_gp+0xfffeafd8>
    787c:	8809883a 	mov	r4,r17
    7880:	800b883a 	mov	r5,r16
    7884:	d9811b04 	addi	r6,sp,1132
    7888:	00073ec0 	call	73ec <__sprint_r>
    788c:	1000771e 	bne	r2,zero,7a6c <___vfprintf_internal_r+0x64c>
    7890:	bdfffc04 	addi	r23,r23,-16
    7894:	da011d17 	ldw	r8,1140(sp)
    7898:	d8c11c17 	ldw	r3,1136(sp)
    789c:	da400404 	addi	r9,sp,16
    78a0:	e5ffef16 	blt	fp,r23,7860 <_gp+0xfffeafe4>
    78a4:	b021883a 	mov	r16,r22
    78a8:	b82d883a 	mov	r22,r23
    78ac:	902f883a 	mov	r23,r18
    78b0:	dc813817 	ldw	r18,1248(sp)
    78b4:	4dc00015 	stw	r23,0(r9)
    78b8:	4d800115 	stw	r22,4(r9)
    78bc:	4591883a 	add	r8,r8,r22
    78c0:	18c00044 	addi	r3,r3,1
    78c4:	da011d15 	stw	r8,1140(sp)
    78c8:	d8c11c15 	stw	r3,1136(sp)
    78cc:	008001c4 	movi	r2,7
    78d0:	10c36d16 	blt	r2,r3,8688 <___vfprintf_internal_r+0x1268>
    78d4:	4a400204 	addi	r9,r9,8
    78d8:	00016206 	br	7e64 <___vfprintf_internal_r+0xa44>
    78dc:	84000414 	ori	r16,r16,16
    78e0:	8080080c 	andi	r2,r16,32
    78e4:	1000801e 	bne	r2,zero,7ae8 <___vfprintf_internal_r+0x6c8>
    78e8:	8080040c 	andi	r2,r16,16
    78ec:	1003da26 	beq	r2,zero,8858 <___vfprintf_internal_r+0x1438>
    78f0:	d8c12d17 	ldw	r3,1204(sp)
    78f4:	002d883a 	mov	r22,zero
    78f8:	1dc00017 	ldw	r23,0(r3)
    78fc:	18c00104 	addi	r3,r3,4
    7900:	d8c12d15 	stw	r3,1204(sp)
    7904:	b805883a 	mov	r2,r23
    7908:	0007883a 	mov	r3,zero
    790c:	d8012585 	stb	zero,1174(sp)
    7910:	003f9a06 	br	777c <_gp+0xfffeaf00>
    7914:	84000414 	ori	r16,r16,16
    7918:	8080080c 	andi	r2,r16,32
    791c:	10007b1e 	bne	r2,zero,7b0c <___vfprintf_internal_r+0x6ec>
    7920:	8080040c 	andi	r2,r16,16
    7924:	1003ed26 	beq	r2,zero,88dc <___vfprintf_internal_r+0x14bc>
    7928:	d9012d17 	ldw	r4,1204(sp)
    792c:	25c00017 	ldw	r23,0(r4)
    7930:	21000104 	addi	r4,r4,4
    7934:	d9012d15 	stw	r4,1204(sp)
    7938:	b82dd7fa 	srai	r22,r23,31
    793c:	b005883a 	mov	r2,r22
    7940:	1003230e 	bge	r2,zero,85d0 <___vfprintf_internal_r+0x11b0>
    7944:	05efc83a 	sub	r23,zero,r23
    7948:	b804c03a 	cmpne	r2,r23,zero
    794c:	05adc83a 	sub	r22,zero,r22
    7950:	b0adc83a 	sub	r22,r22,r2
    7954:	00800b44 	movi	r2,45
    7958:	d8812585 	stb	r2,1174(sp)
    795c:	00c00044 	movi	r3,1
    7960:	bd84b03a 	or	r2,r23,r22
    7964:	003f8506 	br	777c <_gp+0xfffeaf00>
    7968:	da012e17 	ldw	r8,1208(sp)
    796c:	d8812d15 	stw	r2,1204(sp)
    7970:	0211c83a 	sub	r8,zero,r8
    7974:	da012e15 	stw	r8,1208(sp)
    7978:	84000114 	ori	r16,r16,4
    797c:	ac800007 	ldb	r18,0(r21)
    7980:	003f0506 	br	7598 <_gp+0xfffead1c>
    7984:	d9013017 	ldw	r4,1216(sp)
    7988:	d9412917 	ldw	r5,1188(sp)
    798c:	00093280 	call	9328 <__swsetup_r>
    7990:	10003d1e 	bne	r2,zero,7a88 <___vfprintf_internal_r+0x668>
    7994:	d8c12917 	ldw	r3,1188(sp)
    7998:	1880030b 	ldhu	r2,12(r3)
    799c:	00c00284 	movi	r3,10
    79a0:	1100068c 	andi	r4,r2,26
    79a4:	20fec21e 	bne	r4,r3,74b0 <_gp+0xfffeac34>
    79a8:	d9012917 	ldw	r4,1188(sp)
    79ac:	20c0038b 	ldhu	r3,14(r4)
    79b0:	193fffcc 	andi	r4,r3,65535
    79b4:	2120001c 	xori	r4,r4,32768
    79b8:	21200004 	addi	r4,r4,-32768
    79bc:	203ebc16 	blt	r4,zero,74b0 <_gp+0xfffeac34>
    79c0:	da012917 	ldw	r8,1188(sp)
    79c4:	d9013017 	ldw	r4,1216(sp)
    79c8:	d9c12d17 	ldw	r7,1204(sp)
    79cc:	42800717 	ldw	r10,28(r8)
    79d0:	42400917 	ldw	r9,36(r8)
    79d4:	10bfff4c 	andi	r2,r2,65533
    79d8:	02010004 	movi	r8,1024
    79dc:	d881070d 	sth	r2,1052(sp)
    79e0:	d9410404 	addi	r5,sp,1040
    79e4:	d8800404 	addi	r2,sp,16
    79e8:	800d883a 	mov	r6,r16
    79ec:	d8c1078d 	sth	r3,1054(sp)
    79f0:	da810b15 	stw	r10,1068(sp)
    79f4:	da410d15 	stw	r9,1076(sp)
    79f8:	d8810415 	stw	r2,1040(sp)
    79fc:	d8810815 	stw	r2,1056(sp)
    7a00:	da010615 	stw	r8,1048(sp)
    7a04:	da010915 	stw	r8,1060(sp)
    7a08:	d8010a15 	stw	zero,1064(sp)
    7a0c:	00074200 	call	7420 <___vfprintf_internal_r>
    7a10:	d8812c15 	stw	r2,1200(sp)
    7a14:	10000416 	blt	r2,zero,7a28 <___vfprintf_internal_r+0x608>
    7a18:	d9013017 	ldw	r4,1216(sp)
    7a1c:	d9410404 	addi	r5,sp,1040
    7a20:	000acc00 	call	acc0 <_fflush_r>
    7a24:	1005d81e 	bne	r2,zero,9188 <___vfprintf_internal_r+0x1d68>
    7a28:	d881070b 	ldhu	r2,1052(sp)
    7a2c:	1080100c 	andi	r2,r2,64
    7a30:	10bfffcc 	andi	r2,r2,65535
    7a34:	10a0001c 	xori	r2,r2,32768
    7a38:	10a00004 	addi	r2,r2,-32768
    7a3c:	10001426 	beq	r2,zero,7a90 <___vfprintf_internal_r+0x670>
    7a40:	d8c12917 	ldw	r3,1188(sp)
    7a44:	1880030b 	ldhu	r2,12(r3)
    7a48:	10801014 	ori	r2,r2,64
    7a4c:	1880030d 	sth	r2,12(r3)
    7a50:	00000f06 	br	7a90 <___vfprintf_internal_r+0x670>
    7a54:	d8811d17 	ldw	r2,1140(sp)
    7a58:	10000426 	beq	r2,zero,7a6c <___vfprintf_internal_r+0x64c>
    7a5c:	d9013017 	ldw	r4,1216(sp)
    7a60:	d9412917 	ldw	r5,1188(sp)
    7a64:	d9811b04 	addi	r6,sp,1132
    7a68:	00073ec0 	call	73ec <__sprint_r>
    7a6c:	d8c12917 	ldw	r3,1188(sp)
    7a70:	1880030b 	ldhu	r2,12(r3)
    7a74:	1080100c 	andi	r2,r2,64
    7a78:	10bfffcc 	andi	r2,r2,65535
    7a7c:	10a0001c 	xori	r2,r2,32768
    7a80:	10a00004 	addi	r2,r2,-32768
    7a84:	10000226 	beq	r2,zero,7a90 <___vfprintf_internal_r+0x670>
    7a88:	00bfffc4 	movi	r2,-1
    7a8c:	d8812c15 	stw	r2,1200(sp)
    7a90:	d8812c17 	ldw	r2,1200(sp)
    7a94:	dfc14617 	ldw	ra,1304(sp)
    7a98:	df014517 	ldw	fp,1300(sp)
    7a9c:	ddc14417 	ldw	r23,1296(sp)
    7aa0:	dd814317 	ldw	r22,1292(sp)
    7aa4:	dd414217 	ldw	r21,1288(sp)
    7aa8:	dd014117 	ldw	r20,1284(sp)
    7aac:	dcc14017 	ldw	r19,1280(sp)
    7ab0:	dc813f17 	ldw	r18,1276(sp)
    7ab4:	dc413e17 	ldw	r17,1272(sp)
    7ab8:	dc013d17 	ldw	r16,1268(sp)
    7abc:	dec14704 	addi	sp,sp,1308
    7ac0:	f800283a 	ret
    7ac4:	d9412917 	ldw	r5,1188(sp)
    7ac8:	8809883a 	mov	r4,r17
    7acc:	d9811b04 	addi	r6,sp,1132
    7ad0:	00073ec0 	call	73ec <__sprint_r>
    7ad4:	103fe51e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    7ad8:	da400404 	addi	r9,sp,16
    7adc:	003e9d06 	br	7554 <_gp+0xfffeacd8>
    7ae0:	000af680 	call	af68 <__sinit>
    7ae4:	003e6606 	br	7480 <_gp+0xfffeac04>
    7ae8:	d8812d17 	ldw	r2,1204(sp)
    7aec:	0007883a 	mov	r3,zero
    7af0:	15c00017 	ldw	r23,0(r2)
    7af4:	15800117 	ldw	r22,4(r2)
    7af8:	10800204 	addi	r2,r2,8
    7afc:	d8812d15 	stw	r2,1204(sp)
    7b00:	d8012585 	stb	zero,1174(sp)
    7b04:	bd84b03a 	or	r2,r23,r22
    7b08:	003f1c06 	br	777c <_gp+0xfffeaf00>
    7b0c:	d8c12d17 	ldw	r3,1204(sp)
    7b10:	18800117 	ldw	r2,4(r3)
    7b14:	1dc00017 	ldw	r23,0(r3)
    7b18:	18c00204 	addi	r3,r3,8
    7b1c:	d8c12d15 	stw	r3,1204(sp)
    7b20:	102d883a 	mov	r22,r2
    7b24:	003f8606 	br	7940 <_gp+0xfffeb0c4>
    7b28:	d8c12d17 	ldw	r3,1204(sp)
    7b2c:	d9012d17 	ldw	r4,1204(sp)
    7b30:	1dc00017 	ldw	r23,0(r3)
    7b34:	1d800117 	ldw	r22,4(r3)
    7b38:	21000204 	addi	r4,r4,8
    7b3c:	00c00044 	movi	r3,1
    7b40:	d9012d15 	stw	r4,1204(sp)
    7b44:	bd84b03a 	or	r2,r23,r22
    7b48:	d8012585 	stb	zero,1174(sp)
    7b4c:	003f0b06 	br	777c <_gp+0xfffeaf00>
    7b50:	d9812585 	stb	r6,1174(sp)
    7b54:	ac800007 	ldb	r18,0(r21)
    7b58:	003e8f06 	br	7598 <_gp+0xfffead1c>
    7b5c:	ac800007 	ldb	r18,0(r21)
    7b60:	a9000044 	addi	r4,r21,1
    7b64:	92857d26 	beq	r18,r10,915c <___vfprintf_internal_r+0x1d3c>
    7b68:	90bff404 	addi	r2,r18,-48
    7b6c:	0039883a 	mov	fp,zero
    7b70:	28800736 	bltu	r5,r2,7b90 <___vfprintf_internal_r+0x770>
    7b74:	24800007 	ldb	r18,0(r4)
    7b78:	e70002a4 	muli	fp,fp,10
    7b7c:	21000044 	addi	r4,r4,1
    7b80:	1739883a 	add	fp,r2,fp
    7b84:	90bff404 	addi	r2,r18,-48
    7b88:	28bffa2e 	bgeu	r5,r2,7b74 <_gp+0xfffeb2f8>
    7b8c:	e0044216 	blt	fp,zero,8c98 <___vfprintf_internal_r+0x1878>
    7b90:	202b883a 	mov	r21,r4
    7b94:	003e8106 	br	759c <_gp+0xfffead20>
    7b98:	d8812587 	ldb	r2,1174(sp)
    7b9c:	1003581e 	bne	r2,zero,8900 <___vfprintf_internal_r+0x14e0>
    7ba0:	dac12585 	stb	r11,1174(sp)
    7ba4:	ac800007 	ldb	r18,0(r21)
    7ba8:	003e7b06 	br	7598 <_gp+0xfffead1c>
    7bac:	84000054 	ori	r16,r16,1
    7bb0:	ac800007 	ldb	r18,0(r21)
    7bb4:	003e7806 	br	7598 <_gp+0xfffead1c>
    7bb8:	84002014 	ori	r16,r16,128
    7bbc:	ac800007 	ldb	r18,0(r21)
    7bc0:	003e7506 	br	7598 <_gp+0xfffead1c>
    7bc4:	02000074 	movhi	r8,1
    7bc8:	420a7a04 	addi	r8,r8,10728
    7bcc:	da013615 	stw	r8,1240(sp)
    7bd0:	8080080c 	andi	r2,r16,32
    7bd4:	10009626 	beq	r2,zero,7e30 <___vfprintf_internal_r+0xa10>
    7bd8:	d8812d17 	ldw	r2,1204(sp)
    7bdc:	15c00017 	ldw	r23,0(r2)
    7be0:	15800117 	ldw	r22,4(r2)
    7be4:	10800204 	addi	r2,r2,8
    7be8:	d8812d15 	stw	r2,1204(sp)
    7bec:	8080004c 	andi	r2,r16,1
    7bf0:	1002ae26 	beq	r2,zero,86ac <___vfprintf_internal_r+0x128c>
    7bf4:	bd84b03a 	or	r2,r23,r22
    7bf8:	10032a26 	beq	r2,zero,88a4 <___vfprintf_internal_r+0x1484>
    7bfc:	00c00c04 	movi	r3,48
    7c00:	d8c12505 	stb	r3,1172(sp)
    7c04:	dc812545 	stb	r18,1173(sp)
    7c08:	84000094 	ori	r16,r16,2
    7c0c:	00c00084 	movi	r3,2
    7c10:	d8012585 	stb	zero,1174(sp)
    7c14:	003ed906 	br	777c <_gp+0xfffeaf00>
    7c18:	84001014 	ori	r16,r16,64
    7c1c:	ac800007 	ldb	r18,0(r21)
    7c20:	003e5d06 	br	7598 <_gp+0xfffead1c>
    7c24:	ac800007 	ldb	r18,0(r21)
    7c28:	a805883a 	mov	r2,r21
    7c2c:	91c43226 	beq	r18,r7,8cf8 <___vfprintf_internal_r+0x18d8>
    7c30:	84000414 	ori	r16,r16,16
    7c34:	003e5806 	br	7598 <_gp+0xfffead1c>
    7c38:	d8c12d17 	ldw	r3,1204(sp)
    7c3c:	02000044 	movi	r8,1
    7c40:	da012815 	stw	r8,1184(sp)
    7c44:	18800017 	ldw	r2,0(r3)
    7c48:	18c00104 	addi	r3,r3,4
    7c4c:	d8012585 	stb	zero,1174(sp)
    7c50:	d8810405 	stb	r2,1040(sp)
    7c54:	d8c12d15 	stw	r3,1204(sp)
    7c58:	da012b15 	stw	r8,1196(sp)
    7c5c:	dcc10404 	addi	r19,sp,1040
    7c60:	d8013115 	stw	zero,1220(sp)
    7c64:	003ee006 	br	77e8 <_gp+0xfffeaf6c>
    7c68:	8080080c 	andi	r2,r16,32
    7c6c:	10031026 	beq	r2,zero,88b0 <___vfprintf_internal_r+0x1490>
    7c70:	d9012d17 	ldw	r4,1204(sp)
    7c74:	da012c17 	ldw	r8,1200(sp)
    7c78:	20800017 	ldw	r2,0(r4)
    7c7c:	4007d7fa 	srai	r3,r8,31
    7c80:	21000104 	addi	r4,r4,4
    7c84:	d9012d15 	stw	r4,1204(sp)
    7c88:	12000015 	stw	r8,0(r2)
    7c8c:	10c00115 	stw	r3,4(r2)
    7c90:	003e1906 	br	74f8 <_gp+0xfffeac7c>
    7c94:	da012d17 	ldw	r8,1204(sp)
    7c98:	d9012d17 	ldw	r4,1204(sp)
    7c9c:	42000017 	ldw	r8,0(r8)
    7ca0:	20800104 	addi	r2,r4,4
    7ca4:	da012e15 	stw	r8,1208(sp)
    7ca8:	403f2f16 	blt	r8,zero,7968 <_gp+0xfffeb0ec>
    7cac:	d8812d15 	stw	r2,1204(sp)
    7cb0:	ac800007 	ldb	r18,0(r21)
    7cb4:	003e3806 	br	7598 <_gp+0xfffead1c>
    7cb8:	0009883a 	mov	r4,zero
    7cbc:	90bff404 	addi	r2,r18,-48
    7cc0:	ac800007 	ldb	r18,0(r21)
    7cc4:	210002a4 	muli	r4,r4,10
    7cc8:	ad400044 	addi	r21,r21,1
    7ccc:	2089883a 	add	r4,r4,r2
    7cd0:	90bff404 	addi	r2,r18,-48
    7cd4:	28bffa2e 	bgeu	r5,r2,7cc0 <_gp+0xfffeb444>
    7cd8:	d9012e15 	stw	r4,1208(sp)
    7cdc:	003e2f06 	br	759c <_gp+0xfffead20>
    7ce0:	8080020c 	andi	r2,r16,8
    7ce4:	1002d426 	beq	r2,zero,8838 <___vfprintf_internal_r+0x1418>
    7ce8:	d8c12d17 	ldw	r3,1204(sp)
    7cec:	1d800017 	ldw	r22,0(r3)
    7cf0:	1d000117 	ldw	r20,4(r3)
    7cf4:	18c00204 	addi	r3,r3,8
    7cf8:	d8c12d15 	stw	r3,1204(sp)
    7cfc:	dd813315 	stw	r22,1228(sp)
    7d00:	dd013415 	stw	r20,1232(sp)
    7d04:	b009883a 	mov	r4,r22
    7d08:	a00b883a 	mov	r5,r20
    7d0c:	da413c15 	stw	r9,1264(sp)
    7d10:	000d7f40 	call	d7f4 <__isinfd>
    7d14:	da413c17 	ldw	r9,1264(sp)
    7d18:	b009883a 	mov	r4,r22
    7d1c:	a00b883a 	mov	r5,r20
    7d20:	10035726 	beq	r2,zero,8a80 <___vfprintf_internal_r+0x1660>
    7d24:	000d883a 	mov	r6,zero
    7d28:	000f883a 	mov	r7,zero
    7d2c:	000f3300 	call	f330 <__ltdf2>
    7d30:	da413c17 	ldw	r9,1264(sp)
    7d34:	10041b16 	blt	r2,zero,8da4 <___vfprintf_internal_r+0x1984>
    7d38:	d8812583 	ldbu	r2,1174(sp)
    7d3c:	00c011c4 	movi	r3,71
    7d40:	1c830b16 	blt	r3,r18,8970 <___vfprintf_internal_r+0x1550>
    7d44:	04c00074 	movhi	r19,1
    7d48:	9cca7604 	addi	r19,r19,10712
    7d4c:	020000c4 	movi	r8,3
    7d50:	00ffdfc4 	movi	r3,-129
    7d54:	da012815 	stw	r8,1184(sp)
    7d58:	80e0703a 	and	r16,r16,r3
    7d5c:	da012b15 	stw	r8,1196(sp)
    7d60:	d8013115 	stw	zero,1220(sp)
    7d64:	003e9906 	br	77cc <_gp+0xfffeaf50>
    7d68:	d8812d17 	ldw	r2,1204(sp)
    7d6c:	d8c12d17 	ldw	r3,1204(sp)
    7d70:	02000074 	movhi	r8,1
    7d74:	420a7f04 	addi	r8,r8,10748
    7d78:	15c00017 	ldw	r23,0(r2)
    7d7c:	00800c04 	movi	r2,48
    7d80:	18c00104 	addi	r3,r3,4
    7d84:	d8812505 	stb	r2,1172(sp)
    7d88:	00801e04 	movi	r2,120
    7d8c:	d8812545 	stb	r2,1173(sp)
    7d90:	d8c12d15 	stw	r3,1204(sp)
    7d94:	002d883a 	mov	r22,zero
    7d98:	84000094 	ori	r16,r16,2
    7d9c:	da013615 	stw	r8,1240(sp)
    7da0:	00c00084 	movi	r3,2
    7da4:	04801e04 	movi	r18,120
    7da8:	b805883a 	mov	r2,r23
    7dac:	d8012585 	stb	zero,1174(sp)
    7db0:	003e7206 	br	777c <_gp+0xfffeaf00>
    7db4:	84000814 	ori	r16,r16,32
    7db8:	ac800007 	ldb	r18,0(r21)
    7dbc:	003df606 	br	7598 <_gp+0xfffead1c>
    7dc0:	d8812d17 	ldw	r2,1204(sp)
    7dc4:	d8012585 	stb	zero,1174(sp)
    7dc8:	14c00017 	ldw	r19,0(r2)
    7dcc:	15c00104 	addi	r23,r2,4
    7dd0:	98040126 	beq	r19,zero,8dd8 <___vfprintf_internal_r+0x19b8>
    7dd4:	9809883a 	mov	r4,r19
    7dd8:	e003dd16 	blt	fp,zero,8d50 <___vfprintf_internal_r+0x1930>
    7ddc:	000b883a 	mov	r5,zero
    7de0:	e00d883a 	mov	r6,fp
    7de4:	da413c15 	stw	r9,1264(sp)
    7de8:	000be840 	call	be84 <memchr>
    7dec:	da413c17 	ldw	r9,1264(sp)
    7df0:	10042e26 	beq	r2,zero,8eac <___vfprintf_internal_r+0x1a8c>
    7df4:	14c5c83a 	sub	r2,r2,r19
    7df8:	d8812b15 	stw	r2,1196(sp)
    7dfc:	e083790e 	bge	fp,r2,8be4 <___vfprintf_internal_r+0x17c4>
    7e00:	df012815 	stw	fp,1184(sp)
    7e04:	e0049516 	blt	fp,zero,905c <___vfprintf_internal_r+0x1c3c>
    7e08:	d8812583 	ldbu	r2,1174(sp)
    7e0c:	df012b15 	stw	fp,1196(sp)
    7e10:	ddc12d15 	stw	r23,1204(sp)
    7e14:	d8013115 	stw	zero,1220(sp)
    7e18:	003e6c06 	br	77cc <_gp+0xfffeaf50>
    7e1c:	02000074 	movhi	r8,1
    7e20:	420a7f04 	addi	r8,r8,10748
    7e24:	da013615 	stw	r8,1240(sp)
    7e28:	8080080c 	andi	r2,r16,32
    7e2c:	103f6a1e 	bne	r2,zero,7bd8 <_gp+0xfffeb35c>
    7e30:	8080040c 	andi	r2,r16,16
    7e34:	10029326 	beq	r2,zero,8884 <___vfprintf_internal_r+0x1464>
    7e38:	d8c12d17 	ldw	r3,1204(sp)
    7e3c:	002d883a 	mov	r22,zero
    7e40:	1dc00017 	ldw	r23,0(r3)
    7e44:	18c00104 	addi	r3,r3,4
    7e48:	d8c12d15 	stw	r3,1204(sp)
    7e4c:	003f6706 	br	7bec <_gp+0xfffeb370>
    7e50:	84000214 	ori	r16,r16,8
    7e54:	ac800007 	ldb	r18,0(r21)
    7e58:	003dcf06 	br	7598 <_gp+0xfffead1c>
    7e5c:	da011d17 	ldw	r8,1140(sp)
    7e60:	d8c11c17 	ldw	r3,1136(sp)
    7e64:	d8812587 	ldb	r2,1174(sp)
    7e68:	10000b26 	beq	r2,zero,7e98 <___vfprintf_internal_r+0xa78>
    7e6c:	d8812584 	addi	r2,sp,1174
    7e70:	48800015 	stw	r2,0(r9)
    7e74:	00800044 	movi	r2,1
    7e78:	48800115 	stw	r2,4(r9)
    7e7c:	4091883a 	add	r8,r8,r2
    7e80:	1887883a 	add	r3,r3,r2
    7e84:	da011d15 	stw	r8,1140(sp)
    7e88:	d8c11c15 	stw	r3,1136(sp)
    7e8c:	008001c4 	movi	r2,7
    7e90:	10c18516 	blt	r2,r3,84a8 <___vfprintf_internal_r+0x1088>
    7e94:	4a400204 	addi	r9,r9,8
    7e98:	d9012a17 	ldw	r4,1192(sp)
    7e9c:	20000b26 	beq	r4,zero,7ecc <___vfprintf_internal_r+0xaac>
    7ea0:	d8812504 	addi	r2,sp,1172
    7ea4:	48800015 	stw	r2,0(r9)
    7ea8:	00800084 	movi	r2,2
    7eac:	48800115 	stw	r2,4(r9)
    7eb0:	4091883a 	add	r8,r8,r2
    7eb4:	18c00044 	addi	r3,r3,1
    7eb8:	da011d15 	stw	r8,1140(sp)
    7ebc:	d8c11c15 	stw	r3,1136(sp)
    7ec0:	008001c4 	movi	r2,7
    7ec4:	10c18116 	blt	r2,r3,84cc <___vfprintf_internal_r+0x10ac>
    7ec8:	4a400204 	addi	r9,r9,8
    7ecc:	d9012f17 	ldw	r4,1212(sp)
    7ed0:	00802004 	movi	r2,128
    7ed4:	2080fc26 	beq	r4,r2,82c8 <___vfprintf_internal_r+0xea8>
    7ed8:	d8813117 	ldw	r2,1220(sp)
    7edc:	d9012b17 	ldw	r4,1196(sp)
    7ee0:	112fc83a 	sub	r23,r2,r4
    7ee4:	05c02a0e 	bge	zero,r23,7f90 <___vfprintf_internal_r+0xb70>
    7ee8:	07000404 	movi	fp,16
    7eec:	05000074 	movhi	r20,1
    7ef0:	a50a8a84 	addi	r20,r20,10794
    7ef4:	e5c01d0e 	bge	fp,r23,7f6c <___vfprintf_internal_r+0xb4c>
    7ef8:	dc812a15 	stw	r18,1192(sp)
    7efc:	058001c4 	movi	r22,7
    7f00:	a025883a 	mov	r18,r20
    7f04:	8029883a 	mov	r20,r16
    7f08:	dc012917 	ldw	r16,1188(sp)
    7f0c:	00000306 	br	7f1c <___vfprintf_internal_r+0xafc>
    7f10:	bdfffc04 	addi	r23,r23,-16
    7f14:	4a400204 	addi	r9,r9,8
    7f18:	e5c0110e 	bge	fp,r23,7f60 <___vfprintf_internal_r+0xb40>
    7f1c:	4c800015 	stw	r18,0(r9)
    7f20:	4f000115 	stw	fp,4(r9)
    7f24:	42000404 	addi	r8,r8,16
    7f28:	18c00044 	addi	r3,r3,1
    7f2c:	da011d15 	stw	r8,1140(sp)
    7f30:	d8c11c15 	stw	r3,1136(sp)
    7f34:	b0fff60e 	bge	r22,r3,7f10 <_gp+0xfffeb694>
    7f38:	8809883a 	mov	r4,r17
    7f3c:	800b883a 	mov	r5,r16
    7f40:	d9811b04 	addi	r6,sp,1132
    7f44:	00073ec0 	call	73ec <__sprint_r>
    7f48:	103ec81e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    7f4c:	bdfffc04 	addi	r23,r23,-16
    7f50:	da011d17 	ldw	r8,1140(sp)
    7f54:	d8c11c17 	ldw	r3,1136(sp)
    7f58:	da400404 	addi	r9,sp,16
    7f5c:	e5ffef16 	blt	fp,r23,7f1c <_gp+0xfffeb6a0>
    7f60:	a021883a 	mov	r16,r20
    7f64:	9029883a 	mov	r20,r18
    7f68:	dc812a17 	ldw	r18,1192(sp)
    7f6c:	4d000015 	stw	r20,0(r9)
    7f70:	4dc00115 	stw	r23,4(r9)
    7f74:	45d1883a 	add	r8,r8,r23
    7f78:	18c00044 	addi	r3,r3,1
    7f7c:	da011d15 	stw	r8,1140(sp)
    7f80:	d8c11c15 	stw	r3,1136(sp)
    7f84:	008001c4 	movi	r2,7
    7f88:	10c13e16 	blt	r2,r3,8484 <___vfprintf_internal_r+0x1064>
    7f8c:	4a400204 	addi	r9,r9,8
    7f90:	8080400c 	andi	r2,r16,256
    7f94:	1000831e 	bne	r2,zero,81a4 <___vfprintf_internal_r+0xd84>
    7f98:	d8812b17 	ldw	r2,1196(sp)
    7f9c:	4cc00015 	stw	r19,0(r9)
    7fa0:	48800115 	stw	r2,4(r9)
    7fa4:	4091883a 	add	r8,r8,r2
    7fa8:	18c00044 	addi	r3,r3,1
    7fac:	da011d15 	stw	r8,1140(sp)
    7fb0:	d8c11c15 	stw	r3,1136(sp)
    7fb4:	008001c4 	movi	r2,7
    7fb8:	10c05316 	blt	r2,r3,8108 <___vfprintf_internal_r+0xce8>
    7fbc:	4a400204 	addi	r9,r9,8
    7fc0:	8400010c 	andi	r16,r16,4
    7fc4:	80002e26 	beq	r16,zero,8080 <___vfprintf_internal_r+0xc60>
    7fc8:	d8812e17 	ldw	r2,1208(sp)
    7fcc:	d8c12817 	ldw	r3,1184(sp)
    7fd0:	10e1c83a 	sub	r16,r2,r3
    7fd4:	04002a0e 	bge	zero,r16,8080 <___vfprintf_internal_r+0xc60>
    7fd8:	04800404 	movi	r18,16
    7fdc:	d8c11c17 	ldw	r3,1136(sp)
    7fe0:	05c00074 	movhi	r23,1
    7fe4:	bdca8684 	addi	r23,r23,10778
    7fe8:	9400170e 	bge	r18,r16,8048 <___vfprintf_internal_r+0xc28>
    7fec:	04c001c4 	movi	r19,7
    7ff0:	dd012917 	ldw	r20,1188(sp)
    7ff4:	00000306 	br	8004 <___vfprintf_internal_r+0xbe4>
    7ff8:	843ffc04 	addi	r16,r16,-16
    7ffc:	4a400204 	addi	r9,r9,8
    8000:	9400110e 	bge	r18,r16,8048 <___vfprintf_internal_r+0xc28>
    8004:	4dc00015 	stw	r23,0(r9)
    8008:	4c800115 	stw	r18,4(r9)
    800c:	42000404 	addi	r8,r8,16
    8010:	18c00044 	addi	r3,r3,1
    8014:	da011d15 	stw	r8,1140(sp)
    8018:	d8c11c15 	stw	r3,1136(sp)
    801c:	98fff60e 	bge	r19,r3,7ff8 <_gp+0xfffeb77c>
    8020:	8809883a 	mov	r4,r17
    8024:	a00b883a 	mov	r5,r20
    8028:	d9811b04 	addi	r6,sp,1132
    802c:	00073ec0 	call	73ec <__sprint_r>
    8030:	103e8e1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8034:	843ffc04 	addi	r16,r16,-16
    8038:	da011d17 	ldw	r8,1140(sp)
    803c:	d8c11c17 	ldw	r3,1136(sp)
    8040:	da400404 	addi	r9,sp,16
    8044:	943fef16 	blt	r18,r16,8004 <_gp+0xfffeb788>
    8048:	4dc00015 	stw	r23,0(r9)
    804c:	4c000115 	stw	r16,4(r9)
    8050:	8211883a 	add	r8,r16,r8
    8054:	18c00044 	addi	r3,r3,1
    8058:	da011d15 	stw	r8,1140(sp)
    805c:	d8c11c15 	stw	r3,1136(sp)
    8060:	008001c4 	movi	r2,7
    8064:	10c0060e 	bge	r2,r3,8080 <___vfprintf_internal_r+0xc60>
    8068:	d9412917 	ldw	r5,1188(sp)
    806c:	8809883a 	mov	r4,r17
    8070:	d9811b04 	addi	r6,sp,1132
    8074:	00073ec0 	call	73ec <__sprint_r>
    8078:	103e7c1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    807c:	da011d17 	ldw	r8,1140(sp)
    8080:	dd012817 	ldw	r20,1184(sp)
    8084:	d9012e17 	ldw	r4,1208(sp)
    8088:	a100010e 	bge	r20,r4,8090 <___vfprintf_internal_r+0xc70>
    808c:	2029883a 	mov	r20,r4
    8090:	d8812c17 	ldw	r2,1200(sp)
    8094:	1505883a 	add	r2,r2,r20
    8098:	d8812c15 	stw	r2,1200(sp)
    809c:	4000b91e 	bne	r8,zero,8384 <___vfprintf_internal_r+0xf64>
    80a0:	d8011c15 	stw	zero,1136(sp)
    80a4:	a8800007 	ldb	r2,0(r21)
    80a8:	da400404 	addi	r9,sp,16
    80ac:	103d141e 	bne	r2,zero,7500 <_gp+0xfffeac84>
    80b0:	a825883a 	mov	r18,r21
    80b4:	003d2a06 	br	7560 <_gp+0xfffeace4>
    80b8:	d9412917 	ldw	r5,1188(sp)
    80bc:	8809883a 	mov	r4,r17
    80c0:	d9811b04 	addi	r6,sp,1132
    80c4:	00073ec0 	call	73ec <__sprint_r>
    80c8:	103e681e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    80cc:	da011d17 	ldw	r8,1140(sp)
    80d0:	da400404 	addi	r9,sp,16
    80d4:	8080004c 	andi	r2,r16,1
    80d8:	103fb926 	beq	r2,zero,7fc0 <_gp+0xfffeb744>
    80dc:	d8c11c17 	ldw	r3,1136(sp)
    80e0:	d9013717 	ldw	r4,1244(sp)
    80e4:	00800044 	movi	r2,1
    80e8:	48800115 	stw	r2,4(r9)
    80ec:	49000015 	stw	r4,0(r9)
    80f0:	4091883a 	add	r8,r8,r2
    80f4:	1887883a 	add	r3,r3,r2
    80f8:	da011d15 	stw	r8,1140(sp)
    80fc:	d8c11c15 	stw	r3,1136(sp)
    8100:	008001c4 	movi	r2,7
    8104:	10ffad0e 	bge	r2,r3,7fbc <_gp+0xfffeb740>
    8108:	d9412917 	ldw	r5,1188(sp)
    810c:	8809883a 	mov	r4,r17
    8110:	d9811b04 	addi	r6,sp,1132
    8114:	00073ec0 	call	73ec <__sprint_r>
    8118:	103e541e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    811c:	da400404 	addi	r9,sp,16
    8120:	da011d17 	ldw	r8,1140(sp)
    8124:	003fa606 	br	7fc0 <_gp+0xfffeb744>
    8128:	18803fcc 	andi	r2,r3,255
    812c:	00c00044 	movi	r3,1
    8130:	10c10126 	beq	r2,r3,8538 <___vfprintf_internal_r+0x1118>
    8134:	00c00084 	movi	r3,2
    8138:	10c0f026 	beq	r2,r3,84fc <___vfprintf_internal_r+0x10dc>
    813c:	d8c10dc4 	addi	r3,sp,1079
    8140:	b808d0fa 	srli	r4,r23,3
    8144:	b00a977a 	slli	r5,r22,29
    8148:	b02cd0fa 	srli	r22,r22,3
    814c:	bdc001cc 	andi	r23,r23,7
    8150:	b8800c04 	addi	r2,r23,48
    8154:	292eb03a 	or	r23,r5,r4
    8158:	18800005 	stb	r2,0(r3)
    815c:	bd88b03a 	or	r4,r23,r22
    8160:	1827883a 	mov	r19,r3
    8164:	18ffffc4 	addi	r3,r3,-1
    8168:	203ff51e 	bne	r4,zero,8140 <_gp+0xfffeb8c4>
    816c:	8100004c 	andi	r4,r16,1
    8170:	980b883a 	mov	r5,r19
    8174:	20000726 	beq	r4,zero,8194 <___vfprintf_internal_r+0xd74>
    8178:	10803fcc 	andi	r2,r2,255
    817c:	1080201c 	xori	r2,r2,128
    8180:	10bfe004 	addi	r2,r2,-128
    8184:	01000c04 	movi	r4,48
    8188:	11000226 	beq	r2,r4,8194 <___vfprintf_internal_r+0xd74>
    818c:	1827883a 	mov	r19,r3
    8190:	293fffc5 	stb	r4,-1(r5)
    8194:	d8812717 	ldw	r2,1180(sp)
    8198:	14c5c83a 	sub	r2,r2,r19
    819c:	d8812b15 	stw	r2,1196(sp)
    81a0:	003d8406 	br	77b4 <_gp+0xfffeaf38>
    81a4:	00801944 	movi	r2,101
    81a8:	14807c0e 	bge	r2,r18,839c <___vfprintf_internal_r+0xf7c>
    81ac:	d9013317 	ldw	r4,1228(sp)
    81b0:	d9413417 	ldw	r5,1232(sp)
    81b4:	000d883a 	mov	r6,zero
    81b8:	000f883a 	mov	r7,zero
    81bc:	d8c13b15 	stw	r3,1260(sp)
    81c0:	da013a15 	stw	r8,1256(sp)
    81c4:	da413c15 	stw	r9,1264(sp)
    81c8:	000f20c0 	call	f20c <__nedf2>
    81cc:	d8c13b17 	ldw	r3,1260(sp)
    81d0:	da013a17 	ldw	r8,1256(sp)
    81d4:	da413c17 	ldw	r9,1264(sp)
    81d8:	1001001e 	bne	r2,zero,85dc <___vfprintf_internal_r+0x11bc>
    81dc:	00800074 	movhi	r2,1
    81e0:	108a8604 	addi	r2,r2,10776
    81e4:	48800015 	stw	r2,0(r9)
    81e8:	00800044 	movi	r2,1
    81ec:	48800115 	stw	r2,4(r9)
    81f0:	4091883a 	add	r8,r8,r2
    81f4:	1887883a 	add	r3,r3,r2
    81f8:	da011d15 	stw	r8,1140(sp)
    81fc:	d8c11c15 	stw	r3,1136(sp)
    8200:	008001c4 	movi	r2,7
    8204:	10c1dd16 	blt	r2,r3,897c <___vfprintf_internal_r+0x155c>
    8208:	4a400204 	addi	r9,r9,8
    820c:	d8812417 	ldw	r2,1168(sp)
    8210:	d8c13217 	ldw	r3,1224(sp)
    8214:	10c00216 	blt	r2,r3,8220 <___vfprintf_internal_r+0xe00>
    8218:	8080004c 	andi	r2,r16,1
    821c:	103f6826 	beq	r2,zero,7fc0 <_gp+0xfffeb744>
    8220:	d8c11c17 	ldw	r3,1136(sp)
    8224:	d9013717 	ldw	r4,1244(sp)
    8228:	00800044 	movi	r2,1
    822c:	48800115 	stw	r2,4(r9)
    8230:	49000015 	stw	r4,0(r9)
    8234:	4091883a 	add	r8,r8,r2
    8238:	1887883a 	add	r3,r3,r2
    823c:	da011d15 	stw	r8,1140(sp)
    8240:	d8c11c15 	stw	r3,1136(sp)
    8244:	008001c4 	movi	r2,7
    8248:	10c2af16 	blt	r2,r3,8d08 <___vfprintf_internal_r+0x18e8>
    824c:	4a400204 	addi	r9,r9,8
    8250:	d8813217 	ldw	r2,1224(sp)
    8254:	14bfffc4 	addi	r18,r2,-1
    8258:	04bf590e 	bge	zero,r18,7fc0 <_gp+0xfffeb744>
    825c:	04c00404 	movi	r19,16
    8260:	d8c11c17 	ldw	r3,1136(sp)
    8264:	05000074 	movhi	r20,1
    8268:	a50a8a84 	addi	r20,r20,10794
    826c:	9c81630e 	bge	r19,r18,87fc <___vfprintf_internal_r+0x13dc>
    8270:	058001c4 	movi	r22,7
    8274:	ddc12917 	ldw	r23,1188(sp)
    8278:	00000306 	br	8288 <___vfprintf_internal_r+0xe68>
    827c:	4a400204 	addi	r9,r9,8
    8280:	94bffc04 	addi	r18,r18,-16
    8284:	9c815d0e 	bge	r19,r18,87fc <___vfprintf_internal_r+0x13dc>
    8288:	4d000015 	stw	r20,0(r9)
    828c:	4cc00115 	stw	r19,4(r9)
    8290:	42000404 	addi	r8,r8,16
    8294:	18c00044 	addi	r3,r3,1
    8298:	da011d15 	stw	r8,1140(sp)
    829c:	d8c11c15 	stw	r3,1136(sp)
    82a0:	b0fff60e 	bge	r22,r3,827c <_gp+0xfffeba00>
    82a4:	8809883a 	mov	r4,r17
    82a8:	b80b883a 	mov	r5,r23
    82ac:	d9811b04 	addi	r6,sp,1132
    82b0:	00073ec0 	call	73ec <__sprint_r>
    82b4:	103ded1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    82b8:	da011d17 	ldw	r8,1140(sp)
    82bc:	d8c11c17 	ldw	r3,1136(sp)
    82c0:	da400404 	addi	r9,sp,16
    82c4:	003fee06 	br	8280 <_gp+0xfffeba04>
    82c8:	d8812e17 	ldw	r2,1208(sp)
    82cc:	d9012817 	ldw	r4,1184(sp)
    82d0:	112fc83a 	sub	r23,r2,r4
    82d4:	05ff000e 	bge	zero,r23,7ed8 <_gp+0xfffeb65c>
    82d8:	07000404 	movi	fp,16
    82dc:	05000074 	movhi	r20,1
    82e0:	a50a8a84 	addi	r20,r20,10794
    82e4:	e5c01d0e 	bge	fp,r23,835c <___vfprintf_internal_r+0xf3c>
    82e8:	dc812a15 	stw	r18,1192(sp)
    82ec:	058001c4 	movi	r22,7
    82f0:	a025883a 	mov	r18,r20
    82f4:	8029883a 	mov	r20,r16
    82f8:	dc012917 	ldw	r16,1188(sp)
    82fc:	00000306 	br	830c <___vfprintf_internal_r+0xeec>
    8300:	bdfffc04 	addi	r23,r23,-16
    8304:	4a400204 	addi	r9,r9,8
    8308:	e5c0110e 	bge	fp,r23,8350 <___vfprintf_internal_r+0xf30>
    830c:	4c800015 	stw	r18,0(r9)
    8310:	4f000115 	stw	fp,4(r9)
    8314:	42000404 	addi	r8,r8,16
    8318:	18c00044 	addi	r3,r3,1
    831c:	da011d15 	stw	r8,1140(sp)
    8320:	d8c11c15 	stw	r3,1136(sp)
    8324:	b0fff60e 	bge	r22,r3,8300 <_gp+0xfffeba84>
    8328:	8809883a 	mov	r4,r17
    832c:	800b883a 	mov	r5,r16
    8330:	d9811b04 	addi	r6,sp,1132
    8334:	00073ec0 	call	73ec <__sprint_r>
    8338:	103dcc1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    833c:	bdfffc04 	addi	r23,r23,-16
    8340:	da011d17 	ldw	r8,1140(sp)
    8344:	d8c11c17 	ldw	r3,1136(sp)
    8348:	da400404 	addi	r9,sp,16
    834c:	e5ffef16 	blt	fp,r23,830c <_gp+0xfffeba90>
    8350:	a021883a 	mov	r16,r20
    8354:	9029883a 	mov	r20,r18
    8358:	dc812a17 	ldw	r18,1192(sp)
    835c:	4d000015 	stw	r20,0(r9)
    8360:	4dc00115 	stw	r23,4(r9)
    8364:	45d1883a 	add	r8,r8,r23
    8368:	18c00044 	addi	r3,r3,1
    836c:	da011d15 	stw	r8,1140(sp)
    8370:	d8c11c15 	stw	r3,1136(sp)
    8374:	008001c4 	movi	r2,7
    8378:	10c11716 	blt	r2,r3,87d8 <___vfprintf_internal_r+0x13b8>
    837c:	4a400204 	addi	r9,r9,8
    8380:	003ed506 	br	7ed8 <_gp+0xfffeb65c>
    8384:	d9412917 	ldw	r5,1188(sp)
    8388:	8809883a 	mov	r4,r17
    838c:	d9811b04 	addi	r6,sp,1132
    8390:	00073ec0 	call	73ec <__sprint_r>
    8394:	103f4226 	beq	r2,zero,80a0 <_gp+0xfffeb824>
    8398:	003db406 	br	7a6c <_gp+0xfffeb1f0>
    839c:	d9013217 	ldw	r4,1224(sp)
    83a0:	00800044 	movi	r2,1
    83a4:	4cc00015 	stw	r19,0(r9)
    83a8:	1100e10e 	bge	r2,r4,8730 <___vfprintf_internal_r+0x1310>
    83ac:	00800044 	movi	r2,1
    83b0:	48800115 	stw	r2,4(r9)
    83b4:	4091883a 	add	r8,r8,r2
    83b8:	1887883a 	add	r3,r3,r2
    83bc:	da011d15 	stw	r8,1140(sp)
    83c0:	d8c11c15 	stw	r3,1136(sp)
    83c4:	008001c4 	movi	r2,7
    83c8:	10c0ed16 	blt	r2,r3,8780 <___vfprintf_internal_r+0x1360>
    83cc:	4a400204 	addi	r9,r9,8
    83d0:	d8813717 	ldw	r2,1244(sp)
    83d4:	48800015 	stw	r2,0(r9)
    83d8:	00800044 	movi	r2,1
    83dc:	48800115 	stw	r2,4(r9)
    83e0:	4091883a 	add	r8,r8,r2
    83e4:	1887883a 	add	r3,r3,r2
    83e8:	da011d15 	stw	r8,1140(sp)
    83ec:	d8c11c15 	stw	r3,1136(sp)
    83f0:	008001c4 	movi	r2,7
    83f4:	10c0eb16 	blt	r2,r3,87a4 <___vfprintf_internal_r+0x1384>
    83f8:	4c800204 	addi	r18,r9,8
    83fc:	d9013317 	ldw	r4,1228(sp)
    8400:	d9413417 	ldw	r5,1232(sp)
    8404:	000d883a 	mov	r6,zero
    8408:	000f883a 	mov	r7,zero
    840c:	d8c13b15 	stw	r3,1260(sp)
    8410:	da013a15 	stw	r8,1256(sp)
    8414:	000f1b00 	call	f1b0 <__eqdf2>
    8418:	d8c13b17 	ldw	r3,1260(sp)
    841c:	da013a17 	ldw	r8,1256(sp)
    8420:	1000a626 	beq	r2,zero,86bc <___vfprintf_internal_r+0x129c>
    8424:	d9013217 	ldw	r4,1224(sp)
    8428:	9cc00044 	addi	r19,r19,1
    842c:	94c00015 	stw	r19,0(r18)
    8430:	20bfffc4 	addi	r2,r4,-1
    8434:	90800115 	stw	r2,4(r18)
    8438:	4091883a 	add	r8,r8,r2
    843c:	18c00044 	addi	r3,r3,1
    8440:	da011d15 	stw	r8,1140(sp)
    8444:	d8c11c15 	stw	r3,1136(sp)
    8448:	008001c4 	movi	r2,7
    844c:	10c0c316 	blt	r2,r3,875c <___vfprintf_internal_r+0x133c>
    8450:	94800204 	addi	r18,r18,8
    8454:	d9013517 	ldw	r4,1236(sp)
    8458:	d8811fc4 	addi	r2,sp,1151
    845c:	90800015 	stw	r2,0(r18)
    8460:	91000115 	stw	r4,4(r18)
    8464:	4111883a 	add	r8,r8,r4
    8468:	18c00044 	addi	r3,r3,1
    846c:	da011d15 	stw	r8,1140(sp)
    8470:	d8c11c15 	stw	r3,1136(sp)
    8474:	008001c4 	movi	r2,7
    8478:	10ff2316 	blt	r2,r3,8108 <_gp+0xfffeb88c>
    847c:	92400204 	addi	r9,r18,8
    8480:	003ecf06 	br	7fc0 <_gp+0xfffeb744>
    8484:	d9412917 	ldw	r5,1188(sp)
    8488:	8809883a 	mov	r4,r17
    848c:	d9811b04 	addi	r6,sp,1132
    8490:	00073ec0 	call	73ec <__sprint_r>
    8494:	103d751e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8498:	da011d17 	ldw	r8,1140(sp)
    849c:	d8c11c17 	ldw	r3,1136(sp)
    84a0:	da400404 	addi	r9,sp,16
    84a4:	003eba06 	br	7f90 <_gp+0xfffeb714>
    84a8:	d9412917 	ldw	r5,1188(sp)
    84ac:	8809883a 	mov	r4,r17
    84b0:	d9811b04 	addi	r6,sp,1132
    84b4:	00073ec0 	call	73ec <__sprint_r>
    84b8:	103d6c1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    84bc:	da011d17 	ldw	r8,1140(sp)
    84c0:	d8c11c17 	ldw	r3,1136(sp)
    84c4:	da400404 	addi	r9,sp,16
    84c8:	003e7306 	br	7e98 <_gp+0xfffeb61c>
    84cc:	d9412917 	ldw	r5,1188(sp)
    84d0:	8809883a 	mov	r4,r17
    84d4:	d9811b04 	addi	r6,sp,1132
    84d8:	00073ec0 	call	73ec <__sprint_r>
    84dc:	103d631e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    84e0:	da011d17 	ldw	r8,1140(sp)
    84e4:	d8c11c17 	ldw	r3,1136(sp)
    84e8:	da400404 	addi	r9,sp,16
    84ec:	003e7706 	br	7ecc <_gp+0xfffeb650>
    84f0:	d8012b15 	stw	zero,1196(sp)
    84f4:	dcc10e04 	addi	r19,sp,1080
    84f8:	003cae06 	br	77b4 <_gp+0xfffeaf38>
    84fc:	d9413617 	ldw	r5,1240(sp)
    8500:	d8810dc4 	addi	r2,sp,1079
    8504:	b8c003cc 	andi	r3,r23,15
    8508:	b008973a 	slli	r4,r22,28
    850c:	28c7883a 	add	r3,r5,r3
    8510:	b82ed13a 	srli	r23,r23,4
    8514:	18c00003 	ldbu	r3,0(r3)
    8518:	b02cd13a 	srli	r22,r22,4
    851c:	25eeb03a 	or	r23,r4,r23
    8520:	10c00005 	stb	r3,0(r2)
    8524:	bd86b03a 	or	r3,r23,r22
    8528:	1027883a 	mov	r19,r2
    852c:	10bfffc4 	addi	r2,r2,-1
    8530:	183ff41e 	bne	r3,zero,8504 <_gp+0xfffebc88>
    8534:	003f1706 	br	8194 <_gp+0xfffeb918>
    8538:	b0025826 	beq	r22,zero,8e9c <___vfprintf_internal_r+0x1a7c>
    853c:	b807883a 	mov	r3,r23
    8540:	d8810dc4 	addi	r2,sp,1079
    8544:	882f883a 	mov	r23,r17
    8548:	04c00244 	movi	r19,9
    854c:	8023883a 	mov	r17,r16
    8550:	da412815 	stw	r9,1184(sp)
    8554:	1821883a 	mov	r16,r3
    8558:	8009883a 	mov	r4,r16
    855c:	b00b883a 	mov	r5,r22
    8560:	01800284 	movi	r6,10
    8564:	000f883a 	mov	r7,zero
    8568:	1029883a 	mov	r20,r2
    856c:	000e5380 	call	e538 <__umoddi3>
    8570:	10800c04 	addi	r2,r2,48
    8574:	8009883a 	mov	r4,r16
    8578:	b00b883a 	mov	r5,r22
    857c:	a0800005 	stb	r2,0(r20)
    8580:	01800284 	movi	r6,10
    8584:	000f883a 	mov	r7,zero
    8588:	000df700 	call	df70 <__udivdi3>
    858c:	1021883a 	mov	r16,r2
    8590:	182d883a 	mov	r22,r3
    8594:	a0bfffc4 	addi	r2,r20,-1
    8598:	183fef1e 	bne	r3,zero,8558 <_gp+0xfffebcdc>
    859c:	9c3fee36 	bltu	r19,r16,8558 <_gp+0xfffebcdc>
    85a0:	da412817 	ldw	r9,1184(sp)
    85a4:	8005883a 	mov	r2,r16
    85a8:	8821883a 	mov	r16,r17
    85ac:	b823883a 	mov	r17,r23
    85b0:	102f883a 	mov	r23,r2
    85b4:	d8812717 	ldw	r2,1180(sp)
    85b8:	a4ffffc4 	addi	r19,r20,-1
    85bc:	bdc00c04 	addi	r23,r23,48
    85c0:	14c5c83a 	sub	r2,r2,r19
    85c4:	a5ffffc5 	stb	r23,-1(r20)
    85c8:	d8812b15 	stw	r2,1196(sp)
    85cc:	003c7906 	br	77b4 <_gp+0xfffeaf38>
    85d0:	00c00044 	movi	r3,1
    85d4:	bd84b03a 	or	r2,r23,r22
    85d8:	003c6806 	br	777c <_gp+0xfffeaf00>
    85dc:	dc812417 	ldw	r18,1168(sp)
    85e0:	0480ee0e 	bge	zero,r18,899c <___vfprintf_internal_r+0x157c>
    85e4:	d9013217 	ldw	r4,1224(sp)
    85e8:	4cc00015 	stw	r19,0(r9)
    85ec:	9100c616 	blt	r18,r4,8908 <___vfprintf_internal_r+0x14e8>
    85f0:	49000115 	stw	r4,4(r9)
    85f4:	4111883a 	add	r8,r8,r4
    85f8:	18c00044 	addi	r3,r3,1
    85fc:	da011d15 	stw	r8,1140(sp)
    8600:	d8c11c15 	stw	r3,1136(sp)
    8604:	008001c4 	movi	r2,7
    8608:	10c20916 	blt	r2,r3,8e30 <___vfprintf_internal_r+0x1a10>
    860c:	4a400204 	addi	r9,r9,8
    8610:	d8813217 	ldw	r2,1224(sp)
    8614:	90a5c83a 	sub	r18,r18,r2
    8618:	04beae0e 	bge	zero,r18,80d4 <_gp+0xfffeb858>
    861c:	04c00404 	movi	r19,16
    8620:	d8c11c17 	ldw	r3,1136(sp)
    8624:	05000074 	movhi	r20,1
    8628:	a50a8a84 	addi	r20,r20,10794
    862c:	9c81be0e 	bge	r19,r18,8d28 <___vfprintf_internal_r+0x1908>
    8630:	058001c4 	movi	r22,7
    8634:	ddc12917 	ldw	r23,1188(sp)
    8638:	00000306 	br	8648 <___vfprintf_internal_r+0x1228>
    863c:	4a400204 	addi	r9,r9,8
    8640:	94bffc04 	addi	r18,r18,-16
    8644:	9c81b80e 	bge	r19,r18,8d28 <___vfprintf_internal_r+0x1908>
    8648:	4d000015 	stw	r20,0(r9)
    864c:	4cc00115 	stw	r19,4(r9)
    8650:	42000404 	addi	r8,r8,16
    8654:	18c00044 	addi	r3,r3,1
    8658:	da011d15 	stw	r8,1140(sp)
    865c:	d8c11c15 	stw	r3,1136(sp)
    8660:	b0fff60e 	bge	r22,r3,863c <_gp+0xfffebdc0>
    8664:	8809883a 	mov	r4,r17
    8668:	b80b883a 	mov	r5,r23
    866c:	d9811b04 	addi	r6,sp,1132
    8670:	00073ec0 	call	73ec <__sprint_r>
    8674:	103cfd1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8678:	da011d17 	ldw	r8,1140(sp)
    867c:	d8c11c17 	ldw	r3,1136(sp)
    8680:	da400404 	addi	r9,sp,16
    8684:	003fee06 	br	8640 <_gp+0xfffebdc4>
    8688:	d9412917 	ldw	r5,1188(sp)
    868c:	8809883a 	mov	r4,r17
    8690:	d9811b04 	addi	r6,sp,1132
    8694:	00073ec0 	call	73ec <__sprint_r>
    8698:	103cf41e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    869c:	da011d17 	ldw	r8,1140(sp)
    86a0:	d8c11c17 	ldw	r3,1136(sp)
    86a4:	da400404 	addi	r9,sp,16
    86a8:	003dee06 	br	7e64 <_gp+0xfffeb5e8>
    86ac:	00c00084 	movi	r3,2
    86b0:	bd84b03a 	or	r2,r23,r22
    86b4:	d8012585 	stb	zero,1174(sp)
    86b8:	003c3006 	br	777c <_gp+0xfffeaf00>
    86bc:	d8813217 	ldw	r2,1224(sp)
    86c0:	14ffffc4 	addi	r19,r2,-1
    86c4:	04ff630e 	bge	zero,r19,8454 <_gp+0xfffebbd8>
    86c8:	05800404 	movi	r22,16
    86cc:	05000074 	movhi	r20,1
    86d0:	a50a8a84 	addi	r20,r20,10794
    86d4:	b4c03c0e 	bge	r22,r19,87c8 <___vfprintf_internal_r+0x13a8>
    86d8:	05c001c4 	movi	r23,7
    86dc:	df012917 	ldw	fp,1188(sp)
    86e0:	00000306 	br	86f0 <___vfprintf_internal_r+0x12d0>
    86e4:	94800204 	addi	r18,r18,8
    86e8:	9cfffc04 	addi	r19,r19,-16
    86ec:	b4c0360e 	bge	r22,r19,87c8 <___vfprintf_internal_r+0x13a8>
    86f0:	95000015 	stw	r20,0(r18)
    86f4:	95800115 	stw	r22,4(r18)
    86f8:	42000404 	addi	r8,r8,16
    86fc:	18c00044 	addi	r3,r3,1
    8700:	da011d15 	stw	r8,1140(sp)
    8704:	d8c11c15 	stw	r3,1136(sp)
    8708:	b8fff60e 	bge	r23,r3,86e4 <_gp+0xfffebe68>
    870c:	8809883a 	mov	r4,r17
    8710:	e00b883a 	mov	r5,fp
    8714:	d9811b04 	addi	r6,sp,1132
    8718:	00073ec0 	call	73ec <__sprint_r>
    871c:	103cd31e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8720:	da011d17 	ldw	r8,1140(sp)
    8724:	d8c11c17 	ldw	r3,1136(sp)
    8728:	dc800404 	addi	r18,sp,16
    872c:	003fee06 	br	86e8 <_gp+0xfffebe6c>
    8730:	8088703a 	and	r4,r16,r2
    8734:	203f1d1e 	bne	r4,zero,83ac <_gp+0xfffebb30>
    8738:	48800115 	stw	r2,4(r9)
    873c:	42000044 	addi	r8,r8,1
    8740:	18c00044 	addi	r3,r3,1
    8744:	da011d15 	stw	r8,1140(sp)
    8748:	d8c11c15 	stw	r3,1136(sp)
    874c:	008001c4 	movi	r2,7
    8750:	10c00216 	blt	r2,r3,875c <___vfprintf_internal_r+0x133c>
    8754:	4c800204 	addi	r18,r9,8
    8758:	003f3e06 	br	8454 <_gp+0xfffebbd8>
    875c:	d9412917 	ldw	r5,1188(sp)
    8760:	8809883a 	mov	r4,r17
    8764:	d9811b04 	addi	r6,sp,1132
    8768:	00073ec0 	call	73ec <__sprint_r>
    876c:	103cbf1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8770:	dc800404 	addi	r18,sp,16
    8774:	da011d17 	ldw	r8,1140(sp)
    8778:	d8c11c17 	ldw	r3,1136(sp)
    877c:	003f3506 	br	8454 <_gp+0xfffebbd8>
    8780:	d9412917 	ldw	r5,1188(sp)
    8784:	8809883a 	mov	r4,r17
    8788:	d9811b04 	addi	r6,sp,1132
    878c:	00073ec0 	call	73ec <__sprint_r>
    8790:	103cb61e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8794:	da011d17 	ldw	r8,1140(sp)
    8798:	d8c11c17 	ldw	r3,1136(sp)
    879c:	da400404 	addi	r9,sp,16
    87a0:	003f0b06 	br	83d0 <_gp+0xfffebb54>
    87a4:	d9412917 	ldw	r5,1188(sp)
    87a8:	8809883a 	mov	r4,r17
    87ac:	d9811b04 	addi	r6,sp,1132
    87b0:	00073ec0 	call	73ec <__sprint_r>
    87b4:	103cad1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    87b8:	da011d17 	ldw	r8,1140(sp)
    87bc:	d8c11c17 	ldw	r3,1136(sp)
    87c0:	dc800404 	addi	r18,sp,16
    87c4:	003f0d06 	br	83fc <_gp+0xfffebb80>
    87c8:	95000015 	stw	r20,0(r18)
    87cc:	94c00115 	stw	r19,4(r18)
    87d0:	44d1883a 	add	r8,r8,r19
    87d4:	003f1906 	br	843c <_gp+0xfffebbc0>
    87d8:	d9412917 	ldw	r5,1188(sp)
    87dc:	8809883a 	mov	r4,r17
    87e0:	d9811b04 	addi	r6,sp,1132
    87e4:	00073ec0 	call	73ec <__sprint_r>
    87e8:	103ca01e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    87ec:	da011d17 	ldw	r8,1140(sp)
    87f0:	d8c11c17 	ldw	r3,1136(sp)
    87f4:	da400404 	addi	r9,sp,16
    87f8:	003db706 	br	7ed8 <_gp+0xfffeb65c>
    87fc:	4d000015 	stw	r20,0(r9)
    8800:	4c800115 	stw	r18,4(r9)
    8804:	4491883a 	add	r8,r8,r18
    8808:	003de706 	br	7fa8 <_gp+0xfffeb72c>
    880c:	8080100c 	andi	r2,r16,64
    8810:	10010226 	beq	r2,zero,8c1c <___vfprintf_internal_r+0x17fc>
    8814:	d8812d17 	ldw	r2,1204(sp)
    8818:	002d883a 	mov	r22,zero
    881c:	00c00044 	movi	r3,1
    8820:	15c0000b 	ldhu	r23,0(r2)
    8824:	10800104 	addi	r2,r2,4
    8828:	d8812d15 	stw	r2,1204(sp)
    882c:	d8012585 	stb	zero,1174(sp)
    8830:	b805883a 	mov	r2,r23
    8834:	003bd106 	br	777c <_gp+0xfffeaf00>
    8838:	d9012d17 	ldw	r4,1204(sp)
    883c:	25800017 	ldw	r22,0(r4)
    8840:	25000117 	ldw	r20,4(r4)
    8844:	21000204 	addi	r4,r4,8
    8848:	d9012d15 	stw	r4,1204(sp)
    884c:	dd813315 	stw	r22,1228(sp)
    8850:	dd013415 	stw	r20,1232(sp)
    8854:	003d2b06 	br	7d04 <_gp+0xfffeb488>
    8858:	8080100c 	andi	r2,r16,64
    885c:	1000fe26 	beq	r2,zero,8c58 <___vfprintf_internal_r+0x1838>
    8860:	d9012d17 	ldw	r4,1204(sp)
    8864:	002d883a 	mov	r22,zero
    8868:	0007883a 	mov	r3,zero
    886c:	25c0000b 	ldhu	r23,0(r4)
    8870:	21000104 	addi	r4,r4,4
    8874:	d9012d15 	stw	r4,1204(sp)
    8878:	b805883a 	mov	r2,r23
    887c:	d8012585 	stb	zero,1174(sp)
    8880:	003bbe06 	br	777c <_gp+0xfffeaf00>
    8884:	8080100c 	andi	r2,r16,64
    8888:	1000ed26 	beq	r2,zero,8c40 <___vfprintf_internal_r+0x1820>
    888c:	d9012d17 	ldw	r4,1204(sp)
    8890:	002d883a 	mov	r22,zero
    8894:	25c0000b 	ldhu	r23,0(r4)
    8898:	21000104 	addi	r4,r4,4
    889c:	d9012d15 	stw	r4,1204(sp)
    88a0:	003cd206 	br	7bec <_gp+0xfffeb370>
    88a4:	00c00084 	movi	r3,2
    88a8:	d8012585 	stb	zero,1174(sp)
    88ac:	003bb306 	br	777c <_gp+0xfffeaf00>
    88b0:	8080040c 	andi	r2,r16,16
    88b4:	1000f11e 	bne	r2,zero,8c7c <___vfprintf_internal_r+0x185c>
    88b8:	8400100c 	andi	r16,r16,64
    88bc:	80015526 	beq	r16,zero,8e14 <___vfprintf_internal_r+0x19f4>
    88c0:	da012d17 	ldw	r8,1204(sp)
    88c4:	d8c12c17 	ldw	r3,1200(sp)
    88c8:	40800017 	ldw	r2,0(r8)
    88cc:	42000104 	addi	r8,r8,4
    88d0:	da012d15 	stw	r8,1204(sp)
    88d4:	10c0000d 	sth	r3,0(r2)
    88d8:	003b0706 	br	74f8 <_gp+0xfffeac7c>
    88dc:	8080100c 	andi	r2,r16,64
    88e0:	1000c726 	beq	r2,zero,8c00 <___vfprintf_internal_r+0x17e0>
    88e4:	da012d17 	ldw	r8,1204(sp)
    88e8:	45c0000f 	ldh	r23,0(r8)
    88ec:	42000104 	addi	r8,r8,4
    88f0:	da012d15 	stw	r8,1204(sp)
    88f4:	b82dd7fa 	srai	r22,r23,31
    88f8:	b005883a 	mov	r2,r22
    88fc:	003c1006 	br	7940 <_gp+0xfffeb0c4>
    8900:	ac800007 	ldb	r18,0(r21)
    8904:	003b2406 	br	7598 <_gp+0xfffead1c>
    8908:	4c800115 	stw	r18,4(r9)
    890c:	9211883a 	add	r8,r18,r8
    8910:	18c00044 	addi	r3,r3,1
    8914:	da011d15 	stw	r8,1140(sp)
    8918:	d8c11c15 	stw	r3,1136(sp)
    891c:	008001c4 	movi	r2,7
    8920:	10c15416 	blt	r2,r3,8e74 <___vfprintf_internal_r+0x1a54>
    8924:	4a400204 	addi	r9,r9,8
    8928:	d8813717 	ldw	r2,1244(sp)
    892c:	9ca7883a 	add	r19,r19,r18
    8930:	48800015 	stw	r2,0(r9)
    8934:	00800044 	movi	r2,1
    8938:	48800115 	stw	r2,4(r9)
    893c:	4091883a 	add	r8,r8,r2
    8940:	1887883a 	add	r3,r3,r2
    8944:	da011d15 	stw	r8,1140(sp)
    8948:	d8c11c15 	stw	r3,1136(sp)
    894c:	008001c4 	movi	r2,7
    8950:	10c14016 	blt	r2,r3,8e54 <___vfprintf_internal_r+0x1a34>
    8954:	4a400204 	addi	r9,r9,8
    8958:	d9013217 	ldw	r4,1224(sp)
    895c:	da011d17 	ldw	r8,1140(sp)
    8960:	d8c11c17 	ldw	r3,1136(sp)
    8964:	24a5c83a 	sub	r18,r4,r18
    8968:	4cc00015 	stw	r19,0(r9)
    896c:	003fa406 	br	8800 <_gp+0xfffebf84>
    8970:	04c00074 	movhi	r19,1
    8974:	9cca7704 	addi	r19,r19,10716
    8978:	003cf406 	br	7d4c <_gp+0xfffeb4d0>
    897c:	d9412917 	ldw	r5,1188(sp)
    8980:	8809883a 	mov	r4,r17
    8984:	d9811b04 	addi	r6,sp,1132
    8988:	00073ec0 	call	73ec <__sprint_r>
    898c:	103c371e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8990:	da011d17 	ldw	r8,1140(sp)
    8994:	da400404 	addi	r9,sp,16
    8998:	003e1c06 	br	820c <_gp+0xfffeb990>
    899c:	00800074 	movhi	r2,1
    89a0:	108a8604 	addi	r2,r2,10776
    89a4:	48800015 	stw	r2,0(r9)
    89a8:	00800044 	movi	r2,1
    89ac:	48800115 	stw	r2,4(r9)
    89b0:	4091883a 	add	r8,r8,r2
    89b4:	1887883a 	add	r3,r3,r2
    89b8:	da011d15 	stw	r8,1140(sp)
    89bc:	d8c11c15 	stw	r3,1136(sp)
    89c0:	008001c4 	movi	r2,7
    89c4:	10c0c316 	blt	r2,r3,8cd4 <___vfprintf_internal_r+0x18b4>
    89c8:	4a400204 	addi	r9,r9,8
    89cc:	9000041e 	bne	r18,zero,89e0 <___vfprintf_internal_r+0x15c0>
    89d0:	d8c13217 	ldw	r3,1224(sp)
    89d4:	1800021e 	bne	r3,zero,89e0 <___vfprintf_internal_r+0x15c0>
    89d8:	8080004c 	andi	r2,r16,1
    89dc:	103d7826 	beq	r2,zero,7fc0 <_gp+0xfffeb744>
    89e0:	d8c11c17 	ldw	r3,1136(sp)
    89e4:	d9013717 	ldw	r4,1244(sp)
    89e8:	00800044 	movi	r2,1
    89ec:	48800115 	stw	r2,4(r9)
    89f0:	49000015 	stw	r4,0(r9)
    89f4:	4091883a 	add	r8,r8,r2
    89f8:	1887883a 	add	r3,r3,r2
    89fc:	da011d15 	stw	r8,1140(sp)
    8a00:	d8c11c15 	stw	r3,1136(sp)
    8a04:	008001c4 	movi	r2,7
    8a08:	10c12e16 	blt	r2,r3,8ec4 <___vfprintf_internal_r+0x1aa4>
    8a0c:	4a400204 	addi	r9,r9,8
    8a10:	04a5c83a 	sub	r18,zero,r18
    8a14:	0480de0e 	bge	zero,r18,8d90 <___vfprintf_internal_r+0x1970>
    8a18:	05800404 	movi	r22,16
    8a1c:	05000074 	movhi	r20,1
    8a20:	a50a8a84 	addi	r20,r20,10794
    8a24:	b480e20e 	bge	r22,r18,8db0 <___vfprintf_internal_r+0x1990>
    8a28:	05c001c4 	movi	r23,7
    8a2c:	df012917 	ldw	fp,1188(sp)
    8a30:	00000306 	br	8a40 <___vfprintf_internal_r+0x1620>
    8a34:	4a400204 	addi	r9,r9,8
    8a38:	94bffc04 	addi	r18,r18,-16
    8a3c:	b480dc0e 	bge	r22,r18,8db0 <___vfprintf_internal_r+0x1990>
    8a40:	4d000015 	stw	r20,0(r9)
    8a44:	4d800115 	stw	r22,4(r9)
    8a48:	42000404 	addi	r8,r8,16
    8a4c:	18c00044 	addi	r3,r3,1
    8a50:	da011d15 	stw	r8,1140(sp)
    8a54:	d8c11c15 	stw	r3,1136(sp)
    8a58:	b8fff60e 	bge	r23,r3,8a34 <_gp+0xfffec1b8>
    8a5c:	8809883a 	mov	r4,r17
    8a60:	e00b883a 	mov	r5,fp
    8a64:	d9811b04 	addi	r6,sp,1132
    8a68:	00073ec0 	call	73ec <__sprint_r>
    8a6c:	103bff1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8a70:	da011d17 	ldw	r8,1140(sp)
    8a74:	d8c11c17 	ldw	r3,1136(sp)
    8a78:	da400404 	addi	r9,sp,16
    8a7c:	003fee06 	br	8a38 <_gp+0xfffec1bc>
    8a80:	da413c15 	stw	r9,1264(sp)
    8a84:	000d82c0 	call	d82c <__isnand>
    8a88:	da413c17 	ldw	r9,1264(sp)
    8a8c:	1000851e 	bne	r2,zero,8ca4 <___vfprintf_internal_r+0x1884>
    8a90:	00bfffc4 	movi	r2,-1
    8a94:	e0817626 	beq	fp,r2,9070 <___vfprintf_internal_r+0x1c50>
    8a98:	008019c4 	movi	r2,103
    8a9c:	90817126 	beq	r18,r2,9064 <___vfprintf_internal_r+0x1c44>
    8aa0:	008011c4 	movi	r2,71
    8aa4:	90816f26 	beq	r18,r2,9064 <___vfprintf_internal_r+0x1c44>
    8aa8:	82004014 	ori	r8,r16,256
    8aac:	da012a15 	stw	r8,1192(sp)
    8ab0:	a0017116 	blt	r20,zero,9078 <___vfprintf_internal_r+0x1c58>
    8ab4:	d8012f05 	stb	zero,1212(sp)
    8ab8:	00801984 	movi	r2,102
    8abc:	90811226 	beq	r18,r2,8f08 <___vfprintf_internal_r+0x1ae8>
    8ac0:	00801184 	movi	r2,70
    8ac4:	90811026 	beq	r18,r2,8f08 <___vfprintf_internal_r+0x1ae8>
    8ac8:	00801944 	movi	r2,101
    8acc:	90819b26 	beq	r18,r2,913c <___vfprintf_internal_r+0x1d1c>
    8ad0:	00801144 	movi	r2,69
    8ad4:	90819926 	beq	r18,r2,913c <___vfprintf_internal_r+0x1d1c>
    8ad8:	e02f883a 	mov	r23,fp
    8adc:	d8812404 	addi	r2,sp,1168
    8ae0:	d8800115 	stw	r2,4(sp)
    8ae4:	d8812304 	addi	r2,sp,1164
    8ae8:	d8800215 	stw	r2,8(sp)
    8aec:	d8812204 	addi	r2,sp,1160
    8af0:	ddc00015 	stw	r23,0(sp)
    8af4:	d8800315 	stw	r2,12(sp)
    8af8:	8809883a 	mov	r4,r17
    8afc:	b00b883a 	mov	r5,r22
    8b00:	a00d883a 	mov	r6,r20
    8b04:	01c00084 	movi	r7,2
    8b08:	da413c15 	stw	r9,1264(sp)
    8b0c:	00096a40 	call	96a4 <_dtoa_r>
    8b10:	1027883a 	mov	r19,r2
    8b14:	008019c4 	movi	r2,103
    8b18:	da413c17 	ldw	r9,1264(sp)
    8b1c:	90818c1e 	bne	r18,r2,9150 <___vfprintf_internal_r+0x1d30>
    8b20:	8080004c 	andi	r2,r16,1
    8b24:	10017926 	beq	r2,zero,910c <___vfprintf_internal_r+0x1cec>
    8b28:	00801184 	movi	r2,70
    8b2c:	9dc7883a 	add	r3,r19,r23
    8b30:	90810626 	beq	r18,r2,8f4c <___vfprintf_internal_r+0x1b2c>
    8b34:	b009883a 	mov	r4,r22
    8b38:	a00b883a 	mov	r5,r20
    8b3c:	000d883a 	mov	r6,zero
    8b40:	000f883a 	mov	r7,zero
    8b44:	d8c13b15 	stw	r3,1260(sp)
    8b48:	da413c15 	stw	r9,1264(sp)
    8b4c:	000f1b00 	call	f1b0 <__eqdf2>
    8b50:	d8c13b17 	ldw	r3,1260(sp)
    8b54:	da413c17 	ldw	r9,1264(sp)
    8b58:	10000726 	beq	r2,zero,8b78 <___vfprintf_internal_r+0x1758>
    8b5c:	d8812217 	ldw	r2,1160(sp)
    8b60:	10c1962e 	bgeu	r2,r3,91bc <___vfprintf_internal_r+0x1d9c>
    8b64:	01000c04 	movi	r4,48
    8b68:	11000005 	stb	r4,0(r2)
    8b6c:	10800044 	addi	r2,r2,1
    8b70:	d8812215 	stw	r2,1160(sp)
    8b74:	10fffc1e 	bne	r2,r3,8b68 <_gp+0xfffec2ec>
    8b78:	1cc7c83a 	sub	r3,r3,r19
    8b7c:	d8c13215 	stw	r3,1224(sp)
    8b80:	008019c4 	movi	r2,103
    8b84:	90810626 	beq	r18,r2,8fa0 <___vfprintf_internal_r+0x1b80>
    8b88:	008011c4 	movi	r2,71
    8b8c:	90810426 	beq	r18,r2,8fa0 <___vfprintf_internal_r+0x1b80>
    8b90:	00801984 	movi	r2,102
    8b94:	90819a1e 	bne	r18,r2,9200 <___vfprintf_internal_r+0x1de0>
    8b98:	d8812417 	ldw	r2,1168(sp)
    8b9c:	d8812b15 	stw	r2,1196(sp)
    8ba0:	0081880e 	bge	zero,r2,91c4 <___vfprintf_internal_r+0x1da4>
    8ba4:	e000021e 	bne	fp,zero,8bb0 <___vfprintf_internal_r+0x1790>
    8ba8:	8400004c 	andi	r16,r16,1
    8bac:	80000426 	beq	r16,zero,8bc0 <___vfprintf_internal_r+0x17a0>
    8bb0:	d8812b17 	ldw	r2,1196(sp)
    8bb4:	e2000044 	addi	r8,fp,1
    8bb8:	1205883a 	add	r2,r2,r8
    8bbc:	d8812b15 	stw	r2,1196(sp)
    8bc0:	d8812815 	stw	r2,1184(sp)
    8bc4:	10011716 	blt	r2,zero,9024 <___vfprintf_internal_r+0x1c04>
    8bc8:	ddc12f07 	ldb	r23,1212(sp)
    8bcc:	b800ca26 	beq	r23,zero,8ef8 <___vfprintf_internal_r+0x1ad8>
    8bd0:	00800b44 	movi	r2,45
    8bd4:	d8812585 	stb	r2,1174(sp)
    8bd8:	dc012a17 	ldw	r16,1192(sp)
    8bdc:	d8013115 	stw	zero,1220(sp)
    8be0:	003afe06 	br	77dc <_gp+0xfffeaf60>
    8be4:	d8812b17 	ldw	r2,1196(sp)
    8be8:	d8812815 	stw	r2,1184(sp)
    8bec:	10005e16 	blt	r2,zero,8d68 <___vfprintf_internal_r+0x1948>
    8bf0:	d8812583 	ldbu	r2,1174(sp)
    8bf4:	ddc12d15 	stw	r23,1204(sp)
    8bf8:	d8013115 	stw	zero,1220(sp)
    8bfc:	003af306 	br	77cc <_gp+0xfffeaf50>
    8c00:	d8812d17 	ldw	r2,1204(sp)
    8c04:	15c00017 	ldw	r23,0(r2)
    8c08:	10800104 	addi	r2,r2,4
    8c0c:	d8812d15 	stw	r2,1204(sp)
    8c10:	b82dd7fa 	srai	r22,r23,31
    8c14:	b005883a 	mov	r2,r22
    8c18:	003b4906 	br	7940 <_gp+0xfffeb0c4>
    8c1c:	d8c12d17 	ldw	r3,1204(sp)
    8c20:	002d883a 	mov	r22,zero
    8c24:	1dc00017 	ldw	r23,0(r3)
    8c28:	18c00104 	addi	r3,r3,4
    8c2c:	d8c12d15 	stw	r3,1204(sp)
    8c30:	b805883a 	mov	r2,r23
    8c34:	00c00044 	movi	r3,1
    8c38:	d8012585 	stb	zero,1174(sp)
    8c3c:	003acf06 	br	777c <_gp+0xfffeaf00>
    8c40:	da012d17 	ldw	r8,1204(sp)
    8c44:	002d883a 	mov	r22,zero
    8c48:	45c00017 	ldw	r23,0(r8)
    8c4c:	42000104 	addi	r8,r8,4
    8c50:	da012d15 	stw	r8,1204(sp)
    8c54:	003be506 	br	7bec <_gp+0xfffeb370>
    8c58:	da012d17 	ldw	r8,1204(sp)
    8c5c:	002d883a 	mov	r22,zero
    8c60:	0007883a 	mov	r3,zero
    8c64:	45c00017 	ldw	r23,0(r8)
    8c68:	42000104 	addi	r8,r8,4
    8c6c:	da012d15 	stw	r8,1204(sp)
    8c70:	b805883a 	mov	r2,r23
    8c74:	d8012585 	stb	zero,1174(sp)
    8c78:	003ac006 	br	777c <_gp+0xfffeaf00>
    8c7c:	d8c12d17 	ldw	r3,1204(sp)
    8c80:	d9012c17 	ldw	r4,1200(sp)
    8c84:	18800017 	ldw	r2,0(r3)
    8c88:	18c00104 	addi	r3,r3,4
    8c8c:	d8c12d15 	stw	r3,1204(sp)
    8c90:	11000015 	stw	r4,0(r2)
    8c94:	003a1806 	br	74f8 <_gp+0xfffeac7c>
    8c98:	073fffc4 	movi	fp,-1
    8c9c:	202b883a 	mov	r21,r4
    8ca0:	003a3e06 	br	759c <_gp+0xfffead20>
    8ca4:	008011c4 	movi	r2,71
    8ca8:	14809016 	blt	r2,r18,8eec <___vfprintf_internal_r+0x1acc>
    8cac:	04c00074 	movhi	r19,1
    8cb0:	9cca7804 	addi	r19,r19,10720
    8cb4:	00c000c4 	movi	r3,3
    8cb8:	00bfdfc4 	movi	r2,-129
    8cbc:	80a0703a 	and	r16,r16,r2
    8cc0:	d8c12815 	stw	r3,1184(sp)
    8cc4:	d8812583 	ldbu	r2,1174(sp)
    8cc8:	d8c12b15 	stw	r3,1196(sp)
    8ccc:	d8013115 	stw	zero,1220(sp)
    8cd0:	003abe06 	br	77cc <_gp+0xfffeaf50>
    8cd4:	d9412917 	ldw	r5,1188(sp)
    8cd8:	8809883a 	mov	r4,r17
    8cdc:	d9811b04 	addi	r6,sp,1132
    8ce0:	00073ec0 	call	73ec <__sprint_r>
    8ce4:	103b611e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8ce8:	dc812417 	ldw	r18,1168(sp)
    8cec:	da011d17 	ldw	r8,1140(sp)
    8cf0:	da400404 	addi	r9,sp,16
    8cf4:	003f3506 	br	89cc <_gp+0xfffec150>
    8cf8:	ad400044 	addi	r21,r21,1
    8cfc:	84000814 	ori	r16,r16,32
    8d00:	14800047 	ldb	r18,1(r2)
    8d04:	003a2406 	br	7598 <_gp+0xfffead1c>
    8d08:	d9412917 	ldw	r5,1188(sp)
    8d0c:	8809883a 	mov	r4,r17
    8d10:	d9811b04 	addi	r6,sp,1132
    8d14:	00073ec0 	call	73ec <__sprint_r>
    8d18:	103b541e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8d1c:	da011d17 	ldw	r8,1140(sp)
    8d20:	da400404 	addi	r9,sp,16
    8d24:	003d4a06 	br	8250 <_gp+0xfffeb9d4>
    8d28:	4d000015 	stw	r20,0(r9)
    8d2c:	4c800115 	stw	r18,4(r9)
    8d30:	4491883a 	add	r8,r8,r18
    8d34:	18c00044 	addi	r3,r3,1
    8d38:	da011d15 	stw	r8,1140(sp)
    8d3c:	d8c11c15 	stw	r3,1136(sp)
    8d40:	008001c4 	movi	r2,7
    8d44:	10fcdc16 	blt	r2,r3,80b8 <_gp+0xfffeb83c>
    8d48:	4a400204 	addi	r9,r9,8
    8d4c:	003ce106 	br	80d4 <_gp+0xfffeb858>
    8d50:	da413c15 	stw	r9,1264(sp)
    8d54:	00073600 	call	7360 <strlen>
    8d58:	d8812b15 	stw	r2,1196(sp)
    8d5c:	d8812815 	stw	r2,1184(sp)
    8d60:	da413c17 	ldw	r9,1264(sp)
    8d64:	103fa20e 	bge	r2,zero,8bf0 <_gp+0xfffec374>
    8d68:	d8012815 	stw	zero,1184(sp)
    8d6c:	003fa006 	br	8bf0 <_gp+0xfffec374>
    8d70:	d9412917 	ldw	r5,1188(sp)
    8d74:	8809883a 	mov	r4,r17
    8d78:	d9811b04 	addi	r6,sp,1132
    8d7c:	00073ec0 	call	73ec <__sprint_r>
    8d80:	103b3a1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8d84:	da011d17 	ldw	r8,1140(sp)
    8d88:	d8c11c17 	ldw	r3,1136(sp)
    8d8c:	da400404 	addi	r9,sp,16
    8d90:	d8813217 	ldw	r2,1224(sp)
    8d94:	4cc00015 	stw	r19,0(r9)
    8d98:	48800115 	stw	r2,4(r9)
    8d9c:	4091883a 	add	r8,r8,r2
    8da0:	003c8106 	br	7fa8 <_gp+0xfffeb72c>
    8da4:	00800b44 	movi	r2,45
    8da8:	d8812585 	stb	r2,1174(sp)
    8dac:	003be306 	br	7d3c <_gp+0xfffeb4c0>
    8db0:	4d000015 	stw	r20,0(r9)
    8db4:	4c800115 	stw	r18,4(r9)
    8db8:	4491883a 	add	r8,r8,r18
    8dbc:	18c00044 	addi	r3,r3,1
    8dc0:	da011d15 	stw	r8,1140(sp)
    8dc4:	d8c11c15 	stw	r3,1136(sp)
    8dc8:	008001c4 	movi	r2,7
    8dcc:	10ffe816 	blt	r2,r3,8d70 <_gp+0xfffec4f4>
    8dd0:	4a400204 	addi	r9,r9,8
    8dd4:	003fee06 	br	8d90 <_gp+0xfffec514>
    8dd8:	df012b15 	stw	fp,1196(sp)
    8ddc:	00800184 	movi	r2,6
    8de0:	1700072e 	bgeu	r2,fp,8e00 <___vfprintf_internal_r+0x19e0>
    8de4:	d8812b15 	stw	r2,1196(sp)
    8de8:	d8812815 	stw	r2,1184(sp)
    8dec:	ddc12d15 	stw	r23,1204(sp)
    8df0:	04c00074 	movhi	r19,1
    8df4:	9cca8404 	addi	r19,r19,10768
    8df8:	d8013115 	stw	zero,1220(sp)
    8dfc:	003a7a06 	br	77e8 <_gp+0xfffeaf6c>
    8e00:	d8812b17 	ldw	r2,1196(sp)
    8e04:	d8812815 	stw	r2,1184(sp)
    8e08:	103ff80e 	bge	r2,zero,8dec <_gp+0xfffec570>
    8e0c:	d8012815 	stw	zero,1184(sp)
    8e10:	003ff606 	br	8dec <_gp+0xfffec570>
    8e14:	d9012d17 	ldw	r4,1204(sp)
    8e18:	da012c17 	ldw	r8,1200(sp)
    8e1c:	20800017 	ldw	r2,0(r4)
    8e20:	21000104 	addi	r4,r4,4
    8e24:	d9012d15 	stw	r4,1204(sp)
    8e28:	12000015 	stw	r8,0(r2)
    8e2c:	0039b206 	br	74f8 <_gp+0xfffeac7c>
    8e30:	d9412917 	ldw	r5,1188(sp)
    8e34:	8809883a 	mov	r4,r17
    8e38:	d9811b04 	addi	r6,sp,1132
    8e3c:	00073ec0 	call	73ec <__sprint_r>
    8e40:	103b0a1e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8e44:	dc812417 	ldw	r18,1168(sp)
    8e48:	da011d17 	ldw	r8,1140(sp)
    8e4c:	da400404 	addi	r9,sp,16
    8e50:	003def06 	br	8610 <_gp+0xfffebd94>
    8e54:	d9412917 	ldw	r5,1188(sp)
    8e58:	8809883a 	mov	r4,r17
    8e5c:	d9811b04 	addi	r6,sp,1132
    8e60:	00073ec0 	call	73ec <__sprint_r>
    8e64:	103b011e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8e68:	dc812417 	ldw	r18,1168(sp)
    8e6c:	da400404 	addi	r9,sp,16
    8e70:	003eb906 	br	8958 <_gp+0xfffec0dc>
    8e74:	d9412917 	ldw	r5,1188(sp)
    8e78:	8809883a 	mov	r4,r17
    8e7c:	d9811b04 	addi	r6,sp,1132
    8e80:	00073ec0 	call	73ec <__sprint_r>
    8e84:	103af91e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8e88:	dc812417 	ldw	r18,1168(sp)
    8e8c:	da011d17 	ldw	r8,1140(sp)
    8e90:	d8c11c17 	ldw	r3,1136(sp)
    8e94:	da400404 	addi	r9,sp,16
    8e98:	003ea306 	br	8928 <_gp+0xfffec0ac>
    8e9c:	00800244 	movi	r2,9
    8ea0:	15fda636 	bltu	r2,r23,853c <_gp+0xfffebcc0>
    8ea4:	dd010e04 	addi	r20,sp,1080
    8ea8:	003dc206 	br	85b4 <_gp+0xfffebd38>
    8eac:	df012815 	stw	fp,1184(sp)
    8eb0:	d8812583 	ldbu	r2,1174(sp)
    8eb4:	df012b15 	stw	fp,1196(sp)
    8eb8:	ddc12d15 	stw	r23,1204(sp)
    8ebc:	d8013115 	stw	zero,1220(sp)
    8ec0:	003a4206 	br	77cc <_gp+0xfffeaf50>
    8ec4:	d9412917 	ldw	r5,1188(sp)
    8ec8:	8809883a 	mov	r4,r17
    8ecc:	d9811b04 	addi	r6,sp,1132
    8ed0:	00073ec0 	call	73ec <__sprint_r>
    8ed4:	103ae51e 	bne	r2,zero,7a6c <_gp+0xfffeb1f0>
    8ed8:	dc812417 	ldw	r18,1168(sp)
    8edc:	da011d17 	ldw	r8,1140(sp)
    8ee0:	d8c11c17 	ldw	r3,1136(sp)
    8ee4:	da400404 	addi	r9,sp,16
    8ee8:	003ec906 	br	8a10 <_gp+0xfffec194>
    8eec:	04c00074 	movhi	r19,1
    8ef0:	9cca7904 	addi	r19,r19,10724
    8ef4:	003f6f06 	br	8cb4 <_gp+0xfffec438>
    8ef8:	d8812583 	ldbu	r2,1174(sp)
    8efc:	dc012a17 	ldw	r16,1192(sp)
    8f00:	d8013115 	stw	zero,1220(sp)
    8f04:	003a3106 	br	77cc <_gp+0xfffeaf50>
    8f08:	d8812404 	addi	r2,sp,1168
    8f0c:	d8800115 	stw	r2,4(sp)
    8f10:	d8812304 	addi	r2,sp,1164
    8f14:	d8800215 	stw	r2,8(sp)
    8f18:	d8812204 	addi	r2,sp,1160
    8f1c:	df000015 	stw	fp,0(sp)
    8f20:	d8800315 	stw	r2,12(sp)
    8f24:	8809883a 	mov	r4,r17
    8f28:	b00b883a 	mov	r5,r22
    8f2c:	a00d883a 	mov	r6,r20
    8f30:	01c000c4 	movi	r7,3
    8f34:	da413c15 	stw	r9,1264(sp)
    8f38:	00096a40 	call	96a4 <_dtoa_r>
    8f3c:	da413c17 	ldw	r9,1264(sp)
    8f40:	1027883a 	mov	r19,r2
    8f44:	1707883a 	add	r3,r2,fp
    8f48:	e02f883a 	mov	r23,fp
    8f4c:	99000007 	ldb	r4,0(r19)
    8f50:	00800c04 	movi	r2,48
    8f54:	20800326 	beq	r4,r2,8f64 <___vfprintf_internal_r+0x1b44>
    8f58:	da812417 	ldw	r10,1168(sp)
    8f5c:	1a87883a 	add	r3,r3,r10
    8f60:	003ef406 	br	8b34 <_gp+0xfffec2b8>
    8f64:	b009883a 	mov	r4,r22
    8f68:	a00b883a 	mov	r5,r20
    8f6c:	000d883a 	mov	r6,zero
    8f70:	000f883a 	mov	r7,zero
    8f74:	d8c13b15 	stw	r3,1260(sp)
    8f78:	da413c15 	stw	r9,1264(sp)
    8f7c:	000f20c0 	call	f20c <__nedf2>
    8f80:	d8c13b17 	ldw	r3,1260(sp)
    8f84:	da413c17 	ldw	r9,1264(sp)
    8f88:	103ff326 	beq	r2,zero,8f58 <_gp+0xfffec6dc>
    8f8c:	00800044 	movi	r2,1
    8f90:	15d5c83a 	sub	r10,r2,r23
    8f94:	da812415 	stw	r10,1168(sp)
    8f98:	1a87883a 	add	r3,r3,r10
    8f9c:	003ee506 	br	8b34 <_gp+0xfffec2b8>
    8fa0:	d8812417 	ldw	r2,1168(sp)
    8fa4:	d8812b15 	stw	r2,1196(sp)
    8fa8:	1029883a 	mov	r20,r2
    8fac:	00bfff44 	movi	r2,-3
    8fb0:	a0800116 	blt	r20,r2,8fb8 <___vfprintf_internal_r+0x1b98>
    8fb4:	e5001d0e 	bge	fp,r20,902c <___vfprintf_internal_r+0x1c0c>
    8fb8:	94bfff84 	addi	r18,r18,-2
    8fbc:	a53fffc4 	addi	r20,r20,-1
    8fc0:	dd012415 	stw	r20,1168(sp)
    8fc4:	dc811fc5 	stb	r18,1151(sp)
    8fc8:	a0007816 	blt	r20,zero,91ac <___vfprintf_internal_r+0x1d8c>
    8fcc:	00800ac4 	movi	r2,43
    8fd0:	d8812005 	stb	r2,1152(sp)
    8fd4:	00800244 	movi	r2,9
    8fd8:	15002b16 	blt	r2,r20,9088 <___vfprintf_internal_r+0x1c68>
    8fdc:	00800c04 	movi	r2,48
    8fe0:	a5000c04 	addi	r20,r20,48
    8fe4:	d8812045 	stb	r2,1153(sp)
    8fe8:	dd012085 	stb	r20,1154(sp)
    8fec:	d8c120c4 	addi	r3,sp,1155
    8ff0:	d8811fc4 	addi	r2,sp,1151
    8ff4:	da013217 	ldw	r8,1224(sp)
    8ff8:	1885c83a 	sub	r2,r3,r2
    8ffc:	d8813515 	stw	r2,1236(sp)
    9000:	4085883a 	add	r2,r8,r2
    9004:	d8812b15 	stw	r2,1196(sp)
    9008:	00800044 	movi	r2,1
    900c:	1200610e 	bge	r2,r8,9194 <___vfprintf_internal_r+0x1d74>
    9010:	d8812b17 	ldw	r2,1196(sp)
    9014:	10800044 	addi	r2,r2,1
    9018:	d8812b15 	stw	r2,1196(sp)
    901c:	d8812815 	stw	r2,1184(sp)
    9020:	103ee90e 	bge	r2,zero,8bc8 <_gp+0xfffec34c>
    9024:	d8012815 	stw	zero,1184(sp)
    9028:	003ee706 	br	8bc8 <_gp+0xfffec34c>
    902c:	d8812b17 	ldw	r2,1196(sp)
    9030:	da013217 	ldw	r8,1224(sp)
    9034:	12003716 	blt	r2,r8,9114 <___vfprintf_internal_r+0x1cf4>
    9038:	8400004c 	andi	r16,r16,1
    903c:	80000326 	beq	r16,zero,904c <___vfprintf_internal_r+0x1c2c>
    9040:	d8812b17 	ldw	r2,1196(sp)
    9044:	10800044 	addi	r2,r2,1
    9048:	d8812b15 	stw	r2,1196(sp)
    904c:	d8812815 	stw	r2,1184(sp)
    9050:	10003716 	blt	r2,zero,9130 <___vfprintf_internal_r+0x1d10>
    9054:	048019c4 	movi	r18,103
    9058:	003edb06 	br	8bc8 <_gp+0xfffec34c>
    905c:	d8012815 	stw	zero,1184(sp)
    9060:	003b6906 	br	7e08 <_gp+0xfffeb58c>
    9064:	e03e901e 	bne	fp,zero,8aa8 <_gp+0xfffec22c>
    9068:	07000044 	movi	fp,1
    906c:	003e8e06 	br	8aa8 <_gp+0xfffec22c>
    9070:	07000184 	movi	fp,6
    9074:	003e8c06 	br	8aa8 <_gp+0xfffec22c>
    9078:	00c00b44 	movi	r3,45
    907c:	a520003c 	xorhi	r20,r20,32768
    9080:	d8c12f05 	stb	r3,1212(sp)
    9084:	003e8c06 	br	8ab8 <_gp+0xfffec23c>
    9088:	d8c11f84 	addi	r3,sp,1150
    908c:	102f883a 	mov	r23,r2
    9090:	4839883a 	mov	fp,r9
    9094:	a009883a 	mov	r4,r20
    9098:	01400284 	movi	r5,10
    909c:	182d883a 	mov	r22,r3
    90a0:	0005ef40 	call	5ef4 <__modsi3>
    90a4:	10800c04 	addi	r2,r2,48
    90a8:	a009883a 	mov	r4,r20
    90ac:	b0800005 	stb	r2,0(r22)
    90b0:	01400284 	movi	r5,10
    90b4:	0005ea40 	call	5ea4 <__divsi3>
    90b8:	1029883a 	mov	r20,r2
    90bc:	b0ffffc4 	addi	r3,r22,-1
    90c0:	b8bff416 	blt	r23,r2,9094 <_gp+0xfffec818>
    90c4:	11400c04 	addi	r5,r2,48
    90c8:	b17fffc5 	stb	r5,-1(r22)
    90cc:	d8811fc4 	addi	r2,sp,1151
    90d0:	e013883a 	mov	r9,fp
    90d4:	1880482e 	bgeu	r3,r2,91f8 <___vfprintf_internal_r+0x1dd8>
    90d8:	b007883a 	mov	r3,r22
    90dc:	d9012044 	addi	r4,sp,1153
    90e0:	00000206 	br	90ec <___vfprintf_internal_r+0x1ccc>
    90e4:	19400003 	ldbu	r5,0(r3)
    90e8:	18c00044 	addi	r3,r3,1
    90ec:	21400005 	stb	r5,0(r4)
    90f0:	21000044 	addi	r4,r4,1
    90f4:	10fffb1e 	bne	r2,r3,90e4 <_gp+0xfffec868>
    90f8:	d8c12004 	addi	r3,sp,1152
    90fc:	1d87c83a 	sub	r3,r3,r22
    9100:	d9012044 	addi	r4,sp,1153
    9104:	20c7883a 	add	r3,r4,r3
    9108:	003fba06 	br	8ff4 <_gp+0xfffec778>
    910c:	d8c12217 	ldw	r3,1160(sp)
    9110:	003e9906 	br	8b78 <_gp+0xfffec2fc>
    9114:	05000b0e 	bge	zero,r20,9144 <___vfprintf_internal_r+0x1d24>
    9118:	05000044 	movi	r20,1
    911c:	da013217 	ldw	r8,1224(sp)
    9120:	a229883a 	add	r20,r20,r8
    9124:	dd012b15 	stw	r20,1196(sp)
    9128:	dd012815 	stw	r20,1184(sp)
    912c:	a03fc90e 	bge	r20,zero,9054 <_gp+0xfffec7d8>
    9130:	d8012815 	stw	zero,1184(sp)
    9134:	048019c4 	movi	r18,103
    9138:	003ea306 	br	8bc8 <_gp+0xfffec34c>
    913c:	e5c00044 	addi	r23,fp,1
    9140:	003e6606 	br	8adc <_gp+0xfffec260>
    9144:	00800084 	movi	r2,2
    9148:	1529c83a 	sub	r20,r2,r20
    914c:	003ff306 	br	911c <_gp+0xfffec8a0>
    9150:	008011c4 	movi	r2,71
    9154:	90be7226 	beq	r18,r2,8b20 <_gp+0xfffec2a4>
    9158:	003e7306 	br	8b28 <_gp+0xfffec2ac>
    915c:	d8812d17 	ldw	r2,1204(sp)
    9160:	ac800043 	ldbu	r18,1(r21)
    9164:	202b883a 	mov	r21,r4
    9168:	17000017 	ldw	fp,0(r2)
    916c:	10800104 	addi	r2,r2,4
    9170:	d8812d15 	stw	r2,1204(sp)
    9174:	e0001b16 	blt	fp,zero,91e4 <___vfprintf_internal_r+0x1dc4>
    9178:	94803fcc 	andi	r18,r18,255
    917c:	9480201c 	xori	r18,r18,128
    9180:	94bfe004 	addi	r18,r18,-128
    9184:	00390406 	br	7598 <_gp+0xfffead1c>
    9188:	00bfffc4 	movi	r2,-1
    918c:	d8812c15 	stw	r2,1200(sp)
    9190:	003a2506 	br	7a28 <_gp+0xfffeb1ac>
    9194:	80a0703a 	and	r16,r16,r2
    9198:	803f9d1e 	bne	r16,zero,9010 <_gp+0xfffec794>
    919c:	d8812b17 	ldw	r2,1196(sp)
    91a0:	d8812815 	stw	r2,1184(sp)
    91a4:	103e880e 	bge	r2,zero,8bc8 <_gp+0xfffec34c>
    91a8:	003f9e06 	br	9024 <_gp+0xfffec7a8>
    91ac:	00800b44 	movi	r2,45
    91b0:	0529c83a 	sub	r20,zero,r20
    91b4:	d8812005 	stb	r2,1152(sp)
    91b8:	003f8606 	br	8fd4 <_gp+0xfffec758>
    91bc:	1007883a 	mov	r3,r2
    91c0:	003e6d06 	br	8b78 <_gp+0xfffec2fc>
    91c4:	e000021e 	bne	fp,zero,91d0 <___vfprintf_internal_r+0x1db0>
    91c8:	8400004c 	andi	r16,r16,1
    91cc:	80000e26 	beq	r16,zero,9208 <___vfprintf_internal_r+0x1de8>
    91d0:	e7000084 	addi	fp,fp,2
    91d4:	df012b15 	stw	fp,1196(sp)
    91d8:	df012815 	stw	fp,1184(sp)
    91dc:	e03e7a0e 	bge	fp,zero,8bc8 <_gp+0xfffec34c>
    91e0:	003f9006 	br	9024 <_gp+0xfffec7a8>
    91e4:	94803fcc 	andi	r18,r18,255
    91e8:	9480201c 	xori	r18,r18,128
    91ec:	073fffc4 	movi	fp,-1
    91f0:	94bfe004 	addi	r18,r18,-128
    91f4:	0038e806 	br	7598 <_gp+0xfffead1c>
    91f8:	d8c12044 	addi	r3,sp,1153
    91fc:	003f7d06 	br	8ff4 <_gp+0xfffec778>
    9200:	dd012417 	ldw	r20,1168(sp)
    9204:	003f6d06 	br	8fbc <_gp+0xfffec740>
    9208:	00c00044 	movi	r3,1
    920c:	d8c12815 	stw	r3,1184(sp)
    9210:	d8c12b15 	stw	r3,1196(sp)
    9214:	003e6c06 	br	8bc8 <_gp+0xfffec34c>

00009218 <__vfprintf_internal>:
    9218:	00800074 	movhi	r2,1
    921c:	10922304 	addi	r2,r2,18572
    9220:	2007883a 	mov	r3,r4
    9224:	11000017 	ldw	r4,0(r2)
    9228:	2805883a 	mov	r2,r5
    922c:	300f883a 	mov	r7,r6
    9230:	180b883a 	mov	r5,r3
    9234:	100d883a 	mov	r6,r2
    9238:	00074201 	jmpi	7420 <___vfprintf_internal_r>

0000923c <_vsnprintf_r>:
    923c:	deffe604 	addi	sp,sp,-104
    9240:	dc401815 	stw	r17,96(sp)
    9244:	dc001715 	stw	r16,92(sp)
    9248:	dfc01915 	stw	ra,100(sp)
    924c:	3021883a 	mov	r16,r6
    9250:	2023883a 	mov	r17,r4
    9254:	30002016 	blt	r6,zero,92d8 <_vsnprintf_r+0x9c>
    9258:	00808204 	movi	r2,520
    925c:	d880030d 	sth	r2,12(sp)
    9260:	d9400015 	stw	r5,0(sp)
    9264:	d9400415 	stw	r5,16(sp)
    9268:	3000161e 	bne	r6,zero,92c4 <_vsnprintf_r+0x88>
    926c:	0005883a 	mov	r2,zero
    9270:	00c00074 	movhi	r3,1
    9274:	18d22304 	addi	r3,r3,18572
    9278:	19000017 	ldw	r4,0(r3)
    927c:	380d883a 	mov	r6,r7
    9280:	d9c01a17 	ldw	r7,104(sp)
    9284:	d8800215 	stw	r2,8(sp)
    9288:	d8800515 	stw	r2,20(sp)
    928c:	d80b883a 	mov	r5,sp
    9290:	00bfffc4 	movi	r2,-1
    9294:	d880038d 	sth	r2,14(sp)
    9298:	00074200 	call	7420 <___vfprintf_internal_r>
    929c:	00ffffc4 	movi	r3,-1
    92a0:	10c00a16 	blt	r2,r3,92cc <_vsnprintf_r+0x90>
    92a4:	80000226 	beq	r16,zero,92b0 <_vsnprintf_r+0x74>
    92a8:	d8c00017 	ldw	r3,0(sp)
    92ac:	18000005 	stb	zero,0(r3)
    92b0:	dfc01917 	ldw	ra,100(sp)
    92b4:	dc401817 	ldw	r17,96(sp)
    92b8:	dc001717 	ldw	r16,92(sp)
    92bc:	dec01a04 	addi	sp,sp,104
    92c0:	f800283a 	ret
    92c4:	30bfffc4 	addi	r2,r6,-1
    92c8:	003fe906 	br	9270 <_gp+0xfffec9f4>
    92cc:	00c022c4 	movi	r3,139
    92d0:	88c00015 	stw	r3,0(r17)
    92d4:	003ff306 	br	92a4 <_gp+0xfffeca28>
    92d8:	008022c4 	movi	r2,139
    92dc:	20800015 	stw	r2,0(r4)
    92e0:	00bfffc4 	movi	r2,-1
    92e4:	003ff206 	br	92b0 <_gp+0xfffeca34>

000092e8 <vsnprintf>:
    92e8:	00800074 	movhi	r2,1
    92ec:	10922304 	addi	r2,r2,18572
    92f0:	2011883a 	mov	r8,r4
    92f4:	11000017 	ldw	r4,0(r2)
    92f8:	defffe04 	addi	sp,sp,-8
    92fc:	2807883a 	mov	r3,r5
    9300:	3005883a 	mov	r2,r6
    9304:	d9c00015 	stw	r7,0(sp)
    9308:	400b883a 	mov	r5,r8
    930c:	180d883a 	mov	r6,r3
    9310:	100f883a 	mov	r7,r2
    9314:	dfc00115 	stw	ra,4(sp)
    9318:	000923c0 	call	923c <_vsnprintf_r>
    931c:	dfc00117 	ldw	ra,4(sp)
    9320:	dec00204 	addi	sp,sp,8
    9324:	f800283a 	ret

00009328 <__swsetup_r>:
    9328:	00800074 	movhi	r2,1
    932c:	10922304 	addi	r2,r2,18572
    9330:	10800017 	ldw	r2,0(r2)
    9334:	defffd04 	addi	sp,sp,-12
    9338:	dc400115 	stw	r17,4(sp)
    933c:	dc000015 	stw	r16,0(sp)
    9340:	dfc00215 	stw	ra,8(sp)
    9344:	2023883a 	mov	r17,r4
    9348:	2821883a 	mov	r16,r5
    934c:	10000226 	beq	r2,zero,9358 <__swsetup_r+0x30>
    9350:	10c00e17 	ldw	r3,56(r2)
    9354:	18003d26 	beq	r3,zero,944c <__swsetup_r+0x124>
    9358:	8080030b 	ldhu	r2,12(r16)
    935c:	10c0020c 	andi	r3,r2,8
    9360:	18ffffcc 	andi	r3,r3,65535
    9364:	18e0001c 	xori	r3,r3,32768
    9368:	18e00004 	addi	r3,r3,-32768
    936c:	18001226 	beq	r3,zero,93b8 <__swsetup_r+0x90>
    9370:	80c00417 	ldw	r3,16(r16)
    9374:	18001f26 	beq	r3,zero,93f4 <__swsetup_r+0xcc>
    9378:	1100004c 	andi	r4,r2,1
    937c:	2000261e 	bne	r4,zero,9418 <__swsetup_r+0xf0>
    9380:	1080008c 	andi	r2,r2,2
    9384:	10bfffcc 	andi	r2,r2,65535
    9388:	10a0001c 	xori	r2,r2,32768
    938c:	10a00004 	addi	r2,r2,-32768
    9390:	1000311e 	bne	r2,zero,9458 <__swsetup_r+0x130>
    9394:	80800517 	ldw	r2,20(r16)
    9398:	80800215 	stw	r2,8(r16)
    939c:	18002326 	beq	r3,zero,942c <__swsetup_r+0x104>
    93a0:	0005883a 	mov	r2,zero
    93a4:	dfc00217 	ldw	ra,8(sp)
    93a8:	dc400117 	ldw	r17,4(sp)
    93ac:	dc000017 	ldw	r16,0(sp)
    93b0:	dec00304 	addi	sp,sp,12
    93b4:	f800283a 	ret
    93b8:	10c0040c 	andi	r3,r2,16
    93bc:	18ffffcc 	andi	r3,r3,65535
    93c0:	18e0001c 	xori	r3,r3,32768
    93c4:	18e00004 	addi	r3,r3,-32768
    93c8:	18001e26 	beq	r3,zero,9444 <__swsetup_r+0x11c>
    93cc:	10c0010c 	andi	r3,r2,4
    93d0:	18ffffcc 	andi	r3,r3,65535
    93d4:	18e0001c 	xori	r3,r3,32768
    93d8:	18e00004 	addi	r3,r3,-32768
    93dc:	1800211e 	bne	r3,zero,9464 <__swsetup_r+0x13c>
    93e0:	80c00417 	ldw	r3,16(r16)
    93e4:	11400214 	ori	r5,r2,8
    93e8:	8140030d 	sth	r5,12(r16)
    93ec:	2805883a 	mov	r2,r5
    93f0:	183fe11e 	bne	r3,zero,9378 <_gp+0xfffecafc>
    93f4:	1140a00c 	andi	r5,r2,640
    93f8:	01008004 	movi	r4,512
    93fc:	293fde26 	beq	r5,r4,9378 <_gp+0xfffecafc>
    9400:	8809883a 	mov	r4,r17
    9404:	800b883a 	mov	r5,r16
    9408:	000bcdc0 	call	bcdc <__smakebuf_r>
    940c:	8080030b 	ldhu	r2,12(r16)
    9410:	80c00417 	ldw	r3,16(r16)
    9414:	003fd806 	br	9378 <_gp+0xfffecafc>
    9418:	80800517 	ldw	r2,20(r16)
    941c:	80000215 	stw	zero,8(r16)
    9420:	0085c83a 	sub	r2,zero,r2
    9424:	80800615 	stw	r2,24(r16)
    9428:	183fdd1e 	bne	r3,zero,93a0 <_gp+0xfffecb24>
    942c:	8080030b 	ldhu	r2,12(r16)
    9430:	1080200c 	andi	r2,r2,128
    9434:	10bfffcc 	andi	r2,r2,65535
    9438:	10a0001c 	xori	r2,r2,32768
    943c:	10a00004 	addi	r2,r2,-32768
    9440:	103fd826 	beq	r2,zero,93a4 <_gp+0xfffecb28>
    9444:	00bfffc4 	movi	r2,-1
    9448:	003fd606 	br	93a4 <_gp+0xfffecb28>
    944c:	1009883a 	mov	r4,r2
    9450:	000af680 	call	af68 <__sinit>
    9454:	003fc006 	br	9358 <_gp+0xfffecadc>
    9458:	0005883a 	mov	r2,zero
    945c:	80800215 	stw	r2,8(r16)
    9460:	003fce06 	br	939c <_gp+0xfffecb20>
    9464:	81400c17 	ldw	r5,48(r16)
    9468:	28000626 	beq	r5,zero,9484 <__swsetup_r+0x15c>
    946c:	80c01004 	addi	r3,r16,64
    9470:	28c00326 	beq	r5,r3,9480 <__swsetup_r+0x158>
    9474:	8809883a 	mov	r4,r17
    9478:	000b2ec0 	call	b2ec <_free_r>
    947c:	8080030b 	ldhu	r2,12(r16)
    9480:	80000c15 	stw	zero,48(r16)
    9484:	80c00417 	ldw	r3,16(r16)
    9488:	013ff6c4 	movi	r4,-37
    948c:	2084703a 	and	r2,r4,r2
    9490:	80000115 	stw	zero,4(r16)
    9494:	80c00015 	stw	r3,0(r16)
    9498:	003fd206 	br	93e4 <_gp+0xfffecb68>

0000949c <quorem>:
    949c:	defff704 	addi	sp,sp,-36
    94a0:	dc400115 	stw	r17,4(sp)
    94a4:	20800417 	ldw	r2,16(r4)
    94a8:	2c400417 	ldw	r17,16(r5)
    94ac:	dd800615 	stw	r22,24(sp)
    94b0:	dd400515 	stw	r21,20(sp)
    94b4:	dfc00815 	stw	ra,32(sp)
    94b8:	ddc00715 	stw	r23,28(sp)
    94bc:	dd000415 	stw	r20,16(sp)
    94c0:	dcc00315 	stw	r19,12(sp)
    94c4:	dc800215 	stw	r18,8(sp)
    94c8:	dc000015 	stw	r16,0(sp)
    94cc:	202b883a 	mov	r21,r4
    94d0:	282d883a 	mov	r22,r5
    94d4:	14407116 	blt	r2,r17,969c <quorem+0x200>
    94d8:	88800104 	addi	r2,r17,4
    94dc:	1085883a 	add	r2,r2,r2
    94e0:	1085883a 	add	r2,r2,r2
    94e4:	28a7883a 	add	r19,r5,r2
    94e8:	2085883a 	add	r2,r4,r2
    94ec:	15c00017 	ldw	r23,0(r2)
    94f0:	99400017 	ldw	r5,0(r19)
    94f4:	8c7fffc4 	addi	r17,r17,-1
    94f8:	b809883a 	mov	r4,r23
    94fc:	29400044 	addi	r5,r5,1
    9500:	0005f500 	call	5f50 <__udivsi3>
    9504:	1025883a 	mov	r18,r2
    9508:	b4000504 	addi	r16,r22,20
    950c:	ad000504 	addi	r20,r21,20
    9510:	10002d26 	beq	r2,zero,95c8 <quorem+0x12c>
    9514:	800d883a 	mov	r6,r16
    9518:	a007883a 	mov	r3,r20
    951c:	000f883a 	mov	r7,zero
    9520:	0005883a 	mov	r2,zero
    9524:	32c00017 	ldw	r11,0(r6)
    9528:	1a400017 	ldw	r9,0(r3)
    952c:	31800104 	addi	r6,r6,4
    9530:	5abfffcc 	andi	r10,r11,65535
    9534:	5495383a 	mul	r10,r10,r18
    9538:	5816d43a 	srli	r11,r11,16
    953c:	4a3fffcc 	andi	r8,r9,65535
    9540:	3a95883a 	add	r10,r7,r10
    9544:	500ed43a 	srli	r7,r10,16
    9548:	5c97383a 	mul	r11,r11,r18
    954c:	4085883a 	add	r2,r8,r2
    9550:	52bfffcc 	andi	r10,r10,65535
    9554:	1291c83a 	sub	r8,r2,r10
    9558:	4804d43a 	srli	r2,r9,16
    955c:	3acf883a 	add	r7,r7,r11
    9560:	4015d43a 	srai	r10,r8,16
    9564:	393fffcc 	andi	r4,r7,65535
    9568:	1105c83a 	sub	r2,r2,r4
    956c:	1285883a 	add	r2,r2,r10
    9570:	1880008d 	sth	r2,2(r3)
    9574:	1a00000d 	sth	r8,0(r3)
    9578:	380ed43a 	srli	r7,r7,16
    957c:	1005d43a 	srai	r2,r2,16
    9580:	18c00104 	addi	r3,r3,4
    9584:	99bfe72e 	bgeu	r19,r6,9524 <_gp+0xfffecca8>
    9588:	b8000f1e 	bne	r23,zero,95c8 <quorem+0x12c>
    958c:	88800144 	addi	r2,r17,5
    9590:	1085883a 	add	r2,r2,r2
    9594:	1085883a 	add	r2,r2,r2
    9598:	a887883a 	add	r3,r21,r2
    959c:	18bfff04 	addi	r2,r3,-4
    95a0:	a080082e 	bgeu	r20,r2,95c4 <quorem+0x128>
    95a4:	18ffff17 	ldw	r3,-4(r3)
    95a8:	18000326 	beq	r3,zero,95b8 <quorem+0x11c>
    95ac:	00000506 	br	95c4 <quorem+0x128>
    95b0:	10c00017 	ldw	r3,0(r2)
    95b4:	1800031e 	bne	r3,zero,95c4 <quorem+0x128>
    95b8:	10bfff04 	addi	r2,r2,-4
    95bc:	8c7fffc4 	addi	r17,r17,-1
    95c0:	a0bffb36 	bltu	r20,r2,95b0 <_gp+0xfffecd34>
    95c4:	ac400415 	stw	r17,16(r21)
    95c8:	a809883a 	mov	r4,r21
    95cc:	b00b883a 	mov	r5,r22
    95d0:	000c9480 	call	c948 <__mcmp>
    95d4:	10002516 	blt	r2,zero,966c <quorem+0x1d0>
    95d8:	94800044 	addi	r18,r18,1
    95dc:	a007883a 	mov	r3,r20
    95e0:	000b883a 	mov	r5,zero
    95e4:	1a000017 	ldw	r8,0(r3)
    95e8:	81c00017 	ldw	r7,0(r16)
    95ec:	84000104 	addi	r16,r16,4
    95f0:	41bfffcc 	andi	r6,r8,65535
    95f4:	38bfffcc 	andi	r2,r7,65535
    95f8:	314b883a 	add	r5,r6,r5
    95fc:	288dc83a 	sub	r6,r5,r2
    9600:	380ed43a 	srli	r7,r7,16
    9604:	400ad43a 	srli	r5,r8,16
    9608:	3005d43a 	srai	r2,r6,16
    960c:	1980000d 	sth	r6,0(r3)
    9610:	29cbc83a 	sub	r5,r5,r7
    9614:	288b883a 	add	r5,r5,r2
    9618:	1940008d 	sth	r5,2(r3)
    961c:	280bd43a 	srai	r5,r5,16
    9620:	18c00104 	addi	r3,r3,4
    9624:	9c3fef2e 	bgeu	r19,r16,95e4 <_gp+0xfffecd68>
    9628:	88800144 	addi	r2,r17,5
    962c:	1085883a 	add	r2,r2,r2
    9630:	1085883a 	add	r2,r2,r2
    9634:	a885883a 	add	r2,r21,r2
    9638:	10c00017 	ldw	r3,0(r2)
    963c:	18000b1e 	bne	r3,zero,966c <quorem+0x1d0>
    9640:	10ffff04 	addi	r3,r2,-4
    9644:	a0c0082e 	bgeu	r20,r3,9668 <quorem+0x1cc>
    9648:	10bfff17 	ldw	r2,-4(r2)
    964c:	10000326 	beq	r2,zero,965c <quorem+0x1c0>
    9650:	00000506 	br	9668 <quorem+0x1cc>
    9654:	18800017 	ldw	r2,0(r3)
    9658:	1000031e 	bne	r2,zero,9668 <quorem+0x1cc>
    965c:	18ffff04 	addi	r3,r3,-4
    9660:	8c7fffc4 	addi	r17,r17,-1
    9664:	a0fffb36 	bltu	r20,r3,9654 <_gp+0xfffecdd8>
    9668:	ac400415 	stw	r17,16(r21)
    966c:	9005883a 	mov	r2,r18
    9670:	dfc00817 	ldw	ra,32(sp)
    9674:	ddc00717 	ldw	r23,28(sp)
    9678:	dd800617 	ldw	r22,24(sp)
    967c:	dd400517 	ldw	r21,20(sp)
    9680:	dd000417 	ldw	r20,16(sp)
    9684:	dcc00317 	ldw	r19,12(sp)
    9688:	dc800217 	ldw	r18,8(sp)
    968c:	dc400117 	ldw	r17,4(sp)
    9690:	dc000017 	ldw	r16,0(sp)
    9694:	dec00904 	addi	sp,sp,36
    9698:	f800283a 	ret
    969c:	0005883a 	mov	r2,zero
    96a0:	003ff306 	br	9670 <_gp+0xfffecdf4>

000096a4 <_dtoa_r>:
    96a4:	20801017 	ldw	r2,64(r4)
    96a8:	deffdf04 	addi	sp,sp,-132
    96ac:	dcc01a15 	stw	r19,104(sp)
    96b0:	dc801915 	stw	r18,100(sp)
    96b4:	dc401815 	stw	r17,96(sp)
    96b8:	dc001715 	stw	r16,92(sp)
    96bc:	dfc02015 	stw	ra,128(sp)
    96c0:	df001f15 	stw	fp,124(sp)
    96c4:	ddc01e15 	stw	r23,120(sp)
    96c8:	dd801d15 	stw	r22,116(sp)
    96cc:	dd401c15 	stw	r21,112(sp)
    96d0:	dd001b15 	stw	r20,108(sp)
    96d4:	d9400315 	stw	r5,12(sp)
    96d8:	d9c00415 	stw	r7,16(sp)
    96dc:	2021883a 	mov	r16,r4
    96e0:	3025883a 	mov	r18,r6
    96e4:	dcc02317 	ldw	r19,140(sp)
    96e8:	3023883a 	mov	r17,r6
    96ec:	10000826 	beq	r2,zero,9710 <_dtoa_r+0x6c>
    96f0:	20c01117 	ldw	r3,68(r4)
    96f4:	01800044 	movi	r6,1
    96f8:	100b883a 	mov	r5,r2
    96fc:	30cc983a 	sll	r6,r6,r3
    9700:	10c00115 	stw	r3,4(r2)
    9704:	11800215 	stw	r6,8(r2)
    9708:	000c14c0 	call	c14c <_Bfree>
    970c:	80001015 	stw	zero,64(r16)
    9710:	90002f16 	blt	r18,zero,97d0 <_dtoa_r+0x12c>
    9714:	98000015 	stw	zero,0(r19)
    9718:	90dffc2c 	andhi	r3,r18,32752
    971c:	009ffc34 	movhi	r2,32752
    9720:	18801c26 	beq	r3,r2,9794 <_dtoa_r+0xf0>
    9724:	d9000317 	ldw	r4,12(sp)
    9728:	880b883a 	mov	r5,r17
    972c:	000d883a 	mov	r6,zero
    9730:	000f883a 	mov	r7,zero
    9734:	000f20c0 	call	f20c <__nedf2>
    9738:	10002c1e 	bne	r2,zero,97ec <_dtoa_r+0x148>
    973c:	d9002217 	ldw	r4,136(sp)
    9740:	d9c02417 	ldw	r7,144(sp)
    9744:	00800044 	movi	r2,1
    9748:	20800015 	stw	r2,0(r4)
    974c:	38019426 	beq	r7,zero,9da0 <_dtoa_r+0x6fc>
    9750:	00800074 	movhi	r2,1
    9754:	108a8644 	addi	r2,r2,10777
    9758:	38800015 	stw	r2,0(r7)
    975c:	15ffffc4 	addi	r23,r2,-1
    9760:	b805883a 	mov	r2,r23
    9764:	dfc02017 	ldw	ra,128(sp)
    9768:	df001f17 	ldw	fp,124(sp)
    976c:	ddc01e17 	ldw	r23,120(sp)
    9770:	dd801d17 	ldw	r22,116(sp)
    9774:	dd401c17 	ldw	r21,112(sp)
    9778:	dd001b17 	ldw	r20,108(sp)
    977c:	dcc01a17 	ldw	r19,104(sp)
    9780:	dc801917 	ldw	r18,100(sp)
    9784:	dc401817 	ldw	r17,96(sp)
    9788:	dc001717 	ldw	r16,92(sp)
    978c:	dec02104 	addi	sp,sp,132
    9790:	f800283a 	ret
    9794:	d8c02217 	ldw	r3,136(sp)
    9798:	d9000317 	ldw	r4,12(sp)
    979c:	0089c3c4 	movi	r2,9999
    97a0:	18800015 	stw	r2,0(r3)
    97a4:	20016c26 	beq	r4,zero,9d58 <_dtoa_r+0x6b4>
    97a8:	05c00074 	movhi	r23,1
    97ac:	bdcb3204 	addi	r23,r23,11464
    97b0:	d9c02417 	ldw	r7,144(sp)
    97b4:	383fea26 	beq	r7,zero,9760 <_gp+0xfffecee4>
    97b8:	b88000c7 	ldb	r2,3(r23)
    97bc:	10016d1e 	bne	r2,zero,9d74 <_dtoa_r+0x6d0>
    97c0:	b88000c4 	addi	r2,r23,3
    97c4:	d8c02417 	ldw	r3,144(sp)
    97c8:	18800015 	stw	r2,0(r3)
    97cc:	003fe406 	br	9760 <_gp+0xfffecee4>
    97d0:	04600034 	movhi	r17,32768
    97d4:	8c7fffc4 	addi	r17,r17,-1
    97d8:	9462703a 	and	r17,r18,r17
    97dc:	00800044 	movi	r2,1
    97e0:	98800015 	stw	r2,0(r19)
    97e4:	8825883a 	mov	r18,r17
    97e8:	003fcb06 	br	9718 <_gp+0xfffece9c>
    97ec:	d9400317 	ldw	r5,12(sp)
    97f0:	9028d53a 	srli	r20,r18,20
    97f4:	d8800204 	addi	r2,sp,8
    97f8:	d8800015 	stw	r2,0(sp)
    97fc:	8009883a 	mov	r4,r16
    9800:	880d883a 	mov	r6,r17
    9804:	d9c00104 	addi	r7,sp,4
    9808:	000ccf00 	call	ccf0 <__d2b>
    980c:	a501ffcc 	andi	r20,r20,2047
    9810:	1039883a 	mov	fp,r2
    9814:	a001591e 	bne	r20,zero,9d7c <_dtoa_r+0x6d8>
    9818:	dd400217 	ldw	r21,8(sp)
    981c:	dd000117 	ldw	r20,4(sp)
    9820:	00befbc4 	movi	r2,-1041
    9824:	ad29883a 	add	r20,r21,r20
    9828:	a082d216 	blt	r20,r2,a374 <_dtoa_r+0xcd0>
    982c:	d8c00317 	ldw	r3,12(sp)
    9830:	013f0384 	movi	r4,-1010
    9834:	2509c83a 	sub	r4,r4,r20
    9838:	a0810484 	addi	r2,r20,1042
    983c:	9124983a 	sll	r18,r18,r4
    9840:	1884d83a 	srl	r2,r3,r2
    9844:	9088b03a 	or	r4,r18,r2
    9848:	000f5240 	call	f524 <__floatunsidf>
    984c:	1009883a 	mov	r4,r2
    9850:	017f8434 	movhi	r5,65040
    9854:	00800044 	movi	r2,1
    9858:	194b883a 	add	r5,r3,r5
    985c:	a53fffc4 	addi	r20,r20,-1
    9860:	d8800f15 	stw	r2,60(sp)
    9864:	000d883a 	mov	r6,zero
    9868:	01cffe34 	movhi	r7,16376
    986c:	000ee6c0 	call	ee6c <__subdf3>
    9870:	1009883a 	mov	r4,r2
    9874:	180b883a 	mov	r5,r3
    9878:	0198dbf4 	movhi	r6,25455
    987c:	3190d844 	addi	r6,r6,17249
    9880:	01cff4f4 	movhi	r7,16339
    9884:	39e1e9c4 	addi	r7,r7,-30809
    9888:	000eecc0 	call	eecc <__muldf3>
    988c:	180b883a 	mov	r5,r3
    9890:	01a2d874 	movhi	r6,35681
    9894:	31b22cc4 	addi	r6,r6,-14157
    9898:	01cff1f4 	movhi	r7,16327
    989c:	39e28a04 	addi	r7,r7,-30168
    98a0:	1009883a 	mov	r4,r2
    98a4:	000ee180 	call	ee18 <__adddf3>
    98a8:	a009883a 	mov	r4,r20
    98ac:	1027883a 	mov	r19,r2
    98b0:	1825883a 	mov	r18,r3
    98b4:	000f38c0 	call	f38c <__floatsidf>
    98b8:	1009883a 	mov	r4,r2
    98bc:	180b883a 	mov	r5,r3
    98c0:	019427f4 	movhi	r6,20639
    98c4:	319e7ec4 	addi	r6,r6,31227
    98c8:	01cff4f4 	movhi	r7,16339
    98cc:	39d104c4 	addi	r7,r7,17427
    98d0:	000eecc0 	call	eecc <__muldf3>
    98d4:	9809883a 	mov	r4,r19
    98d8:	900b883a 	mov	r5,r18
    98dc:	100d883a 	mov	r6,r2
    98e0:	180f883a 	mov	r7,r3
    98e4:	000ee180 	call	ee18 <__adddf3>
    98e8:	1009883a 	mov	r4,r2
    98ec:	180b883a 	mov	r5,r3
    98f0:	1027883a 	mov	r19,r2
    98f4:	1825883a 	mov	r18,r3
    98f8:	000f4600 	call	f460 <__fixdfsi>
    98fc:	9809883a 	mov	r4,r19
    9900:	900b883a 	mov	r5,r18
    9904:	000d883a 	mov	r6,zero
    9908:	000f883a 	mov	r7,zero
    990c:	d8800615 	stw	r2,24(sp)
    9910:	000f3300 	call	f330 <__ltdf2>
    9914:	10027e16 	blt	r2,zero,a310 <_dtoa_r+0xc6c>
    9918:	d8c00617 	ldw	r3,24(sp)
    991c:	00800584 	movi	r2,22
    9920:	10c26c36 	bltu	r2,r3,a2d4 <_dtoa_r+0xc30>
    9924:	180490fa 	slli	r2,r3,3
    9928:	00c00074 	movhi	r3,1
    992c:	18cb5804 	addi	r3,r3,11616
    9930:	d9800317 	ldw	r6,12(sp)
    9934:	1885883a 	add	r2,r3,r2
    9938:	11000017 	ldw	r4,0(r2)
    993c:	11400117 	ldw	r5,4(r2)
    9940:	880f883a 	mov	r7,r17
    9944:	000f2680 	call	f268 <__gtdf2>
    9948:	00828f0e 	bge	zero,r2,a388 <_dtoa_r+0xce4>
    994c:	d8800617 	ldw	r2,24(sp)
    9950:	d8000d15 	stw	zero,52(sp)
    9954:	10bfffc4 	addi	r2,r2,-1
    9958:	d8800615 	stw	r2,24(sp)
    995c:	ad29c83a 	sub	r20,r21,r20
    9960:	a53fffc4 	addi	r20,r20,-1
    9964:	a0026616 	blt	r20,zero,a300 <_dtoa_r+0xc5c>
    9968:	dd000715 	stw	r20,28(sp)
    996c:	d8000815 	stw	zero,32(sp)
    9970:	d8800617 	ldw	r2,24(sp)
    9974:	10025a16 	blt	r2,zero,a2e0 <_dtoa_r+0xc3c>
    9978:	d8c00717 	ldw	r3,28(sp)
    997c:	d8800b15 	stw	r2,44(sp)
    9980:	d8000a15 	stw	zero,40(sp)
    9984:	1887883a 	add	r3,r3,r2
    9988:	d8c00715 	stw	r3,28(sp)
    998c:	d9c00417 	ldw	r7,16(sp)
    9990:	00800244 	movi	r2,9
    9994:	11c10536 	bltu	r2,r7,9dac <_dtoa_r+0x708>
    9998:	00800144 	movi	r2,5
    999c:	11c4c60e 	bge	r2,r7,acb8 <_dtoa_r+0x1614>
    99a0:	39ffff04 	addi	r7,r7,-4
    99a4:	d9c00415 	stw	r7,16(sp)
    99a8:	0027883a 	mov	r19,zero
    99ac:	d9c00417 	ldw	r7,16(sp)
    99b0:	008000c4 	movi	r2,3
    99b4:	3883a226 	beq	r7,r2,a840 <_dtoa_r+0x119c>
    99b8:	11c2bc16 	blt	r2,r7,a4ac <_dtoa_r+0xe08>
    99bc:	00800084 	movi	r2,2
    99c0:	3880fb1e 	bne	r7,r2,9db0 <_dtoa_r+0x70c>
    99c4:	d8000c15 	stw	zero,48(sp)
    99c8:	d9002117 	ldw	r4,132(sp)
    99cc:	0103ae0e 	bge	zero,r4,a888 <_dtoa_r+0x11e4>
    99d0:	2025883a 	mov	r18,r4
    99d4:	d9000e15 	stw	r4,56(sp)
    99d8:	d9000915 	stw	r4,36(sp)
    99dc:	80001115 	stw	zero,68(r16)
    99e0:	008005c4 	movi	r2,23
    99e4:	1484b22e 	bgeu	r2,r18,acb0 <_dtoa_r+0x160c>
    99e8:	00c00044 	movi	r3,1
    99ec:	00800104 	movi	r2,4
    99f0:	1085883a 	add	r2,r2,r2
    99f4:	11000504 	addi	r4,r2,20
    99f8:	180b883a 	mov	r5,r3
    99fc:	18c00044 	addi	r3,r3,1
    9a00:	913ffb2e 	bgeu	r18,r4,99f0 <_gp+0xfffed174>
    9a04:	81401115 	stw	r5,68(r16)
    9a08:	8009883a 	mov	r4,r16
    9a0c:	000c0a40 	call	c0a4 <_Balloc>
    9a10:	102f883a 	mov	r23,r2
    9a14:	80801015 	stw	r2,64(r16)
    9a18:	00800384 	movi	r2,14
    9a1c:	1480f036 	bltu	r2,r18,9de0 <_dtoa_r+0x73c>
    9a20:	9800ef26 	beq	r19,zero,9de0 <_dtoa_r+0x73c>
    9a24:	d8800617 	ldw	r2,24(sp)
    9a28:	00839c0e 	bge	zero,r2,a89c <_dtoa_r+0x11f8>
    9a2c:	d8c00617 	ldw	r3,24(sp)
    9a30:	108003cc 	andi	r2,r2,15
    9a34:	100490fa 	slli	r2,r2,3
    9a38:	182bd13a 	srai	r21,r3,4
    9a3c:	00c00074 	movhi	r3,1
    9a40:	18cb5804 	addi	r3,r3,11616
    9a44:	1885883a 	add	r2,r3,r2
    9a48:	a8c0040c 	andi	r3,r21,16
    9a4c:	12800017 	ldw	r10,0(r2)
    9a50:	15800117 	ldw	r22,4(r2)
    9a54:	18038726 	beq	r3,zero,a874 <_dtoa_r+0x11d0>
    9a58:	00800074 	movhi	r2,1
    9a5c:	108b4e04 	addi	r2,r2,11576
    9a60:	11800817 	ldw	r6,32(r2)
    9a64:	11c00917 	ldw	r7,36(r2)
    9a68:	d9000317 	ldw	r4,12(sp)
    9a6c:	880b883a 	mov	r5,r17
    9a70:	da801515 	stw	r10,84(sp)
    9a74:	0005be40 	call	5be4 <__divdf3>
    9a78:	da801517 	ldw	r10,84(sp)
    9a7c:	d8801015 	stw	r2,64(sp)
    9a80:	1829883a 	mov	r20,r3
    9a84:	ad4003cc 	andi	r21,r21,15
    9a88:	048000c4 	movi	r18,3
    9a8c:	a8001126 	beq	r21,zero,9ad4 <_dtoa_r+0x430>
    9a90:	04c00074 	movhi	r19,1
    9a94:	9ccb4e04 	addi	r19,r19,11576
    9a98:	5005883a 	mov	r2,r10
    9a9c:	b007883a 	mov	r3,r22
    9aa0:	a980004c 	andi	r6,r21,1
    9aa4:	1009883a 	mov	r4,r2
    9aa8:	a82bd07a 	srai	r21,r21,1
    9aac:	180b883a 	mov	r5,r3
    9ab0:	30000426 	beq	r6,zero,9ac4 <_dtoa_r+0x420>
    9ab4:	99800017 	ldw	r6,0(r19)
    9ab8:	99c00117 	ldw	r7,4(r19)
    9abc:	94800044 	addi	r18,r18,1
    9ac0:	000eecc0 	call	eecc <__muldf3>
    9ac4:	9cc00204 	addi	r19,r19,8
    9ac8:	a83ff51e 	bne	r21,zero,9aa0 <_gp+0xfffed224>
    9acc:	1015883a 	mov	r10,r2
    9ad0:	182d883a 	mov	r22,r3
    9ad4:	d9001017 	ldw	r4,64(sp)
    9ad8:	a00b883a 	mov	r5,r20
    9adc:	500d883a 	mov	r6,r10
    9ae0:	b00f883a 	mov	r7,r22
    9ae4:	0005be40 	call	5be4 <__divdf3>
    9ae8:	1027883a 	mov	r19,r2
    9aec:	1829883a 	mov	r20,r3
    9af0:	d8c00d17 	ldw	r3,52(sp)
    9af4:	18000626 	beq	r3,zero,9b10 <_dtoa_r+0x46c>
    9af8:	9809883a 	mov	r4,r19
    9afc:	a00b883a 	mov	r5,r20
    9b00:	000d883a 	mov	r6,zero
    9b04:	01cffc34 	movhi	r7,16368
    9b08:	000f3300 	call	f330 <__ltdf2>
    9b0c:	10040e16 	blt	r2,zero,ab48 <_dtoa_r+0x14a4>
    9b10:	9009883a 	mov	r4,r18
    9b14:	000f38c0 	call	f38c <__floatsidf>
    9b18:	1009883a 	mov	r4,r2
    9b1c:	180b883a 	mov	r5,r3
    9b20:	980d883a 	mov	r6,r19
    9b24:	a00f883a 	mov	r7,r20
    9b28:	000eecc0 	call	eecc <__muldf3>
    9b2c:	1009883a 	mov	r4,r2
    9b30:	180b883a 	mov	r5,r3
    9b34:	000d883a 	mov	r6,zero
    9b38:	01d00734 	movhi	r7,16412
    9b3c:	000ee180 	call	ee18 <__adddf3>
    9b40:	057f3034 	movhi	r21,64704
    9b44:	1d6b883a 	add	r21,r3,r21
    9b48:	d8c00917 	ldw	r3,36(sp)
    9b4c:	1025883a 	mov	r18,r2
    9b50:	18031f26 	beq	r3,zero,a7d0 <_dtoa_r+0x112c>
    9b54:	d8800617 	ldw	r2,24(sp)
    9b58:	dac00917 	ldw	r11,36(sp)
    9b5c:	d8801315 	stw	r2,76(sp)
    9b60:	d8c00c17 	ldw	r3,48(sp)
    9b64:	18039026 	beq	r3,zero,a9a8 <_dtoa_r+0x1304>
    9b68:	58bfffc4 	addi	r2,r11,-1
    9b6c:	100490fa 	slli	r2,r2,3
    9b70:	00c00074 	movhi	r3,1
    9b74:	18cb5804 	addi	r3,r3,11616
    9b78:	0009883a 	mov	r4,zero
    9b7c:	1885883a 	add	r2,r3,r2
    9b80:	11800017 	ldw	r6,0(r2)
    9b84:	11c00117 	ldw	r7,4(r2)
    9b88:	014ff834 	movhi	r5,16352
    9b8c:	dac01615 	stw	r11,88(sp)
    9b90:	0005be40 	call	5be4 <__divdf3>
    9b94:	900d883a 	mov	r6,r18
    9b98:	a80f883a 	mov	r7,r21
    9b9c:	1009883a 	mov	r4,r2
    9ba0:	180b883a 	mov	r5,r3
    9ba4:	000ee6c0 	call	ee6c <__subdf3>
    9ba8:	a00b883a 	mov	r5,r20
    9bac:	9809883a 	mov	r4,r19
    9bb0:	182b883a 	mov	r21,r3
    9bb4:	d8801015 	stw	r2,64(sp)
    9bb8:	000f4600 	call	f460 <__fixdfsi>
    9bbc:	1009883a 	mov	r4,r2
    9bc0:	d8801515 	stw	r2,84(sp)
    9bc4:	000f38c0 	call	f38c <__floatsidf>
    9bc8:	9809883a 	mov	r4,r19
    9bcc:	a00b883a 	mov	r5,r20
    9bd0:	100d883a 	mov	r6,r2
    9bd4:	180f883a 	mov	r7,r3
    9bd8:	000ee6c0 	call	ee6c <__subdf3>
    9bdc:	da401517 	ldw	r9,84(sp)
    9be0:	d9001017 	ldw	r4,64(sp)
    9be4:	a80b883a 	mov	r5,r21
    9be8:	4d000c04 	addi	r20,r9,48
    9bec:	bd000005 	stb	r20,0(r23)
    9bf0:	100d883a 	mov	r6,r2
    9bf4:	180f883a 	mov	r7,r3
    9bf8:	bd800044 	addi	r22,r23,1
    9bfc:	1025883a 	mov	r18,r2
    9c00:	1827883a 	mov	r19,r3
    9c04:	000f2680 	call	f268 <__gtdf2>
    9c08:	00842216 	blt	zero,r2,ac94 <_dtoa_r+0x15f0>
    9c0c:	0009883a 	mov	r4,zero
    9c10:	014ffc34 	movhi	r5,16368
    9c14:	900d883a 	mov	r6,r18
    9c18:	980f883a 	mov	r7,r19
    9c1c:	000ee6c0 	call	ee6c <__subdf3>
    9c20:	d9001017 	ldw	r4,64(sp)
    9c24:	a80b883a 	mov	r5,r21
    9c28:	100d883a 	mov	r6,r2
    9c2c:	180f883a 	mov	r7,r3
    9c30:	000f2680 	call	f268 <__gtdf2>
    9c34:	dac01617 	ldw	r11,88(sp)
    9c38:	00841316 	blt	zero,r2,ac88 <_dtoa_r+0x15e4>
    9c3c:	00800044 	movi	r2,1
    9c40:	12c0670e 	bge	r2,r11,9de0 <_dtoa_r+0x73c>
    9c44:	bad7883a 	add	r11,r23,r11
    9c48:	df001115 	stw	fp,68(sp)
    9c4c:	dc401215 	stw	r17,72(sp)
    9c50:	5839883a 	mov	fp,r11
    9c54:	dc401017 	ldw	r17,64(sp)
    9c58:	00000806 	br	9c7c <_dtoa_r+0x5d8>
    9c5c:	000ee6c0 	call	ee6c <__subdf3>
    9c60:	1009883a 	mov	r4,r2
    9c64:	180b883a 	mov	r5,r3
    9c68:	880d883a 	mov	r6,r17
    9c6c:	a80f883a 	mov	r7,r21
    9c70:	000f3300 	call	f330 <__ltdf2>
    9c74:	1003ee16 	blt	r2,zero,ac30 <_dtoa_r+0x158c>
    9c78:	b703f126 	beq	r22,fp,ac40 <_dtoa_r+0x159c>
    9c7c:	8809883a 	mov	r4,r17
    9c80:	a80b883a 	mov	r5,r21
    9c84:	000d883a 	mov	r6,zero
    9c88:	01d00934 	movhi	r7,16420
    9c8c:	000eecc0 	call	eecc <__muldf3>
    9c90:	000d883a 	mov	r6,zero
    9c94:	01d00934 	movhi	r7,16420
    9c98:	9009883a 	mov	r4,r18
    9c9c:	980b883a 	mov	r5,r19
    9ca0:	1023883a 	mov	r17,r2
    9ca4:	182b883a 	mov	r21,r3
    9ca8:	000eecc0 	call	eecc <__muldf3>
    9cac:	180b883a 	mov	r5,r3
    9cb0:	1009883a 	mov	r4,r2
    9cb4:	1825883a 	mov	r18,r3
    9cb8:	1027883a 	mov	r19,r2
    9cbc:	000f4600 	call	f460 <__fixdfsi>
    9cc0:	1009883a 	mov	r4,r2
    9cc4:	1029883a 	mov	r20,r2
    9cc8:	000f38c0 	call	f38c <__floatsidf>
    9ccc:	9809883a 	mov	r4,r19
    9cd0:	900b883a 	mov	r5,r18
    9cd4:	100d883a 	mov	r6,r2
    9cd8:	180f883a 	mov	r7,r3
    9cdc:	000ee6c0 	call	ee6c <__subdf3>
    9ce0:	a5000c04 	addi	r20,r20,48
    9ce4:	b5000005 	stb	r20,0(r22)
    9ce8:	1009883a 	mov	r4,r2
    9cec:	180b883a 	mov	r5,r3
    9cf0:	880d883a 	mov	r6,r17
    9cf4:	a80f883a 	mov	r7,r21
    9cf8:	1025883a 	mov	r18,r2
    9cfc:	1827883a 	mov	r19,r3
    9d00:	000f3300 	call	f330 <__ltdf2>
    9d04:	b5800044 	addi	r22,r22,1
    9d08:	0009883a 	mov	r4,zero
    9d0c:	014ffc34 	movhi	r5,16368
    9d10:	900d883a 	mov	r6,r18
    9d14:	980f883a 	mov	r7,r19
    9d18:	103fd00e 	bge	r2,zero,9c5c <_gp+0xfffed3e0>
    9d1c:	d9001317 	ldw	r4,76(sp)
    9d20:	df001117 	ldw	fp,68(sp)
    9d24:	d9000615 	stw	r4,24(sp)
    9d28:	8009883a 	mov	r4,r16
    9d2c:	e00b883a 	mov	r5,fp
    9d30:	000c14c0 	call	c14c <_Bfree>
    9d34:	d9c00617 	ldw	r7,24(sp)
    9d38:	d8c02217 	ldw	r3,136(sp)
    9d3c:	d9002417 	ldw	r4,144(sp)
    9d40:	b0000005 	stb	zero,0(r22)
    9d44:	38800044 	addi	r2,r7,1
    9d48:	18800015 	stw	r2,0(r3)
    9d4c:	203e8426 	beq	r4,zero,9760 <_gp+0xfffecee4>
    9d50:	25800015 	stw	r22,0(r4)
    9d54:	003e8206 	br	9760 <_gp+0xfffecee4>
    9d58:	00800434 	movhi	r2,16
    9d5c:	10bfffc4 	addi	r2,r2,-1
    9d60:	90a4703a 	and	r18,r18,r2
    9d64:	903e901e 	bne	r18,zero,97a8 <_gp+0xfffecf2c>
    9d68:	05c00074 	movhi	r23,1
    9d6c:	bdcb2f04 	addi	r23,r23,11452
    9d70:	003e8f06 	br	97b0 <_gp+0xfffecf34>
    9d74:	b8800204 	addi	r2,r23,8
    9d78:	003e9206 	br	97c4 <_gp+0xfffecf48>
    9d7c:	01400434 	movhi	r5,16
    9d80:	297fffc4 	addi	r5,r5,-1
    9d84:	894a703a 	and	r5,r17,r5
    9d88:	d9000317 	ldw	r4,12(sp)
    9d8c:	294ffc34 	orhi	r5,r5,16368
    9d90:	a53f0044 	addi	r20,r20,-1023
    9d94:	dd400217 	ldw	r21,8(sp)
    9d98:	d8000f15 	stw	zero,60(sp)
    9d9c:	003eb106 	br	9864 <_gp+0xfffecfe8>
    9da0:	05c00074 	movhi	r23,1
    9da4:	bdca8604 	addi	r23,r23,10776
    9da8:	003e6d06 	br	9760 <_gp+0xfffecee4>
    9dac:	d8000415 	stw	zero,16(sp)
    9db0:	80001115 	stw	zero,68(r16)
    9db4:	8009883a 	mov	r4,r16
    9db8:	000b883a 	mov	r5,zero
    9dbc:	000c0a40 	call	c0a4 <_Balloc>
    9dc0:	01ffffc4 	movi	r7,-1
    9dc4:	102f883a 	mov	r23,r2
    9dc8:	80801015 	stw	r2,64(r16)
    9dcc:	00800044 	movi	r2,1
    9dd0:	d9c00915 	stw	r7,36(sp)
    9dd4:	d8002115 	stw	zero,132(sp)
    9dd8:	d9c00e15 	stw	r7,56(sp)
    9ddc:	d8800c15 	stw	r2,48(sp)
    9de0:	d8800117 	ldw	r2,4(sp)
    9de4:	10008b16 	blt	r2,zero,a014 <_dtoa_r+0x970>
    9de8:	d9000617 	ldw	r4,24(sp)
    9dec:	00c00384 	movi	r3,14
    9df0:	19008816 	blt	r3,r4,a014 <_dtoa_r+0x970>
    9df4:	200490fa 	slli	r2,r4,3
    9df8:	d9c02117 	ldw	r7,132(sp)
    9dfc:	00c00074 	movhi	r3,1
    9e00:	18cb5804 	addi	r3,r3,11616
    9e04:	1885883a 	add	r2,r3,r2
    9e08:	14800017 	ldw	r18,0(r2)
    9e0c:	14c00117 	ldw	r19,4(r2)
    9e10:	3801c916 	blt	r7,zero,a538 <_dtoa_r+0xe94>
    9e14:	d9000317 	ldw	r4,12(sp)
    9e18:	900d883a 	mov	r6,r18
    9e1c:	980f883a 	mov	r7,r19
    9e20:	880b883a 	mov	r5,r17
    9e24:	0005be40 	call	5be4 <__divdf3>
    9e28:	180b883a 	mov	r5,r3
    9e2c:	1009883a 	mov	r4,r2
    9e30:	000f4600 	call	f460 <__fixdfsi>
    9e34:	1009883a 	mov	r4,r2
    9e38:	102b883a 	mov	r21,r2
    9e3c:	000f38c0 	call	f38c <__floatsidf>
    9e40:	1009883a 	mov	r4,r2
    9e44:	180b883a 	mov	r5,r3
    9e48:	900d883a 	mov	r6,r18
    9e4c:	980f883a 	mov	r7,r19
    9e50:	000eecc0 	call	eecc <__muldf3>
    9e54:	d9000317 	ldw	r4,12(sp)
    9e58:	880b883a 	mov	r5,r17
    9e5c:	100d883a 	mov	r6,r2
    9e60:	180f883a 	mov	r7,r3
    9e64:	000ee6c0 	call	ee6c <__subdf3>
    9e68:	d9c00917 	ldw	r7,36(sp)
    9e6c:	1009883a 	mov	r4,r2
    9e70:	a8800c04 	addi	r2,r21,48
    9e74:	b8800005 	stb	r2,0(r23)
    9e78:	01800044 	movi	r6,1
    9e7c:	180b883a 	mov	r5,r3
    9e80:	2005883a 	mov	r2,r4
    9e84:	bd800044 	addi	r22,r23,1
    9e88:	39803726 	beq	r7,r6,9f68 <_dtoa_r+0x8c4>
    9e8c:	000d883a 	mov	r6,zero
    9e90:	01d00934 	movhi	r7,16420
    9e94:	000eecc0 	call	eecc <__muldf3>
    9e98:	1009883a 	mov	r4,r2
    9e9c:	180b883a 	mov	r5,r3
    9ea0:	000d883a 	mov	r6,zero
    9ea4:	000f883a 	mov	r7,zero
    9ea8:	1029883a 	mov	r20,r2
    9eac:	1823883a 	mov	r17,r3
    9eb0:	000f1b00 	call	f1b0 <__eqdf2>
    9eb4:	103f9c26 	beq	r2,zero,9d28 <_gp+0xfffed4ac>
    9eb8:	dd400917 	ldw	r21,36(sp)
    9ebc:	dc000415 	stw	r16,16(sp)
    9ec0:	00000906 	br	9ee8 <_dtoa_r+0x844>
    9ec4:	000eecc0 	call	eecc <__muldf3>
    9ec8:	1009883a 	mov	r4,r2
    9ecc:	180b883a 	mov	r5,r3
    9ed0:	000d883a 	mov	r6,zero
    9ed4:	000f883a 	mov	r7,zero
    9ed8:	1029883a 	mov	r20,r2
    9edc:	1823883a 	mov	r17,r3
    9ee0:	000f1b00 	call	f1b0 <__eqdf2>
    9ee4:	10022926 	beq	r2,zero,a78c <_dtoa_r+0x10e8>
    9ee8:	900d883a 	mov	r6,r18
    9eec:	980f883a 	mov	r7,r19
    9ef0:	a009883a 	mov	r4,r20
    9ef4:	880b883a 	mov	r5,r17
    9ef8:	0005be40 	call	5be4 <__divdf3>
    9efc:	180b883a 	mov	r5,r3
    9f00:	1009883a 	mov	r4,r2
    9f04:	000f4600 	call	f460 <__fixdfsi>
    9f08:	1009883a 	mov	r4,r2
    9f0c:	1021883a 	mov	r16,r2
    9f10:	000f38c0 	call	f38c <__floatsidf>
    9f14:	1009883a 	mov	r4,r2
    9f18:	180b883a 	mov	r5,r3
    9f1c:	900d883a 	mov	r6,r18
    9f20:	980f883a 	mov	r7,r19
    9f24:	000eecc0 	call	eecc <__muldf3>
    9f28:	a009883a 	mov	r4,r20
    9f2c:	880b883a 	mov	r5,r17
    9f30:	100d883a 	mov	r6,r2
    9f34:	180f883a 	mov	r7,r3
    9f38:	000ee6c0 	call	ee6c <__subdf3>
    9f3c:	82400c04 	addi	r9,r16,48
    9f40:	b2400005 	stb	r9,0(r22)
    9f44:	b5800044 	addi	r22,r22,1
    9f48:	b5d3c83a 	sub	r9,r22,r23
    9f4c:	000d883a 	mov	r6,zero
    9f50:	01d00934 	movhi	r7,16420
    9f54:	1009883a 	mov	r4,r2
    9f58:	180b883a 	mov	r5,r3
    9f5c:	aa7fd91e 	bne	r21,r9,9ec4 <_gp+0xfffed648>
    9f60:	802b883a 	mov	r21,r16
    9f64:	dc000417 	ldw	r16,16(sp)
    9f68:	1009883a 	mov	r4,r2
    9f6c:	180b883a 	mov	r5,r3
    9f70:	100d883a 	mov	r6,r2
    9f74:	180f883a 	mov	r7,r3
    9f78:	000ee180 	call	ee18 <__adddf3>
    9f7c:	9009883a 	mov	r4,r18
    9f80:	980b883a 	mov	r5,r19
    9f84:	100d883a 	mov	r6,r2
    9f88:	180f883a 	mov	r7,r3
    9f8c:	1023883a 	mov	r17,r2
    9f90:	1829883a 	mov	r20,r3
    9f94:	000f3300 	call	f330 <__ltdf2>
    9f98:	10000816 	blt	r2,zero,9fbc <_dtoa_r+0x918>
    9f9c:	9009883a 	mov	r4,r18
    9fa0:	980b883a 	mov	r5,r19
    9fa4:	880d883a 	mov	r6,r17
    9fa8:	a00f883a 	mov	r7,r20
    9fac:	000f20c0 	call	f20c <__nedf2>
    9fb0:	103f5d1e 	bne	r2,zero,9d28 <_gp+0xfffed4ac>
    9fb4:	ad40004c 	andi	r21,r21,1
    9fb8:	a83f5b26 	beq	r21,zero,9d28 <_gp+0xfffed4ac>
    9fbc:	b53fffc3 	ldbu	r20,-1(r22)
    9fc0:	b0ffff84 	addi	r3,r22,-2
    9fc4:	01400e44 	movi	r5,57
    9fc8:	00000306 	br	9fd8 <_dtoa_r+0x934>
    9fcc:	1d000003 	ldbu	r20,0(r3)
    9fd0:	102d883a 	mov	r22,r2
    9fd4:	18ffffc4 	addi	r3,r3,-1
    9fd8:	a1003fcc 	andi	r4,r20,255
    9fdc:	2100201c 	xori	r4,r4,128
    9fe0:	213fe004 	addi	r4,r4,-128
    9fe4:	b0bfffc4 	addi	r2,r22,-1
    9fe8:	2142ca1e 	bne	r4,r5,ab14 <_dtoa_r+0x1470>
    9fec:	b8bff71e 	bne	r23,r2,9fcc <_gp+0xfffed750>
    9ff0:	d8800617 	ldw	r2,24(sp)
    9ff4:	05000c44 	movi	r20,49
    9ff8:	10800044 	addi	r2,r2,1
    9ffc:	d8800615 	stw	r2,24(sp)
    a000:	00800c04 	movi	r2,48
    a004:	b8800005 	stb	r2,0(r23)
    a008:	b805883a 	mov	r2,r23
    a00c:	15000005 	stb	r20,0(r2)
    a010:	003f4506 	br	9d28 <_gp+0xfffed4ac>
    a014:	d9c00c17 	ldw	r7,48(sp)
    a018:	3800c926 	beq	r7,zero,a340 <_dtoa_r+0xc9c>
    a01c:	d9c00417 	ldw	r7,16(sp)
    a020:	00c00044 	movi	r3,1
    a024:	19c16c0e 	bge	r3,r7,a5d8 <_dtoa_r+0xf34>
    a028:	d9000917 	ldw	r4,36(sp)
    a02c:	d9c00a17 	ldw	r7,40(sp)
    a030:	24ffffc4 	addi	r19,r4,-1
    a034:	3cc20716 	blt	r7,r19,a854 <_dtoa_r+0x11b0>
    a038:	3ce7c83a 	sub	r19,r7,r19
    a03c:	d9c00917 	ldw	r7,36(sp)
    a040:	3802ae16 	blt	r7,zero,aafc <_dtoa_r+0x1458>
    a044:	dc800817 	ldw	r18,32(sp)
    a048:	d8800917 	ldw	r2,36(sp)
    a04c:	d8c00817 	ldw	r3,32(sp)
    a050:	d9c00717 	ldw	r7,28(sp)
    a054:	8009883a 	mov	r4,r16
    a058:	1887883a 	add	r3,r3,r2
    a05c:	388f883a 	add	r7,r7,r2
    a060:	01400044 	movi	r5,1
    a064:	d8c00815 	stw	r3,32(sp)
    a068:	d9c00715 	stw	r7,28(sp)
    a06c:	000c4a40 	call	c4a4 <__i2b>
    a070:	102b883a 	mov	r21,r2
    a074:	90000a26 	beq	r18,zero,a0a0 <_dtoa_r+0x9fc>
    a078:	d8800717 	ldw	r2,28(sp)
    a07c:	0080080e 	bge	zero,r2,a0a0 <_dtoa_r+0x9fc>
    a080:	90812b16 	blt	r18,r2,a530 <_dtoa_r+0xe8c>
    a084:	d8c00817 	ldw	r3,32(sp)
    a088:	d9000717 	ldw	r4,28(sp)
    a08c:	90a5c83a 	sub	r18,r18,r2
    a090:	1887c83a 	sub	r3,r3,r2
    a094:	2089c83a 	sub	r4,r4,r2
    a098:	d8c00815 	stw	r3,32(sp)
    a09c:	d9000715 	stw	r4,28(sp)
    a0a0:	d9c00a17 	ldw	r7,40(sp)
    a0a4:	01c0140e 	bge	zero,r7,a0f8 <_dtoa_r+0xa54>
    a0a8:	d8800c17 	ldw	r2,48(sp)
    a0ac:	1001de26 	beq	r2,zero,a828 <_dtoa_r+0x1184>
    a0b0:	04c00e0e 	bge	zero,r19,a0ec <_dtoa_r+0xa48>
    a0b4:	a80b883a 	mov	r5,r21
    a0b8:	8009883a 	mov	r4,r16
    a0bc:	980d883a 	mov	r6,r19
    a0c0:	000c6c00 	call	c6c0 <__pow5mult>
    a0c4:	e00d883a 	mov	r6,fp
    a0c8:	8009883a 	mov	r4,r16
    a0cc:	100b883a 	mov	r5,r2
    a0d0:	102b883a 	mov	r21,r2
    a0d4:	000c4e00 	call	c4e0 <__multiply>
    a0d8:	1029883a 	mov	r20,r2
    a0dc:	e00b883a 	mov	r5,fp
    a0e0:	8009883a 	mov	r4,r16
    a0e4:	000c14c0 	call	c14c <_Bfree>
    a0e8:	a039883a 	mov	fp,r20
    a0ec:	d8c00a17 	ldw	r3,40(sp)
    a0f0:	1ccdc83a 	sub	r6,r3,r19
    a0f4:	3001291e 	bne	r6,zero,a59c <_dtoa_r+0xef8>
    a0f8:	8009883a 	mov	r4,r16
    a0fc:	01400044 	movi	r5,1
    a100:	000c4a40 	call	c4a4 <__i2b>
    a104:	d9000b17 	ldw	r4,44(sp)
    a108:	1029883a 	mov	r20,r2
    a10c:	0100050e 	bge	zero,r4,a124 <_dtoa_r+0xa80>
    a110:	d9800b17 	ldw	r6,44(sp)
    a114:	8009883a 	mov	r4,r16
    a118:	100b883a 	mov	r5,r2
    a11c:	000c6c00 	call	c6c0 <__pow5mult>
    a120:	1029883a 	mov	r20,r2
    a124:	d9c00417 	ldw	r7,16(sp)
    a128:	00800044 	movi	r2,1
    a12c:	11c0f00e 	bge	r2,r7,a4f0 <_dtoa_r+0xe4c>
    a130:	0023883a 	mov	r17,zero
    a134:	d8800b17 	ldw	r2,44(sp)
    a138:	1001741e 	bne	r2,zero,a70c <_dtoa_r+0x1068>
    a13c:	00800044 	movi	r2,1
    a140:	d8c00717 	ldw	r3,28(sp)
    a144:	10c5883a 	add	r2,r2,r3
    a148:	108007cc 	andi	r2,r2,31
    a14c:	10008026 	beq	r2,zero,a350 <_dtoa_r+0xcac>
    a150:	01000804 	movi	r4,32
    a154:	2089c83a 	sub	r4,r4,r2
    a158:	00c00104 	movi	r3,4
    a15c:	1902d00e 	bge	r3,r4,aca0 <_dtoa_r+0x15fc>
    a160:	d9000817 	ldw	r4,32(sp)
    a164:	d9c00717 	ldw	r7,28(sp)
    a168:	00c00704 	movi	r3,28
    a16c:	1885c83a 	sub	r2,r3,r2
    a170:	2089883a 	add	r4,r4,r2
    a174:	388f883a 	add	r7,r7,r2
    a178:	d9000815 	stw	r4,32(sp)
    a17c:	90a5883a 	add	r18,r18,r2
    a180:	d9c00715 	stw	r7,28(sp)
    a184:	d9c00817 	ldw	r7,32(sp)
    a188:	01c0050e 	bge	zero,r7,a1a0 <_dtoa_r+0xafc>
    a18c:	e00b883a 	mov	r5,fp
    a190:	8009883a 	mov	r4,r16
    a194:	380d883a 	mov	r6,r7
    a198:	000c7ec0 	call	c7ec <__lshift>
    a19c:	1039883a 	mov	fp,r2
    a1a0:	d8800717 	ldw	r2,28(sp)
    a1a4:	0080050e 	bge	zero,r2,a1bc <_dtoa_r+0xb18>
    a1a8:	a00b883a 	mov	r5,r20
    a1ac:	8009883a 	mov	r4,r16
    a1b0:	100d883a 	mov	r6,r2
    a1b4:	000c7ec0 	call	c7ec <__lshift>
    a1b8:	1029883a 	mov	r20,r2
    a1bc:	d8c00d17 	ldw	r3,52(sp)
    a1c0:	1801401e 	bne	r3,zero,a6c4 <_dtoa_r+0x1020>
    a1c4:	d8800917 	ldw	r2,36(sp)
    a1c8:	00815a0e 	bge	zero,r2,a734 <_dtoa_r+0x1090>
    a1cc:	d8c00c17 	ldw	r3,48(sp)
    a1d0:	18006f1e 	bne	r3,zero,a390 <_dtoa_r+0xcec>
    a1d4:	b823883a 	mov	r17,r23
    a1d8:	dc800917 	ldw	r18,36(sp)
    a1dc:	00000206 	br	a1e8 <_dtoa_r+0xb44>
    a1e0:	000c1740 	call	c174 <__multadd>
    a1e4:	1039883a 	mov	fp,r2
    a1e8:	e009883a 	mov	r4,fp
    a1ec:	a00b883a 	mov	r5,r20
    a1f0:	000949c0 	call	949c <quorem>
    a1f4:	10800c04 	addi	r2,r2,48
    a1f8:	88800005 	stb	r2,0(r17)
    a1fc:	8c400044 	addi	r17,r17,1
    a200:	8dc7c83a 	sub	r3,r17,r23
    a204:	8009883a 	mov	r4,r16
    a208:	e00b883a 	mov	r5,fp
    a20c:	01800284 	movi	r6,10
    a210:	000f883a 	mov	r7,zero
    a214:	1cbff216 	blt	r3,r18,a1e0 <_gp+0xfffed964>
    a218:	dd800917 	ldw	r22,36(sp)
    a21c:	1007883a 	mov	r3,r2
    a220:	05823a0e 	bge	zero,r22,ab0c <_dtoa_r+0x1468>
    a224:	bdad883a 	add	r22,r23,r22
    a228:	0023883a 	mov	r17,zero
    a22c:	e00b883a 	mov	r5,fp
    a230:	01800044 	movi	r6,1
    a234:	8009883a 	mov	r4,r16
    a238:	d8c01515 	stw	r3,84(sp)
    a23c:	000c7ec0 	call	c7ec <__lshift>
    a240:	1009883a 	mov	r4,r2
    a244:	a00b883a 	mov	r5,r20
    a248:	1039883a 	mov	fp,r2
    a24c:	000c9480 	call	c948 <__mcmp>
    a250:	d8c01517 	ldw	r3,84(sp)
    a254:	0080d60e 	bge	zero,r2,a5b0 <_dtoa_r+0xf0c>
    a258:	b13fffc3 	ldbu	r4,-1(r22)
    a25c:	b0ffff84 	addi	r3,r22,-2
    a260:	01800e44 	movi	r6,57
    a264:	00000306 	br	a274 <_dtoa_r+0xbd0>
    a268:	19000003 	ldbu	r4,0(r3)
    a26c:	102d883a 	mov	r22,r2
    a270:	18ffffc4 	addi	r3,r3,-1
    a274:	21403fcc 	andi	r5,r4,255
    a278:	2940201c 	xori	r5,r5,128
    a27c:	297fe004 	addi	r5,r5,-128
    a280:	b0bfffc4 	addi	r2,r22,-1
    a284:	2981a71e 	bne	r5,r6,a924 <_dtoa_r+0x1280>
    a288:	b8bff71e 	bne	r23,r2,a268 <_gp+0xfffed9ec>
    a28c:	d8800617 	ldw	r2,24(sp)
    a290:	10800044 	addi	r2,r2,1
    a294:	d8800615 	stw	r2,24(sp)
    a298:	00800c44 	movi	r2,49
    a29c:	b8800005 	stb	r2,0(r23)
    a2a0:	8009883a 	mov	r4,r16
    a2a4:	a00b883a 	mov	r5,r20
    a2a8:	000c14c0 	call	c14c <_Bfree>
    a2ac:	a83e9e26 	beq	r21,zero,9d28 <_gp+0xfffed4ac>
    a2b0:	88000426 	beq	r17,zero,a2c4 <_dtoa_r+0xc20>
    a2b4:	8d400326 	beq	r17,r21,a2c4 <_dtoa_r+0xc20>
    a2b8:	8009883a 	mov	r4,r16
    a2bc:	880b883a 	mov	r5,r17
    a2c0:	000c14c0 	call	c14c <_Bfree>
    a2c4:	8009883a 	mov	r4,r16
    a2c8:	a80b883a 	mov	r5,r21
    a2cc:	000c14c0 	call	c14c <_Bfree>
    a2d0:	003e9506 	br	9d28 <_gp+0xfffed4ac>
    a2d4:	00c00044 	movi	r3,1
    a2d8:	d8c00d15 	stw	r3,52(sp)
    a2dc:	003d9f06 	br	995c <_gp+0xfffed0e0>
    a2e0:	d9000817 	ldw	r4,32(sp)
    a2e4:	d8800617 	ldw	r2,24(sp)
    a2e8:	d8000b15 	stw	zero,44(sp)
    a2ec:	2089c83a 	sub	r4,r4,r2
    a2f0:	0087c83a 	sub	r3,zero,r2
    a2f4:	d9000815 	stw	r4,32(sp)
    a2f8:	d8c00a15 	stw	r3,40(sp)
    a2fc:	003da306 	br	998c <_gp+0xfffed110>
    a300:	0529c83a 	sub	r20,zero,r20
    a304:	dd000815 	stw	r20,32(sp)
    a308:	d8000715 	stw	zero,28(sp)
    a30c:	003d9806 	br	9970 <_gp+0xfffed0f4>
    a310:	d9000617 	ldw	r4,24(sp)
    a314:	000f38c0 	call	f38c <__floatsidf>
    a318:	1009883a 	mov	r4,r2
    a31c:	180b883a 	mov	r5,r3
    a320:	980d883a 	mov	r6,r19
    a324:	900f883a 	mov	r7,r18
    a328:	000f1b00 	call	f1b0 <__eqdf2>
    a32c:	103d7a26 	beq	r2,zero,9918 <_gp+0xfffed09c>
    a330:	d8800617 	ldw	r2,24(sp)
    a334:	10bfffc4 	addi	r2,r2,-1
    a338:	d8800615 	stw	r2,24(sp)
    a33c:	003d7606 	br	9918 <_gp+0xfffed09c>
    a340:	dcc00a17 	ldw	r19,40(sp)
    a344:	dc800817 	ldw	r18,32(sp)
    a348:	002b883a 	mov	r21,zero
    a34c:	003f4906 	br	a074 <_gp+0xfffed7f8>
    a350:	00800704 	movi	r2,28
    a354:	d8c00817 	ldw	r3,32(sp)
    a358:	d9000717 	ldw	r4,28(sp)
    a35c:	90a5883a 	add	r18,r18,r2
    a360:	1887883a 	add	r3,r3,r2
    a364:	2089883a 	add	r4,r4,r2
    a368:	d8c00815 	stw	r3,32(sp)
    a36c:	d9000715 	stw	r4,28(sp)
    a370:	003f8406 	br	a184 <_gp+0xfffed908>
    a374:	d9c00317 	ldw	r7,12(sp)
    a378:	013efb84 	movi	r4,-1042
    a37c:	2509c83a 	sub	r4,r4,r20
    a380:	3908983a 	sll	r4,r7,r4
    a384:	003d3006 	br	9848 <_gp+0xfffecfcc>
    a388:	d8000d15 	stw	zero,52(sp)
    a38c:	003d7306 	br	995c <_gp+0xfffed0e0>
    a390:	0480050e 	bge	zero,r18,a3a8 <_dtoa_r+0xd04>
    a394:	a80b883a 	mov	r5,r21
    a398:	8009883a 	mov	r4,r16
    a39c:	900d883a 	mov	r6,r18
    a3a0:	000c7ec0 	call	c7ec <__lshift>
    a3a4:	102b883a 	mov	r21,r2
    a3a8:	8801611e 	bne	r17,zero,a930 <_dtoa_r+0x128c>
    a3ac:	a827883a 	mov	r19,r21
    a3b0:	d8c00317 	ldw	r3,12(sp)
    a3b4:	d9000917 	ldw	r4,36(sp)
    a3b8:	b8bfffc4 	addi	r2,r23,-1
    a3bc:	18c0004c 	andi	r3,r3,1
    a3c0:	1105883a 	add	r2,r2,r4
    a3c4:	b825883a 	mov	r18,r23
    a3c8:	d8800515 	stw	r2,20(sp)
    a3cc:	a823883a 	mov	r17,r21
    a3d0:	d8c00315 	stw	r3,12(sp)
    a3d4:	ddc00715 	stw	r23,28(sp)
    a3d8:	e009883a 	mov	r4,fp
    a3dc:	a00b883a 	mov	r5,r20
    a3e0:	000949c0 	call	949c <quorem>
    a3e4:	e009883a 	mov	r4,fp
    a3e8:	880b883a 	mov	r5,r17
    a3ec:	102d883a 	mov	r22,r2
    a3f0:	000c9480 	call	c948 <__mcmp>
    a3f4:	980d883a 	mov	r6,r19
    a3f8:	8009883a 	mov	r4,r16
    a3fc:	a00b883a 	mov	r5,r20
    a400:	102b883a 	mov	r21,r2
    a404:	000c9a00 	call	c9a0 <__mdiff>
    a408:	100d883a 	mov	r6,r2
    a40c:	10800317 	ldw	r2,12(r2)
    a410:	b5c00c04 	addi	r23,r22,48
    a414:	10008c26 	beq	r2,zero,a648 <_dtoa_r+0xfa4>
    a418:	8009883a 	mov	r4,r16
    a41c:	300b883a 	mov	r5,r6
    a420:	000c14c0 	call	c14c <_Bfree>
    a424:	00800044 	movi	r2,1
    a428:	a8007116 	blt	r21,zero,a5f0 <_dtoa_r+0xf4c>
    a42c:	a800041e 	bne	r21,zero,a440 <_dtoa_r+0xd9c>
    a430:	d9c00417 	ldw	r7,16(sp)
    a434:	3800021e 	bne	r7,zero,a440 <_dtoa_r+0xd9c>
    a438:	d8c00317 	ldw	r3,12(sp)
    a43c:	18006c26 	beq	r3,zero,a5f0 <_dtoa_r+0xf4c>
    a440:	00814c16 	blt	zero,r2,a974 <_dtoa_r+0x12d0>
    a444:	d8c00517 	ldw	r3,20(sp)
    a448:	95400044 	addi	r21,r18,1
    a44c:	95c00005 	stb	r23,0(r18)
    a450:	a82d883a 	mov	r22,r21
    a454:	90c14d26 	beq	r18,r3,a98c <_dtoa_r+0x12e8>
    a458:	e00b883a 	mov	r5,fp
    a45c:	8009883a 	mov	r4,r16
    a460:	01800284 	movi	r6,10
    a464:	000f883a 	mov	r7,zero
    a468:	000c1740 	call	c174 <__multadd>
    a46c:	1039883a 	mov	fp,r2
    a470:	8cc08b26 	beq	r17,r19,a6a0 <_dtoa_r+0xffc>
    a474:	880b883a 	mov	r5,r17
    a478:	01800284 	movi	r6,10
    a47c:	000f883a 	mov	r7,zero
    a480:	8009883a 	mov	r4,r16
    a484:	000c1740 	call	c174 <__multadd>
    a488:	980b883a 	mov	r5,r19
    a48c:	8009883a 	mov	r4,r16
    a490:	01800284 	movi	r6,10
    a494:	000f883a 	mov	r7,zero
    a498:	1023883a 	mov	r17,r2
    a49c:	000c1740 	call	c174 <__multadd>
    a4a0:	1027883a 	mov	r19,r2
    a4a4:	a825883a 	mov	r18,r21
    a4a8:	003fcb06 	br	a3d8 <_gp+0xfffedb5c>
    a4ac:	d9c00417 	ldw	r7,16(sp)
    a4b0:	00800104 	movi	r2,4
    a4b4:	3880e426 	beq	r7,r2,a848 <_dtoa_r+0x11a4>
    a4b8:	00800144 	movi	r2,5
    a4bc:	38be3c1e 	bne	r7,r2,9db0 <_gp+0xfffed534>
    a4c0:	00c00044 	movi	r3,1
    a4c4:	d8c00c15 	stw	r3,48(sp)
    a4c8:	d9c02117 	ldw	r7,132(sp)
    a4cc:	d8800617 	ldw	r2,24(sp)
    a4d0:	388f883a 	add	r7,r7,r2
    a4d4:	3c800044 	addi	r18,r7,1
    a4d8:	d9c00e15 	stw	r7,56(sp)
    a4dc:	dc800915 	stw	r18,36(sp)
    a4e0:	04bd3e16 	blt	zero,r18,99dc <_gp+0xfffed160>
    a4e4:	80001115 	stw	zero,68(r16)
    a4e8:	000b883a 	mov	r5,zero
    a4ec:	003d4606 	br	9a08 <_gp+0xfffed18c>
    a4f0:	d8c00317 	ldw	r3,12(sp)
    a4f4:	183f0e1e 	bne	r3,zero,a130 <_gp+0xfffed8b4>
    a4f8:	00c00434 	movhi	r3,16
    a4fc:	18ffffc4 	addi	r3,r3,-1
    a500:	88c6703a 	and	r3,r17,r3
    a504:	183f0a1e 	bne	r3,zero,a130 <_gp+0xfffed8b4>
    a508:	8c5ffc2c 	andhi	r17,r17,32752
    a50c:	883f0826 	beq	r17,zero,a130 <_gp+0xfffed8b4>
    a510:	d9000817 	ldw	r4,32(sp)
    a514:	d9c00717 	ldw	r7,28(sp)
    a518:	1023883a 	mov	r17,r2
    a51c:	2089883a 	add	r4,r4,r2
    a520:	388f883a 	add	r7,r7,r2
    a524:	d9000815 	stw	r4,32(sp)
    a528:	d9c00715 	stw	r7,28(sp)
    a52c:	003f0106 	br	a134 <_gp+0xfffed8b8>
    a530:	9005883a 	mov	r2,r18
    a534:	003ed306 	br	a084 <_gp+0xfffed808>
    a538:	d8800917 	ldw	r2,36(sp)
    a53c:	00be3516 	blt	zero,r2,9e14 <_gp+0xfffed598>
    a540:	1000b61e 	bne	r2,zero,a81c <_dtoa_r+0x1178>
    a544:	9009883a 	mov	r4,r18
    a548:	980b883a 	mov	r5,r19
    a54c:	000d883a 	mov	r6,zero
    a550:	01d00534 	movhi	r7,16404
    a554:	000eecc0 	call	eecc <__muldf3>
    a558:	d9800317 	ldw	r6,12(sp)
    a55c:	1009883a 	mov	r4,r2
    a560:	180b883a 	mov	r5,r3
    a564:	880f883a 	mov	r7,r17
    a568:	000f2cc0 	call	f2cc <__gedf2>
    a56c:	0029883a 	mov	r20,zero
    a570:	002b883a 	mov	r21,zero
    a574:	10007e16 	blt	r2,zero,a770 <_dtoa_r+0x10cc>
    a578:	d8802117 	ldw	r2,132(sp)
    a57c:	b82d883a 	mov	r22,r23
    a580:	0084303a 	nor	r2,zero,r2
    a584:	d8800615 	stw	r2,24(sp)
    a588:	8009883a 	mov	r4,r16
    a58c:	a00b883a 	mov	r5,r20
    a590:	000c14c0 	call	c14c <_Bfree>
    a594:	a83f4b1e 	bne	r21,zero,a2c4 <_gp+0xfffeda48>
    a598:	003de306 	br	9d28 <_gp+0xfffed4ac>
    a59c:	e00b883a 	mov	r5,fp
    a5a0:	8009883a 	mov	r4,r16
    a5a4:	000c6c00 	call	c6c0 <__pow5mult>
    a5a8:	1039883a 	mov	fp,r2
    a5ac:	003ed206 	br	a0f8 <_gp+0xfffed87c>
    a5b0:	1000021e 	bne	r2,zero,a5bc <_dtoa_r+0xf18>
    a5b4:	18c0004c 	andi	r3,r3,1
    a5b8:	183f271e 	bne	r3,zero,a258 <_gp+0xfffed9dc>
    a5bc:	01000c04 	movi	r4,48
    a5c0:	00000106 	br	a5c8 <_dtoa_r+0xf24>
    a5c4:	102d883a 	mov	r22,r2
    a5c8:	b0bfffc4 	addi	r2,r22,-1
    a5cc:	10c00007 	ldb	r3,0(r2)
    a5d0:	193ffc26 	beq	r3,r4,a5c4 <_gp+0xfffedd48>
    a5d4:	003f3206 	br	a2a0 <_gp+0xfffeda24>
    a5d8:	d8c00f17 	ldw	r3,60(sp)
    a5dc:	18015026 	beq	r3,zero,ab20 <_dtoa_r+0x147c>
    a5e0:	10810cc4 	addi	r2,r2,1075
    a5e4:	dcc00a17 	ldw	r19,40(sp)
    a5e8:	dc800817 	ldw	r18,32(sp)
    a5ec:	003e9706 	br	a04c <_gp+0xfffed7d0>
    a5f0:	b807883a 	mov	r3,r23
    a5f4:	182b883a 	mov	r21,r3
    a5f8:	ddc00717 	ldw	r23,28(sp)
    a5fc:	00800e0e 	bge	zero,r2,a638 <_dtoa_r+0xf94>
    a600:	e00b883a 	mov	r5,fp
    a604:	01800044 	movi	r6,1
    a608:	8009883a 	mov	r4,r16
    a60c:	d8c01515 	stw	r3,84(sp)
    a610:	000c7ec0 	call	c7ec <__lshift>
    a614:	1009883a 	mov	r4,r2
    a618:	a00b883a 	mov	r5,r20
    a61c:	1039883a 	mov	fp,r2
    a620:	000c9480 	call	c948 <__mcmp>
    a624:	d8c01517 	ldw	r3,84(sp)
    a628:	0081880e 	bge	zero,r2,ac4c <_dtoa_r+0x15a8>
    a62c:	00800e44 	movi	r2,57
    a630:	b0c00c44 	addi	r3,r22,49
    a634:	a8816326 	beq	r21,r2,abc4 <_dtoa_r+0x1520>
    a638:	90c00005 	stb	r3,0(r18)
    a63c:	95800044 	addi	r22,r18,1
    a640:	982b883a 	mov	r21,r19
    a644:	003f1606 	br	a2a0 <_gp+0xfffeda24>
    a648:	300b883a 	mov	r5,r6
    a64c:	e009883a 	mov	r4,fp
    a650:	d9801515 	stw	r6,84(sp)
    a654:	000c9480 	call	c948 <__mcmp>
    a658:	d9801517 	ldw	r6,84(sp)
    a65c:	8009883a 	mov	r4,r16
    a660:	d8801515 	stw	r2,84(sp)
    a664:	300b883a 	mov	r5,r6
    a668:	000c14c0 	call	c14c <_Bfree>
    a66c:	d8801517 	ldw	r2,84(sp)
    a670:	103f6d1e 	bne	r2,zero,a428 <_gp+0xfffedbac>
    a674:	d9c00417 	ldw	r7,16(sp)
    a678:	383f6b1e 	bne	r7,zero,a428 <_gp+0xfffedbac>
    a67c:	d8c00317 	ldw	r3,12(sp)
    a680:	183f691e 	bne	r3,zero,a428 <_gp+0xfffedbac>
    a684:	b807883a 	mov	r3,r23
    a688:	00800e44 	movi	r2,57
    a68c:	ddc00717 	ldw	r23,28(sp)
    a690:	18814c26 	beq	r3,r2,abc4 <_dtoa_r+0x1520>
    a694:	057fe80e 	bge	zero,r21,a638 <_gp+0xfffeddbc>
    a698:	b0c00c44 	addi	r3,r22,49
    a69c:	003fe606 	br	a638 <_gp+0xfffeddbc>
    a6a0:	880b883a 	mov	r5,r17
    a6a4:	8009883a 	mov	r4,r16
    a6a8:	01800284 	movi	r6,10
    a6ac:	000f883a 	mov	r7,zero
    a6b0:	000c1740 	call	c174 <__multadd>
    a6b4:	1023883a 	mov	r17,r2
    a6b8:	1027883a 	mov	r19,r2
    a6bc:	a825883a 	mov	r18,r21
    a6c0:	003f4506 	br	a3d8 <_gp+0xfffedb5c>
    a6c4:	e009883a 	mov	r4,fp
    a6c8:	a00b883a 	mov	r5,r20
    a6cc:	000c9480 	call	c948 <__mcmp>
    a6d0:	103ebc0e 	bge	r2,zero,a1c4 <_gp+0xfffed948>
    a6d4:	e00b883a 	mov	r5,fp
    a6d8:	8009883a 	mov	r4,r16
    a6dc:	01800284 	movi	r6,10
    a6e0:	000f883a 	mov	r7,zero
    a6e4:	000c1740 	call	c174 <__multadd>
    a6e8:	1039883a 	mov	fp,r2
    a6ec:	d8800617 	ldw	r2,24(sp)
    a6f0:	d8c00c17 	ldw	r3,48(sp)
    a6f4:	10bfffc4 	addi	r2,r2,-1
    a6f8:	d8800615 	stw	r2,24(sp)
    a6fc:	1801571e 	bne	r3,zero,ac5c <_dtoa_r+0x15b8>
    a700:	d9c00e17 	ldw	r7,56(sp)
    a704:	d9c00915 	stw	r7,36(sp)
    a708:	003eae06 	br	a1c4 <_gp+0xfffed948>
    a70c:	a0800417 	ldw	r2,16(r20)
    a710:	10800104 	addi	r2,r2,4
    a714:	1085883a 	add	r2,r2,r2
    a718:	1085883a 	add	r2,r2,r2
    a71c:	a085883a 	add	r2,r20,r2
    a720:	11000017 	ldw	r4,0(r2)
    a724:	000c38c0 	call	c38c <__hi0bits>
    a728:	00c00804 	movi	r3,32
    a72c:	1885c83a 	sub	r2,r3,r2
    a730:	003e8306 	br	a140 <_gp+0xfffed8c4>
    a734:	d9c00417 	ldw	r7,16(sp)
    a738:	00800084 	movi	r2,2
    a73c:	11fea30e 	bge	r2,r7,a1cc <_gp+0xfffed950>
    a740:	d8800917 	ldw	r2,36(sp)
    a744:	103f8c1e 	bne	r2,zero,a578 <_gp+0xfffedcfc>
    a748:	a00b883a 	mov	r5,r20
    a74c:	8009883a 	mov	r4,r16
    a750:	01800144 	movi	r6,5
    a754:	000f883a 	mov	r7,zero
    a758:	000c1740 	call	c174 <__multadd>
    a75c:	e009883a 	mov	r4,fp
    a760:	100b883a 	mov	r5,r2
    a764:	1029883a 	mov	r20,r2
    a768:	000c9480 	call	c948 <__mcmp>
    a76c:	00bf820e 	bge	zero,r2,a578 <_gp+0xfffedcfc>
    a770:	00800c44 	movi	r2,49
    a774:	b8800005 	stb	r2,0(r23)
    a778:	d8800617 	ldw	r2,24(sp)
    a77c:	bd800044 	addi	r22,r23,1
    a780:	10800044 	addi	r2,r2,1
    a784:	d8800615 	stw	r2,24(sp)
    a788:	003f7f06 	br	a588 <_gp+0xfffedd0c>
    a78c:	dc000417 	ldw	r16,16(sp)
    a790:	003d6506 	br	9d28 <_gp+0xfffed4ac>
    a794:	9009883a 	mov	r4,r18
    a798:	000f38c0 	call	f38c <__floatsidf>
    a79c:	1009883a 	mov	r4,r2
    a7a0:	180b883a 	mov	r5,r3
    a7a4:	980d883a 	mov	r6,r19
    a7a8:	a00f883a 	mov	r7,r20
    a7ac:	000eecc0 	call	eecc <__muldf3>
    a7b0:	1009883a 	mov	r4,r2
    a7b4:	180b883a 	mov	r5,r3
    a7b8:	000d883a 	mov	r6,zero
    a7bc:	01d00734 	movhi	r7,16412
    a7c0:	000ee180 	call	ee18 <__adddf3>
    a7c4:	057f3034 	movhi	r21,64704
    a7c8:	1025883a 	mov	r18,r2
    a7cc:	1d6b883a 	add	r21,r3,r21
    a7d0:	9809883a 	mov	r4,r19
    a7d4:	a00b883a 	mov	r5,r20
    a7d8:	000d883a 	mov	r6,zero
    a7dc:	01d00534 	movhi	r7,16404
    a7e0:	000ee6c0 	call	ee6c <__subdf3>
    a7e4:	1009883a 	mov	r4,r2
    a7e8:	180b883a 	mov	r5,r3
    a7ec:	900d883a 	mov	r6,r18
    a7f0:	a80f883a 	mov	r7,r21
    a7f4:	1027883a 	mov	r19,r2
    a7f8:	1829883a 	mov	r20,r3
    a7fc:	000f2680 	call	f268 <__gtdf2>
    a800:	00806616 	blt	zero,r2,a99c <_dtoa_r+0x12f8>
    a804:	a9e0003c 	xorhi	r7,r21,32768
    a808:	9809883a 	mov	r4,r19
    a80c:	a00b883a 	mov	r5,r20
    a810:	900d883a 	mov	r6,r18
    a814:	000f3300 	call	f330 <__ltdf2>
    a818:	103d710e 	bge	r2,zero,9de0 <_gp+0xfffed564>
    a81c:	0029883a 	mov	r20,zero
    a820:	002b883a 	mov	r21,zero
    a824:	003f5406 	br	a578 <_gp+0xfffedcfc>
    a828:	d9800a17 	ldw	r6,40(sp)
    a82c:	e00b883a 	mov	r5,fp
    a830:	8009883a 	mov	r4,r16
    a834:	000c6c00 	call	c6c0 <__pow5mult>
    a838:	1039883a 	mov	fp,r2
    a83c:	003e2e06 	br	a0f8 <_gp+0xfffed87c>
    a840:	d8000c15 	stw	zero,48(sp)
    a844:	003f2006 	br	a4c8 <_gp+0xfffedc4c>
    a848:	00800044 	movi	r2,1
    a84c:	d8800c15 	stw	r2,48(sp)
    a850:	003c5d06 	br	99c8 <_gp+0xfffed14c>
    a854:	d8c00a17 	ldw	r3,40(sp)
    a858:	d9000b17 	ldw	r4,44(sp)
    a85c:	dcc00a15 	stw	r19,40(sp)
    a860:	98c5c83a 	sub	r2,r19,r3
    a864:	2089883a 	add	r4,r4,r2
    a868:	d9000b15 	stw	r4,44(sp)
    a86c:	0027883a 	mov	r19,zero
    a870:	003df206 	br	a03c <_gp+0xfffed7c0>
    a874:	d9000317 	ldw	r4,12(sp)
    a878:	8829883a 	mov	r20,r17
    a87c:	04800084 	movi	r18,2
    a880:	d9001015 	stw	r4,64(sp)
    a884:	003c8106 	br	9a8c <_gp+0xfffed210>
    a888:	04800044 	movi	r18,1
    a88c:	dc800e15 	stw	r18,56(sp)
    a890:	dc800915 	stw	r18,36(sp)
    a894:	dc802115 	stw	r18,132(sp)
    a898:	003f1206 	br	a4e4 <_gp+0xfffedc68>
    a89c:	d8800617 	ldw	r2,24(sp)
    a8a0:	00abc83a 	sub	r21,zero,r2
    a8a4:	a800a426 	beq	r21,zero,ab38 <_dtoa_r+0x1494>
    a8a8:	a88003cc 	andi	r2,r21,15
    a8ac:	100490fa 	slli	r2,r2,3
    a8b0:	00c00074 	movhi	r3,1
    a8b4:	18cb5804 	addi	r3,r3,11616
    a8b8:	d9000317 	ldw	r4,12(sp)
    a8bc:	1885883a 	add	r2,r3,r2
    a8c0:	11800017 	ldw	r6,0(r2)
    a8c4:	11c00117 	ldw	r7,4(r2)
    a8c8:	a82bd13a 	srai	r21,r21,4
    a8cc:	880b883a 	mov	r5,r17
    a8d0:	000eecc0 	call	eecc <__muldf3>
    a8d4:	1027883a 	mov	r19,r2
    a8d8:	1829883a 	mov	r20,r3
    a8dc:	a800e826 	beq	r21,zero,ac80 <_dtoa_r+0x15dc>
    a8e0:	05800074 	movhi	r22,1
    a8e4:	b58b4e04 	addi	r22,r22,11576
    a8e8:	04800084 	movi	r18,2
    a8ec:	a980004c 	andi	r6,r21,1
    a8f0:	1009883a 	mov	r4,r2
    a8f4:	a82bd07a 	srai	r21,r21,1
    a8f8:	180b883a 	mov	r5,r3
    a8fc:	30000426 	beq	r6,zero,a910 <_dtoa_r+0x126c>
    a900:	b1800017 	ldw	r6,0(r22)
    a904:	b1c00117 	ldw	r7,4(r22)
    a908:	94800044 	addi	r18,r18,1
    a90c:	000eecc0 	call	eecc <__muldf3>
    a910:	b5800204 	addi	r22,r22,8
    a914:	a83ff51e 	bne	r21,zero,a8ec <_gp+0xfffee070>
    a918:	1027883a 	mov	r19,r2
    a91c:	1829883a 	mov	r20,r3
    a920:	003c7306 	br	9af0 <_gp+0xfffed274>
    a924:	21000044 	addi	r4,r4,1
    a928:	11000005 	stb	r4,0(r2)
    a92c:	003e5c06 	br	a2a0 <_gp+0xfffeda24>
    a930:	a9400117 	ldw	r5,4(r21)
    a934:	8009883a 	mov	r4,r16
    a938:	000c0a40 	call	c0a4 <_Balloc>
    a93c:	a9800417 	ldw	r6,16(r21)
    a940:	11000304 	addi	r4,r2,12
    a944:	a9400304 	addi	r5,r21,12
    a948:	31800084 	addi	r6,r6,2
    a94c:	318d883a 	add	r6,r6,r6
    a950:	318d883a 	add	r6,r6,r6
    a954:	1023883a 	mov	r17,r2
    a958:	0006de80 	call	6de8 <memcpy>
    a95c:	8009883a 	mov	r4,r16
    a960:	880b883a 	mov	r5,r17
    a964:	01800044 	movi	r6,1
    a968:	000c7ec0 	call	c7ec <__lshift>
    a96c:	1027883a 	mov	r19,r2
    a970:	003e8f06 	br	a3b0 <_gp+0xfffedb34>
    a974:	b807883a 	mov	r3,r23
    a978:	00800e44 	movi	r2,57
    a97c:	ddc00717 	ldw	r23,28(sp)
    a980:	18809026 	beq	r3,r2,abc4 <_dtoa_r+0x1520>
    a984:	18c00044 	addi	r3,r3,1
    a988:	003f2b06 	br	a638 <_gp+0xfffeddbc>
    a98c:	b807883a 	mov	r3,r23
    a990:	982b883a 	mov	r21,r19
    a994:	ddc00717 	ldw	r23,28(sp)
    a998:	003e2406 	br	a22c <_gp+0xfffed9b0>
    a99c:	0029883a 	mov	r20,zero
    a9a0:	002b883a 	mov	r21,zero
    a9a4:	003f7206 	br	a770 <_gp+0xfffedef4>
    a9a8:	593fffc4 	addi	r4,r11,-1
    a9ac:	200490fa 	slli	r2,r4,3
    a9b0:	00c00074 	movhi	r3,1
    a9b4:	18cb5804 	addi	r3,r3,11616
    a9b8:	d9001015 	stw	r4,64(sp)
    a9bc:	1885883a 	add	r2,r3,r2
    a9c0:	11000017 	ldw	r4,0(r2)
    a9c4:	11400117 	ldw	r5,4(r2)
    a9c8:	900d883a 	mov	r6,r18
    a9cc:	a80f883a 	mov	r7,r21
    a9d0:	dac01615 	stw	r11,88(sp)
    a9d4:	000eecc0 	call	eecc <__muldf3>
    a9d8:	a00b883a 	mov	r5,r20
    a9dc:	9809883a 	mov	r4,r19
    a9e0:	d8c01215 	stw	r3,72(sp)
    a9e4:	d8801115 	stw	r2,68(sp)
    a9e8:	000f4600 	call	f460 <__fixdfsi>
    a9ec:	1009883a 	mov	r4,r2
    a9f0:	1025883a 	mov	r18,r2
    a9f4:	000f38c0 	call	f38c <__floatsidf>
    a9f8:	9809883a 	mov	r4,r19
    a9fc:	a00b883a 	mov	r5,r20
    aa00:	100d883a 	mov	r6,r2
    aa04:	180f883a 	mov	r7,r3
    aa08:	94800c04 	addi	r18,r18,48
    aa0c:	000ee6c0 	call	ee6c <__subdf3>
    aa10:	bc800005 	stb	r18,0(r23)
    aa14:	dac01617 	ldw	r11,88(sp)
    aa18:	102b883a 	mov	r21,r2
    aa1c:	00800044 	movi	r2,1
    aa20:	bd800044 	addi	r22,r23,1
    aa24:	1815883a 	mov	r10,r3
    aa28:	58802226 	beq	r11,r2,aab4 <_dtoa_r+0x1410>
    aa2c:	bad7883a 	add	r11,r23,r11
    aa30:	dc001415 	stw	r16,80(sp)
    aa34:	a805883a 	mov	r2,r21
    aa38:	b027883a 	mov	r19,r22
    aa3c:	5821883a 	mov	r16,r11
    aa40:	882b883a 	mov	r21,r17
    aa44:	000d883a 	mov	r6,zero
    aa48:	01d00934 	movhi	r7,16420
    aa4c:	1009883a 	mov	r4,r2
    aa50:	180b883a 	mov	r5,r3
    aa54:	000eecc0 	call	eecc <__muldf3>
    aa58:	180b883a 	mov	r5,r3
    aa5c:	1009883a 	mov	r4,r2
    aa60:	1829883a 	mov	r20,r3
    aa64:	1023883a 	mov	r17,r2
    aa68:	000f4600 	call	f460 <__fixdfsi>
    aa6c:	1009883a 	mov	r4,r2
    aa70:	1025883a 	mov	r18,r2
    aa74:	000f38c0 	call	f38c <__floatsidf>
    aa78:	8809883a 	mov	r4,r17
    aa7c:	a00b883a 	mov	r5,r20
    aa80:	100d883a 	mov	r6,r2
    aa84:	180f883a 	mov	r7,r3
    aa88:	94800c04 	addi	r18,r18,48
    aa8c:	000ee6c0 	call	ee6c <__subdf3>
    aa90:	9cc00044 	addi	r19,r19,1
    aa94:	9cbfffc5 	stb	r18,-1(r19)
    aa98:	9c3fea1e 	bne	r19,r16,aa44 <_gp+0xfffee1c8>
    aa9c:	1815883a 	mov	r10,r3
    aaa0:	d8c01017 	ldw	r3,64(sp)
    aaa4:	dc001417 	ldw	r16,80(sp)
    aaa8:	a823883a 	mov	r17,r21
    aaac:	b0ed883a 	add	r22,r22,r3
    aab0:	102b883a 	mov	r21,r2
    aab4:	d9001117 	ldw	r4,68(sp)
    aab8:	d9401217 	ldw	r5,72(sp)
    aabc:	000d883a 	mov	r6,zero
    aac0:	01cff834 	movhi	r7,16352
    aac4:	da801515 	stw	r10,84(sp)
    aac8:	000ee180 	call	ee18 <__adddf3>
    aacc:	da801517 	ldw	r10,84(sp)
    aad0:	1009883a 	mov	r4,r2
    aad4:	180b883a 	mov	r5,r3
    aad8:	500f883a 	mov	r7,r10
    aadc:	a80d883a 	mov	r6,r21
    aae0:	000f3300 	call	f330 <__ltdf2>
    aae4:	da801517 	ldw	r10,84(sp)
    aae8:	10003b0e 	bge	r2,zero,abd8 <_dtoa_r+0x1534>
    aaec:	d9c01317 	ldw	r7,76(sp)
    aaf0:	b53fffc3 	ldbu	r20,-1(r22)
    aaf4:	d9c00615 	stw	r7,24(sp)
    aaf8:	003d3106 	br	9fc0 <_gp+0xfffed744>
    aafc:	d8800817 	ldw	r2,32(sp)
    ab00:	11e5c83a 	sub	r18,r2,r7
    ab04:	0005883a 	mov	r2,zero
    ab08:	003d5006 	br	a04c <_gp+0xfffed7d0>
    ab0c:	05800044 	movi	r22,1
    ab10:	003dc406 	br	a224 <_gp+0xfffed9a8>
    ab14:	a5000044 	addi	r20,r20,1
    ab18:	15000005 	stb	r20,0(r2)
    ab1c:	003c8206 	br	9d28 <_gp+0xfffed4ac>
    ab20:	d8800217 	ldw	r2,8(sp)
    ab24:	00c00d84 	movi	r3,54
    ab28:	dcc00a17 	ldw	r19,40(sp)
    ab2c:	1885c83a 	sub	r2,r3,r2
    ab30:	dc800817 	ldw	r18,32(sp)
    ab34:	003d4506 	br	a04c <_gp+0xfffed7d0>
    ab38:	dcc00317 	ldw	r19,12(sp)
    ab3c:	8829883a 	mov	r20,r17
    ab40:	04800084 	movi	r18,2
    ab44:	003bea06 	br	9af0 <_gp+0xfffed274>
    ab48:	d9000917 	ldw	r4,36(sp)
    ab4c:	203f1126 	beq	r4,zero,a794 <_gp+0xfffedf18>
    ab50:	d9c00e17 	ldw	r7,56(sp)
    ab54:	01fca20e 	bge	zero,r7,9de0 <_gp+0xfffed564>
    ab58:	a00b883a 	mov	r5,r20
    ab5c:	9809883a 	mov	r4,r19
    ab60:	000d883a 	mov	r6,zero
    ab64:	01d00934 	movhi	r7,16420
    ab68:	000eecc0 	call	eecc <__muldf3>
    ab6c:	91000044 	addi	r4,r18,1
    ab70:	1027883a 	mov	r19,r2
    ab74:	1829883a 	mov	r20,r3
    ab78:	000f38c0 	call	f38c <__floatsidf>
    ab7c:	9809883a 	mov	r4,r19
    ab80:	a00b883a 	mov	r5,r20
    ab84:	100d883a 	mov	r6,r2
    ab88:	180f883a 	mov	r7,r3
    ab8c:	000eecc0 	call	eecc <__muldf3>
    ab90:	1009883a 	mov	r4,r2
    ab94:	180b883a 	mov	r5,r3
    ab98:	000d883a 	mov	r6,zero
    ab9c:	01d00734 	movhi	r7,16412
    aba0:	000ee180 	call	ee18 <__adddf3>
    aba4:	1025883a 	mov	r18,r2
    aba8:	d8800617 	ldw	r2,24(sp)
    abac:	057f3034 	movhi	r21,64704
    abb0:	1d6b883a 	add	r21,r3,r21
    abb4:	10bfffc4 	addi	r2,r2,-1
    abb8:	d8801315 	stw	r2,76(sp)
    abbc:	dac00e17 	ldw	r11,56(sp)
    abc0:	003be706 	br	9b60 <_gp+0xfffed2e4>
    abc4:	01000e44 	movi	r4,57
    abc8:	91000005 	stb	r4,0(r18)
    abcc:	95800044 	addi	r22,r18,1
    abd0:	982b883a 	mov	r21,r19
    abd4:	003da106 	br	a25c <_gp+0xfffed9e0>
    abd8:	d9801117 	ldw	r6,68(sp)
    abdc:	d9c01217 	ldw	r7,72(sp)
    abe0:	0009883a 	mov	r4,zero
    abe4:	014ff834 	movhi	r5,16352
    abe8:	da801515 	stw	r10,84(sp)
    abec:	000ee6c0 	call	ee6c <__subdf3>
    abf0:	da801517 	ldw	r10,84(sp)
    abf4:	1009883a 	mov	r4,r2
    abf8:	180b883a 	mov	r5,r3
    abfc:	a80d883a 	mov	r6,r21
    ac00:	500f883a 	mov	r7,r10
    ac04:	000f2680 	call	f268 <__gtdf2>
    ac08:	00bc750e 	bge	zero,r2,9de0 <_gp+0xfffed564>
    ac0c:	01000c04 	movi	r4,48
    ac10:	00000106 	br	ac18 <_dtoa_r+0x1574>
    ac14:	102d883a 	mov	r22,r2
    ac18:	b0bfffc4 	addi	r2,r22,-1
    ac1c:	10c00007 	ldb	r3,0(r2)
    ac20:	193ffc26 	beq	r3,r4,ac14 <_gp+0xfffee398>
    ac24:	d8801317 	ldw	r2,76(sp)
    ac28:	d8800615 	stw	r2,24(sp)
    ac2c:	003c3e06 	br	9d28 <_gp+0xfffed4ac>
    ac30:	d9001317 	ldw	r4,76(sp)
    ac34:	df001117 	ldw	fp,68(sp)
    ac38:	d9000615 	stw	r4,24(sp)
    ac3c:	003ce006 	br	9fc0 <_gp+0xfffed744>
    ac40:	df001117 	ldw	fp,68(sp)
    ac44:	dc401217 	ldw	r17,72(sp)
    ac48:	003c6506 	br	9de0 <_gp+0xfffed564>
    ac4c:	103e7a1e 	bne	r2,zero,a638 <_gp+0xfffeddbc>
    ac50:	1880004c 	andi	r2,r3,1
    ac54:	103e7826 	beq	r2,zero,a638 <_gp+0xfffeddbc>
    ac58:	003e7406 	br	a62c <_gp+0xfffeddb0>
    ac5c:	8009883a 	mov	r4,r16
    ac60:	a80b883a 	mov	r5,r21
    ac64:	01800284 	movi	r6,10
    ac68:	000f883a 	mov	r7,zero
    ac6c:	000c1740 	call	c174 <__multadd>
    ac70:	d9000e17 	ldw	r4,56(sp)
    ac74:	102b883a 	mov	r21,r2
    ac78:	d9000915 	stw	r4,36(sp)
    ac7c:	003d5106 	br	a1c4 <_gp+0xfffed948>
    ac80:	04800084 	movi	r18,2
    ac84:	003b9a06 	br	9af0 <_gp+0xfffed274>
    ac88:	d8c01317 	ldw	r3,76(sp)
    ac8c:	d8c00615 	stw	r3,24(sp)
    ac90:	003ccb06 	br	9fc0 <_gp+0xfffed744>
    ac94:	d8c01317 	ldw	r3,76(sp)
    ac98:	d8c00615 	stw	r3,24(sp)
    ac9c:	003c2206 	br	9d28 <_gp+0xfffed4ac>
    aca0:	20fd3826 	beq	r4,r3,a184 <_gp+0xfffed908>
    aca4:	00c00f04 	movi	r3,60
    aca8:	1885c83a 	sub	r2,r3,r2
    acac:	003da906 	br	a354 <_gp+0xfffedad8>
    acb0:	000b883a 	mov	r5,zero
    acb4:	003b5406 	br	9a08 <_gp+0xfffed18c>
    acb8:	04c00044 	movi	r19,1
    acbc:	003b3b06 	br	99ac <_gp+0xfffed130>

0000acc0 <_fflush_r>:
    acc0:	defffb04 	addi	sp,sp,-20
    acc4:	dcc00315 	stw	r19,12(sp)
    acc8:	dc400115 	stw	r17,4(sp)
    accc:	dfc00415 	stw	ra,16(sp)
    acd0:	dc800215 	stw	r18,8(sp)
    acd4:	dc000015 	stw	r16,0(sp)
    acd8:	2027883a 	mov	r19,r4
    acdc:	2823883a 	mov	r17,r5
    ace0:	20000226 	beq	r4,zero,acec <_fflush_r+0x2c>
    ace4:	20800e17 	ldw	r2,56(r4)
    ace8:	10005726 	beq	r2,zero,ae48 <_fflush_r+0x188>
    acec:	8880030b 	ldhu	r2,12(r17)
    acf0:	10c0020c 	andi	r3,r2,8
    acf4:	18ffffcc 	andi	r3,r3,65535
    acf8:	18e0001c 	xori	r3,r3,32768
    acfc:	18e00004 	addi	r3,r3,-32768
    ad00:	1800311e 	bne	r3,zero,adc8 <_fflush_r+0x108>
    ad04:	89000117 	ldw	r4,4(r17)
    ad08:	10c20014 	ori	r3,r2,2048
    ad0c:	88c0030d 	sth	r3,12(r17)
    ad10:	180b883a 	mov	r5,r3
    ad14:	0100520e 	bge	zero,r4,ae60 <_fflush_r+0x1a0>
    ad18:	88c00a17 	ldw	r3,40(r17)
    ad1c:	18002226 	beq	r3,zero,ada8 <_fflush_r+0xe8>
    ad20:	1084000c 	andi	r2,r2,4096
    ad24:	10bfffcc 	andi	r2,r2,65535
    ad28:	10a0001c 	xori	r2,r2,32768
    ad2c:	10a00004 	addi	r2,r2,-32768
    ad30:	10004e26 	beq	r2,zero,ae6c <_fflush_r+0x1ac>
    ad34:	8c001417 	ldw	r16,80(r17)
    ad38:	2940010c 	andi	r5,r5,4
    ad3c:	297fffcc 	andi	r5,r5,65535
    ad40:	2960001c 	xori	r5,r5,32768
    ad44:	29600004 	addi	r5,r5,-32768
    ad48:	28000626 	beq	r5,zero,ad64 <_fflush_r+0xa4>
    ad4c:	89000117 	ldw	r4,4(r17)
    ad50:	88800c17 	ldw	r2,48(r17)
    ad54:	8121c83a 	sub	r16,r16,r4
    ad58:	10000226 	beq	r2,zero,ad64 <_fflush_r+0xa4>
    ad5c:	88800f17 	ldw	r2,60(r17)
    ad60:	80a1c83a 	sub	r16,r16,r2
    ad64:	89400717 	ldw	r5,28(r17)
    ad68:	9809883a 	mov	r4,r19
    ad6c:	800d883a 	mov	r6,r16
    ad70:	000f883a 	mov	r7,zero
    ad74:	183ee83a 	callr	r3
    ad78:	8080281e 	bne	r16,r2,ae1c <_fflush_r+0x15c>
    ad7c:	8880030b 	ldhu	r2,12(r17)
    ad80:	88c00417 	ldw	r3,16(r17)
    ad84:	88000115 	stw	zero,4(r17)
    ad88:	113dffcc 	andi	r4,r2,63487
    ad8c:	1084000c 	andi	r2,r2,4096
    ad90:	10bfffcc 	andi	r2,r2,65535
    ad94:	10a0001c 	xori	r2,r2,32768
    ad98:	8900030d 	sth	r4,12(r17)
    ad9c:	88c00015 	stw	r3,0(r17)
    ada0:	10a00004 	addi	r2,r2,-32768
    ada4:	10002c1e 	bne	r2,zero,ae58 <_fflush_r+0x198>
    ada8:	0005883a 	mov	r2,zero
    adac:	dfc00417 	ldw	ra,16(sp)
    adb0:	dcc00317 	ldw	r19,12(sp)
    adb4:	dc800217 	ldw	r18,8(sp)
    adb8:	dc400117 	ldw	r17,4(sp)
    adbc:	dc000017 	ldw	r16,0(sp)
    adc0:	dec00504 	addi	sp,sp,20
    adc4:	f800283a 	ret
    adc8:	8c800417 	ldw	r18,16(r17)
    adcc:	903ff626 	beq	r18,zero,ada8 <_gp+0xfffee52c>
    add0:	8c000017 	ldw	r16,0(r17)
    add4:	108000cc 	andi	r2,r2,3
    add8:	8c800015 	stw	r18,0(r17)
    addc:	84a1c83a 	sub	r16,r16,r18
    ade0:	10001b1e 	bne	r2,zero,ae50 <_fflush_r+0x190>
    ade4:	88800517 	ldw	r2,20(r17)
    ade8:	88800215 	stw	r2,8(r17)
    adec:	04000316 	blt	zero,r16,adfc <_fflush_r+0x13c>
    adf0:	003fed06 	br	ada8 <_gp+0xfffee52c>
    adf4:	90a5883a 	add	r18,r18,r2
    adf8:	043feb0e 	bge	zero,r16,ada8 <_gp+0xfffee52c>
    adfc:	88800917 	ldw	r2,36(r17)
    ae00:	89400717 	ldw	r5,28(r17)
    ae04:	800f883a 	mov	r7,r16
    ae08:	900d883a 	mov	r6,r18
    ae0c:	9809883a 	mov	r4,r19
    ae10:	103ee83a 	callr	r2
    ae14:	80a1c83a 	sub	r16,r16,r2
    ae18:	00bff616 	blt	zero,r2,adf4 <_gp+0xfffee578>
    ae1c:	88c0030b 	ldhu	r3,12(r17)
    ae20:	00bfffc4 	movi	r2,-1
    ae24:	18c01014 	ori	r3,r3,64
    ae28:	88c0030d 	sth	r3,12(r17)
    ae2c:	dfc00417 	ldw	ra,16(sp)
    ae30:	dcc00317 	ldw	r19,12(sp)
    ae34:	dc800217 	ldw	r18,8(sp)
    ae38:	dc400117 	ldw	r17,4(sp)
    ae3c:	dc000017 	ldw	r16,0(sp)
    ae40:	dec00504 	addi	sp,sp,20
    ae44:	f800283a 	ret
    ae48:	000af680 	call	af68 <__sinit>
    ae4c:	003fa706 	br	acec <_gp+0xfffee470>
    ae50:	0005883a 	mov	r2,zero
    ae54:	003fe406 	br	ade8 <_gp+0xfffee56c>
    ae58:	8c001415 	stw	r16,80(r17)
    ae5c:	003fd206 	br	ada8 <_gp+0xfffee52c>
    ae60:	88c00f17 	ldw	r3,60(r17)
    ae64:	00ffac16 	blt	zero,r3,ad18 <_gp+0xfffee49c>
    ae68:	003fcf06 	br	ada8 <_gp+0xfffee52c>
    ae6c:	89400717 	ldw	r5,28(r17)
    ae70:	9809883a 	mov	r4,r19
    ae74:	000d883a 	mov	r6,zero
    ae78:	01c00044 	movi	r7,1
    ae7c:	183ee83a 	callr	r3
    ae80:	1021883a 	mov	r16,r2
    ae84:	00bfffc4 	movi	r2,-1
    ae88:	80800326 	beq	r16,r2,ae98 <_fflush_r+0x1d8>
    ae8c:	8940030b 	ldhu	r5,12(r17)
    ae90:	88c00a17 	ldw	r3,40(r17)
    ae94:	003fa806 	br	ad38 <_gp+0xfffee4bc>
    ae98:	98c00017 	ldw	r3,0(r19)
    ae9c:	00800744 	movi	r2,29
    aea0:	18bfde1e 	bne	r3,r2,ae1c <_gp+0xfffee5a0>
    aea4:	003fc006 	br	ada8 <_gp+0xfffee52c>

0000aea8 <fflush>:
    aea8:	200b883a 	mov	r5,r4
    aeac:	20000426 	beq	r4,zero,aec0 <fflush+0x18>
    aeb0:	00800074 	movhi	r2,1
    aeb4:	10922304 	addi	r2,r2,18572
    aeb8:	11000017 	ldw	r4,0(r2)
    aebc:	000acc01 	jmpi	acc0 <_fflush_r>
    aec0:	00800074 	movhi	r2,1
    aec4:	10922204 	addi	r2,r2,18568
    aec8:	11000017 	ldw	r4,0(r2)
    aecc:	01400074 	movhi	r5,1
    aed0:	296b3004 	addi	r5,r5,-21312
    aed4:	000bb481 	jmpi	bb48 <_fwalk_reent>

0000aed8 <__fp_lock>:
    aed8:	0005883a 	mov	r2,zero
    aedc:	f800283a 	ret

0000aee0 <__fp_unlock>:
    aee0:	0005883a 	mov	r2,zero
    aee4:	f800283a 	ret

0000aee8 <_cleanup_r>:
    aee8:	01400074 	movhi	r5,1
    aeec:	29776e04 	addi	r5,r5,-8776
    aef0:	000baa01 	jmpi	baa0 <_fwalk>

0000aef4 <__sfmoreglue>:
    aef4:	defffc04 	addi	sp,sp,-16
    aef8:	dc400115 	stw	r17,4(sp)
    aefc:	2c401724 	muli	r17,r5,92
    af00:	dc800215 	stw	r18,8(sp)
    af04:	2825883a 	mov	r18,r5
    af08:	89400304 	addi	r5,r17,12
    af0c:	dc000015 	stw	r16,0(sp)
    af10:	dfc00315 	stw	ra,12(sp)
    af14:	00066640 	call	6664 <_malloc_r>
    af18:	1021883a 	mov	r16,r2
    af1c:	10000726 	beq	r2,zero,af3c <__sfmoreglue+0x48>
    af20:	11000304 	addi	r4,r2,12
    af24:	10000015 	stw	zero,0(r2)
    af28:	14800115 	stw	r18,4(r2)
    af2c:	11000215 	stw	r4,8(r2)
    af30:	000b883a 	mov	r5,zero
    af34:	880d883a 	mov	r6,r17
    af38:	0006ee00 	call	6ee0 <memset>
    af3c:	8005883a 	mov	r2,r16
    af40:	dfc00317 	ldw	ra,12(sp)
    af44:	dc800217 	ldw	r18,8(sp)
    af48:	dc400117 	ldw	r17,4(sp)
    af4c:	dc000017 	ldw	r16,0(sp)
    af50:	dec00404 	addi	sp,sp,16
    af54:	f800283a 	ret

0000af58 <_cleanup>:
    af58:	00800074 	movhi	r2,1
    af5c:	10922204 	addi	r2,r2,18568
    af60:	11000017 	ldw	r4,0(r2)
    af64:	000aee81 	jmpi	aee8 <_cleanup_r>

0000af68 <__sinit>:
    af68:	20800e17 	ldw	r2,56(r4)
    af6c:	1000401e 	bne	r2,zero,b070 <__sinit+0x108>
    af70:	21400117 	ldw	r5,4(r4)
    af74:	01800074 	movhi	r6,1
    af78:	31abba04 	addi	r6,r6,-20760
    af7c:	20c00217 	ldw	r3,8(r4)
    af80:	21800f15 	stw	r6,60(r4)
    af84:	2080bb04 	addi	r2,r4,748
    af88:	02400044 	movi	r9,1
    af8c:	018000c4 	movi	r6,3
    af90:	2180b915 	stw	r6,740(r4)
    af94:	2080ba15 	stw	r2,744(r4)
    af98:	22400e15 	stw	r9,56(r4)
    af9c:	20800317 	ldw	r2,12(r4)
    afa0:	2000b815 	stw	zero,736(r4)
    afa4:	02000074 	movhi	r8,1
    afa8:	42361604 	addi	r8,r8,-10152
    afac:	01c00074 	movhi	r7,1
    afb0:	39f62b04 	addi	r7,r7,-10068
    afb4:	01800074 	movhi	r6,1
    afb8:	31b64d04 	addi	r6,r6,-9932
    afbc:	01000074 	movhi	r4,1
    afc0:	21366404 	addi	r4,r4,-9840
    afc4:	02800104 	movi	r10,4
    afc8:	28000015 	stw	zero,0(r5)
    afcc:	28000115 	stw	zero,4(r5)
    afd0:	28000215 	stw	zero,8(r5)
    afd4:	2a80030d 	sth	r10,12(r5)
    afd8:	2800038d 	sth	zero,14(r5)
    afdc:	28000415 	stw	zero,16(r5)
    afe0:	28000515 	stw	zero,20(r5)
    afe4:	28000615 	stw	zero,24(r5)
    afe8:	29400715 	stw	r5,28(r5)
    afec:	2a000815 	stw	r8,32(r5)
    aff0:	29c00915 	stw	r7,36(r5)
    aff4:	29800a15 	stw	r6,40(r5)
    aff8:	29000b15 	stw	r4,44(r5)
    affc:	01400284 	movi	r5,10
    b000:	18000015 	stw	zero,0(r3)
    b004:	18000115 	stw	zero,4(r3)
    b008:	18000215 	stw	zero,8(r3)
    b00c:	1940030d 	sth	r5,12(r3)
    b010:	1a40038d 	sth	r9,14(r3)
    b014:	18000415 	stw	zero,16(r3)
    b018:	18000515 	stw	zero,20(r3)
    b01c:	18000615 	stw	zero,24(r3)
    b020:	18c00715 	stw	r3,28(r3)
    b024:	1a000815 	stw	r8,32(r3)
    b028:	19c00915 	stw	r7,36(r3)
    b02c:	19800a15 	stw	r6,40(r3)
    b030:	19000b15 	stw	r4,44(r3)
    b034:	00c00484 	movi	r3,18
    b038:	10c0030d 	sth	r3,12(r2)
    b03c:	00c00084 	movi	r3,2
    b040:	10000015 	stw	zero,0(r2)
    b044:	10000115 	stw	zero,4(r2)
    b048:	10000215 	stw	zero,8(r2)
    b04c:	10c0038d 	sth	r3,14(r2)
    b050:	10000415 	stw	zero,16(r2)
    b054:	10000515 	stw	zero,20(r2)
    b058:	10000615 	stw	zero,24(r2)
    b05c:	10800715 	stw	r2,28(r2)
    b060:	12000815 	stw	r8,32(r2)
    b064:	11c00915 	stw	r7,36(r2)
    b068:	11800a15 	stw	r6,40(r2)
    b06c:	11000b15 	stw	r4,44(r2)
    b070:	f800283a 	ret

0000b074 <__sfp>:
    b074:	defffc04 	addi	sp,sp,-16
    b078:	00800074 	movhi	r2,1
    b07c:	10922204 	addi	r2,r2,18568
    b080:	dc400115 	stw	r17,4(sp)
    b084:	14400017 	ldw	r17,0(r2)
    b088:	dc800215 	stw	r18,8(sp)
    b08c:	dfc00315 	stw	ra,12(sp)
    b090:	88800e17 	ldw	r2,56(r17)
    b094:	dc000015 	stw	r16,0(sp)
    b098:	2025883a 	mov	r18,r4
    b09c:	10002826 	beq	r2,zero,b140 <__sfp+0xcc>
    b0a0:	8c40b804 	addi	r17,r17,736
    b0a4:	043fffc4 	movi	r16,-1
    b0a8:	89400117 	ldw	r5,4(r17)
    b0ac:	88800217 	ldw	r2,8(r17)
    b0b0:	297fffc4 	addi	r5,r5,-1
    b0b4:	28000a16 	blt	r5,zero,b0e0 <__sfp+0x6c>
    b0b8:	10c0030f 	ldh	r3,12(r2)
    b0bc:	18000c26 	beq	r3,zero,b0f0 <__sfp+0x7c>
    b0c0:	10c01a04 	addi	r3,r2,104
    b0c4:	00000206 	br	b0d0 <__sfp+0x5c>
    b0c8:	19bfe90f 	ldh	r6,-92(r3)
    b0cc:	30000826 	beq	r6,zero,b0f0 <__sfp+0x7c>
    b0d0:	297fffc4 	addi	r5,r5,-1
    b0d4:	18bffd04 	addi	r2,r3,-12
    b0d8:	18c01704 	addi	r3,r3,92
    b0dc:	2c3ffa1e 	bne	r5,r16,b0c8 <_gp+0xfffee84c>
    b0e0:	88800017 	ldw	r2,0(r17)
    b0e4:	10001926 	beq	r2,zero,b14c <__sfp+0xd8>
    b0e8:	1023883a 	mov	r17,r2
    b0ec:	003fee06 	br	b0a8 <_gp+0xfffee82c>
    b0f0:	00ffffc4 	movi	r3,-1
    b0f4:	10c0038d 	sth	r3,14(r2)
    b0f8:	00c00044 	movi	r3,1
    b0fc:	10c0030d 	sth	r3,12(r2)
    b100:	10000015 	stw	zero,0(r2)
    b104:	10000215 	stw	zero,8(r2)
    b108:	10000115 	stw	zero,4(r2)
    b10c:	10000415 	stw	zero,16(r2)
    b110:	10000515 	stw	zero,20(r2)
    b114:	10000615 	stw	zero,24(r2)
    b118:	10000c15 	stw	zero,48(r2)
    b11c:	10000d15 	stw	zero,52(r2)
    b120:	10001115 	stw	zero,68(r2)
    b124:	10001215 	stw	zero,72(r2)
    b128:	dfc00317 	ldw	ra,12(sp)
    b12c:	dc800217 	ldw	r18,8(sp)
    b130:	dc400117 	ldw	r17,4(sp)
    b134:	dc000017 	ldw	r16,0(sp)
    b138:	dec00404 	addi	sp,sp,16
    b13c:	f800283a 	ret
    b140:	8809883a 	mov	r4,r17
    b144:	000af680 	call	af68 <__sinit>
    b148:	003fd506 	br	b0a0 <_gp+0xfffee824>
    b14c:	9009883a 	mov	r4,r18
    b150:	01400104 	movi	r5,4
    b154:	000aef40 	call	aef4 <__sfmoreglue>
    b158:	88800015 	stw	r2,0(r17)
    b15c:	103fe21e 	bne	r2,zero,b0e8 <_gp+0xfffee86c>
    b160:	00800304 	movi	r2,12
    b164:	90800015 	stw	r2,0(r18)
    b168:	0005883a 	mov	r2,zero
    b16c:	003fee06 	br	b128 <_gp+0xfffee8ac>

0000b170 <__sfp_lock_acquire>:
    b170:	f800283a 	ret

0000b174 <__sfp_lock_release>:
    b174:	f800283a 	ret

0000b178 <__sinit_lock_acquire>:
    b178:	f800283a 	ret

0000b17c <__sinit_lock_release>:
    b17c:	f800283a 	ret

0000b180 <__fp_lock_all>:
    b180:	00800074 	movhi	r2,1
    b184:	10922304 	addi	r2,r2,18572
    b188:	11000017 	ldw	r4,0(r2)
    b18c:	01400074 	movhi	r5,1
    b190:	296bb604 	addi	r5,r5,-20776
    b194:	000baa01 	jmpi	baa0 <_fwalk>

0000b198 <__fp_unlock_all>:
    b198:	00800074 	movhi	r2,1
    b19c:	10922304 	addi	r2,r2,18572
    b1a0:	11000017 	ldw	r4,0(r2)
    b1a4:	01400074 	movhi	r5,1
    b1a8:	296bb804 	addi	r5,r5,-20768
    b1ac:	000baa01 	jmpi	baa0 <_fwalk>

0000b1b0 <_malloc_trim_r>:
    b1b0:	defffb04 	addi	sp,sp,-20
    b1b4:	dcc00315 	stw	r19,12(sp)
    b1b8:	dc800215 	stw	r18,8(sp)
    b1bc:	dc400115 	stw	r17,4(sp)
    b1c0:	dc000015 	stw	r16,0(sp)
    b1c4:	2827883a 	mov	r19,r5
    b1c8:	dfc00415 	stw	ra,16(sp)
    b1cc:	04400074 	movhi	r17,1
    b1d0:	8c4b9804 	addi	r17,r17,11872
    b1d4:	2021883a 	mov	r16,r4
    b1d8:	000fcc40 	call	fcc4 <__malloc_lock>
    b1dc:	88800217 	ldw	r2,8(r17)
    b1e0:	14800117 	ldw	r18,4(r2)
    b1e4:	00bfff04 	movi	r2,-4
    b1e8:	90a4703a 	and	r18,r18,r2
    b1ec:	9083fbc4 	addi	r2,r18,4079
    b1f0:	14e7c83a 	sub	r19,r2,r19
    b1f4:	9826d33a 	srli	r19,r19,12
    b1f8:	0083ffc4 	movi	r2,4095
    b1fc:	9cffffc4 	addi	r19,r19,-1
    b200:	9826933a 	slli	r19,r19,12
    b204:	14c0060e 	bge	r2,r19,b220 <_malloc_trim_r+0x70>
    b208:	8009883a 	mov	r4,r16
    b20c:	000b883a 	mov	r5,zero
    b210:	00070e00 	call	70e0 <_sbrk_r>
    b214:	88c00217 	ldw	r3,8(r17)
    b218:	1c87883a 	add	r3,r3,r18
    b21c:	10c00a26 	beq	r2,r3,b248 <_malloc_trim_r+0x98>
    b220:	8009883a 	mov	r4,r16
    b224:	000fce40 	call	fce4 <__malloc_unlock>
    b228:	0005883a 	mov	r2,zero
    b22c:	dfc00417 	ldw	ra,16(sp)
    b230:	dcc00317 	ldw	r19,12(sp)
    b234:	dc800217 	ldw	r18,8(sp)
    b238:	dc400117 	ldw	r17,4(sp)
    b23c:	dc000017 	ldw	r16,0(sp)
    b240:	dec00504 	addi	sp,sp,20
    b244:	f800283a 	ret
    b248:	8009883a 	mov	r4,r16
    b24c:	04cbc83a 	sub	r5,zero,r19
    b250:	00070e00 	call	70e0 <_sbrk_r>
    b254:	00ffffc4 	movi	r3,-1
    b258:	10c01326 	beq	r2,r3,b2a8 <_malloc_trim_r+0xf8>
    b25c:	00800074 	movhi	r2,1
    b260:	1098e104 	addi	r2,r2,25476
    b264:	11000017 	ldw	r4,0(r2)
    b268:	88c00217 	ldw	r3,8(r17)
    b26c:	94e5c83a 	sub	r18,r18,r19
    b270:	94800054 	ori	r18,r18,1
    b274:	24e7c83a 	sub	r19,r4,r19
    b278:	1c800115 	stw	r18,4(r3)
    b27c:	8009883a 	mov	r4,r16
    b280:	14c00015 	stw	r19,0(r2)
    b284:	000fce40 	call	fce4 <__malloc_unlock>
    b288:	00800044 	movi	r2,1
    b28c:	dfc00417 	ldw	ra,16(sp)
    b290:	dcc00317 	ldw	r19,12(sp)
    b294:	dc800217 	ldw	r18,8(sp)
    b298:	dc400117 	ldw	r17,4(sp)
    b29c:	dc000017 	ldw	r16,0(sp)
    b2a0:	dec00504 	addi	sp,sp,20
    b2a4:	f800283a 	ret
    b2a8:	8009883a 	mov	r4,r16
    b2ac:	000b883a 	mov	r5,zero
    b2b0:	00070e00 	call	70e0 <_sbrk_r>
    b2b4:	88c00217 	ldw	r3,8(r17)
    b2b8:	014003c4 	movi	r5,15
    b2bc:	10c9c83a 	sub	r4,r2,r3
    b2c0:	293fd70e 	bge	r5,r4,b220 <_gp+0xfffee9a4>
    b2c4:	01400074 	movhi	r5,1
    b2c8:	29521f04 	addi	r5,r5,18556
    b2cc:	29400017 	ldw	r5,0(r5)
    b2d0:	21000054 	ori	r4,r4,1
    b2d4:	19000115 	stw	r4,4(r3)
    b2d8:	1145c83a 	sub	r2,r2,r5
    b2dc:	01400074 	movhi	r5,1
    b2e0:	2958e104 	addi	r5,r5,25476
    b2e4:	28800015 	stw	r2,0(r5)
    b2e8:	003fcd06 	br	b220 <_gp+0xfffee9a4>

0000b2ec <_free_r>:
    b2ec:	defffd04 	addi	sp,sp,-12
    b2f0:	dc400115 	stw	r17,4(sp)
    b2f4:	dc000015 	stw	r16,0(sp)
    b2f8:	dfc00215 	stw	ra,8(sp)
    b2fc:	2821883a 	mov	r16,r5
    b300:	2023883a 	mov	r17,r4
    b304:	28004b26 	beq	r5,zero,b434 <_free_r+0x148>
    b308:	000fcc40 	call	fcc4 <__malloc_lock>
    b30c:	823fff17 	ldw	r8,-4(r16)
    b310:	00bfff84 	movi	r2,-2
    b314:	81bffe04 	addi	r6,r16,-8
    b318:	4084703a 	and	r2,r8,r2
    b31c:	3087883a 	add	r3,r6,r2
    b320:	01400074 	movhi	r5,1
    b324:	294b9804 	addi	r5,r5,11872
    b328:	1a400117 	ldw	r9,4(r3)
    b32c:	29000217 	ldw	r4,8(r5)
    b330:	01ffff04 	movi	r7,-4
    b334:	49ce703a 	and	r7,r9,r7
    b338:	20c06526 	beq	r4,r3,b4d0 <_free_r+0x1e4>
    b33c:	19c00115 	stw	r7,4(r3)
    b340:	4200004c 	andi	r8,r8,1
    b344:	40003026 	beq	r8,zero,b408 <_free_r+0x11c>
    b348:	0009883a 	mov	r4,zero
    b34c:	19d1883a 	add	r8,r3,r7
    b350:	42000117 	ldw	r8,4(r8)
    b354:	4200004c 	andi	r8,r8,1
    b358:	4000061e 	bne	r8,zero,b374 <_free_r+0x88>
    b35c:	11c5883a 	add	r2,r2,r7
    b360:	19c00217 	ldw	r7,8(r3)
    b364:	20004e26 	beq	r4,zero,b4a0 <_free_r+0x1b4>
    b368:	18c00317 	ldw	r3,12(r3)
    b36c:	38c00315 	stw	r3,12(r7)
    b370:	19c00215 	stw	r7,8(r3)
    b374:	11c00054 	ori	r7,r2,1
    b378:	3087883a 	add	r3,r6,r2
    b37c:	31c00115 	stw	r7,4(r6)
    b380:	18800015 	stw	r2,0(r3)
    b384:	20001a1e 	bne	r4,zero,b3f0 <_free_r+0x104>
    b388:	00c07fc4 	movi	r3,511
    b38c:	18802e2e 	bgeu	r3,r2,b448 <_free_r+0x15c>
    b390:	1006d27a 	srli	r3,r2,9
    b394:	01000104 	movi	r4,4
    b398:	20c06636 	bltu	r4,r3,b534 <_free_r+0x248>
    b39c:	1008d1ba 	srli	r4,r2,6
    b3a0:	21000e04 	addi	r4,r4,56
    b3a4:	210f883a 	add	r7,r4,r4
    b3a8:	39cf883a 	add	r7,r7,r7
    b3ac:	39cf883a 	add	r7,r7,r7
    b3b0:	29cf883a 	add	r7,r5,r7
    b3b4:	38c00217 	ldw	r3,8(r7)
    b3b8:	01400074 	movhi	r5,1
    b3bc:	294b9804 	addi	r5,r5,11872
    b3c0:	19c06126 	beq	r3,r7,b548 <_free_r+0x25c>
    b3c4:	013fff04 	movi	r4,-4
    b3c8:	19400117 	ldw	r5,4(r3)
    b3cc:	290a703a 	and	r5,r5,r4
    b3d0:	1140022e 	bgeu	r2,r5,b3dc <_free_r+0xf0>
    b3d4:	18c00217 	ldw	r3,8(r3)
    b3d8:	38fffb1e 	bne	r7,r3,b3c8 <_gp+0xfffeeb4c>
    b3dc:	18800317 	ldw	r2,12(r3)
    b3e0:	30800315 	stw	r2,12(r6)
    b3e4:	30c00215 	stw	r3,8(r6)
    b3e8:	11800215 	stw	r6,8(r2)
    b3ec:	19800315 	stw	r6,12(r3)
    b3f0:	8809883a 	mov	r4,r17
    b3f4:	dfc00217 	ldw	ra,8(sp)
    b3f8:	dc400117 	ldw	r17,4(sp)
    b3fc:	dc000017 	ldw	r16,0(sp)
    b400:	dec00304 	addi	sp,sp,12
    b404:	000fce41 	jmpi	fce4 <__malloc_unlock>
    b408:	813ffe17 	ldw	r4,-8(r16)
    b40c:	2a400204 	addi	r9,r5,8
    b410:	310dc83a 	sub	r6,r6,r4
    b414:	32000217 	ldw	r8,8(r6)
    b418:	1105883a 	add	r2,r2,r4
    b41c:	42404326 	beq	r8,r9,b52c <_free_r+0x240>
    b420:	32400317 	ldw	r9,12(r6)
    b424:	0009883a 	mov	r4,zero
    b428:	42400315 	stw	r9,12(r8)
    b42c:	4a000215 	stw	r8,8(r9)
    b430:	003fc606 	br	b34c <_gp+0xfffeead0>
    b434:	dfc00217 	ldw	ra,8(sp)
    b438:	dc400117 	ldw	r17,4(sp)
    b43c:	dc000017 	ldw	r16,0(sp)
    b440:	dec00304 	addi	sp,sp,12
    b444:	f800283a 	ret
    b448:	1004d0fa 	srli	r2,r2,3
    b44c:	02000044 	movi	r8,1
    b450:	29c00117 	ldw	r7,4(r5)
    b454:	1087883a 	add	r3,r2,r2
    b458:	18c7883a 	add	r3,r3,r3
    b45c:	1005d0ba 	srai	r2,r2,2
    b460:	18c7883a 	add	r3,r3,r3
    b464:	28c7883a 	add	r3,r5,r3
    b468:	19000217 	ldw	r4,8(r3)
    b46c:	4084983a 	sll	r2,r8,r2
    b470:	30c00315 	stw	r3,12(r6)
    b474:	31000215 	stw	r4,8(r6)
    b478:	11c4b03a 	or	r2,r2,r7
    b47c:	21800315 	stw	r6,12(r4)
    b480:	8809883a 	mov	r4,r17
    b484:	28800115 	stw	r2,4(r5)
    b488:	19800215 	stw	r6,8(r3)
    b48c:	dfc00217 	ldw	ra,8(sp)
    b490:	dc400117 	ldw	r17,4(sp)
    b494:	dc000017 	ldw	r16,0(sp)
    b498:	dec00304 	addi	sp,sp,12
    b49c:	000fce41 	jmpi	fce4 <__malloc_unlock>
    b4a0:	02000074 	movhi	r8,1
    b4a4:	420b9a04 	addi	r8,r8,11880
    b4a8:	3a3faf1e 	bne	r7,r8,b368 <_gp+0xfffeeaec>
    b4ac:	29800515 	stw	r6,20(r5)
    b4b0:	29800415 	stw	r6,16(r5)
    b4b4:	11000054 	ori	r4,r2,1
    b4b8:	3087883a 	add	r3,r6,r2
    b4bc:	31c00315 	stw	r7,12(r6)
    b4c0:	31c00215 	stw	r7,8(r6)
    b4c4:	31000115 	stw	r4,4(r6)
    b4c8:	18800015 	stw	r2,0(r3)
    b4cc:	003fc806 	br	b3f0 <_gp+0xfffeeb74>
    b4d0:	4200004c 	andi	r8,r8,1
    b4d4:	3885883a 	add	r2,r7,r2
    b4d8:	4000071e 	bne	r8,zero,b4f8 <_free_r+0x20c>
    b4dc:	81fffe17 	ldw	r7,-8(r16)
    b4e0:	31cdc83a 	sub	r6,r6,r7
    b4e4:	30c00317 	ldw	r3,12(r6)
    b4e8:	31000217 	ldw	r4,8(r6)
    b4ec:	11c5883a 	add	r2,r2,r7
    b4f0:	20c00315 	stw	r3,12(r4)
    b4f4:	19000215 	stw	r4,8(r3)
    b4f8:	00c00074 	movhi	r3,1
    b4fc:	18d22004 	addi	r3,r3,18560
    b500:	18c00017 	ldw	r3,0(r3)
    b504:	11000054 	ori	r4,r2,1
    b508:	31000115 	stw	r4,4(r6)
    b50c:	29800215 	stw	r6,8(r5)
    b510:	10ffb736 	bltu	r2,r3,b3f0 <_gp+0xfffeeb74>
    b514:	00800074 	movhi	r2,1
    b518:	1098c804 	addi	r2,r2,25376
    b51c:	11400017 	ldw	r5,0(r2)
    b520:	8809883a 	mov	r4,r17
    b524:	000b1b00 	call	b1b0 <_malloc_trim_r>
    b528:	003fb106 	br	b3f0 <_gp+0xfffeeb74>
    b52c:	01000044 	movi	r4,1
    b530:	003f8606 	br	b34c <_gp+0xfffeead0>
    b534:	01000504 	movi	r4,20
    b538:	20c00b36 	bltu	r4,r3,b568 <_free_r+0x27c>
    b53c:	190016c4 	addi	r4,r3,91
    b540:	210f883a 	add	r7,r4,r4
    b544:	003f9806 	br	b3a8 <_gp+0xfffeeb2c>
    b548:	2009d0ba 	srai	r4,r4,2
    b54c:	00800044 	movi	r2,1
    b550:	29c00117 	ldw	r7,4(r5)
    b554:	1108983a 	sll	r4,r2,r4
    b558:	1805883a 	mov	r2,r3
    b55c:	21c8b03a 	or	r4,r4,r7
    b560:	29000115 	stw	r4,4(r5)
    b564:	003f9e06 	br	b3e0 <_gp+0xfffeeb64>
    b568:	01001504 	movi	r4,84
    b56c:	20c00436 	bltu	r4,r3,b580 <_free_r+0x294>
    b570:	1008d33a 	srli	r4,r2,12
    b574:	21001b84 	addi	r4,r4,110
    b578:	210f883a 	add	r7,r4,r4
    b57c:	003f8a06 	br	b3a8 <_gp+0xfffeeb2c>
    b580:	01005504 	movi	r4,340
    b584:	20c00436 	bltu	r4,r3,b598 <_free_r+0x2ac>
    b588:	1008d3fa 	srli	r4,r2,15
    b58c:	21001dc4 	addi	r4,r4,119
    b590:	210f883a 	add	r7,r4,r4
    b594:	003f8406 	br	b3a8 <_gp+0xfffeeb2c>
    b598:	01015504 	movi	r4,1364
    b59c:	20c00436 	bltu	r4,r3,b5b0 <_free_r+0x2c4>
    b5a0:	1008d4ba 	srli	r4,r2,18
    b5a4:	21001f04 	addi	r4,r4,124
    b5a8:	210f883a 	add	r7,r4,r4
    b5ac:	003f7e06 	br	b3a8 <_gp+0xfffeeb2c>
    b5b0:	01c03f04 	movi	r7,252
    b5b4:	01001f84 	movi	r4,126
    b5b8:	003f7b06 	br	b3a8 <_gp+0xfffeeb2c>

0000b5bc <__sfvwrite_r>:
    b5bc:	30800217 	ldw	r2,8(r6)
    b5c0:	defff504 	addi	sp,sp,-44
    b5c4:	dd400615 	stw	r21,24(sp)
    b5c8:	dd000515 	stw	r20,20(sp)
    b5cc:	dc000115 	stw	r16,4(sp)
    b5d0:	dfc00a15 	stw	ra,40(sp)
    b5d4:	df000915 	stw	fp,36(sp)
    b5d8:	ddc00815 	stw	r23,32(sp)
    b5dc:	dd800715 	stw	r22,28(sp)
    b5e0:	dcc00415 	stw	r19,16(sp)
    b5e4:	dc800315 	stw	r18,12(sp)
    b5e8:	dc400215 	stw	r17,8(sp)
    b5ec:	3029883a 	mov	r20,r6
    b5f0:	202b883a 	mov	r21,r4
    b5f4:	2821883a 	mov	r16,r5
    b5f8:	10002126 	beq	r2,zero,b680 <__sfvwrite_r+0xc4>
    b5fc:	2880030b 	ldhu	r2,12(r5)
    b600:	10c0020c 	andi	r3,r2,8
    b604:	18ffffcc 	andi	r3,r3,65535
    b608:	18e0001c 	xori	r3,r3,32768
    b60c:	18e00004 	addi	r3,r3,-32768
    b610:	18002826 	beq	r3,zero,b6b4 <__sfvwrite_r+0xf8>
    b614:	28c00417 	ldw	r3,16(r5)
    b618:	18002626 	beq	r3,zero,b6b4 <__sfvwrite_r+0xf8>
    b61c:	10c0008c 	andi	r3,r2,2
    b620:	18ffffcc 	andi	r3,r3,65535
    b624:	18e0001c 	xori	r3,r3,32768
    b628:	18e00004 	addi	r3,r3,-32768
    b62c:	a4400017 	ldw	r17,0(r20)
    b630:	18002b26 	beq	r3,zero,b6e0 <__sfvwrite_r+0x124>
    b634:	0027883a 	mov	r19,zero
    b638:	0025883a 	mov	r18,zero
    b63c:	05810004 	movi	r22,1024
    b640:	980d883a 	mov	r6,r19
    b644:	a809883a 	mov	r4,r21
    b648:	90004f26 	beq	r18,zero,b788 <__sfvwrite_r+0x1cc>
    b64c:	900f883a 	mov	r7,r18
    b650:	81400717 	ldw	r5,28(r16)
    b654:	b480012e 	bgeu	r22,r18,b65c <__sfvwrite_r+0xa0>
    b658:	01c10004 	movi	r7,1024
    b65c:	80800917 	ldw	r2,36(r16)
    b660:	103ee83a 	callr	r2
    b664:	0080540e 	bge	zero,r2,b7b8 <__sfvwrite_r+0x1fc>
    b668:	a0c00217 	ldw	r3,8(r20)
    b66c:	98a7883a 	add	r19,r19,r2
    b670:	90a5c83a 	sub	r18,r18,r2
    b674:	1885c83a 	sub	r2,r3,r2
    b678:	a0800215 	stw	r2,8(r20)
    b67c:	103ff01e 	bne	r2,zero,b640 <_gp+0xfffeedc4>
    b680:	0005883a 	mov	r2,zero
    b684:	dfc00a17 	ldw	ra,40(sp)
    b688:	df000917 	ldw	fp,36(sp)
    b68c:	ddc00817 	ldw	r23,32(sp)
    b690:	dd800717 	ldw	r22,28(sp)
    b694:	dd400617 	ldw	r21,24(sp)
    b698:	dd000517 	ldw	r20,20(sp)
    b69c:	dcc00417 	ldw	r19,16(sp)
    b6a0:	dc800317 	ldw	r18,12(sp)
    b6a4:	dc400217 	ldw	r17,8(sp)
    b6a8:	dc000117 	ldw	r16,4(sp)
    b6ac:	dec00b04 	addi	sp,sp,44
    b6b0:	f800283a 	ret
    b6b4:	a809883a 	mov	r4,r21
    b6b8:	800b883a 	mov	r5,r16
    b6bc:	00093280 	call	9328 <__swsetup_r>
    b6c0:	1000f01e 	bne	r2,zero,ba84 <__sfvwrite_r+0x4c8>
    b6c4:	8080030b 	ldhu	r2,12(r16)
    b6c8:	a4400017 	ldw	r17,0(r20)
    b6cc:	10c0008c 	andi	r3,r2,2
    b6d0:	18ffffcc 	andi	r3,r3,65535
    b6d4:	18e0001c 	xori	r3,r3,32768
    b6d8:	18e00004 	addi	r3,r3,-32768
    b6dc:	183fd51e 	bne	r3,zero,b634 <_gp+0xfffeedb8>
    b6e0:	10c0004c 	andi	r3,r2,1
    b6e4:	002d883a 	mov	r22,zero
    b6e8:	1800381e 	bne	r3,zero,b7cc <__sfvwrite_r+0x210>
    b6ec:	0025883a 	mov	r18,zero
    b6f0:	90002126 	beq	r18,zero,b778 <__sfvwrite_r+0x1bc>
    b6f4:	10c0800c 	andi	r3,r2,512
    b6f8:	18ffffcc 	andi	r3,r3,65535
    b6fc:	18e0001c 	xori	r3,r3,32768
    b700:	18e00004 	addi	r3,r3,-32768
    b704:	84c00217 	ldw	r19,8(r16)
    b708:	18006b26 	beq	r3,zero,b8b8 <__sfvwrite_r+0x2fc>
    b70c:	980f883a 	mov	r7,r19
    b710:	94c08636 	bltu	r18,r19,b92c <__sfvwrite_r+0x370>
    b714:	10c1200c 	andi	r3,r2,1152
    b718:	18009f1e 	bne	r3,zero,b998 <__sfvwrite_r+0x3dc>
    b71c:	81000017 	ldw	r4,0(r16)
    b720:	982f883a 	mov	r23,r19
    b724:	9039883a 	mov	fp,r18
    b728:	9027883a 	mov	r19,r18
    b72c:	380d883a 	mov	r6,r7
    b730:	b00b883a 	mov	r5,r22
    b734:	d9c00015 	stw	r7,0(sp)
    b738:	000bf7c0 	call	bf7c <memmove>
    b73c:	d9c00017 	ldw	r7,0(sp)
    b740:	81000217 	ldw	r4,8(r16)
    b744:	80800017 	ldw	r2,0(r16)
    b748:	25efc83a 	sub	r23,r4,r23
    b74c:	11cf883a 	add	r7,r2,r7
    b750:	85c00215 	stw	r23,8(r16)
    b754:	81c00015 	stw	r7,0(r16)
    b758:	a0800217 	ldw	r2,8(r20)
    b75c:	b72d883a 	add	r22,r22,fp
    b760:	9725c83a 	sub	r18,r18,fp
    b764:	14e7c83a 	sub	r19,r2,r19
    b768:	a4c00215 	stw	r19,8(r20)
    b76c:	983fc426 	beq	r19,zero,b680 <_gp+0xfffeee04>
    b770:	8080030b 	ldhu	r2,12(r16)
    b774:	903fdf1e 	bne	r18,zero,b6f4 <_gp+0xfffeee78>
    b778:	8d800017 	ldw	r22,0(r17)
    b77c:	8c800117 	ldw	r18,4(r17)
    b780:	8c400204 	addi	r17,r17,8
    b784:	003fda06 	br	b6f0 <_gp+0xfffeee74>
    b788:	8cc00017 	ldw	r19,0(r17)
    b78c:	8c800117 	ldw	r18,4(r17)
    b790:	8c400204 	addi	r17,r17,8
    b794:	003faa06 	br	b640 <_gp+0xfffeedc4>
    b798:	000d1f80 	call	d1f8 <_realloc_r>
    b79c:	102f883a 	mov	r23,r2
    b7a0:	10009f1e 	bne	r2,zero,ba20 <__sfvwrite_r+0x464>
    b7a4:	81400417 	ldw	r5,16(r16)
    b7a8:	a809883a 	mov	r4,r21
    b7ac:	000b2ec0 	call	b2ec <_free_r>
    b7b0:	00800304 	movi	r2,12
    b7b4:	a8800015 	stw	r2,0(r21)
    b7b8:	80c0030b 	ldhu	r3,12(r16)
    b7bc:	00bfffc4 	movi	r2,-1
    b7c0:	18c01014 	ori	r3,r3,64
    b7c4:	80c0030d 	sth	r3,12(r16)
    b7c8:	003fae06 	br	b684 <_gp+0xfffeee08>
    b7cc:	0007883a 	mov	r3,zero
    b7d0:	0039883a 	mov	fp,zero
    b7d4:	0025883a 	mov	r18,zero
    b7d8:	90001e26 	beq	r18,zero,b854 <__sfvwrite_r+0x298>
    b7dc:	18006526 	beq	r3,zero,b974 <__sfvwrite_r+0x3b8>
    b7e0:	b02f883a 	mov	r23,r22
    b7e4:	9580012e 	bgeu	r18,r22,b7ec <__sfvwrite_r+0x230>
    b7e8:	902f883a 	mov	r23,r18
    b7ec:	81000017 	ldw	r4,0(r16)
    b7f0:	80800417 	ldw	r2,16(r16)
    b7f4:	84c00217 	ldw	r19,8(r16)
    b7f8:	81c00517 	ldw	r7,20(r16)
    b7fc:	1100022e 	bgeu	r2,r4,b808 <__sfvwrite_r+0x24c>
    b800:	99e7883a 	add	r19,r19,r7
    b804:	9dc01816 	blt	r19,r23,b868 <__sfvwrite_r+0x2ac>
    b808:	b9c03b16 	blt	r23,r7,b8f8 <__sfvwrite_r+0x33c>
    b80c:	80800917 	ldw	r2,36(r16)
    b810:	81400717 	ldw	r5,28(r16)
    b814:	a809883a 	mov	r4,r21
    b818:	d8c00015 	stw	r3,0(sp)
    b81c:	e00d883a 	mov	r6,fp
    b820:	103ee83a 	callr	r2
    b824:	1027883a 	mov	r19,r2
    b828:	d8c00017 	ldw	r3,0(sp)
    b82c:	00bfe20e 	bge	zero,r2,b7b8 <_gp+0xfffeef3c>
    b830:	b4edc83a 	sub	r22,r22,r19
    b834:	b0001a26 	beq	r22,zero,b8a0 <__sfvwrite_r+0x2e4>
    b838:	a0800217 	ldw	r2,8(r20)
    b83c:	e4f9883a 	add	fp,fp,r19
    b840:	94e5c83a 	sub	r18,r18,r19
    b844:	14e7c83a 	sub	r19,r2,r19
    b848:	a4c00215 	stw	r19,8(r20)
    b84c:	983f8c26 	beq	r19,zero,b680 <_gp+0xfffeee04>
    b850:	903fe21e 	bne	r18,zero,b7dc <_gp+0xfffeef60>
    b854:	8f000017 	ldw	fp,0(r17)
    b858:	8c800117 	ldw	r18,4(r17)
    b85c:	0007883a 	mov	r3,zero
    b860:	8c400204 	addi	r17,r17,8
    b864:	003fdc06 	br	b7d8 <_gp+0xfffeef5c>
    b868:	e00b883a 	mov	r5,fp
    b86c:	980d883a 	mov	r6,r19
    b870:	d8c00015 	stw	r3,0(sp)
    b874:	000bf7c0 	call	bf7c <memmove>
    b878:	80800017 	ldw	r2,0(r16)
    b87c:	a809883a 	mov	r4,r21
    b880:	800b883a 	mov	r5,r16
    b884:	14c5883a 	add	r2,r2,r19
    b888:	80800015 	stw	r2,0(r16)
    b88c:	000acc00 	call	acc0 <_fflush_r>
    b890:	d8c00017 	ldw	r3,0(sp)
    b894:	103fc81e 	bne	r2,zero,b7b8 <_gp+0xfffeef3c>
    b898:	b4edc83a 	sub	r22,r22,r19
    b89c:	b03fe61e 	bne	r22,zero,b838 <_gp+0xfffeefbc>
    b8a0:	a809883a 	mov	r4,r21
    b8a4:	800b883a 	mov	r5,r16
    b8a8:	000acc00 	call	acc0 <_fflush_r>
    b8ac:	103fc21e 	bne	r2,zero,b7b8 <_gp+0xfffeef3c>
    b8b0:	0007883a 	mov	r3,zero
    b8b4:	003fe006 	br	b838 <_gp+0xfffeefbc>
    b8b8:	81000017 	ldw	r4,0(r16)
    b8bc:	80800417 	ldw	r2,16(r16)
    b8c0:	1100022e 	bgeu	r2,r4,b8cc <__sfvwrite_r+0x310>
    b8c4:	9839883a 	mov	fp,r19
    b8c8:	9c806036 	bltu	r19,r18,ba4c <__sfvwrite_r+0x490>
    b8cc:	81c00517 	ldw	r7,20(r16)
    b8d0:	91c01c36 	bltu	r18,r7,b944 <__sfvwrite_r+0x388>
    b8d4:	80800917 	ldw	r2,36(r16)
    b8d8:	81400717 	ldw	r5,28(r16)
    b8dc:	a809883a 	mov	r4,r21
    b8e0:	b00d883a 	mov	r6,r22
    b8e4:	103ee83a 	callr	r2
    b8e8:	1027883a 	mov	r19,r2
    b8ec:	00bfb20e 	bge	zero,r2,b7b8 <_gp+0xfffeef3c>
    b8f0:	1039883a 	mov	fp,r2
    b8f4:	003f9806 	br	b758 <_gp+0xfffeeedc>
    b8f8:	b80d883a 	mov	r6,r23
    b8fc:	e00b883a 	mov	r5,fp
    b900:	d8c00015 	stw	r3,0(sp)
    b904:	000bf7c0 	call	bf7c <memmove>
    b908:	80800217 	ldw	r2,8(r16)
    b90c:	81000017 	ldw	r4,0(r16)
    b910:	b827883a 	mov	r19,r23
    b914:	15c5c83a 	sub	r2,r2,r23
    b918:	25ef883a 	add	r23,r4,r23
    b91c:	80800215 	stw	r2,8(r16)
    b920:	85c00015 	stw	r23,0(r16)
    b924:	d8c00017 	ldw	r3,0(sp)
    b928:	003fc106 	br	b830 <_gp+0xfffeefb4>
    b92c:	81000017 	ldw	r4,0(r16)
    b930:	902f883a 	mov	r23,r18
    b934:	9039883a 	mov	fp,r18
    b938:	9027883a 	mov	r19,r18
    b93c:	900f883a 	mov	r7,r18
    b940:	003f7a06 	br	b72c <_gp+0xfffeeeb0>
    b944:	b00b883a 	mov	r5,r22
    b948:	900d883a 	mov	r6,r18
    b94c:	000bf7c0 	call	bf7c <memmove>
    b950:	80c00217 	ldw	r3,8(r16)
    b954:	80800017 	ldw	r2,0(r16)
    b958:	9027883a 	mov	r19,r18
    b95c:	1c87c83a 	sub	r3,r3,r18
    b960:	1485883a 	add	r2,r2,r18
    b964:	80c00215 	stw	r3,8(r16)
    b968:	80800015 	stw	r2,0(r16)
    b96c:	9039883a 	mov	fp,r18
    b970:	003f7906 	br	b758 <_gp+0xfffeeedc>
    b974:	e009883a 	mov	r4,fp
    b978:	01400284 	movi	r5,10
    b97c:	900d883a 	mov	r6,r18
    b980:	000be840 	call	be84 <memchr>
    b984:	10003c26 	beq	r2,zero,ba78 <__sfvwrite_r+0x4bc>
    b988:	15800044 	addi	r22,r2,1
    b98c:	b72dc83a 	sub	r22,r22,fp
    b990:	00c00044 	movi	r3,1
    b994:	003f9206 	br	b7e0 <_gp+0xfffeef64>
    b998:	81000517 	ldw	r4,20(r16)
    b99c:	81400417 	ldw	r5,16(r16)
    b9a0:	80c00017 	ldw	r3,0(r16)
    b9a4:	210d883a 	add	r6,r4,r4
    b9a8:	3109883a 	add	r4,r6,r4
    b9ac:	2026d7fa 	srli	r19,r4,31
    b9b0:	1979c83a 	sub	fp,r3,r5
    b9b4:	e1800044 	addi	r6,fp,1
    b9b8:	9909883a 	add	r4,r19,r4
    b9bc:	2027d07a 	srai	r19,r4,1
    b9c0:	3489883a 	add	r4,r6,r18
    b9c4:	980d883a 	mov	r6,r19
    b9c8:	9900022e 	bgeu	r19,r4,b9d4 <__sfvwrite_r+0x418>
    b9cc:	2027883a 	mov	r19,r4
    b9d0:	200d883a 	mov	r6,r4
    b9d4:	1081000c 	andi	r2,r2,1024
    b9d8:	10bfffcc 	andi	r2,r2,65535
    b9dc:	10a0001c 	xori	r2,r2,32768
    b9e0:	10a00004 	addi	r2,r2,-32768
    b9e4:	a809883a 	mov	r4,r21
    b9e8:	103f6b26 	beq	r2,zero,b798 <_gp+0xfffeef1c>
    b9ec:	300b883a 	mov	r5,r6
    b9f0:	00066640 	call	6664 <_malloc_r>
    b9f4:	102f883a 	mov	r23,r2
    b9f8:	103f6d26 	beq	r2,zero,b7b0 <_gp+0xfffeef34>
    b9fc:	81400417 	ldw	r5,16(r16)
    ba00:	1009883a 	mov	r4,r2
    ba04:	e00d883a 	mov	r6,fp
    ba08:	0006de80 	call	6de8 <memcpy>
    ba0c:	8080030b 	ldhu	r2,12(r16)
    ba10:	00fedfc4 	movi	r3,-1153
    ba14:	10c4703a 	and	r2,r2,r3
    ba18:	10802014 	ori	r2,r2,128
    ba1c:	8080030d 	sth	r2,12(r16)
    ba20:	bf09883a 	add	r4,r23,fp
    ba24:	9f07c83a 	sub	r3,r19,fp
    ba28:	85c00415 	stw	r23,16(r16)
    ba2c:	84c00515 	stw	r19,20(r16)
    ba30:	81000015 	stw	r4,0(r16)
    ba34:	902f883a 	mov	r23,r18
    ba38:	80c00215 	stw	r3,8(r16)
    ba3c:	9039883a 	mov	fp,r18
    ba40:	9027883a 	mov	r19,r18
    ba44:	900f883a 	mov	r7,r18
    ba48:	003f3806 	br	b72c <_gp+0xfffeeeb0>
    ba4c:	b00b883a 	mov	r5,r22
    ba50:	980d883a 	mov	r6,r19
    ba54:	000bf7c0 	call	bf7c <memmove>
    ba58:	80800017 	ldw	r2,0(r16)
    ba5c:	a809883a 	mov	r4,r21
    ba60:	800b883a 	mov	r5,r16
    ba64:	14c5883a 	add	r2,r2,r19
    ba68:	80800015 	stw	r2,0(r16)
    ba6c:	000acc00 	call	acc0 <_fflush_r>
    ba70:	103f3926 	beq	r2,zero,b758 <_gp+0xfffeeedc>
    ba74:	003f5006 	br	b7b8 <_gp+0xfffeef3c>
    ba78:	95800044 	addi	r22,r18,1
    ba7c:	00c00044 	movi	r3,1
    ba80:	003f5706 	br	b7e0 <_gp+0xfffeef64>
    ba84:	80c0030b 	ldhu	r3,12(r16)
    ba88:	00bfffc4 	movi	r2,-1
    ba8c:	18c01014 	ori	r3,r3,64
    ba90:	80c0030d 	sth	r3,12(r16)
    ba94:	00c00244 	movi	r3,9
    ba98:	a8c00015 	stw	r3,0(r21)
    ba9c:	003ef906 	br	b684 <_gp+0xfffeee08>

0000baa0 <_fwalk>:
    baa0:	defff904 	addi	sp,sp,-28
    baa4:	dcc00315 	stw	r19,12(sp)
    baa8:	24c0b804 	addi	r19,r4,736
    baac:	dd400515 	stw	r21,20(sp)
    bab0:	dd000415 	stw	r20,16(sp)
    bab4:	dfc00615 	stw	ra,24(sp)
    bab8:	dc800215 	stw	r18,8(sp)
    babc:	dc400115 	stw	r17,4(sp)
    bac0:	dc000015 	stw	r16,0(sp)
    bac4:	282b883a 	mov	r21,r5
    bac8:	0029883a 	mov	r20,zero
    bacc:	000b1700 	call	b170 <__sfp_lock_acquire>
    bad0:	98001226 	beq	r19,zero,bb1c <_fwalk+0x7c>
    bad4:	04bfffc4 	movi	r18,-1
    bad8:	9c400117 	ldw	r17,4(r19)
    badc:	9c000217 	ldw	r16,8(r19)
    bae0:	8c7fffc4 	addi	r17,r17,-1
    bae4:	88000b16 	blt	r17,zero,bb14 <_fwalk+0x74>
    bae8:	84000304 	addi	r16,r16,12
    baec:	80c0000f 	ldh	r3,0(r16)
    baf0:	8c7fffc4 	addi	r17,r17,-1
    baf4:	813ffd04 	addi	r4,r16,-12
    baf8:	18000426 	beq	r3,zero,bb0c <_fwalk+0x6c>
    bafc:	80c0008f 	ldh	r3,2(r16)
    bb00:	1c800226 	beq	r3,r18,bb0c <_fwalk+0x6c>
    bb04:	a83ee83a 	callr	r21
    bb08:	a0a8b03a 	or	r20,r20,r2
    bb0c:	84001704 	addi	r16,r16,92
    bb10:	8cbff61e 	bne	r17,r18,baec <_gp+0xfffef270>
    bb14:	9cc00017 	ldw	r19,0(r19)
    bb18:	983fef1e 	bne	r19,zero,bad8 <_gp+0xfffef25c>
    bb1c:	000b1740 	call	b174 <__sfp_lock_release>
    bb20:	a005883a 	mov	r2,r20
    bb24:	dfc00617 	ldw	ra,24(sp)
    bb28:	dd400517 	ldw	r21,20(sp)
    bb2c:	dd000417 	ldw	r20,16(sp)
    bb30:	dcc00317 	ldw	r19,12(sp)
    bb34:	dc800217 	ldw	r18,8(sp)
    bb38:	dc400117 	ldw	r17,4(sp)
    bb3c:	dc000017 	ldw	r16,0(sp)
    bb40:	dec00704 	addi	sp,sp,28
    bb44:	f800283a 	ret

0000bb48 <_fwalk_reent>:
    bb48:	defff804 	addi	sp,sp,-32
    bb4c:	dcc00315 	stw	r19,12(sp)
    bb50:	24c0b804 	addi	r19,r4,736
    bb54:	dd800615 	stw	r22,24(sp)
    bb58:	dd400515 	stw	r21,20(sp)
    bb5c:	dd000415 	stw	r20,16(sp)
    bb60:	dfc00715 	stw	ra,28(sp)
    bb64:	dc800215 	stw	r18,8(sp)
    bb68:	dc400115 	stw	r17,4(sp)
    bb6c:	dc000015 	stw	r16,0(sp)
    bb70:	2029883a 	mov	r20,r4
    bb74:	282b883a 	mov	r21,r5
    bb78:	002d883a 	mov	r22,zero
    bb7c:	000b1700 	call	b170 <__sfp_lock_acquire>
    bb80:	98001326 	beq	r19,zero,bbd0 <_fwalk_reent+0x88>
    bb84:	04bfffc4 	movi	r18,-1
    bb88:	9c400117 	ldw	r17,4(r19)
    bb8c:	9c000217 	ldw	r16,8(r19)
    bb90:	8c7fffc4 	addi	r17,r17,-1
    bb94:	88000c16 	blt	r17,zero,bbc8 <_fwalk_reent+0x80>
    bb98:	84000304 	addi	r16,r16,12
    bb9c:	80c0000f 	ldh	r3,0(r16)
    bba0:	8c7fffc4 	addi	r17,r17,-1
    bba4:	817ffd04 	addi	r5,r16,-12
    bba8:	18000526 	beq	r3,zero,bbc0 <_fwalk_reent+0x78>
    bbac:	80c0008f 	ldh	r3,2(r16)
    bbb0:	a009883a 	mov	r4,r20
    bbb4:	1c800226 	beq	r3,r18,bbc0 <_fwalk_reent+0x78>
    bbb8:	a83ee83a 	callr	r21
    bbbc:	b0acb03a 	or	r22,r22,r2
    bbc0:	84001704 	addi	r16,r16,92
    bbc4:	8cbff51e 	bne	r17,r18,bb9c <_gp+0xfffef320>
    bbc8:	9cc00017 	ldw	r19,0(r19)
    bbcc:	983fee1e 	bne	r19,zero,bb88 <_gp+0xfffef30c>
    bbd0:	000b1740 	call	b174 <__sfp_lock_release>
    bbd4:	b005883a 	mov	r2,r22
    bbd8:	dfc00717 	ldw	ra,28(sp)
    bbdc:	dd800617 	ldw	r22,24(sp)
    bbe0:	dd400517 	ldw	r21,20(sp)
    bbe4:	dd000417 	ldw	r20,16(sp)
    bbe8:	dcc00317 	ldw	r19,12(sp)
    bbec:	dc800217 	ldw	r18,8(sp)
    bbf0:	dc400117 	ldw	r17,4(sp)
    bbf4:	dc000017 	ldw	r16,0(sp)
    bbf8:	dec00804 	addi	sp,sp,32
    bbfc:	f800283a 	ret

0000bc00 <_setlocale_r>:
    bc00:	defffc04 	addi	sp,sp,-16
    bc04:	dc800215 	stw	r18,8(sp)
    bc08:	dc400115 	stw	r17,4(sp)
    bc0c:	dc000015 	stw	r16,0(sp)
    bc10:	dfc00315 	stw	ra,12(sp)
    bc14:	3021883a 	mov	r16,r6
    bc18:	2023883a 	mov	r17,r4
    bc1c:	2825883a 	mov	r18,r5
    bc20:	30001626 	beq	r6,zero,bc7c <_setlocale_r+0x7c>
    bc24:	3009883a 	mov	r4,r6
    bc28:	01400074 	movhi	r5,1
    bc2c:	294b3304 	addi	r5,r5,11468
    bc30:	00072bc0 	call	72bc <strcmp>
    bc34:	10000a1e 	bne	r2,zero,bc60 <_setlocale_r+0x60>
    bc38:	8c800c15 	stw	r18,48(r17)
    bc3c:	8c000d15 	stw	r16,52(r17)
    bc40:	00800074 	movhi	r2,1
    bc44:	108b3304 	addi	r2,r2,11468
    bc48:	dfc00317 	ldw	ra,12(sp)
    bc4c:	dc800217 	ldw	r18,8(sp)
    bc50:	dc400117 	ldw	r17,4(sp)
    bc54:	dc000017 	ldw	r16,0(sp)
    bc58:	dec00404 	addi	sp,sp,16
    bc5c:	f800283a 	ret
    bc60:	8009883a 	mov	r4,r16
    bc64:	01400074 	movhi	r5,1
    bc68:	294a7e04 	addi	r5,r5,10744
    bc6c:	00072bc0 	call	72bc <strcmp>
    bc70:	103ff126 	beq	r2,zero,bc38 <_gp+0xfffef3bc>
    bc74:	0005883a 	mov	r2,zero
    bc78:	003ff306 	br	bc48 <_gp+0xfffef3cc>
    bc7c:	00800074 	movhi	r2,1
    bc80:	108b3304 	addi	r2,r2,11468
    bc84:	dfc00317 	ldw	ra,12(sp)
    bc88:	dc800217 	ldw	r18,8(sp)
    bc8c:	dc400117 	ldw	r17,4(sp)
    bc90:	dc000017 	ldw	r16,0(sp)
    bc94:	dec00404 	addi	sp,sp,16
    bc98:	f800283a 	ret

0000bc9c <__locale_charset>:
    bc9c:	00800074 	movhi	r2,1
    bca0:	108b3404 	addi	r2,r2,11472
    bca4:	f800283a 	ret

0000bca8 <_localeconv_r>:
    bca8:	00800074 	movhi	r2,1
    bcac:	108b3804 	addi	r2,r2,11488
    bcb0:	f800283a 	ret

0000bcb4 <setlocale>:
    bcb4:	00c00074 	movhi	r3,1
    bcb8:	18d22304 	addi	r3,r3,18572
    bcbc:	2005883a 	mov	r2,r4
    bcc0:	19000017 	ldw	r4,0(r3)
    bcc4:	280d883a 	mov	r6,r5
    bcc8:	100b883a 	mov	r5,r2
    bccc:	000bc001 	jmpi	bc00 <_setlocale_r>

0000bcd0 <localeconv>:
    bcd0:	00800074 	movhi	r2,1
    bcd4:	108b3804 	addi	r2,r2,11488
    bcd8:	f800283a 	ret

0000bcdc <__smakebuf_r>:
    bcdc:	2880030b 	ldhu	r2,12(r5)
    bce0:	deffed04 	addi	sp,sp,-76
    bce4:	dc401015 	stw	r17,64(sp)
    bce8:	10c0008c 	andi	r3,r2,2
    bcec:	18ffffcc 	andi	r3,r3,65535
    bcf0:	18e0001c 	xori	r3,r3,32768
    bcf4:	dc000f15 	stw	r16,60(sp)
    bcf8:	dfc01215 	stw	ra,72(sp)
    bcfc:	dc801115 	stw	r18,68(sp)
    bd00:	18e00004 	addi	r3,r3,-32768
    bd04:	2821883a 	mov	r16,r5
    bd08:	2023883a 	mov	r17,r4
    bd0c:	1800381e 	bne	r3,zero,bdf0 <__smakebuf_r+0x114>
    bd10:	2940038f 	ldh	r5,14(r5)
    bd14:	28002d16 	blt	r5,zero,bdcc <__smakebuf_r+0xf0>
    bd18:	d80d883a 	mov	r6,sp
    bd1c:	000ddcc0 	call	ddcc <_fstat_r>
    bd20:	10002916 	blt	r2,zero,bdc8 <__smakebuf_r+0xec>
    bd24:	d8800117 	ldw	r2,4(sp)
    bd28:	00e00014 	movui	r3,32768
    bd2c:	10bc000c 	andi	r2,r2,61440
    bd30:	10c03c26 	beq	r2,r3,be24 <__smakebuf_r+0x148>
    bd34:	80c0030b 	ldhu	r3,12(r16)
    bd38:	18c20014 	ori	r3,r3,2048
    bd3c:	80c0030d 	sth	r3,12(r16)
    bd40:	00c80004 	movi	r3,8192
    bd44:	10c00c1e 	bne	r2,r3,bd78 <__smakebuf_r+0x9c>
    bd48:	8140038f 	ldh	r5,14(r16)
    bd4c:	8809883a 	mov	r4,r17
    bd50:	000de340 	call	de34 <_isatty_r>
    bd54:	10000826 	beq	r2,zero,bd78 <__smakebuf_r+0x9c>
    bd58:	80c0030b 	ldhu	r3,12(r16)
    bd5c:	808010c4 	addi	r2,r16,67
    bd60:	80800015 	stw	r2,0(r16)
    bd64:	18c00054 	ori	r3,r3,1
    bd68:	80800415 	stw	r2,16(r16)
    bd6c:	00800044 	movi	r2,1
    bd70:	80c0030d 	sth	r3,12(r16)
    bd74:	80800515 	stw	r2,20(r16)
    bd78:	04810004 	movi	r18,1024
    bd7c:	8809883a 	mov	r4,r17
    bd80:	900b883a 	mov	r5,r18
    bd84:	00066640 	call	6664 <_malloc_r>
    bd88:	10003026 	beq	r2,zero,be4c <__smakebuf_r+0x170>
    bd8c:	80c0030b 	ldhu	r3,12(r16)
    bd90:	01000074 	movhi	r4,1
    bd94:	212bba04 	addi	r4,r4,-20760
    bd98:	89000f15 	stw	r4,60(r17)
    bd9c:	18c02014 	ori	r3,r3,128
    bda0:	80c0030d 	sth	r3,12(r16)
    bda4:	80800015 	stw	r2,0(r16)
    bda8:	80800415 	stw	r2,16(r16)
    bdac:	84800515 	stw	r18,20(r16)
    bdb0:	dfc01217 	ldw	ra,72(sp)
    bdb4:	dc801117 	ldw	r18,68(sp)
    bdb8:	dc401017 	ldw	r17,64(sp)
    bdbc:	dc000f17 	ldw	r16,60(sp)
    bdc0:	dec01304 	addi	sp,sp,76
    bdc4:	f800283a 	ret
    bdc8:	8080030b 	ldhu	r2,12(r16)
    bdcc:	10c0200c 	andi	r3,r2,128
    bdd0:	18ffffcc 	andi	r3,r3,65535
    bdd4:	18e0001c 	xori	r3,r3,32768
    bdd8:	18e00004 	addi	r3,r3,-32768
    bddc:	18000f1e 	bne	r3,zero,be1c <__smakebuf_r+0x140>
    bde0:	04810004 	movi	r18,1024
    bde4:	10820014 	ori	r2,r2,2048
    bde8:	8080030d 	sth	r2,12(r16)
    bdec:	003fe306 	br	bd7c <_gp+0xfffef500>
    bdf0:	288010c4 	addi	r2,r5,67
    bdf4:	28800015 	stw	r2,0(r5)
    bdf8:	28800415 	stw	r2,16(r5)
    bdfc:	00800044 	movi	r2,1
    be00:	28800515 	stw	r2,20(r5)
    be04:	dfc01217 	ldw	ra,72(sp)
    be08:	dc801117 	ldw	r18,68(sp)
    be0c:	dc401017 	ldw	r17,64(sp)
    be10:	dc000f17 	ldw	r16,60(sp)
    be14:	dec01304 	addi	sp,sp,76
    be18:	f800283a 	ret
    be1c:	04801004 	movi	r18,64
    be20:	003ff006 	br	bde4 <_gp+0xfffef568>
    be24:	81000a17 	ldw	r4,40(r16)
    be28:	00c00074 	movhi	r3,1
    be2c:	18f64d04 	addi	r3,r3,-9932
    be30:	20ffc01e 	bne	r4,r3,bd34 <_gp+0xfffef4b8>
    be34:	8080030b 	ldhu	r2,12(r16)
    be38:	00c10004 	movi	r3,1024
    be3c:	80c01315 	stw	r3,76(r16)
    be40:	10c4b03a 	or	r2,r2,r3
    be44:	8080030d 	sth	r2,12(r16)
    be48:	003fcb06 	br	bd78 <_gp+0xfffef4fc>
    be4c:	8080030b 	ldhu	r2,12(r16)
    be50:	10c0800c 	andi	r3,r2,512
    be54:	18ffffcc 	andi	r3,r3,65535
    be58:	18e0001c 	xori	r3,r3,32768
    be5c:	18e00004 	addi	r3,r3,-32768
    be60:	183fd31e 	bne	r3,zero,bdb0 <_gp+0xfffef534>
    be64:	10800094 	ori	r2,r2,2
    be68:	80c010c4 	addi	r3,r16,67
    be6c:	8080030d 	sth	r2,12(r16)
    be70:	00800044 	movi	r2,1
    be74:	80c00015 	stw	r3,0(r16)
    be78:	80c00415 	stw	r3,16(r16)
    be7c:	80800515 	stw	r2,20(r16)
    be80:	003fcb06 	br	bdb0 <_gp+0xfffef534>

0000be84 <memchr>:
    be84:	008000c4 	movi	r2,3
    be88:	29403fcc 	andi	r5,r5,255
    be8c:	1180282e 	bgeu	r2,r6,bf30 <memchr+0xac>
    be90:	2086703a 	and	r3,r4,r2
    be94:	1800351e 	bne	r3,zero,bf6c <memchr+0xe8>
    be98:	2816923a 	slli	r11,r5,8
    be9c:	2093883a 	add	r9,r4,r2
    bea0:	22000084 	addi	r8,r4,2
    bea4:	5957883a 	add	r11,r11,r5
    bea8:	5816923a 	slli	r11,r11,8
    beac:	20c00044 	addi	r3,r4,1
    beb0:	037fbff4 	movhi	r13,65279
    beb4:	6b7fbfc4 	addi	r13,r13,-257
    beb8:	5957883a 	add	r11,r11,r5
    bebc:	5816923a 	slli	r11,r11,8
    bec0:	03202074 	movhi	r12,32897
    bec4:	63202004 	addi	r12,r12,-32640
    bec8:	101d883a 	mov	r14,r2
    becc:	5957883a 	add	r11,r11,r5
    bed0:	21c00017 	ldw	r7,0(r4)
    bed4:	31bfff04 	addi	r6,r6,-4
    bed8:	1805883a 	mov	r2,r3
    bedc:	3acef03a 	xor	r7,r7,r11
    bee0:	3b55883a 	add	r10,r7,r13
    bee4:	01ce303a 	nor	r7,zero,r7
    bee8:	51ce703a 	and	r7,r10,r7
    beec:	3b0e703a 	and	r7,r7,r12
    bef0:	38000a26 	beq	r7,zero,bf1c <memchr+0x98>
    bef4:	21c00003 	ldbu	r7,0(r4)
    bef8:	39401e26 	beq	r7,r5,bf74 <memchr+0xf0>
    befc:	19c00003 	ldbu	r7,0(r3)
    bf00:	39401926 	beq	r7,r5,bf68 <memchr+0xe4>
    bf04:	41c00003 	ldbu	r7,0(r8)
    bf08:	4005883a 	mov	r2,r8
    bf0c:	39401626 	beq	r7,r5,bf68 <memchr+0xe4>
    bf10:	49c00003 	ldbu	r7,0(r9)
    bf14:	4805883a 	mov	r2,r9
    bf18:	39401326 	beq	r7,r5,bf68 <memchr+0xe4>
    bf1c:	21000104 	addi	r4,r4,4
    bf20:	4a400104 	addi	r9,r9,4
    bf24:	42000104 	addi	r8,r8,4
    bf28:	18c00104 	addi	r3,r3,4
    bf2c:	71bfe836 	bltu	r14,r6,bed0 <_gp+0xfffef654>
    bf30:	2005883a 	mov	r2,r4
    bf34:	30000a26 	beq	r6,zero,bf60 <memchr+0xdc>
    bf38:	10c00003 	ldbu	r3,0(r2)
    bf3c:	19400a26 	beq	r3,r5,bf68 <memchr+0xe4>
    bf40:	10c00044 	addi	r3,r2,1
    bf44:	118d883a 	add	r6,r2,r6
    bf48:	00000306 	br	bf58 <memchr+0xd4>
    bf4c:	11000003 	ldbu	r4,0(r2)
    bf50:	18c00044 	addi	r3,r3,1
    bf54:	21400426 	beq	r4,r5,bf68 <memchr+0xe4>
    bf58:	1805883a 	mov	r2,r3
    bf5c:	19bffb1e 	bne	r3,r6,bf4c <_gp+0xfffef6d0>
    bf60:	0005883a 	mov	r2,zero
    bf64:	f800283a 	ret
    bf68:	f800283a 	ret
    bf6c:	2005883a 	mov	r2,r4
    bf70:	003ff106 	br	bf38 <_gp+0xfffef6bc>
    bf74:	2005883a 	mov	r2,r4
    bf78:	f800283a 	ret

0000bf7c <memmove>:
    bf7c:	2005883a 	mov	r2,r4
    bf80:	300f883a 	mov	r7,r6
    bf84:	29000b2e 	bgeu	r5,r4,bfb4 <memmove+0x38>
    bf88:	2987883a 	add	r3,r5,r6
    bf8c:	20c0092e 	bgeu	r4,r3,bfb4 <memmove+0x38>
    bf90:	218b883a 	add	r5,r4,r6
    bf94:	198fc83a 	sub	r7,r3,r6
    bf98:	30003f26 	beq	r6,zero,c098 <memmove+0x11c>
    bf9c:	18ffffc4 	addi	r3,r3,-1
    bfa0:	19000003 	ldbu	r4,0(r3)
    bfa4:	297fffc4 	addi	r5,r5,-1
    bfa8:	29000005 	stb	r4,0(r5)
    bfac:	19fffb1e 	bne	r3,r7,bf9c <_gp+0xfffef720>
    bfb0:	f800283a 	ret
    bfb4:	00c003c4 	movi	r3,15
    bfb8:	1980382e 	bgeu	r3,r6,c09c <memmove+0x120>
    bfbc:	2886b03a 	or	r3,r5,r2
    bfc0:	18c000cc 	andi	r3,r3,3
    bfc4:	1800351e 	bne	r3,zero,c09c <memmove+0x120>
    bfc8:	327ffc04 	addi	r9,r6,-16
    bfcc:	4812d13a 	srli	r9,r9,4
    bfd0:	12000404 	addi	r8,r2,16
    bfd4:	1007883a 	mov	r3,r2
    bfd8:	4808913a 	slli	r4,r9,4
    bfdc:	280f883a 	mov	r7,r5
    bfe0:	4111883a 	add	r8,r8,r4
    bfe4:	39000017 	ldw	r4,0(r7)
    bfe8:	18c00404 	addi	r3,r3,16
    bfec:	39c00404 	addi	r7,r7,16
    bff0:	193ffc15 	stw	r4,-16(r3)
    bff4:	393ffd17 	ldw	r4,-12(r7)
    bff8:	193ffd15 	stw	r4,-12(r3)
    bffc:	393ffe17 	ldw	r4,-8(r7)
    c000:	193ffe15 	stw	r4,-8(r3)
    c004:	393fff17 	ldw	r4,-4(r7)
    c008:	193fff15 	stw	r4,-4(r3)
    c00c:	1a3ff51e 	bne	r3,r8,bfe4 <_gp+0xfffef768>
    c010:	49000044 	addi	r4,r9,1
    c014:	2008913a 	slli	r4,r4,4
    c018:	31c003cc 	andi	r7,r6,15
    c01c:	1107883a 	add	r3,r2,r4
    c020:	290b883a 	add	r5,r5,r4
    c024:	010000c4 	movi	r4,3
    c028:	21c0142e 	bgeu	r4,r7,c07c <memmove+0x100>
    c02c:	39ffff04 	addi	r7,r7,-4
    c030:	3814d0ba 	srli	r10,r7,2
    c034:	1a400104 	addi	r9,r3,4
    c038:	180d883a 	mov	r6,r3
    c03c:	5289883a 	add	r4,r10,r10
    c040:	2109883a 	add	r4,r4,r4
    c044:	4913883a 	add	r9,r9,r4
    c048:	2809883a 	mov	r4,r5
    c04c:	22000017 	ldw	r8,0(r4)
    c050:	31800104 	addi	r6,r6,4
    c054:	21000104 	addi	r4,r4,4
    c058:	323fff15 	stw	r8,-4(r6)
    c05c:	327ffb1e 	bne	r6,r9,c04c <_gp+0xfffef7d0>
    c060:	51000044 	addi	r4,r10,1
    c064:	52bfff24 	muli	r10,r10,-4
    c068:	2109883a 	add	r4,r4,r4
    c06c:	2109883a 	add	r4,r4,r4
    c070:	51cf883a 	add	r7,r10,r7
    c074:	290b883a 	add	r5,r5,r4
    c078:	1907883a 	add	r3,r3,r4
    c07c:	38000626 	beq	r7,zero,c098 <memmove+0x11c>
    c080:	19cf883a 	add	r7,r3,r7
    c084:	29800003 	ldbu	r6,0(r5)
    c088:	18c00044 	addi	r3,r3,1
    c08c:	29400044 	addi	r5,r5,1
    c090:	19bfffc5 	stb	r6,-1(r3)
    c094:	19fffb1e 	bne	r3,r7,c084 <_gp+0xfffef808>
    c098:	f800283a 	ret
    c09c:	1007883a 	mov	r3,r2
    c0a0:	003ff606 	br	c07c <_gp+0xfffef800>

0000c0a4 <_Balloc>:
    c0a4:	20801317 	ldw	r2,76(r4)
    c0a8:	defffc04 	addi	sp,sp,-16
    c0ac:	dc400115 	stw	r17,4(sp)
    c0b0:	dc000015 	stw	r16,0(sp)
    c0b4:	dfc00315 	stw	ra,12(sp)
    c0b8:	dc800215 	stw	r18,8(sp)
    c0bc:	2023883a 	mov	r17,r4
    c0c0:	2821883a 	mov	r16,r5
    c0c4:	10000f26 	beq	r2,zero,c104 <_Balloc+0x60>
    c0c8:	8407883a 	add	r3,r16,r16
    c0cc:	18c7883a 	add	r3,r3,r3
    c0d0:	10c7883a 	add	r3,r2,r3
    c0d4:	18800017 	ldw	r2,0(r3)
    c0d8:	10001126 	beq	r2,zero,c120 <_Balloc+0x7c>
    c0dc:	11000017 	ldw	r4,0(r2)
    c0e0:	19000015 	stw	r4,0(r3)
    c0e4:	10000415 	stw	zero,16(r2)
    c0e8:	10000315 	stw	zero,12(r2)
    c0ec:	dfc00317 	ldw	ra,12(sp)
    c0f0:	dc800217 	ldw	r18,8(sp)
    c0f4:	dc400117 	ldw	r17,4(sp)
    c0f8:	dc000017 	ldw	r16,0(sp)
    c0fc:	dec00404 	addi	sp,sp,16
    c100:	f800283a 	ret
    c104:	01400104 	movi	r5,4
    c108:	01800404 	movi	r6,16
    c10c:	000db5c0 	call	db5c <_calloc_r>
    c110:	88801315 	stw	r2,76(r17)
    c114:	103fec1e 	bne	r2,zero,c0c8 <_gp+0xfffef84c>
    c118:	0005883a 	mov	r2,zero
    c11c:	003ff306 	br	c0ec <_gp+0xfffef870>
    c120:	01400044 	movi	r5,1
    c124:	2c24983a 	sll	r18,r5,r16
    c128:	8809883a 	mov	r4,r17
    c12c:	91800144 	addi	r6,r18,5
    c130:	318d883a 	add	r6,r6,r6
    c134:	318d883a 	add	r6,r6,r6
    c138:	000db5c0 	call	db5c <_calloc_r>
    c13c:	103ff626 	beq	r2,zero,c118 <_gp+0xfffef89c>
    c140:	14000115 	stw	r16,4(r2)
    c144:	14800215 	stw	r18,8(r2)
    c148:	003fe606 	br	c0e4 <_gp+0xfffef868>

0000c14c <_Bfree>:
    c14c:	28000826 	beq	r5,zero,c170 <_Bfree+0x24>
    c150:	28c00117 	ldw	r3,4(r5)
    c154:	20801317 	ldw	r2,76(r4)
    c158:	18c7883a 	add	r3,r3,r3
    c15c:	18c7883a 	add	r3,r3,r3
    c160:	10c5883a 	add	r2,r2,r3
    c164:	10c00017 	ldw	r3,0(r2)
    c168:	28c00015 	stw	r3,0(r5)
    c16c:	11400015 	stw	r5,0(r2)
    c170:	f800283a 	ret

0000c174 <__multadd>:
    c174:	defffa04 	addi	sp,sp,-24
    c178:	dc000115 	stw	r16,4(sp)
    c17c:	2c000417 	ldw	r16,16(r5)
    c180:	dc800315 	stw	r18,12(sp)
    c184:	dc400215 	stw	r17,8(sp)
    c188:	dfc00515 	stw	ra,20(sp)
    c18c:	dcc00415 	stw	r19,16(sp)
    c190:	2823883a 	mov	r17,r5
    c194:	2025883a 	mov	r18,r4
    c198:	28c00504 	addi	r3,r5,20
    c19c:	0011883a 	mov	r8,zero
    c1a0:	1a800017 	ldw	r10,0(r3)
    c1a4:	18c00104 	addi	r3,r3,4
    c1a8:	42000044 	addi	r8,r8,1
    c1ac:	527fffcc 	andi	r9,r10,65535
    c1b0:	4993383a 	mul	r9,r9,r6
    c1b4:	5014d43a 	srli	r10,r10,16
    c1b8:	49d3883a 	add	r9,r9,r7
    c1bc:	480ed43a 	srli	r7,r9,16
    c1c0:	5195383a 	mul	r10,r10,r6
    c1c4:	4a7fffcc 	andi	r9,r9,65535
    c1c8:	3a8f883a 	add	r7,r7,r10
    c1cc:	3814943a 	slli	r10,r7,16
    c1d0:	380ed43a 	srli	r7,r7,16
    c1d4:	5253883a 	add	r9,r10,r9
    c1d8:	1a7fff15 	stw	r9,-4(r3)
    c1dc:	443ff016 	blt	r8,r16,c1a0 <_gp+0xfffef924>
    c1e0:	38000926 	beq	r7,zero,c208 <__multadd+0x94>
    c1e4:	88800217 	ldw	r2,8(r17)
    c1e8:	80800f0e 	bge	r16,r2,c228 <__multadd+0xb4>
    c1ec:	80800144 	addi	r2,r16,5
    c1f0:	1085883a 	add	r2,r2,r2
    c1f4:	1085883a 	add	r2,r2,r2
    c1f8:	8885883a 	add	r2,r17,r2
    c1fc:	84000044 	addi	r16,r16,1
    c200:	11c00015 	stw	r7,0(r2)
    c204:	8c000415 	stw	r16,16(r17)
    c208:	8805883a 	mov	r2,r17
    c20c:	dfc00517 	ldw	ra,20(sp)
    c210:	dcc00417 	ldw	r19,16(sp)
    c214:	dc800317 	ldw	r18,12(sp)
    c218:	dc400217 	ldw	r17,8(sp)
    c21c:	dc000117 	ldw	r16,4(sp)
    c220:	dec00604 	addi	sp,sp,24
    c224:	f800283a 	ret
    c228:	89400117 	ldw	r5,4(r17)
    c22c:	9009883a 	mov	r4,r18
    c230:	d9c00015 	stw	r7,0(sp)
    c234:	29400044 	addi	r5,r5,1
    c238:	000c0a40 	call	c0a4 <_Balloc>
    c23c:	89800417 	ldw	r6,16(r17)
    c240:	89400304 	addi	r5,r17,12
    c244:	11000304 	addi	r4,r2,12
    c248:	31800084 	addi	r6,r6,2
    c24c:	318d883a 	add	r6,r6,r6
    c250:	318d883a 	add	r6,r6,r6
    c254:	1027883a 	mov	r19,r2
    c258:	0006de80 	call	6de8 <memcpy>
    c25c:	88c00117 	ldw	r3,4(r17)
    c260:	90801317 	ldw	r2,76(r18)
    c264:	d9c00017 	ldw	r7,0(sp)
    c268:	18c7883a 	add	r3,r3,r3
    c26c:	18c7883a 	add	r3,r3,r3
    c270:	10c5883a 	add	r2,r2,r3
    c274:	10c00017 	ldw	r3,0(r2)
    c278:	88c00015 	stw	r3,0(r17)
    c27c:	14400015 	stw	r17,0(r2)
    c280:	9823883a 	mov	r17,r19
    c284:	003fd906 	br	c1ec <_gp+0xfffef970>

0000c288 <__s2b>:
    c288:	defff904 	addi	sp,sp,-28
    c28c:	dd000415 	stw	r20,16(sp)
    c290:	dc400115 	stw	r17,4(sp)
    c294:	2829883a 	mov	r20,r5
    c298:	2023883a 	mov	r17,r4
    c29c:	01400244 	movi	r5,9
    c2a0:	39000204 	addi	r4,r7,8
    c2a4:	dcc00315 	stw	r19,12(sp)
    c2a8:	dc800215 	stw	r18,8(sp)
    c2ac:	dfc00615 	stw	ra,24(sp)
    c2b0:	dd400515 	stw	r21,20(sp)
    c2b4:	dc000015 	stw	r16,0(sp)
    c2b8:	3825883a 	mov	r18,r7
    c2bc:	3027883a 	mov	r19,r6
    c2c0:	0005ea40 	call	5ea4 <__divsi3>
    c2c4:	00c00044 	movi	r3,1
    c2c8:	000b883a 	mov	r5,zero
    c2cc:	1880030e 	bge	r3,r2,c2dc <__s2b+0x54>
    c2d0:	18c7883a 	add	r3,r3,r3
    c2d4:	29400044 	addi	r5,r5,1
    c2d8:	18bffd16 	blt	r3,r2,c2d0 <_gp+0xfffefa54>
    c2dc:	8809883a 	mov	r4,r17
    c2e0:	000c0a40 	call	c0a4 <_Balloc>
    c2e4:	d8c00717 	ldw	r3,28(sp)
    c2e8:	10c00515 	stw	r3,20(r2)
    c2ec:	00c00044 	movi	r3,1
    c2f0:	10c00415 	stw	r3,16(r2)
    c2f4:	00c00244 	movi	r3,9
    c2f8:	1cc0210e 	bge	r3,r19,c380 <__s2b+0xf8>
    c2fc:	a0eb883a 	add	r21,r20,r3
    c300:	a821883a 	mov	r16,r21
    c304:	a4e9883a 	add	r20,r20,r19
    c308:	81c00007 	ldb	r7,0(r16)
    c30c:	8809883a 	mov	r4,r17
    c310:	84000044 	addi	r16,r16,1
    c314:	100b883a 	mov	r5,r2
    c318:	01800284 	movi	r6,10
    c31c:	39fff404 	addi	r7,r7,-48
    c320:	000c1740 	call	c174 <__multadd>
    c324:	853ff81e 	bne	r16,r20,c308 <_gp+0xfffefa8c>
    c328:	ace1883a 	add	r16,r21,r19
    c32c:	843ffe04 	addi	r16,r16,-8
    c330:	9c800a0e 	bge	r19,r18,c35c <__s2b+0xd4>
    c334:	94e5c83a 	sub	r18,r18,r19
    c338:	84a5883a 	add	r18,r16,r18
    c33c:	81c00007 	ldb	r7,0(r16)
    c340:	8809883a 	mov	r4,r17
    c344:	84000044 	addi	r16,r16,1
    c348:	100b883a 	mov	r5,r2
    c34c:	01800284 	movi	r6,10
    c350:	39fff404 	addi	r7,r7,-48
    c354:	000c1740 	call	c174 <__multadd>
    c358:	84bff81e 	bne	r16,r18,c33c <_gp+0xfffefac0>
    c35c:	dfc00617 	ldw	ra,24(sp)
    c360:	dd400517 	ldw	r21,20(sp)
    c364:	dd000417 	ldw	r20,16(sp)
    c368:	dcc00317 	ldw	r19,12(sp)
    c36c:	dc800217 	ldw	r18,8(sp)
    c370:	dc400117 	ldw	r17,4(sp)
    c374:	dc000017 	ldw	r16,0(sp)
    c378:	dec00704 	addi	sp,sp,28
    c37c:	f800283a 	ret
    c380:	a4000284 	addi	r16,r20,10
    c384:	1827883a 	mov	r19,r3
    c388:	003fe906 	br	c330 <_gp+0xfffefab4>

0000c38c <__hi0bits>:
    c38c:	20bfffec 	andhi	r2,r4,65535
    c390:	1000141e 	bne	r2,zero,c3e4 <__hi0bits+0x58>
    c394:	2008943a 	slli	r4,r4,16
    c398:	00800404 	movi	r2,16
    c39c:	20ffc02c 	andhi	r3,r4,65280
    c3a0:	1800021e 	bne	r3,zero,c3ac <__hi0bits+0x20>
    c3a4:	2008923a 	slli	r4,r4,8
    c3a8:	10800204 	addi	r2,r2,8
    c3ac:	20fc002c 	andhi	r3,r4,61440
    c3b0:	1800021e 	bne	r3,zero,c3bc <__hi0bits+0x30>
    c3b4:	2008913a 	slli	r4,r4,4
    c3b8:	10800104 	addi	r2,r2,4
    c3bc:	20f0002c 	andhi	r3,r4,49152
    c3c0:	1800031e 	bne	r3,zero,c3d0 <__hi0bits+0x44>
    c3c4:	2109883a 	add	r4,r4,r4
    c3c8:	10800084 	addi	r2,r2,2
    c3cc:	2109883a 	add	r4,r4,r4
    c3d0:	20000316 	blt	r4,zero,c3e0 <__hi0bits+0x54>
    c3d4:	2110002c 	andhi	r4,r4,16384
    c3d8:	2000041e 	bne	r4,zero,c3ec <__hi0bits+0x60>
    c3dc:	00800804 	movi	r2,32
    c3e0:	f800283a 	ret
    c3e4:	0005883a 	mov	r2,zero
    c3e8:	003fec06 	br	c39c <_gp+0xfffefb20>
    c3ec:	10800044 	addi	r2,r2,1
    c3f0:	f800283a 	ret

0000c3f4 <__lo0bits>:
    c3f4:	20c00017 	ldw	r3,0(r4)
    c3f8:	188001cc 	andi	r2,r3,7
    c3fc:	10000826 	beq	r2,zero,c420 <__lo0bits+0x2c>
    c400:	1880004c 	andi	r2,r3,1
    c404:	1000211e 	bne	r2,zero,c48c <__lo0bits+0x98>
    c408:	1880008c 	andi	r2,r3,2
    c40c:	1000211e 	bne	r2,zero,c494 <__lo0bits+0xa0>
    c410:	1806d0ba 	srli	r3,r3,2
    c414:	00800084 	movi	r2,2
    c418:	20c00015 	stw	r3,0(r4)
    c41c:	f800283a 	ret
    c420:	18bfffcc 	andi	r2,r3,65535
    c424:	10001326 	beq	r2,zero,c474 <__lo0bits+0x80>
    c428:	0005883a 	mov	r2,zero
    c42c:	19403fcc 	andi	r5,r3,255
    c430:	2800021e 	bne	r5,zero,c43c <__lo0bits+0x48>
    c434:	1806d23a 	srli	r3,r3,8
    c438:	10800204 	addi	r2,r2,8
    c43c:	194003cc 	andi	r5,r3,15
    c440:	2800021e 	bne	r5,zero,c44c <__lo0bits+0x58>
    c444:	1806d13a 	srli	r3,r3,4
    c448:	10800104 	addi	r2,r2,4
    c44c:	194000cc 	andi	r5,r3,3
    c450:	2800021e 	bne	r5,zero,c45c <__lo0bits+0x68>
    c454:	1806d0ba 	srli	r3,r3,2
    c458:	10800084 	addi	r2,r2,2
    c45c:	1940004c 	andi	r5,r3,1
    c460:	2800081e 	bne	r5,zero,c484 <__lo0bits+0x90>
    c464:	1806d07a 	srli	r3,r3,1
    c468:	1800051e 	bne	r3,zero,c480 <__lo0bits+0x8c>
    c46c:	00800804 	movi	r2,32
    c470:	f800283a 	ret
    c474:	1806d43a 	srli	r3,r3,16
    c478:	00800404 	movi	r2,16
    c47c:	003feb06 	br	c42c <_gp+0xfffefbb0>
    c480:	10800044 	addi	r2,r2,1
    c484:	20c00015 	stw	r3,0(r4)
    c488:	f800283a 	ret
    c48c:	0005883a 	mov	r2,zero
    c490:	f800283a 	ret
    c494:	1806d07a 	srli	r3,r3,1
    c498:	00800044 	movi	r2,1
    c49c:	20c00015 	stw	r3,0(r4)
    c4a0:	f800283a 	ret

0000c4a4 <__i2b>:
    c4a4:	defffd04 	addi	sp,sp,-12
    c4a8:	dc000015 	stw	r16,0(sp)
    c4ac:	04000044 	movi	r16,1
    c4b0:	dc400115 	stw	r17,4(sp)
    c4b4:	2823883a 	mov	r17,r5
    c4b8:	800b883a 	mov	r5,r16
    c4bc:	dfc00215 	stw	ra,8(sp)
    c4c0:	000c0a40 	call	c0a4 <_Balloc>
    c4c4:	14400515 	stw	r17,20(r2)
    c4c8:	14000415 	stw	r16,16(r2)
    c4cc:	dfc00217 	ldw	ra,8(sp)
    c4d0:	dc400117 	ldw	r17,4(sp)
    c4d4:	dc000017 	ldw	r16,0(sp)
    c4d8:	dec00304 	addi	sp,sp,12
    c4dc:	f800283a 	ret

0000c4e0 <__multiply>:
    c4e0:	defffa04 	addi	sp,sp,-24
    c4e4:	dcc00315 	stw	r19,12(sp)
    c4e8:	dc400115 	stw	r17,4(sp)
    c4ec:	34c00417 	ldw	r19,16(r6)
    c4f0:	2c400417 	ldw	r17,16(r5)
    c4f4:	dd000415 	stw	r20,16(sp)
    c4f8:	dc800215 	stw	r18,8(sp)
    c4fc:	dfc00515 	stw	ra,20(sp)
    c500:	dc000015 	stw	r16,0(sp)
    c504:	2825883a 	mov	r18,r5
    c508:	3029883a 	mov	r20,r6
    c50c:	8cc0050e 	bge	r17,r19,c524 <__multiply+0x44>
    c510:	8807883a 	mov	r3,r17
    c514:	3025883a 	mov	r18,r6
    c518:	9823883a 	mov	r17,r19
    c51c:	2829883a 	mov	r20,r5
    c520:	1827883a 	mov	r19,r3
    c524:	90800217 	ldw	r2,8(r18)
    c528:	8ce1883a 	add	r16,r17,r19
    c52c:	91400117 	ldw	r5,4(r18)
    c530:	1400010e 	bge	r2,r16,c538 <__multiply+0x58>
    c534:	29400044 	addi	r5,r5,1
    c538:	000c0a40 	call	c0a4 <_Balloc>
    c53c:	83c00144 	addi	r15,r16,5
    c540:	7bdf883a 	add	r15,r15,r15
    c544:	7bdf883a 	add	r15,r15,r15
    c548:	13800504 	addi	r14,r2,20
    c54c:	13df883a 	add	r15,r2,r15
    c550:	7007883a 	mov	r3,r14
    c554:	73c0032e 	bgeu	r14,r15,c564 <__multiply+0x84>
    c558:	18000015 	stw	zero,0(r3)
    c55c:	18c00104 	addi	r3,r3,4
    c560:	1bfffd36 	bltu	r3,r15,c558 <_gp+0xfffefcdc>
    c564:	99800144 	addi	r6,r19,5
    c568:	8b000144 	addi	r12,r17,5
    c56c:	318d883a 	add	r6,r6,r6
    c570:	6319883a 	add	r12,r12,r12
    c574:	318d883a 	add	r6,r6,r6
    c578:	6319883a 	add	r12,r12,r12
    c57c:	a3400504 	addi	r13,r20,20
    c580:	a18d883a 	add	r6,r20,r6
    c584:	94400504 	addi	r17,r18,20
    c588:	9319883a 	add	r12,r18,r12
    c58c:	6980392e 	bgeu	r13,r6,c674 <__multiply+0x194>
    c590:	6a800017 	ldw	r10,0(r13)
    c594:	52ffffcc 	andi	r11,r10,65535
    c598:	58001826 	beq	r11,zero,c5fc <__multiply+0x11c>
    c59c:	7007883a 	mov	r3,r14
    c5a0:	8809883a 	mov	r4,r17
    c5a4:	000b883a 	mov	r5,zero
    c5a8:	22400017 	ldw	r9,0(r4)
    c5ac:	1a000017 	ldw	r8,0(r3)
    c5b0:	21000104 	addi	r4,r4,4
    c5b4:	49ffffcc 	andi	r7,r9,65535
    c5b8:	3acf383a 	mul	r7,r7,r11
    c5bc:	4812d43a 	srli	r9,r9,16
    c5c0:	42bfffcc 	andi	r10,r8,65535
    c5c4:	3a8f883a 	add	r7,r7,r10
    c5c8:	394f883a 	add	r7,r7,r5
    c5cc:	4010d43a 	srli	r8,r8,16
    c5d0:	4acb383a 	mul	r5,r9,r11
    c5d4:	3814d43a 	srli	r10,r7,16
    c5d8:	19c0000d 	sth	r7,0(r3)
    c5dc:	2a0b883a 	add	r5,r5,r8
    c5e0:	2a8b883a 	add	r5,r5,r10
    c5e4:	1940008d 	sth	r5,2(r3)
    c5e8:	280ad43a 	srli	r5,r5,16
    c5ec:	18c00104 	addi	r3,r3,4
    c5f0:	233fed36 	bltu	r4,r12,c5a8 <_gp+0xfffefd2c>
    c5f4:	19400015 	stw	r5,0(r3)
    c5f8:	6a800017 	ldw	r10,0(r13)
    c5fc:	5014d43a 	srli	r10,r10,16
    c600:	50001926 	beq	r10,zero,c668 <__multiply+0x188>
    c604:	71400017 	ldw	r5,0(r14)
    c608:	7007883a 	mov	r3,r14
    c60c:	8809883a 	mov	r4,r17
    c610:	280f883a 	mov	r7,r5
    c614:	0017883a 	mov	r11,zero
    c618:	22400017 	ldw	r9,0(r4)
    c61c:	380ed43a 	srli	r7,r7,16
    c620:	1940000d 	sth	r5,0(r3)
    c624:	4a3fffcc 	andi	r8,r9,65535
    c628:	4291383a 	mul	r8,r8,r10
    c62c:	4812d43a 	srli	r9,r9,16
    c630:	18c00104 	addi	r3,r3,4
    c634:	41d1883a 	add	r8,r8,r7
    c638:	19c00017 	ldw	r7,0(r3)
    c63c:	42d1883a 	add	r8,r8,r11
    c640:	4a93383a 	mul	r9,r9,r10
    c644:	1a3fff8d 	sth	r8,-2(r3)
    c648:	4010d43a 	srli	r8,r8,16
    c64c:	397fffcc 	andi	r5,r7,65535
    c650:	2a4b883a 	add	r5,r5,r9
    c654:	2a0b883a 	add	r5,r5,r8
    c658:	21000104 	addi	r4,r4,4
    c65c:	2816d43a 	srli	r11,r5,16
    c660:	233fed36 	bltu	r4,r12,c618 <_gp+0xfffefd9c>
    c664:	19400015 	stw	r5,0(r3)
    c668:	6b400104 	addi	r13,r13,4
    c66c:	73800104 	addi	r14,r14,4
    c670:	69bfc736 	bltu	r13,r6,c590 <_gp+0xfffefd14>
    c674:	0400090e 	bge	zero,r16,c69c <__multiply+0x1bc>
    c678:	78ffff17 	ldw	r3,-4(r15)
    c67c:	7bffff04 	addi	r15,r15,-4
    c680:	18000326 	beq	r3,zero,c690 <__multiply+0x1b0>
    c684:	00000506 	br	c69c <__multiply+0x1bc>
    c688:	78c00017 	ldw	r3,0(r15)
    c68c:	1800031e 	bne	r3,zero,c69c <__multiply+0x1bc>
    c690:	843fffc4 	addi	r16,r16,-1
    c694:	7bffff04 	addi	r15,r15,-4
    c698:	803ffb1e 	bne	r16,zero,c688 <_gp+0xfffefe0c>
    c69c:	14000415 	stw	r16,16(r2)
    c6a0:	dfc00517 	ldw	ra,20(sp)
    c6a4:	dd000417 	ldw	r20,16(sp)
    c6a8:	dcc00317 	ldw	r19,12(sp)
    c6ac:	dc800217 	ldw	r18,8(sp)
    c6b0:	dc400117 	ldw	r17,4(sp)
    c6b4:	dc000017 	ldw	r16,0(sp)
    c6b8:	dec00604 	addi	sp,sp,24
    c6bc:	f800283a 	ret

0000c6c0 <__pow5mult>:
    c6c0:	defffb04 	addi	sp,sp,-20
    c6c4:	dcc00315 	stw	r19,12(sp)
    c6c8:	dc800215 	stw	r18,8(sp)
    c6cc:	dc000015 	stw	r16,0(sp)
    c6d0:	dfc00415 	stw	ra,16(sp)
    c6d4:	dc400115 	stw	r17,4(sp)
    c6d8:	308000cc 	andi	r2,r6,3
    c6dc:	3021883a 	mov	r16,r6
    c6e0:	2027883a 	mov	r19,r4
    c6e4:	2825883a 	mov	r18,r5
    c6e8:	10002e1e 	bne	r2,zero,c7a4 <__pow5mult+0xe4>
    c6ec:	8021d0ba 	srai	r16,r16,2
    c6f0:	80001a26 	beq	r16,zero,c75c <__pow5mult+0x9c>
    c6f4:	9c401217 	ldw	r17,72(r19)
    c6f8:	8800061e 	bne	r17,zero,c714 <__pow5mult+0x54>
    c6fc:	00003406 	br	c7d0 <__pow5mult+0x110>
    c700:	8021d07a 	srai	r16,r16,1
    c704:	80001526 	beq	r16,zero,c75c <__pow5mult+0x9c>
    c708:	88c00017 	ldw	r3,0(r17)
    c70c:	18001b26 	beq	r3,zero,c77c <__pow5mult+0xbc>
    c710:	1823883a 	mov	r17,r3
    c714:	80c0004c 	andi	r3,r16,1
    c718:	183ff926 	beq	r3,zero,c700 <_gp+0xfffefe84>
    c71c:	900b883a 	mov	r5,r18
    c720:	880d883a 	mov	r6,r17
    c724:	9809883a 	mov	r4,r19
    c728:	000c4e00 	call	c4e0 <__multiply>
    c72c:	90001b26 	beq	r18,zero,c79c <__pow5mult+0xdc>
    c730:	91000117 	ldw	r4,4(r18)
    c734:	98c01317 	ldw	r3,76(r19)
    c738:	8021d07a 	srai	r16,r16,1
    c73c:	2109883a 	add	r4,r4,r4
    c740:	2109883a 	add	r4,r4,r4
    c744:	1907883a 	add	r3,r3,r4
    c748:	19000017 	ldw	r4,0(r3)
    c74c:	91000015 	stw	r4,0(r18)
    c750:	1c800015 	stw	r18,0(r3)
    c754:	1025883a 	mov	r18,r2
    c758:	803feb1e 	bne	r16,zero,c708 <_gp+0xfffefe8c>
    c75c:	9005883a 	mov	r2,r18
    c760:	dfc00417 	ldw	ra,16(sp)
    c764:	dcc00317 	ldw	r19,12(sp)
    c768:	dc800217 	ldw	r18,8(sp)
    c76c:	dc400117 	ldw	r17,4(sp)
    c770:	dc000017 	ldw	r16,0(sp)
    c774:	dec00504 	addi	sp,sp,20
    c778:	f800283a 	ret
    c77c:	880b883a 	mov	r5,r17
    c780:	880d883a 	mov	r6,r17
    c784:	9809883a 	mov	r4,r19
    c788:	000c4e00 	call	c4e0 <__multiply>
    c78c:	88800015 	stw	r2,0(r17)
    c790:	10000015 	stw	zero,0(r2)
    c794:	1023883a 	mov	r17,r2
    c798:	003fde06 	br	c714 <_gp+0xfffefe98>
    c79c:	1025883a 	mov	r18,r2
    c7a0:	003fd706 	br	c700 <_gp+0xfffefe84>
    c7a4:	10bfffc4 	addi	r2,r2,-1
    c7a8:	1085883a 	add	r2,r2,r2
    c7ac:	00c00074 	movhi	r3,1
    c7b0:	18cb8a04 	addi	r3,r3,11816
    c7b4:	1085883a 	add	r2,r2,r2
    c7b8:	1885883a 	add	r2,r3,r2
    c7bc:	11800017 	ldw	r6,0(r2)
    c7c0:	000f883a 	mov	r7,zero
    c7c4:	000c1740 	call	c174 <__multadd>
    c7c8:	1025883a 	mov	r18,r2
    c7cc:	003fc706 	br	c6ec <_gp+0xfffefe70>
    c7d0:	9809883a 	mov	r4,r19
    c7d4:	01409c44 	movi	r5,625
    c7d8:	000c4a40 	call	c4a4 <__i2b>
    c7dc:	98801215 	stw	r2,72(r19)
    c7e0:	1023883a 	mov	r17,r2
    c7e4:	10000015 	stw	zero,0(r2)
    c7e8:	003fca06 	br	c714 <_gp+0xfffefe98>

0000c7ec <__lshift>:
    c7ec:	defff904 	addi	sp,sp,-28
    c7f0:	dd400515 	stw	r21,20(sp)
    c7f4:	dc400115 	stw	r17,4(sp)
    c7f8:	2d400417 	ldw	r21,16(r5)
    c7fc:	3023d17a 	srai	r17,r6,5
    c800:	28800217 	ldw	r2,8(r5)
    c804:	dd000415 	stw	r20,16(sp)
    c808:	8d6b883a 	add	r21,r17,r21
    c80c:	dcc00315 	stw	r19,12(sp)
    c810:	dc800215 	stw	r18,8(sp)
    c814:	dc000015 	stw	r16,0(sp)
    c818:	dfc00615 	stw	ra,24(sp)
    c81c:	ac000044 	addi	r16,r21,1
    c820:	2825883a 	mov	r18,r5
    c824:	3029883a 	mov	r20,r6
    c828:	2027883a 	mov	r19,r4
    c82c:	29400117 	ldw	r5,4(r5)
    c830:	1400030e 	bge	r2,r16,c840 <__lshift+0x54>
    c834:	1085883a 	add	r2,r2,r2
    c838:	29400044 	addi	r5,r5,1
    c83c:	143ffd16 	blt	r2,r16,c834 <_gp+0xfffeffb8>
    c840:	9809883a 	mov	r4,r19
    c844:	000c0a40 	call	c0a4 <_Balloc>
    c848:	10c00504 	addi	r3,r2,20
    c84c:	0440090e 	bge	zero,r17,c874 <__lshift+0x88>
    c850:	000f883a 	mov	r7,zero
    c854:	18000015 	stw	zero,0(r3)
    c858:	39c00044 	addi	r7,r7,1
    c85c:	18c00104 	addi	r3,r3,4
    c860:	3c7ffc1e 	bne	r7,r17,c854 <_gp+0xfffeffd8>
    c864:	38c00144 	addi	r3,r7,5
    c868:	18c7883a 	add	r3,r3,r3
    c86c:	18c7883a 	add	r3,r3,r3
    c870:	10c7883a 	add	r3,r2,r3
    c874:	92000417 	ldw	r8,16(r18)
    c878:	a18007cc 	andi	r6,r20,31
    c87c:	91c00504 	addi	r7,r18,20
    c880:	42000144 	addi	r8,r8,5
    c884:	4211883a 	add	r8,r8,r8
    c888:	4211883a 	add	r8,r8,r8
    c88c:	9211883a 	add	r8,r18,r8
    c890:	30002226 	beq	r6,zero,c91c <__lshift+0x130>
    c894:	02800804 	movi	r10,32
    c898:	5195c83a 	sub	r10,r10,r6
    c89c:	000b883a 	mov	r5,zero
    c8a0:	3a400017 	ldw	r9,0(r7)
    c8a4:	18c00104 	addi	r3,r3,4
    c8a8:	39c00104 	addi	r7,r7,4
    c8ac:	4992983a 	sll	r9,r9,r6
    c8b0:	2a4ab03a 	or	r5,r5,r9
    c8b4:	197fff15 	stw	r5,-4(r3)
    c8b8:	397fff17 	ldw	r5,-4(r7)
    c8bc:	2a8ad83a 	srl	r5,r5,r10
    c8c0:	3a3ff736 	bltu	r7,r8,c8a0 <_gp+0xffff0024>
    c8c4:	19400015 	stw	r5,0(r3)
    c8c8:	28000126 	beq	r5,zero,c8d0 <__lshift+0xe4>
    c8cc:	ac000084 	addi	r16,r21,2
    c8d0:	91000117 	ldw	r4,4(r18)
    c8d4:	98c01317 	ldw	r3,76(r19)
    c8d8:	843fffc4 	addi	r16,r16,-1
    c8dc:	2109883a 	add	r4,r4,r4
    c8e0:	2109883a 	add	r4,r4,r4
    c8e4:	1907883a 	add	r3,r3,r4
    c8e8:	19000017 	ldw	r4,0(r3)
    c8ec:	14000415 	stw	r16,16(r2)
    c8f0:	91000015 	stw	r4,0(r18)
    c8f4:	1c800015 	stw	r18,0(r3)
    c8f8:	dfc00617 	ldw	ra,24(sp)
    c8fc:	dd400517 	ldw	r21,20(sp)
    c900:	dd000417 	ldw	r20,16(sp)
    c904:	dcc00317 	ldw	r19,12(sp)
    c908:	dc800217 	ldw	r18,8(sp)
    c90c:	dc400117 	ldw	r17,4(sp)
    c910:	dc000017 	ldw	r16,0(sp)
    c914:	dec00704 	addi	sp,sp,28
    c918:	f800283a 	ret
    c91c:	39400017 	ldw	r5,0(r7)
    c920:	18c00104 	addi	r3,r3,4
    c924:	39c00104 	addi	r7,r7,4
    c928:	197fff15 	stw	r5,-4(r3)
    c92c:	3a3fe82e 	bgeu	r7,r8,c8d0 <_gp+0xffff0054>
    c930:	39400017 	ldw	r5,0(r7)
    c934:	18c00104 	addi	r3,r3,4
    c938:	39c00104 	addi	r7,r7,4
    c93c:	197fff15 	stw	r5,-4(r3)
    c940:	3a3ff636 	bltu	r7,r8,c91c <_gp+0xffff00a0>
    c944:	003fe206 	br	c8d0 <_gp+0xffff0054>

0000c948 <__mcmp>:
    c948:	20800417 	ldw	r2,16(r4)
    c94c:	28c00417 	ldw	r3,16(r5)
    c950:	10c5c83a 	sub	r2,r2,r3
    c954:	10000f1e 	bne	r2,zero,c994 <__mcmp+0x4c>
    c958:	18c00144 	addi	r3,r3,5
    c95c:	18c7883a 	add	r3,r3,r3
    c960:	18c7883a 	add	r3,r3,r3
    c964:	21c00504 	addi	r7,r4,20
    c968:	28cb883a 	add	r5,r5,r3
    c96c:	20c9883a 	add	r4,r4,r3
    c970:	213fff04 	addi	r4,r4,-4
    c974:	297fff04 	addi	r5,r5,-4
    c978:	21800017 	ldw	r6,0(r4)
    c97c:	28c00017 	ldw	r3,0(r5)
    c980:	30c0021e 	bne	r6,r3,c98c <__mcmp+0x44>
    c984:	393ffa36 	bltu	r7,r4,c970 <_gp+0xffff00f4>
    c988:	f800283a 	ret
    c98c:	30c00236 	bltu	r6,r3,c998 <__mcmp+0x50>
    c990:	00800044 	movi	r2,1
    c994:	f800283a 	ret
    c998:	00bfffc4 	movi	r2,-1
    c99c:	f800283a 	ret

0000c9a0 <__mdiff>:
    c9a0:	defffb04 	addi	sp,sp,-20
    c9a4:	dc000015 	stw	r16,0(sp)
    c9a8:	2821883a 	mov	r16,r5
    c9ac:	dc800215 	stw	r18,8(sp)
    c9b0:	300b883a 	mov	r5,r6
    c9b4:	2025883a 	mov	r18,r4
    c9b8:	8009883a 	mov	r4,r16
    c9bc:	dc400115 	stw	r17,4(sp)
    c9c0:	dfc00415 	stw	ra,16(sp)
    c9c4:	dcc00315 	stw	r19,12(sp)
    c9c8:	3023883a 	mov	r17,r6
    c9cc:	000c9480 	call	c948 <__mcmp>
    c9d0:	10005026 	beq	r2,zero,cb14 <__mdiff+0x174>
    c9d4:	10004a16 	blt	r2,zero,cb00 <__mdiff+0x160>
    c9d8:	0027883a 	mov	r19,zero
    c9dc:	81400117 	ldw	r5,4(r16)
    c9e0:	9009883a 	mov	r4,r18
    c9e4:	000c0a40 	call	c0a4 <_Balloc>
    c9e8:	82400417 	ldw	r9,16(r16)
    c9ec:	89800417 	ldw	r6,16(r17)
    c9f0:	14c00315 	stw	r19,12(r2)
    c9f4:	4b800144 	addi	r14,r9,5
    c9f8:	31800144 	addi	r6,r6,5
    c9fc:	739d883a 	add	r14,r14,r14
    ca00:	318d883a 	add	r6,r6,r6
    ca04:	739d883a 	add	r14,r14,r14
    ca08:	318d883a 	add	r6,r6,r6
    ca0c:	81c00504 	addi	r7,r16,20
    ca10:	839d883a 	add	r14,r16,r14
    ca14:	8a000504 	addi	r8,r17,20
    ca18:	898d883a 	add	r6,r17,r6
    ca1c:	10c00504 	addi	r3,r2,20
    ca20:	0009883a 	mov	r4,zero
    ca24:	3b000017 	ldw	r12,0(r7)
    ca28:	42c00017 	ldw	r11,0(r8)
    ca2c:	42000104 	addi	r8,r8,4
    ca30:	62bfffcc 	andi	r10,r12,65535
    ca34:	5b7fffcc 	andi	r13,r11,65535
    ca38:	5109883a 	add	r4,r10,r4
    ca3c:	2355c83a 	sub	r10,r4,r13
    ca40:	5816d43a 	srli	r11,r11,16
    ca44:	6008d43a 	srli	r4,r12,16
    ca48:	501bd43a 	srai	r13,r10,16
    ca4c:	1a80000d 	sth	r10,0(r3)
    ca50:	22c9c83a 	sub	r4,r4,r11
    ca54:	2349883a 	add	r4,r4,r13
    ca58:	1900008d 	sth	r4,2(r3)
    ca5c:	39c00104 	addi	r7,r7,4
    ca60:	2009d43a 	srai	r4,r4,16
    ca64:	18c00104 	addi	r3,r3,4
    ca68:	41bfee36 	bltu	r8,r6,ca24 <_gp+0xffff01a8>
    ca6c:	180b883a 	mov	r5,r3
    ca70:	3815883a 	mov	r10,r7
    ca74:	3b80132e 	bgeu	r7,r14,cac4 <__mdiff+0x124>
    ca78:	3a000017 	ldw	r8,0(r7)
    ca7c:	18c00104 	addi	r3,r3,4
    ca80:	39c00104 	addi	r7,r7,4
    ca84:	41bfffcc 	andi	r6,r8,65535
    ca88:	310d883a 	add	r6,r6,r4
    ca8c:	3009d43a 	srai	r4,r6,16
    ca90:	4010d43a 	srli	r8,r8,16
    ca94:	19bfff0d 	sth	r6,-4(r3)
    ca98:	2209883a 	add	r4,r4,r8
    ca9c:	193fff8d 	sth	r4,-2(r3)
    caa0:	2009d43a 	srai	r4,r4,16
    caa4:	3bbff436 	bltu	r7,r14,ca78 <_gp+0xffff01fc>
    caa8:	0286303a 	nor	r3,zero,r10
    caac:	1b87883a 	add	r3,r3,r14
    cab0:	1806d0ba 	srli	r3,r3,2
    cab4:	18c00044 	addi	r3,r3,1
    cab8:	18c7883a 	add	r3,r3,r3
    cabc:	18c7883a 	add	r3,r3,r3
    cac0:	28c7883a 	add	r3,r5,r3
    cac4:	193fff17 	ldw	r4,-4(r3)
    cac8:	18ffff04 	addi	r3,r3,-4
    cacc:	2000041e 	bne	r4,zero,cae0 <__mdiff+0x140>
    cad0:	18ffff04 	addi	r3,r3,-4
    cad4:	19000017 	ldw	r4,0(r3)
    cad8:	4a7fffc4 	addi	r9,r9,-1
    cadc:	203ffc26 	beq	r4,zero,cad0 <_gp+0xffff0254>
    cae0:	12400415 	stw	r9,16(r2)
    cae4:	dfc00417 	ldw	ra,16(sp)
    cae8:	dcc00317 	ldw	r19,12(sp)
    caec:	dc800217 	ldw	r18,8(sp)
    caf0:	dc400117 	ldw	r17,4(sp)
    caf4:	dc000017 	ldw	r16,0(sp)
    caf8:	dec00504 	addi	sp,sp,20
    cafc:	f800283a 	ret
    cb00:	8005883a 	mov	r2,r16
    cb04:	04c00044 	movi	r19,1
    cb08:	8821883a 	mov	r16,r17
    cb0c:	1023883a 	mov	r17,r2
    cb10:	003fb206 	br	c9dc <_gp+0xffff0160>
    cb14:	9009883a 	mov	r4,r18
    cb18:	000b883a 	mov	r5,zero
    cb1c:	000c0a40 	call	c0a4 <_Balloc>
    cb20:	00c00044 	movi	r3,1
    cb24:	10c00415 	stw	r3,16(r2)
    cb28:	10000515 	stw	zero,20(r2)
    cb2c:	dfc00417 	ldw	ra,16(sp)
    cb30:	dcc00317 	ldw	r19,12(sp)
    cb34:	dc800217 	ldw	r18,8(sp)
    cb38:	dc400117 	ldw	r17,4(sp)
    cb3c:	dc000017 	ldw	r16,0(sp)
    cb40:	dec00504 	addi	sp,sp,20
    cb44:	f800283a 	ret

0000cb48 <__ulp>:
    cb48:	295ffc2c 	andhi	r5,r5,32752
    cb4c:	00bf3034 	movhi	r2,64704
    cb50:	2887883a 	add	r3,r5,r2
    cb54:	00c0020e 	bge	zero,r3,cb60 <__ulp+0x18>
    cb58:	0005883a 	mov	r2,zero
    cb5c:	f800283a 	ret
    cb60:	00c7c83a 	sub	r3,zero,r3
    cb64:	1805d53a 	srai	r2,r3,20
    cb68:	00c004c4 	movi	r3,19
    cb6c:	18800a0e 	bge	r3,r2,cb98 <__ulp+0x50>
    cb70:	01000c84 	movi	r4,50
    cb74:	0007883a 	mov	r3,zero
    cb78:	20800516 	blt	r4,r2,cb90 <__ulp+0x48>
    cb7c:	01000cc4 	movi	r4,51
    cb80:	2085c83a 	sub	r2,r4,r2
    cb84:	01000044 	movi	r4,1
    cb88:	2084983a 	sll	r2,r4,r2
    cb8c:	f800283a 	ret
    cb90:	00800044 	movi	r2,1
    cb94:	f800283a 	ret
    cb98:	00c00234 	movhi	r3,8
    cb9c:	1887d83a 	sra	r3,r3,r2
    cba0:	0005883a 	mov	r2,zero
    cba4:	f800283a 	ret

0000cba8 <__b2d>:
    cba8:	defffa04 	addi	sp,sp,-24
    cbac:	dc000015 	stw	r16,0(sp)
    cbb0:	24000417 	ldw	r16,16(r4)
    cbb4:	dc400115 	stw	r17,4(sp)
    cbb8:	dcc00315 	stw	r19,12(sp)
    cbbc:	84000144 	addi	r16,r16,5
    cbc0:	8421883a 	add	r16,r16,r16
    cbc4:	8421883a 	add	r16,r16,r16
    cbc8:	2421883a 	add	r16,r4,r16
    cbcc:	847fff17 	ldw	r17,-4(r16)
    cbd0:	24c00504 	addi	r19,r4,20
    cbd4:	dd000415 	stw	r20,16(sp)
    cbd8:	8809883a 	mov	r4,r17
    cbdc:	dc800215 	stw	r18,8(sp)
    cbe0:	2829883a 	mov	r20,r5
    cbe4:	dfc00515 	stw	ra,20(sp)
    cbe8:	000c38c0 	call	c38c <__hi0bits>
    cbec:	00c00804 	movi	r3,32
    cbf0:	1887c83a 	sub	r3,r3,r2
    cbf4:	a0c00015 	stw	r3,0(r20)
    cbf8:	00c00284 	movi	r3,10
    cbfc:	84bfff04 	addi	r18,r16,-4
    cc00:	18801216 	blt	r3,r2,cc4c <__b2d+0xa4>
    cc04:	010002c4 	movi	r4,11
    cc08:	2089c83a 	sub	r4,r4,r2
    cc0c:	8906d83a 	srl	r3,r17,r4
    cc10:	18cffc34 	orhi	r3,r3,16368
    cc14:	9c80322e 	bgeu	r19,r18,cce0 <__b2d+0x138>
    cc18:	817ffe17 	ldw	r5,-8(r16)
    cc1c:	2908d83a 	srl	r4,r5,r4
    cc20:	10800544 	addi	r2,r2,21
    cc24:	88a2983a 	sll	r17,r17,r2
    cc28:	2444b03a 	or	r2,r4,r17
    cc2c:	dfc00517 	ldw	ra,20(sp)
    cc30:	dd000417 	ldw	r20,16(sp)
    cc34:	dcc00317 	ldw	r19,12(sp)
    cc38:	dc800217 	ldw	r18,8(sp)
    cc3c:	dc400117 	ldw	r17,4(sp)
    cc40:	dc000017 	ldw	r16,0(sp)
    cc44:	dec00604 	addi	sp,sp,24
    cc48:	f800283a 	ret
    cc4c:	9c801636 	bltu	r19,r18,cca8 <__b2d+0x100>
    cc50:	113ffd44 	addi	r4,r2,-11
    cc54:	000b883a 	mov	r5,zero
    cc58:	20001726 	beq	r4,zero,ccb8 <__b2d+0x110>
    cc5c:	00c00ac4 	movi	r3,43
    cc60:	1885c83a 	sub	r2,r3,r2
    cc64:	8906983a 	sll	r3,r17,r4
    cc68:	288cd83a 	srl	r6,r5,r2
    cc6c:	18cffc34 	orhi	r3,r3,16368
    cc70:	1986b03a 	or	r3,r3,r6
    cc74:	9c801c2e 	bgeu	r19,r18,cce8 <__b2d+0x140>
    cc78:	91bfff17 	ldw	r6,-4(r18)
    cc7c:	3084d83a 	srl	r2,r6,r2
    cc80:	2908983a 	sll	r4,r5,r4
    cc84:	1104b03a 	or	r2,r2,r4
    cc88:	dfc00517 	ldw	ra,20(sp)
    cc8c:	dd000417 	ldw	r20,16(sp)
    cc90:	dcc00317 	ldw	r19,12(sp)
    cc94:	dc800217 	ldw	r18,8(sp)
    cc98:	dc400117 	ldw	r17,4(sp)
    cc9c:	dc000017 	ldw	r16,0(sp)
    cca0:	dec00604 	addi	sp,sp,24
    cca4:	f800283a 	ret
    cca8:	113ffd44 	addi	r4,r2,-11
    ccac:	84bffe04 	addi	r18,r16,-8
    ccb0:	817ffe17 	ldw	r5,-8(r16)
    ccb4:	203fe91e 	bne	r4,zero,cc5c <_gp+0xffff03e0>
    ccb8:	88cffc34 	orhi	r3,r17,16368
    ccbc:	2805883a 	mov	r2,r5
    ccc0:	dfc00517 	ldw	ra,20(sp)
    ccc4:	dd000417 	ldw	r20,16(sp)
    ccc8:	dcc00317 	ldw	r19,12(sp)
    cccc:	dc800217 	ldw	r18,8(sp)
    ccd0:	dc400117 	ldw	r17,4(sp)
    ccd4:	dc000017 	ldw	r16,0(sp)
    ccd8:	dec00604 	addi	sp,sp,24
    ccdc:	f800283a 	ret
    cce0:	0009883a 	mov	r4,zero
    cce4:	003fce06 	br	cc20 <_gp+0xffff03a4>
    cce8:	0005883a 	mov	r2,zero
    ccec:	003fe406 	br	cc80 <_gp+0xffff0404>

0000ccf0 <__d2b>:
    ccf0:	defff804 	addi	sp,sp,-32
    ccf4:	dc400315 	stw	r17,12(sp)
    ccf8:	3023883a 	mov	r17,r6
    ccfc:	dc800415 	stw	r18,16(sp)
    cd00:	8824907a 	slli	r18,r17,1
    cd04:	dcc00515 	stw	r19,20(sp)
    cd08:	2827883a 	mov	r19,r5
    cd0c:	9024d57a 	srli	r18,r18,21
    cd10:	01400044 	movi	r5,1
    cd14:	dd000615 	stw	r20,24(sp)
    cd18:	dc000215 	stw	r16,8(sp)
    cd1c:	dfc00715 	stw	ra,28(sp)
    cd20:	3829883a 	mov	r20,r7
    cd24:	000c0a40 	call	c0a4 <_Balloc>
    cd28:	1021883a 	mov	r16,r2
    cd2c:	00800434 	movhi	r2,16
    cd30:	10bfffc4 	addi	r2,r2,-1
    cd34:	88a2703a 	and	r17,r17,r2
    cd38:	90000126 	beq	r18,zero,cd40 <__d2b+0x50>
    cd3c:	8c400434 	orhi	r17,r17,16
    cd40:	dc400015 	stw	r17,0(sp)
    cd44:	98002226 	beq	r19,zero,cdd0 <__d2b+0xe0>
    cd48:	d9000104 	addi	r4,sp,4
    cd4c:	dcc00115 	stw	r19,4(sp)
    cd50:	000c3f40 	call	c3f4 <__lo0bits>
    cd54:	d8c00017 	ldw	r3,0(sp)
    cd58:	10002d1e 	bne	r2,zero,ce10 <__d2b+0x120>
    cd5c:	d9000117 	ldw	r4,4(sp)
    cd60:	81000515 	stw	r4,20(r16)
    cd64:	1823003a 	cmpeq	r17,r3,zero
    cd68:	01000084 	movi	r4,2
    cd6c:	2463c83a 	sub	r17,r4,r17
    cd70:	80c00615 	stw	r3,24(r16)
    cd74:	84400415 	stw	r17,16(r16)
    cd78:	90001d1e 	bne	r18,zero,cdf0 <__d2b+0x100>
    cd7c:	88c00104 	addi	r3,r17,4
    cd80:	18c7883a 	add	r3,r3,r3
    cd84:	18c7883a 	add	r3,r3,r3
    cd88:	80c7883a 	add	r3,r16,r3
    cd8c:	19000017 	ldw	r4,0(r3)
    cd90:	10bef384 	addi	r2,r2,-1074
    cd94:	a0800015 	stw	r2,0(r20)
    cd98:	000c38c0 	call	c38c <__hi0bits>
    cd9c:	8822917a 	slli	r17,r17,5
    cda0:	d8c00817 	ldw	r3,32(sp)
    cda4:	8885c83a 	sub	r2,r17,r2
    cda8:	18800015 	stw	r2,0(r3)
    cdac:	8005883a 	mov	r2,r16
    cdb0:	dfc00717 	ldw	ra,28(sp)
    cdb4:	dd000617 	ldw	r20,24(sp)
    cdb8:	dcc00517 	ldw	r19,20(sp)
    cdbc:	dc800417 	ldw	r18,16(sp)
    cdc0:	dc400317 	ldw	r17,12(sp)
    cdc4:	dc000217 	ldw	r16,8(sp)
    cdc8:	dec00804 	addi	sp,sp,32
    cdcc:	f800283a 	ret
    cdd0:	d809883a 	mov	r4,sp
    cdd4:	000c3f40 	call	c3f4 <__lo0bits>
    cdd8:	d8c00017 	ldw	r3,0(sp)
    cddc:	04400044 	movi	r17,1
    cde0:	84400415 	stw	r17,16(r16)
    cde4:	80c00515 	stw	r3,20(r16)
    cde8:	10800804 	addi	r2,r2,32
    cdec:	903fe326 	beq	r18,zero,cd7c <_gp+0xffff0500>
    cdf0:	00c00d44 	movi	r3,53
    cdf4:	94bef344 	addi	r18,r18,-1075
    cdf8:	90a5883a 	add	r18,r18,r2
    cdfc:	1885c83a 	sub	r2,r3,r2
    ce00:	d8c00817 	ldw	r3,32(sp)
    ce04:	a4800015 	stw	r18,0(r20)
    ce08:	18800015 	stw	r2,0(r3)
    ce0c:	003fe706 	br	cdac <_gp+0xffff0530>
    ce10:	01000804 	movi	r4,32
    ce14:	2089c83a 	sub	r4,r4,r2
    ce18:	1908983a 	sll	r4,r3,r4
    ce1c:	d9400117 	ldw	r5,4(sp)
    ce20:	1886d83a 	srl	r3,r3,r2
    ce24:	2148b03a 	or	r4,r4,r5
    ce28:	81000515 	stw	r4,20(r16)
    ce2c:	d8c00015 	stw	r3,0(sp)
    ce30:	003fcc06 	br	cd64 <_gp+0xffff04e8>

0000ce34 <__ratio>:
    ce34:	defff904 	addi	sp,sp,-28
    ce38:	dc400315 	stw	r17,12(sp)
    ce3c:	2823883a 	mov	r17,r5
    ce40:	d9400104 	addi	r5,sp,4
    ce44:	dfc00615 	stw	ra,24(sp)
    ce48:	dcc00515 	stw	r19,20(sp)
    ce4c:	dc800415 	stw	r18,16(sp)
    ce50:	2027883a 	mov	r19,r4
    ce54:	dc000215 	stw	r16,8(sp)
    ce58:	000cba80 	call	cba8 <__b2d>
    ce5c:	8809883a 	mov	r4,r17
    ce60:	d80b883a 	mov	r5,sp
    ce64:	1025883a 	mov	r18,r2
    ce68:	1821883a 	mov	r16,r3
    ce6c:	000cba80 	call	cba8 <__b2d>
    ce70:	99400417 	ldw	r5,16(r19)
    ce74:	89000417 	ldw	r4,16(r17)
    ce78:	d9800117 	ldw	r6,4(sp)
    ce7c:	2909c83a 	sub	r4,r5,r4
    ce80:	d9400017 	ldw	r5,0(sp)
    ce84:	2008917a 	slli	r4,r4,5
    ce88:	314bc83a 	sub	r5,r6,r5
    ce8c:	290b883a 	add	r5,r5,r4
    ce90:	01400e0e 	bge	zero,r5,cecc <__ratio+0x98>
    ce94:	280a953a 	slli	r5,r5,20
    ce98:	2c21883a 	add	r16,r5,r16
    ce9c:	9009883a 	mov	r4,r18
    cea0:	800b883a 	mov	r5,r16
    cea4:	100d883a 	mov	r6,r2
    cea8:	180f883a 	mov	r7,r3
    ceac:	0005be40 	call	5be4 <__divdf3>
    ceb0:	dfc00617 	ldw	ra,24(sp)
    ceb4:	dcc00517 	ldw	r19,20(sp)
    ceb8:	dc800417 	ldw	r18,16(sp)
    cebc:	dc400317 	ldw	r17,12(sp)
    cec0:	dc000217 	ldw	r16,8(sp)
    cec4:	dec00704 	addi	sp,sp,28
    cec8:	f800283a 	ret
    cecc:	280a953a 	slli	r5,r5,20
    ced0:	1947c83a 	sub	r3,r3,r5
    ced4:	003ff106 	br	ce9c <_gp+0xffff0620>

0000ced8 <_mprec_log10>:
    ced8:	defffe04 	addi	sp,sp,-8
    cedc:	dc000015 	stw	r16,0(sp)
    cee0:	dfc00115 	stw	ra,4(sp)
    cee4:	008005c4 	movi	r2,23
    cee8:	2021883a 	mov	r16,r4
    ceec:	11000d0e 	bge	r2,r4,cf24 <_mprec_log10+0x4c>
    cef0:	0005883a 	mov	r2,zero
    cef4:	00cffc34 	movhi	r3,16368
    cef8:	843fffc4 	addi	r16,r16,-1
    cefc:	1009883a 	mov	r4,r2
    cf00:	180b883a 	mov	r5,r3
    cf04:	000d883a 	mov	r6,zero
    cf08:	01d00934 	movhi	r7,16420
    cf0c:	000eecc0 	call	eecc <__muldf3>
    cf10:	803ff91e 	bne	r16,zero,cef8 <_gp+0xffff067c>
    cf14:	dfc00117 	ldw	ra,4(sp)
    cf18:	dc000017 	ldw	r16,0(sp)
    cf1c:	dec00204 	addi	sp,sp,8
    cf20:	f800283a 	ret
    cf24:	202090fa 	slli	r16,r4,3
    cf28:	00800074 	movhi	r2,1
    cf2c:	108b5804 	addi	r2,r2,11616
    cf30:	1421883a 	add	r16,r2,r16
    cf34:	80800017 	ldw	r2,0(r16)
    cf38:	80c00117 	ldw	r3,4(r16)
    cf3c:	dfc00117 	ldw	ra,4(sp)
    cf40:	dc000017 	ldw	r16,0(sp)
    cf44:	dec00204 	addi	sp,sp,8
    cf48:	f800283a 	ret

0000cf4c <__copybits>:
    cf4c:	297fffc4 	addi	r5,r5,-1
    cf50:	31c00417 	ldw	r7,16(r6)
    cf54:	2811d17a 	srai	r8,r5,5
    cf58:	30800504 	addi	r2,r6,20
    cf5c:	39c00144 	addi	r7,r7,5
    cf60:	42000044 	addi	r8,r8,1
    cf64:	39cf883a 	add	r7,r7,r7
    cf68:	4211883a 	add	r8,r8,r8
    cf6c:	39cf883a 	add	r7,r7,r7
    cf70:	4211883a 	add	r8,r8,r8
    cf74:	31cf883a 	add	r7,r6,r7
    cf78:	2211883a 	add	r8,r4,r8
    cf7c:	11c00d2e 	bgeu	r2,r7,cfb4 <__copybits+0x68>
    cf80:	2007883a 	mov	r3,r4
    cf84:	11400017 	ldw	r5,0(r2)
    cf88:	18c00104 	addi	r3,r3,4
    cf8c:	10800104 	addi	r2,r2,4
    cf90:	197fff15 	stw	r5,-4(r3)
    cf94:	11fffb36 	bltu	r2,r7,cf84 <_gp+0xffff0708>
    cf98:	3985c83a 	sub	r2,r7,r6
    cf9c:	10bffac4 	addi	r2,r2,-21
    cfa0:	1004d0ba 	srli	r2,r2,2
    cfa4:	10800044 	addi	r2,r2,1
    cfa8:	1085883a 	add	r2,r2,r2
    cfac:	1085883a 	add	r2,r2,r2
    cfb0:	2089883a 	add	r4,r4,r2
    cfb4:	2200032e 	bgeu	r4,r8,cfc4 <__copybits+0x78>
    cfb8:	20000015 	stw	zero,0(r4)
    cfbc:	21000104 	addi	r4,r4,4
    cfc0:	223ffd36 	bltu	r4,r8,cfb8 <_gp+0xffff073c>
    cfc4:	f800283a 	ret

0000cfc8 <__any_on>:
    cfc8:	21800417 	ldw	r6,16(r4)
    cfcc:	2805d17a 	srai	r2,r5,5
    cfd0:	20c00504 	addi	r3,r4,20
    cfd4:	30800f0e 	bge	r6,r2,d014 <__any_on+0x4c>
    cfd8:	3005883a 	mov	r2,r6
    cfdc:	10800144 	addi	r2,r2,5
    cfe0:	1085883a 	add	r2,r2,r2
    cfe4:	1085883a 	add	r2,r2,r2
    cfe8:	2089883a 	add	r4,r4,r2
    cfec:	1900152e 	bgeu	r3,r4,d044 <__any_on+0x7c>
    cff0:	20bfff17 	ldw	r2,-4(r4)
    cff4:	213fff04 	addi	r4,r4,-4
    cff8:	1000041e 	bne	r2,zero,d00c <__any_on+0x44>
    cffc:	1900112e 	bgeu	r3,r4,d044 <__any_on+0x7c>
    d000:	213fff04 	addi	r4,r4,-4
    d004:	20800017 	ldw	r2,0(r4)
    d008:	103ffc26 	beq	r2,zero,cffc <_gp+0xffff0780>
    d00c:	00800044 	movi	r2,1
    d010:	f800283a 	ret
    d014:	11bff10e 	bge	r2,r6,cfdc <_gp+0xffff0760>
    d018:	294007cc 	andi	r5,r5,31
    d01c:	283fef26 	beq	r5,zero,cfdc <_gp+0xffff0760>
    d020:	11800144 	addi	r6,r2,5
    d024:	318d883a 	add	r6,r6,r6
    d028:	318d883a 	add	r6,r6,r6
    d02c:	218d883a 	add	r6,r4,r6
    d030:	31800017 	ldw	r6,0(r6)
    d034:	314ed83a 	srl	r7,r6,r5
    d038:	394a983a 	sll	r5,r7,r5
    d03c:	29bff31e 	bne	r5,r6,d00c <_gp+0xffff0790>
    d040:	003fe606 	br	cfdc <_gp+0xffff0760>
    d044:	0005883a 	mov	r2,zero
    d048:	f800283a 	ret

0000d04c <_putc_r>:
    d04c:	defffc04 	addi	sp,sp,-16
    d050:	dc000215 	stw	r16,8(sp)
    d054:	dfc00315 	stw	ra,12(sp)
    d058:	2021883a 	mov	r16,r4
    d05c:	20000226 	beq	r4,zero,d068 <_putc_r+0x1c>
    d060:	20800e17 	ldw	r2,56(r4)
    d064:	10001d26 	beq	r2,zero,d0dc <_putc_r+0x90>
    d068:	30800217 	ldw	r2,8(r6)
    d06c:	10bfffc4 	addi	r2,r2,-1
    d070:	30800215 	stw	r2,8(r6)
    d074:	10000a16 	blt	r2,zero,d0a0 <_putc_r+0x54>
    d078:	30800017 	ldw	r2,0(r6)
    d07c:	11400005 	stb	r5,0(r2)
    d080:	30800017 	ldw	r2,0(r6)
    d084:	10c00044 	addi	r3,r2,1
    d088:	10800003 	ldbu	r2,0(r2)
    d08c:	30c00015 	stw	r3,0(r6)
    d090:	dfc00317 	ldw	ra,12(sp)
    d094:	dc000217 	ldw	r16,8(sp)
    d098:	dec00404 	addi	sp,sp,16
    d09c:	f800283a 	ret
    d0a0:	30c00617 	ldw	r3,24(r6)
    d0a4:	10c01316 	blt	r2,r3,d0f4 <_putc_r+0xa8>
    d0a8:	30800017 	ldw	r2,0(r6)
    d0ac:	01000284 	movi	r4,10
    d0b0:	11400005 	stb	r5,0(r2)
    d0b4:	30c00017 	ldw	r3,0(r6)
    d0b8:	19400003 	ldbu	r5,0(r3)
    d0bc:	29000d26 	beq	r5,r4,d0f4 <_putc_r+0xa8>
    d0c0:	18c00044 	addi	r3,r3,1
    d0c4:	2805883a 	mov	r2,r5
    d0c8:	30c00015 	stw	r3,0(r6)
    d0cc:	dfc00317 	ldw	ra,12(sp)
    d0d0:	dc000217 	ldw	r16,8(sp)
    d0d4:	dec00404 	addi	sp,sp,16
    d0d8:	f800283a 	ret
    d0dc:	d9400015 	stw	r5,0(sp)
    d0e0:	d9800115 	stw	r6,4(sp)
    d0e4:	000af680 	call	af68 <__sinit>
    d0e8:	d9800117 	ldw	r6,4(sp)
    d0ec:	d9400017 	ldw	r5,0(sp)
    d0f0:	003fdd06 	br	d068 <_gp+0xffff07ec>
    d0f4:	8009883a 	mov	r4,r16
    d0f8:	dfc00317 	ldw	ra,12(sp)
    d0fc:	dc000217 	ldw	r16,8(sp)
    d100:	dec00404 	addi	sp,sp,16
    d104:	000d9981 	jmpi	d998 <__swbuf_r>

0000d108 <putc>:
    d108:	defffc04 	addi	sp,sp,-16
    d10c:	dc400115 	stw	r17,4(sp)
    d110:	04400074 	movhi	r17,1
    d114:	8c522304 	addi	r17,r17,18572
    d118:	88800017 	ldw	r2,0(r17)
    d11c:	dc800215 	stw	r18,8(sp)
    d120:	dc000015 	stw	r16,0(sp)
    d124:	dfc00315 	stw	ra,12(sp)
    d128:	2025883a 	mov	r18,r4
    d12c:	2821883a 	mov	r16,r5
    d130:	10000226 	beq	r2,zero,d13c <putc+0x34>
    d134:	10c00e17 	ldw	r3,56(r2)
    d138:	18002126 	beq	r3,zero,d1c0 <putc+0xb8>
    d13c:	80800217 	ldw	r2,8(r16)
    d140:	10bfffc4 	addi	r2,r2,-1
    d144:	80800215 	stw	r2,8(r16)
    d148:	10000c16 	blt	r2,zero,d17c <putc+0x74>
    d14c:	80800017 	ldw	r2,0(r16)
    d150:	14800005 	stb	r18,0(r2)
    d154:	80800017 	ldw	r2,0(r16)
    d158:	10c00044 	addi	r3,r2,1
    d15c:	10800003 	ldbu	r2,0(r2)
    d160:	80c00015 	stw	r3,0(r16)
    d164:	dfc00317 	ldw	ra,12(sp)
    d168:	dc800217 	ldw	r18,8(sp)
    d16c:	dc400117 	ldw	r17,4(sp)
    d170:	dc000017 	ldw	r16,0(sp)
    d174:	dec00404 	addi	sp,sp,16
    d178:	f800283a 	ret
    d17c:	80c00617 	ldw	r3,24(r16)
    d180:	10c01216 	blt	r2,r3,d1cc <putc+0xc4>
    d184:	80800017 	ldw	r2,0(r16)
    d188:	01000284 	movi	r4,10
    d18c:	14800005 	stb	r18,0(r2)
    d190:	80c00017 	ldw	r3,0(r16)
    d194:	19400003 	ldbu	r5,0(r3)
    d198:	29001526 	beq	r5,r4,d1f0 <putc+0xe8>
    d19c:	18c00044 	addi	r3,r3,1
    d1a0:	2805883a 	mov	r2,r5
    d1a4:	80c00015 	stw	r3,0(r16)
    d1a8:	dfc00317 	ldw	ra,12(sp)
    d1ac:	dc800217 	ldw	r18,8(sp)
    d1b0:	dc400117 	ldw	r17,4(sp)
    d1b4:	dc000017 	ldw	r16,0(sp)
    d1b8:	dec00404 	addi	sp,sp,16
    d1bc:	f800283a 	ret
    d1c0:	1009883a 	mov	r4,r2
    d1c4:	000af680 	call	af68 <__sinit>
    d1c8:	003fdc06 	br	d13c <_gp+0xffff08c0>
    d1cc:	89000017 	ldw	r4,0(r17)
    d1d0:	900b883a 	mov	r5,r18
    d1d4:	800d883a 	mov	r6,r16
    d1d8:	dfc00317 	ldw	ra,12(sp)
    d1dc:	dc800217 	ldw	r18,8(sp)
    d1e0:	dc400117 	ldw	r17,4(sp)
    d1e4:	dc000017 	ldw	r16,0(sp)
    d1e8:	dec00404 	addi	sp,sp,16
    d1ec:	000d9981 	jmpi	d998 <__swbuf_r>
    d1f0:	89000017 	ldw	r4,0(r17)
    d1f4:	003ff706 	br	d1d4 <_gp+0xffff0958>

0000d1f8 <_realloc_r>:
    d1f8:	defff504 	addi	sp,sp,-44
    d1fc:	dd400615 	stw	r21,24(sp)
    d200:	dc800315 	stw	r18,12(sp)
    d204:	dc000115 	stw	r16,4(sp)
    d208:	dfc00a15 	stw	ra,40(sp)
    d20c:	df000915 	stw	fp,36(sp)
    d210:	ddc00815 	stw	r23,32(sp)
    d214:	dd800715 	stw	r22,28(sp)
    d218:	dd000515 	stw	r20,20(sp)
    d21c:	dcc00415 	stw	r19,16(sp)
    d220:	dc400215 	stw	r17,8(sp)
    d224:	2821883a 	mov	r16,r5
    d228:	202b883a 	mov	r21,r4
    d22c:	3025883a 	mov	r18,r6
    d230:	28009626 	beq	r5,zero,d48c <_realloc_r+0x294>
    d234:	000fcc40 	call	fcc4 <__malloc_lock>
    d238:	80bfff17 	ldw	r2,-4(r16)
    d23c:	04ffff04 	movi	r19,-4
    d240:	90c002c4 	addi	r3,r18,11
    d244:	01000584 	movi	r4,22
    d248:	85bffe04 	addi	r22,r16,-8
    d24c:	14e6703a 	and	r19,r2,r19
    d250:	20c0372e 	bgeu	r4,r3,d330 <_realloc_r+0x138>
    d254:	047ffe04 	movi	r17,-8
    d258:	1c62703a 	and	r17,r3,r17
    d25c:	8807883a 	mov	r3,r17
    d260:	88005a16 	blt	r17,zero,d3cc <_realloc_r+0x1d4>
    d264:	8c805936 	bltu	r17,r18,d3cc <_realloc_r+0x1d4>
    d268:	98c0340e 	bge	r19,r3,d33c <_realloc_r+0x144>
    d26c:	07000074 	movhi	fp,1
    d270:	e70b9804 	addi	fp,fp,11872
    d274:	e1400217 	ldw	r5,8(fp)
    d278:	b4c9883a 	add	r4,r22,r19
    d27c:	29009026 	beq	r5,r4,d4c0 <_realloc_r+0x2c8>
    d280:	21800117 	ldw	r6,4(r4)
    d284:	01ffff84 	movi	r7,-2
    d288:	31ce703a 	and	r7,r6,r7
    d28c:	21cf883a 	add	r7,r4,r7
    d290:	39c00117 	ldw	r7,4(r7)
    d294:	39c0004c 	andi	r7,r7,1
    d298:	38004326 	beq	r7,zero,d3a8 <_realloc_r+0x1b0>
    d29c:	000d883a 	mov	r6,zero
    d2a0:	0009883a 	mov	r4,zero
    d2a4:	1080004c 	andi	r2,r2,1
    d2a8:	10005a1e 	bne	r2,zero,d414 <_realloc_r+0x21c>
    d2ac:	85fffe17 	ldw	r23,-8(r16)
    d2b0:	00bfff04 	movi	r2,-4
    d2b4:	b5efc83a 	sub	r23,r22,r23
    d2b8:	b9c00117 	ldw	r7,4(r23)
    d2bc:	388e703a 	and	r7,r7,r2
    d2c0:	3ccf883a 	add	r7,r7,r19
    d2c4:	20005226 	beq	r4,zero,d410 <_realloc_r+0x218>
    d2c8:	31e9883a 	add	r20,r6,r7
    d2cc:	2140c726 	beq	r4,r5,d5ec <_realloc_r+0x3f4>
    d2d0:	a0c04f16 	blt	r20,r3,d410 <_realloc_r+0x218>
    d2d4:	20800317 	ldw	r2,12(r4)
    d2d8:	20c00217 	ldw	r3,8(r4)
    d2dc:	99bfff04 	addi	r6,r19,-4
    d2e0:	01000904 	movi	r4,36
    d2e4:	18800315 	stw	r2,12(r3)
    d2e8:	10c00215 	stw	r3,8(r2)
    d2ec:	b8c00217 	ldw	r3,8(r23)
    d2f0:	b8800317 	ldw	r2,12(r23)
    d2f4:	bc800204 	addi	r18,r23,8
    d2f8:	18800315 	stw	r2,12(r3)
    d2fc:	10c00215 	stw	r3,8(r2)
    d300:	2180ed36 	bltu	r4,r6,d6b8 <_realloc_r+0x4c0>
    d304:	008004c4 	movi	r2,19
    d308:	11809b2e 	bgeu	r2,r6,d578 <_realloc_r+0x380>
    d30c:	80800017 	ldw	r2,0(r16)
    d310:	b8800215 	stw	r2,8(r23)
    d314:	80800117 	ldw	r2,4(r16)
    d318:	b8800315 	stw	r2,12(r23)
    d31c:	008006c4 	movi	r2,27
    d320:	1180f936 	bltu	r2,r6,d708 <_realloc_r+0x510>
    d324:	b8800404 	addi	r2,r23,16
    d328:	80c00204 	addi	r3,r16,8
    d32c:	00009406 	br	d580 <_realloc_r+0x388>
    d330:	00c00404 	movi	r3,16
    d334:	1823883a 	mov	r17,r3
    d338:	003fca06 	br	d264 <_gp+0xffff09e8>
    d33c:	9829883a 	mov	r20,r19
    d340:	a447c83a 	sub	r3,r20,r17
    d344:	010003c4 	movi	r4,15
    d348:	1080004c 	andi	r2,r2,1
    d34c:	20c02336 	bltu	r4,r3,d3dc <_realloc_r+0x1e4>
    d350:	1504b03a 	or	r2,r2,r20
    d354:	b0800115 	stw	r2,4(r22)
    d358:	b52d883a 	add	r22,r22,r20
    d35c:	b0800117 	ldw	r2,4(r22)
    d360:	10800054 	ori	r2,r2,1
    d364:	b0800115 	stw	r2,4(r22)
    d368:	a809883a 	mov	r4,r21
    d36c:	000fce40 	call	fce4 <__malloc_unlock>
    d370:	8025883a 	mov	r18,r16
    d374:	9005883a 	mov	r2,r18
    d378:	dfc00a17 	ldw	ra,40(sp)
    d37c:	df000917 	ldw	fp,36(sp)
    d380:	ddc00817 	ldw	r23,32(sp)
    d384:	dd800717 	ldw	r22,28(sp)
    d388:	dd400617 	ldw	r21,24(sp)
    d38c:	dd000517 	ldw	r20,20(sp)
    d390:	dcc00417 	ldw	r19,16(sp)
    d394:	dc800317 	ldw	r18,12(sp)
    d398:	dc400217 	ldw	r17,8(sp)
    d39c:	dc000117 	ldw	r16,4(sp)
    d3a0:	dec00b04 	addi	sp,sp,44
    d3a4:	f800283a 	ret
    d3a8:	01ffff04 	movi	r7,-4
    d3ac:	31cc703a 	and	r6,r6,r7
    d3b0:	34e9883a 	add	r20,r6,r19
    d3b4:	a0ffbb16 	blt	r20,r3,d2a4 <_gp+0xffff0a28>
    d3b8:	20c00317 	ldw	r3,12(r4)
    d3bc:	21000217 	ldw	r4,8(r4)
    d3c0:	20c00315 	stw	r3,12(r4)
    d3c4:	19000215 	stw	r4,8(r3)
    d3c8:	003fdd06 	br	d340 <_gp+0xffff0ac4>
    d3cc:	00800304 	movi	r2,12
    d3d0:	a8800015 	stw	r2,0(r21)
    d3d4:	0025883a 	mov	r18,zero
    d3d8:	003fe606 	br	d374 <_gp+0xffff0af8>
    d3dc:	1444b03a 	or	r2,r2,r17
    d3e0:	b0800115 	stw	r2,4(r22)
    d3e4:	b44b883a 	add	r5,r22,r17
    d3e8:	18800054 	ori	r2,r3,1
    d3ec:	28800115 	stw	r2,4(r5)
    d3f0:	28c7883a 	add	r3,r5,r3
    d3f4:	18800117 	ldw	r2,4(r3)
    d3f8:	a809883a 	mov	r4,r21
    d3fc:	29400204 	addi	r5,r5,8
    d400:	10800054 	ori	r2,r2,1
    d404:	18800115 	stw	r2,4(r3)
    d408:	000b2ec0 	call	b2ec <_free_r>
    d40c:	003fd606 	br	d368 <_gp+0xffff0aec>
    d410:	38c0330e 	bge	r7,r3,d4e0 <_realloc_r+0x2e8>
    d414:	900b883a 	mov	r5,r18
    d418:	a809883a 	mov	r4,r21
    d41c:	00066640 	call	6664 <_malloc_r>
    d420:	1025883a 	mov	r18,r2
    d424:	10001626 	beq	r2,zero,d480 <_realloc_r+0x288>
    d428:	80bfff17 	ldw	r2,-4(r16)
    d42c:	00ffff84 	movi	r3,-2
    d430:	913ffe04 	addi	r4,r18,-8
    d434:	10c6703a 	and	r3,r2,r3
    d438:	b0c7883a 	add	r3,r22,r3
    d43c:	20c09926 	beq	r4,r3,d6a4 <_realloc_r+0x4ac>
    d440:	99bfff04 	addi	r6,r19,-4
    d444:	00800904 	movi	r2,36
    d448:	11806436 	bltu	r2,r6,d5dc <_realloc_r+0x3e4>
    d44c:	00c004c4 	movi	r3,19
    d450:	19804036 	bltu	r3,r6,d554 <_realloc_r+0x35c>
    d454:	9005883a 	mov	r2,r18
    d458:	8007883a 	mov	r3,r16
    d45c:	19000017 	ldw	r4,0(r3)
    d460:	11000015 	stw	r4,0(r2)
    d464:	19000117 	ldw	r4,4(r3)
    d468:	11000115 	stw	r4,4(r2)
    d46c:	18c00217 	ldw	r3,8(r3)
    d470:	10c00215 	stw	r3,8(r2)
    d474:	a809883a 	mov	r4,r21
    d478:	800b883a 	mov	r5,r16
    d47c:	000b2ec0 	call	b2ec <_free_r>
    d480:	a809883a 	mov	r4,r21
    d484:	000fce40 	call	fce4 <__malloc_unlock>
    d488:	003fba06 	br	d374 <_gp+0xffff0af8>
    d48c:	300b883a 	mov	r5,r6
    d490:	dfc00a17 	ldw	ra,40(sp)
    d494:	df000917 	ldw	fp,36(sp)
    d498:	ddc00817 	ldw	r23,32(sp)
    d49c:	dd800717 	ldw	r22,28(sp)
    d4a0:	dd400617 	ldw	r21,24(sp)
    d4a4:	dd000517 	ldw	r20,20(sp)
    d4a8:	dcc00417 	ldw	r19,16(sp)
    d4ac:	dc800317 	ldw	r18,12(sp)
    d4b0:	dc400217 	ldw	r17,8(sp)
    d4b4:	dc000117 	ldw	r16,4(sp)
    d4b8:	dec00b04 	addi	sp,sp,44
    d4bc:	00066641 	jmpi	6664 <_malloc_r>
    d4c0:	29800117 	ldw	r6,4(r5)
    d4c4:	013fff04 	movi	r4,-4
    d4c8:	89c00404 	addi	r7,r17,16
    d4cc:	310c703a 	and	r6,r6,r4
    d4d0:	34c9883a 	add	r4,r6,r19
    d4d4:	21c0340e 	bge	r4,r7,d5a8 <_realloc_r+0x3b0>
    d4d8:	2809883a 	mov	r4,r5
    d4dc:	003f7106 	br	d2a4 <_gp+0xffff0a28>
    d4e0:	b8800317 	ldw	r2,12(r23)
    d4e4:	b8c00217 	ldw	r3,8(r23)
    d4e8:	99bfff04 	addi	r6,r19,-4
    d4ec:	01000904 	movi	r4,36
    d4f0:	18800315 	stw	r2,12(r3)
    d4f4:	10c00215 	stw	r3,8(r2)
    d4f8:	bc800204 	addi	r18,r23,8
    d4fc:	21807836 	bltu	r4,r6,d6e0 <_realloc_r+0x4e8>
    d500:	008004c4 	movi	r2,19
    d504:	1180732e 	bgeu	r2,r6,d6d4 <_realloc_r+0x4dc>
    d508:	80800017 	ldw	r2,0(r16)
    d50c:	b8800215 	stw	r2,8(r23)
    d510:	80800117 	ldw	r2,4(r16)
    d514:	b8800315 	stw	r2,12(r23)
    d518:	008006c4 	movi	r2,27
    d51c:	11808936 	bltu	r2,r6,d744 <_realloc_r+0x54c>
    d520:	b8800404 	addi	r2,r23,16
    d524:	80c00204 	addi	r3,r16,8
    d528:	19000017 	ldw	r4,0(r3)
    d52c:	9021883a 	mov	r16,r18
    d530:	3829883a 	mov	r20,r7
    d534:	11000015 	stw	r4,0(r2)
    d538:	19000117 	ldw	r4,4(r3)
    d53c:	b82d883a 	mov	r22,r23
    d540:	11000115 	stw	r4,4(r2)
    d544:	18c00217 	ldw	r3,8(r3)
    d548:	10c00215 	stw	r3,8(r2)
    d54c:	b8800117 	ldw	r2,4(r23)
    d550:	003f7b06 	br	d340 <_gp+0xffff0ac4>
    d554:	80c00017 	ldw	r3,0(r16)
    d558:	90c00015 	stw	r3,0(r18)
    d55c:	80c00117 	ldw	r3,4(r16)
    d560:	90c00115 	stw	r3,4(r18)
    d564:	00c006c4 	movi	r3,27
    d568:	19804636 	bltu	r3,r6,d684 <_realloc_r+0x48c>
    d56c:	90800204 	addi	r2,r18,8
    d570:	80c00204 	addi	r3,r16,8
    d574:	003fb906 	br	d45c <_gp+0xffff0be0>
    d578:	9005883a 	mov	r2,r18
    d57c:	8007883a 	mov	r3,r16
    d580:	19000017 	ldw	r4,0(r3)
    d584:	9021883a 	mov	r16,r18
    d588:	b82d883a 	mov	r22,r23
    d58c:	11000015 	stw	r4,0(r2)
    d590:	19000117 	ldw	r4,4(r3)
    d594:	11000115 	stw	r4,4(r2)
    d598:	18c00217 	ldw	r3,8(r3)
    d59c:	10c00215 	stw	r3,8(r2)
    d5a0:	b8800117 	ldw	r2,4(r23)
    d5a4:	003f6606 	br	d340 <_gp+0xffff0ac4>
    d5a8:	2445c83a 	sub	r2,r4,r17
    d5ac:	b46d883a 	add	r22,r22,r17
    d5b0:	10800054 	ori	r2,r2,1
    d5b4:	b0800115 	stw	r2,4(r22)
    d5b8:	80bfff17 	ldw	r2,-4(r16)
    d5bc:	a809883a 	mov	r4,r21
    d5c0:	e5800215 	stw	r22,8(fp)
    d5c4:	1080004c 	andi	r2,r2,1
    d5c8:	88a2b03a 	or	r17,r17,r2
    d5cc:	847fff15 	stw	r17,-4(r16)
    d5d0:	000fce40 	call	fce4 <__malloc_unlock>
    d5d4:	8025883a 	mov	r18,r16
    d5d8:	003f6606 	br	d374 <_gp+0xffff0af8>
    d5dc:	9009883a 	mov	r4,r18
    d5e0:	800b883a 	mov	r5,r16
    d5e4:	000bf7c0 	call	bf7c <memmove>
    d5e8:	003fa206 	br	d474 <_gp+0xffff0bf8>
    d5ec:	88800404 	addi	r2,r17,16
    d5f0:	a0bf8716 	blt	r20,r2,d410 <_gp+0xffff0b94>
    d5f4:	b8800317 	ldw	r2,12(r23)
    d5f8:	b8c00217 	ldw	r3,8(r23)
    d5fc:	99bfff04 	addi	r6,r19,-4
    d600:	01000904 	movi	r4,36
    d604:	18800315 	stw	r2,12(r3)
    d608:	10c00215 	stw	r3,8(r2)
    d60c:	bc800204 	addi	r18,r23,8
    d610:	21806536 	bltu	r4,r6,d7a8 <_realloc_r+0x5b0>
    d614:	008004c4 	movi	r2,19
    d618:	1180592e 	bgeu	r2,r6,d780 <_realloc_r+0x588>
    d61c:	80800017 	ldw	r2,0(r16)
    d620:	b8800215 	stw	r2,8(r23)
    d624:	80800117 	ldw	r2,4(r16)
    d628:	b8800315 	stw	r2,12(r23)
    d62c:	008006c4 	movi	r2,27
    d630:	11806136 	bltu	r2,r6,d7b8 <_realloc_r+0x5c0>
    d634:	b8800404 	addi	r2,r23,16
    d638:	80c00204 	addi	r3,r16,8
    d63c:	19000017 	ldw	r4,0(r3)
    d640:	11000015 	stw	r4,0(r2)
    d644:	19000117 	ldw	r4,4(r3)
    d648:	11000115 	stw	r4,4(r2)
    d64c:	18c00217 	ldw	r3,8(r3)
    d650:	10c00215 	stw	r3,8(r2)
    d654:	a447c83a 	sub	r3,r20,r17
    d658:	bc45883a 	add	r2,r23,r17
    d65c:	18c00054 	ori	r3,r3,1
    d660:	10c00115 	stw	r3,4(r2)
    d664:	b8c00117 	ldw	r3,4(r23)
    d668:	e0800215 	stw	r2,8(fp)
    d66c:	a809883a 	mov	r4,r21
    d670:	1880004c 	andi	r2,r3,1
    d674:	88a2b03a 	or	r17,r17,r2
    d678:	bc400115 	stw	r17,4(r23)
    d67c:	000fce40 	call	fce4 <__malloc_unlock>
    d680:	003f3c06 	br	d374 <_gp+0xffff0af8>
    d684:	80c00217 	ldw	r3,8(r16)
    d688:	90c00215 	stw	r3,8(r18)
    d68c:	80c00317 	ldw	r3,12(r16)
    d690:	90c00315 	stw	r3,12(r18)
    d694:	30802426 	beq	r6,r2,d728 <_realloc_r+0x530>
    d698:	90800404 	addi	r2,r18,16
    d69c:	80c00404 	addi	r3,r16,16
    d6a0:	003f6e06 	br	d45c <_gp+0xffff0be0>
    d6a4:	953fff17 	ldw	r20,-4(r18)
    d6a8:	00ffff04 	movi	r3,-4
    d6ac:	a0e8703a 	and	r20,r20,r3
    d6b0:	a4e9883a 	add	r20,r20,r19
    d6b4:	003f2206 	br	d340 <_gp+0xffff0ac4>
    d6b8:	800b883a 	mov	r5,r16
    d6bc:	9009883a 	mov	r4,r18
    d6c0:	000bf7c0 	call	bf7c <memmove>
    d6c4:	9021883a 	mov	r16,r18
    d6c8:	b8800117 	ldw	r2,4(r23)
    d6cc:	b82d883a 	mov	r22,r23
    d6d0:	003f1b06 	br	d340 <_gp+0xffff0ac4>
    d6d4:	9005883a 	mov	r2,r18
    d6d8:	8007883a 	mov	r3,r16
    d6dc:	003f9206 	br	d528 <_gp+0xffff0cac>
    d6e0:	800b883a 	mov	r5,r16
    d6e4:	9009883a 	mov	r4,r18
    d6e8:	d9c00015 	stw	r7,0(sp)
    d6ec:	000bf7c0 	call	bf7c <memmove>
    d6f0:	d9c00017 	ldw	r7,0(sp)
    d6f4:	9021883a 	mov	r16,r18
    d6f8:	b8800117 	ldw	r2,4(r23)
    d6fc:	3829883a 	mov	r20,r7
    d700:	b82d883a 	mov	r22,r23
    d704:	003f0e06 	br	d340 <_gp+0xffff0ac4>
    d708:	80800217 	ldw	r2,8(r16)
    d70c:	b8800415 	stw	r2,16(r23)
    d710:	80800317 	ldw	r2,12(r16)
    d714:	b8800515 	stw	r2,20(r23)
    d718:	31001226 	beq	r6,r4,d764 <_realloc_r+0x56c>
    d71c:	b8800604 	addi	r2,r23,24
    d720:	80c00404 	addi	r3,r16,16
    d724:	003f9606 	br	d580 <_gp+0xffff0d04>
    d728:	81000417 	ldw	r4,16(r16)
    d72c:	90800604 	addi	r2,r18,24
    d730:	80c00604 	addi	r3,r16,24
    d734:	91000415 	stw	r4,16(r18)
    d738:	81000517 	ldw	r4,20(r16)
    d73c:	91000515 	stw	r4,20(r18)
    d740:	003f4606 	br	d45c <_gp+0xffff0be0>
    d744:	80800217 	ldw	r2,8(r16)
    d748:	b8800415 	stw	r2,16(r23)
    d74c:	80800317 	ldw	r2,12(r16)
    d750:	b8800515 	stw	r2,20(r23)
    d754:	31000d26 	beq	r6,r4,d78c <_realloc_r+0x594>
    d758:	b8800604 	addi	r2,r23,24
    d75c:	80c00404 	addi	r3,r16,16
    d760:	003f7106 	br	d528 <_gp+0xffff0cac>
    d764:	81000417 	ldw	r4,16(r16)
    d768:	b8800804 	addi	r2,r23,32
    d76c:	80c00604 	addi	r3,r16,24
    d770:	b9000615 	stw	r4,24(r23)
    d774:	81000517 	ldw	r4,20(r16)
    d778:	b9000715 	stw	r4,28(r23)
    d77c:	003f8006 	br	d580 <_gp+0xffff0d04>
    d780:	9005883a 	mov	r2,r18
    d784:	8007883a 	mov	r3,r16
    d788:	003fac06 	br	d63c <_gp+0xffff0dc0>
    d78c:	81000417 	ldw	r4,16(r16)
    d790:	b8800804 	addi	r2,r23,32
    d794:	80c00604 	addi	r3,r16,24
    d798:	b9000615 	stw	r4,24(r23)
    d79c:	81000517 	ldw	r4,20(r16)
    d7a0:	b9000715 	stw	r4,28(r23)
    d7a4:	003f6006 	br	d528 <_gp+0xffff0cac>
    d7a8:	9009883a 	mov	r4,r18
    d7ac:	800b883a 	mov	r5,r16
    d7b0:	000bf7c0 	call	bf7c <memmove>
    d7b4:	003fa706 	br	d654 <_gp+0xffff0dd8>
    d7b8:	80800217 	ldw	r2,8(r16)
    d7bc:	b8800415 	stw	r2,16(r23)
    d7c0:	80800317 	ldw	r2,12(r16)
    d7c4:	b8800515 	stw	r2,20(r23)
    d7c8:	31000326 	beq	r6,r4,d7d8 <_realloc_r+0x5e0>
    d7cc:	b8800604 	addi	r2,r23,24
    d7d0:	80c00404 	addi	r3,r16,16
    d7d4:	003f9906 	br	d63c <_gp+0xffff0dc0>
    d7d8:	81000417 	ldw	r4,16(r16)
    d7dc:	b8800804 	addi	r2,r23,32
    d7e0:	80c00604 	addi	r3,r16,24
    d7e4:	b9000615 	stw	r4,24(r23)
    d7e8:	81000517 	ldw	r4,20(r16)
    d7ec:	b9000715 	stw	r4,28(r23)
    d7f0:	003f9206 	br	d63c <_gp+0xffff0dc0>

0000d7f4 <__isinfd>:
    d7f4:	0105c83a 	sub	r2,zero,r4
    d7f8:	1108b03a 	or	r4,r2,r4
    d7fc:	2004d7fa 	srli	r2,r4,31
    d800:	00e00034 	movhi	r3,32768
    d804:	18ffffc4 	addi	r3,r3,-1
    d808:	28ca703a 	and	r5,r5,r3
    d80c:	1144b03a 	or	r2,r2,r5
    d810:	00dffc34 	movhi	r3,32752
    d814:	1885c83a 	sub	r2,r3,r2
    d818:	0087c83a 	sub	r3,zero,r2
    d81c:	1884b03a 	or	r2,r3,r2
    d820:	1005d7fa 	srai	r2,r2,31
    d824:	10800044 	addi	r2,r2,1
    d828:	f800283a 	ret

0000d82c <__isnand>:
    d82c:	0105c83a 	sub	r2,zero,r4
    d830:	1108b03a 	or	r4,r2,r4
    d834:	2004d7fa 	srli	r2,r4,31
    d838:	00e00034 	movhi	r3,32768
    d83c:	18ffffc4 	addi	r3,r3,-1
    d840:	28ca703a 	and	r5,r5,r3
    d844:	1144b03a 	or	r2,r2,r5
    d848:	00dffc34 	movhi	r3,32752
    d84c:	1885c83a 	sub	r2,r3,r2
    d850:	1004d7fa 	srli	r2,r2,31
    d854:	f800283a 	ret

0000d858 <__sread>:
    d858:	defffe04 	addi	sp,sp,-8
    d85c:	dc000015 	stw	r16,0(sp)
    d860:	2821883a 	mov	r16,r5
    d864:	2940038f 	ldh	r5,14(r5)
    d868:	dfc00115 	stw	ra,4(sp)
    d86c:	000df040 	call	df04 <_read_r>
    d870:	10000716 	blt	r2,zero,d890 <__sread+0x38>
    d874:	80c01417 	ldw	r3,80(r16)
    d878:	1887883a 	add	r3,r3,r2
    d87c:	80c01415 	stw	r3,80(r16)
    d880:	dfc00117 	ldw	ra,4(sp)
    d884:	dc000017 	ldw	r16,0(sp)
    d888:	dec00204 	addi	sp,sp,8
    d88c:	f800283a 	ret
    d890:	80c0030b 	ldhu	r3,12(r16)
    d894:	18fbffcc 	andi	r3,r3,61439
    d898:	80c0030d 	sth	r3,12(r16)
    d89c:	dfc00117 	ldw	ra,4(sp)
    d8a0:	dc000017 	ldw	r16,0(sp)
    d8a4:	dec00204 	addi	sp,sp,8
    d8a8:	f800283a 	ret

0000d8ac <__swrite>:
    d8ac:	2880030b 	ldhu	r2,12(r5)
    d8b0:	defffb04 	addi	sp,sp,-20
    d8b4:	dcc00315 	stw	r19,12(sp)
    d8b8:	10c0400c 	andi	r3,r2,256
    d8bc:	18ffffcc 	andi	r3,r3,65535
    d8c0:	18e0001c 	xori	r3,r3,32768
    d8c4:	dc800215 	stw	r18,8(sp)
    d8c8:	dc400115 	stw	r17,4(sp)
    d8cc:	dc000015 	stw	r16,0(sp)
    d8d0:	dfc00415 	stw	ra,16(sp)
    d8d4:	18e00004 	addi	r3,r3,-32768
    d8d8:	2821883a 	mov	r16,r5
    d8dc:	2027883a 	mov	r19,r4
    d8e0:	3025883a 	mov	r18,r6
    d8e4:	3823883a 	mov	r17,r7
    d8e8:	18000526 	beq	r3,zero,d900 <__swrite+0x54>
    d8ec:	2940038f 	ldh	r5,14(r5)
    d8f0:	000d883a 	mov	r6,zero
    d8f4:	01c00084 	movi	r7,2
    d8f8:	000de980 	call	de98 <_lseek_r>
    d8fc:	8080030b 	ldhu	r2,12(r16)
    d900:	8140038f 	ldh	r5,14(r16)
    d904:	10bbffcc 	andi	r2,r2,61439
    d908:	9809883a 	mov	r4,r19
    d90c:	900d883a 	mov	r6,r18
    d910:	880f883a 	mov	r7,r17
    d914:	8080030d 	sth	r2,12(r16)
    d918:	dfc00417 	ldw	ra,16(sp)
    d91c:	dcc00317 	ldw	r19,12(sp)
    d920:	dc800217 	ldw	r18,8(sp)
    d924:	dc400117 	ldw	r17,4(sp)
    d928:	dc000017 	ldw	r16,0(sp)
    d92c:	dec00504 	addi	sp,sp,20
    d930:	000daf01 	jmpi	daf0 <_write_r>

0000d934 <__sseek>:
    d934:	defffe04 	addi	sp,sp,-8
    d938:	dc000015 	stw	r16,0(sp)
    d93c:	2821883a 	mov	r16,r5
    d940:	2940038f 	ldh	r5,14(r5)
    d944:	dfc00115 	stw	ra,4(sp)
    d948:	000de980 	call	de98 <_lseek_r>
    d94c:	00ffffc4 	movi	r3,-1
    d950:	10c00826 	beq	r2,r3,d974 <__sseek+0x40>
    d954:	80c0030b 	ldhu	r3,12(r16)
    d958:	80801415 	stw	r2,80(r16)
    d95c:	18c40014 	ori	r3,r3,4096
    d960:	80c0030d 	sth	r3,12(r16)
    d964:	dfc00117 	ldw	ra,4(sp)
    d968:	dc000017 	ldw	r16,0(sp)
    d96c:	dec00204 	addi	sp,sp,8
    d970:	f800283a 	ret
    d974:	80c0030b 	ldhu	r3,12(r16)
    d978:	18fbffcc 	andi	r3,r3,61439
    d97c:	80c0030d 	sth	r3,12(r16)
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	dc000017 	ldw	r16,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <__sclose>:
    d990:	2940038f 	ldh	r5,14(r5)
    d994:	000dc181 	jmpi	dc18 <_close_r>

0000d998 <__swbuf_r>:
    d998:	defffc04 	addi	sp,sp,-16
    d99c:	dc800215 	stw	r18,8(sp)
    d9a0:	dc400115 	stw	r17,4(sp)
    d9a4:	dc000015 	stw	r16,0(sp)
    d9a8:	dfc00315 	stw	ra,12(sp)
    d9ac:	2023883a 	mov	r17,r4
    d9b0:	2825883a 	mov	r18,r5
    d9b4:	3021883a 	mov	r16,r6
    d9b8:	20000226 	beq	r4,zero,d9c4 <__swbuf_r+0x2c>
    d9bc:	20800e17 	ldw	r2,56(r4)
    d9c0:	10003b26 	beq	r2,zero,dab0 <__swbuf_r+0x118>
    d9c4:	8080030b 	ldhu	r2,12(r16)
    d9c8:	80c00617 	ldw	r3,24(r16)
    d9cc:	1080020c 	andi	r2,r2,8
    d9d0:	10bfffcc 	andi	r2,r2,65535
    d9d4:	10a0001c 	xori	r2,r2,32768
    d9d8:	80c00215 	stw	r3,8(r16)
    d9dc:	10a00004 	addi	r2,r2,-32768
    d9e0:	10002226 	beq	r2,zero,da6c <__swbuf_r+0xd4>
    d9e4:	80800417 	ldw	r2,16(r16)
    d9e8:	10002026 	beq	r2,zero,da6c <__swbuf_r+0xd4>
    d9ec:	80c00017 	ldw	r3,0(r16)
    d9f0:	81000517 	ldw	r4,20(r16)
    d9f4:	94803fcc 	andi	r18,r18,255
    d9f8:	1885c83a 	sub	r2,r3,r2
    d9fc:	1100250e 	bge	r2,r4,da94 <__swbuf_r+0xfc>
    da00:	10800044 	addi	r2,r2,1
    da04:	81400217 	ldw	r5,8(r16)
    da08:	19000044 	addi	r4,r3,1
    da0c:	297fffc4 	addi	r5,r5,-1
    da10:	81400215 	stw	r5,8(r16)
    da14:	1c800005 	stb	r18,0(r3)
    da18:	80c00517 	ldw	r3,20(r16)
    da1c:	81000015 	stw	r4,0(r16)
    da20:	18800c26 	beq	r3,r2,da54 <__swbuf_r+0xbc>
    da24:	8080030b 	ldhu	r2,12(r16)
    da28:	1080004c 	andi	r2,r2,1
    da2c:	10000226 	beq	r2,zero,da38 <__swbuf_r+0xa0>
    da30:	00800284 	movi	r2,10
    da34:	90800726 	beq	r18,r2,da54 <__swbuf_r+0xbc>
    da38:	9005883a 	mov	r2,r18
    da3c:	dfc00317 	ldw	ra,12(sp)
    da40:	dc800217 	ldw	r18,8(sp)
    da44:	dc400117 	ldw	r17,4(sp)
    da48:	dc000017 	ldw	r16,0(sp)
    da4c:	dec00404 	addi	sp,sp,16
    da50:	f800283a 	ret
    da54:	8809883a 	mov	r4,r17
    da58:	800b883a 	mov	r5,r16
    da5c:	000acc00 	call	acc0 <_fflush_r>
    da60:	103ff526 	beq	r2,zero,da38 <_gp+0xffff11bc>
    da64:	04bfffc4 	movi	r18,-1
    da68:	003ff306 	br	da38 <_gp+0xffff11bc>
    da6c:	8809883a 	mov	r4,r17
    da70:	800b883a 	mov	r5,r16
    da74:	00093280 	call	9328 <__swsetup_r>
    da78:	10000f1e 	bne	r2,zero,dab8 <__swbuf_r+0x120>
    da7c:	80800417 	ldw	r2,16(r16)
    da80:	80c00017 	ldw	r3,0(r16)
    da84:	81000517 	ldw	r4,20(r16)
    da88:	94803fcc 	andi	r18,r18,255
    da8c:	1885c83a 	sub	r2,r3,r2
    da90:	113fdb16 	blt	r2,r4,da00 <_gp+0xffff1184>
    da94:	8809883a 	mov	r4,r17
    da98:	800b883a 	mov	r5,r16
    da9c:	000acc00 	call	acc0 <_fflush_r>
    daa0:	103ff01e 	bne	r2,zero,da64 <_gp+0xffff11e8>
    daa4:	80c00017 	ldw	r3,0(r16)
    daa8:	00800044 	movi	r2,1
    daac:	003fd506 	br	da04 <_gp+0xffff1188>
    dab0:	000af680 	call	af68 <__sinit>
    dab4:	003fc306 	br	d9c4 <_gp+0xffff1148>
    dab8:	8080030b 	ldhu	r2,12(r16)
    dabc:	04bfffc4 	movi	r18,-1
    dac0:	10801014 	ori	r2,r2,64
    dac4:	8080030d 	sth	r2,12(r16)
    dac8:	00800244 	movi	r2,9
    dacc:	88800015 	stw	r2,0(r17)
    dad0:	003fd906 	br	da38 <_gp+0xffff11bc>

0000dad4 <__swbuf>:
    dad4:	00c00074 	movhi	r3,1
    dad8:	18d22304 	addi	r3,r3,18572
    dadc:	2005883a 	mov	r2,r4
    dae0:	19000017 	ldw	r4,0(r3)
    dae4:	280d883a 	mov	r6,r5
    dae8:	100b883a 	mov	r5,r2
    daec:	000d9981 	jmpi	d998 <__swbuf_r>

0000daf0 <_write_r>:
    daf0:	defffd04 	addi	sp,sp,-12
    daf4:	dc400115 	stw	r17,4(sp)
    daf8:	dc000015 	stw	r16,0(sp)
    dafc:	2023883a 	mov	r17,r4
    db00:	04000074 	movhi	r16,1
    db04:	8418c904 	addi	r16,r16,25380
    db08:	2809883a 	mov	r4,r5
    db0c:	300b883a 	mov	r5,r6
    db10:	380d883a 	mov	r6,r7
    db14:	dfc00215 	stw	ra,8(sp)
    db18:	80000015 	stw	zero,0(r16)
    db1c:	00101700 	call	10170 <write>
    db20:	00ffffc4 	movi	r3,-1
    db24:	10c00526 	beq	r2,r3,db3c <_write_r+0x4c>
    db28:	dfc00217 	ldw	ra,8(sp)
    db2c:	dc400117 	ldw	r17,4(sp)
    db30:	dc000017 	ldw	r16,0(sp)
    db34:	dec00304 	addi	sp,sp,12
    db38:	f800283a 	ret
    db3c:	80c00017 	ldw	r3,0(r16)
    db40:	183ff926 	beq	r3,zero,db28 <_gp+0xffff12ac>
    db44:	88c00015 	stw	r3,0(r17)
    db48:	dfc00217 	ldw	ra,8(sp)
    db4c:	dc400117 	ldw	r17,4(sp)
    db50:	dc000017 	ldw	r16,0(sp)
    db54:	dec00304 	addi	sp,sp,12
    db58:	f800283a 	ret

0000db5c <_calloc_r>:
    db5c:	314b383a 	mul	r5,r6,r5
    db60:	defffe04 	addi	sp,sp,-8
    db64:	dc000015 	stw	r16,0(sp)
    db68:	dfc00115 	stw	ra,4(sp)
    db6c:	00066640 	call	6664 <_malloc_r>
    db70:	1021883a 	mov	r16,r2
    db74:	10000c26 	beq	r2,zero,dba8 <_calloc_r+0x4c>
    db78:	11bfff17 	ldw	r6,-4(r2)
    db7c:	00ffff04 	movi	r3,-4
    db80:	00800904 	movi	r2,36
    db84:	30cc703a 	and	r6,r6,r3
    db88:	30cd883a 	add	r6,r6,r3
    db8c:	11801436 	bltu	r2,r6,dbe0 <_calloc_r+0x84>
    db90:	00c004c4 	movi	r3,19
    db94:	19800936 	bltu	r3,r6,dbbc <_calloc_r+0x60>
    db98:	8005883a 	mov	r2,r16
    db9c:	10000015 	stw	zero,0(r2)
    dba0:	10000115 	stw	zero,4(r2)
    dba4:	10000215 	stw	zero,8(r2)
    dba8:	8005883a 	mov	r2,r16
    dbac:	dfc00117 	ldw	ra,4(sp)
    dbb0:	dc000017 	ldw	r16,0(sp)
    dbb4:	dec00204 	addi	sp,sp,8
    dbb8:	f800283a 	ret
    dbbc:	80000015 	stw	zero,0(r16)
    dbc0:	80000115 	stw	zero,4(r16)
    dbc4:	00c006c4 	movi	r3,27
    dbc8:	19800d2e 	bgeu	r3,r6,dc00 <_calloc_r+0xa4>
    dbcc:	80000215 	stw	zero,8(r16)
    dbd0:	80000315 	stw	zero,12(r16)
    dbd4:	30800c26 	beq	r6,r2,dc08 <_calloc_r+0xac>
    dbd8:	80800404 	addi	r2,r16,16
    dbdc:	003fef06 	br	db9c <_gp+0xffff1320>
    dbe0:	8009883a 	mov	r4,r16
    dbe4:	000b883a 	mov	r5,zero
    dbe8:	0006ee00 	call	6ee0 <memset>
    dbec:	8005883a 	mov	r2,r16
    dbf0:	dfc00117 	ldw	ra,4(sp)
    dbf4:	dc000017 	ldw	r16,0(sp)
    dbf8:	dec00204 	addi	sp,sp,8
    dbfc:	f800283a 	ret
    dc00:	80800204 	addi	r2,r16,8
    dc04:	003fe506 	br	db9c <_gp+0xffff1320>
    dc08:	80000415 	stw	zero,16(r16)
    dc0c:	80000515 	stw	zero,20(r16)
    dc10:	80800604 	addi	r2,r16,24
    dc14:	003fe106 	br	db9c <_gp+0xffff1320>

0000dc18 <_close_r>:
    dc18:	defffd04 	addi	sp,sp,-12
    dc1c:	dc400115 	stw	r17,4(sp)
    dc20:	dc000015 	stw	r16,0(sp)
    dc24:	2023883a 	mov	r17,r4
    dc28:	04000074 	movhi	r16,1
    dc2c:	8418c904 	addi	r16,r16,25380
    dc30:	2809883a 	mov	r4,r5
    dc34:	dfc00215 	stw	ra,8(sp)
    dc38:	80000015 	stw	zero,0(r16)
    dc3c:	000f7600 	call	f760 <close>
    dc40:	00ffffc4 	movi	r3,-1
    dc44:	10c00526 	beq	r2,r3,dc5c <_close_r+0x44>
    dc48:	dfc00217 	ldw	ra,8(sp)
    dc4c:	dc400117 	ldw	r17,4(sp)
    dc50:	dc000017 	ldw	r16,0(sp)
    dc54:	dec00304 	addi	sp,sp,12
    dc58:	f800283a 	ret
    dc5c:	80c00017 	ldw	r3,0(r16)
    dc60:	183ff926 	beq	r3,zero,dc48 <_gp+0xffff13cc>
    dc64:	88c00015 	stw	r3,0(r17)
    dc68:	dfc00217 	ldw	ra,8(sp)
    dc6c:	dc400117 	ldw	r17,4(sp)
    dc70:	dc000017 	ldw	r16,0(sp)
    dc74:	dec00304 	addi	sp,sp,12
    dc78:	f800283a 	ret

0000dc7c <_fclose_r>:
    dc7c:	defffc04 	addi	sp,sp,-16
    dc80:	dc400115 	stw	r17,4(sp)
    dc84:	dc000015 	stw	r16,0(sp)
    dc88:	dfc00315 	stw	ra,12(sp)
    dc8c:	dc800215 	stw	r18,8(sp)
    dc90:	2821883a 	mov	r16,r5
    dc94:	2023883a 	mov	r17,r4
    dc98:	28003426 	beq	r5,zero,dd6c <_fclose_r+0xf0>
    dc9c:	000b1700 	call	b170 <__sfp_lock_acquire>
    dca0:	88000226 	beq	r17,zero,dcac <_fclose_r+0x30>
    dca4:	88800e17 	ldw	r2,56(r17)
    dca8:	10003826 	beq	r2,zero,dd8c <_fclose_r+0x110>
    dcac:	8080030f 	ldh	r2,12(r16)
    dcb0:	10002526 	beq	r2,zero,dd48 <_fclose_r+0xcc>
    dcb4:	8809883a 	mov	r4,r17
    dcb8:	800b883a 	mov	r5,r16
    dcbc:	000acc00 	call	acc0 <_fflush_r>
    dcc0:	1025883a 	mov	r18,r2
    dcc4:	80800b17 	ldw	r2,44(r16)
    dcc8:	10000426 	beq	r2,zero,dcdc <_fclose_r+0x60>
    dccc:	81400717 	ldw	r5,28(r16)
    dcd0:	8809883a 	mov	r4,r17
    dcd4:	103ee83a 	callr	r2
    dcd8:	10003516 	blt	r2,zero,ddb0 <_fclose_r+0x134>
    dcdc:	8080030b 	ldhu	r2,12(r16)
    dce0:	1080200c 	andi	r2,r2,128
    dce4:	10bfffcc 	andi	r2,r2,65535
    dce8:	10a0001c 	xori	r2,r2,32768
    dcec:	10a00004 	addi	r2,r2,-32768
    dcf0:	10002b1e 	bne	r2,zero,dda0 <_fclose_r+0x124>
    dcf4:	81400c17 	ldw	r5,48(r16)
    dcf8:	28000526 	beq	r5,zero,dd10 <_fclose_r+0x94>
    dcfc:	80801004 	addi	r2,r16,64
    dd00:	28800226 	beq	r5,r2,dd0c <_fclose_r+0x90>
    dd04:	8809883a 	mov	r4,r17
    dd08:	000b2ec0 	call	b2ec <_free_r>
    dd0c:	80000c15 	stw	zero,48(r16)
    dd10:	81401117 	ldw	r5,68(r16)
    dd14:	28000326 	beq	r5,zero,dd24 <_fclose_r+0xa8>
    dd18:	8809883a 	mov	r4,r17
    dd1c:	000b2ec0 	call	b2ec <_free_r>
    dd20:	80001115 	stw	zero,68(r16)
    dd24:	8000030d 	sth	zero,12(r16)
    dd28:	000b1740 	call	b174 <__sfp_lock_release>
    dd2c:	9005883a 	mov	r2,r18
    dd30:	dfc00317 	ldw	ra,12(sp)
    dd34:	dc800217 	ldw	r18,8(sp)
    dd38:	dc400117 	ldw	r17,4(sp)
    dd3c:	dc000017 	ldw	r16,0(sp)
    dd40:	dec00404 	addi	sp,sp,16
    dd44:	f800283a 	ret
    dd48:	000b1740 	call	b174 <__sfp_lock_release>
    dd4c:	0025883a 	mov	r18,zero
    dd50:	9005883a 	mov	r2,r18
    dd54:	dfc00317 	ldw	ra,12(sp)
    dd58:	dc800217 	ldw	r18,8(sp)
    dd5c:	dc400117 	ldw	r17,4(sp)
    dd60:	dc000017 	ldw	r16,0(sp)
    dd64:	dec00404 	addi	sp,sp,16
    dd68:	f800283a 	ret
    dd6c:	0025883a 	mov	r18,zero
    dd70:	9005883a 	mov	r2,r18
    dd74:	dfc00317 	ldw	ra,12(sp)
    dd78:	dc800217 	ldw	r18,8(sp)
    dd7c:	dc400117 	ldw	r17,4(sp)
    dd80:	dc000017 	ldw	r16,0(sp)
    dd84:	dec00404 	addi	sp,sp,16
    dd88:	f800283a 	ret
    dd8c:	8809883a 	mov	r4,r17
    dd90:	000af680 	call	af68 <__sinit>
    dd94:	8080030f 	ldh	r2,12(r16)
    dd98:	103fc61e 	bne	r2,zero,dcb4 <_gp+0xffff1438>
    dd9c:	003fea06 	br	dd48 <_gp+0xffff14cc>
    dda0:	81400417 	ldw	r5,16(r16)
    dda4:	8809883a 	mov	r4,r17
    dda8:	000b2ec0 	call	b2ec <_free_r>
    ddac:	003fd106 	br	dcf4 <_gp+0xffff1478>
    ddb0:	04bfffc4 	movi	r18,-1
    ddb4:	003fc906 	br	dcdc <_gp+0xffff1460>

0000ddb8 <fclose>:
    ddb8:	00800074 	movhi	r2,1
    ddbc:	10922304 	addi	r2,r2,18572
    ddc0:	200b883a 	mov	r5,r4
    ddc4:	11000017 	ldw	r4,0(r2)
    ddc8:	000dc7c1 	jmpi	dc7c <_fclose_r>

0000ddcc <_fstat_r>:
    ddcc:	defffd04 	addi	sp,sp,-12
    ddd0:	dc400115 	stw	r17,4(sp)
    ddd4:	dc000015 	stw	r16,0(sp)
    ddd8:	2023883a 	mov	r17,r4
    dddc:	04000074 	movhi	r16,1
    dde0:	8418c904 	addi	r16,r16,25380
    dde4:	2809883a 	mov	r4,r5
    dde8:	300b883a 	mov	r5,r6
    ddec:	dfc00215 	stw	ra,8(sp)
    ddf0:	80000015 	stw	zero,0(r16)
    ddf4:	000f8a40 	call	f8a4 <fstat>
    ddf8:	00ffffc4 	movi	r3,-1
    ddfc:	10c00526 	beq	r2,r3,de14 <_fstat_r+0x48>
    de00:	dfc00217 	ldw	ra,8(sp)
    de04:	dc400117 	ldw	r17,4(sp)
    de08:	dc000017 	ldw	r16,0(sp)
    de0c:	dec00304 	addi	sp,sp,12
    de10:	f800283a 	ret
    de14:	80c00017 	ldw	r3,0(r16)
    de18:	183ff926 	beq	r3,zero,de00 <_gp+0xffff1584>
    de1c:	88c00015 	stw	r3,0(r17)
    de20:	dfc00217 	ldw	ra,8(sp)
    de24:	dc400117 	ldw	r17,4(sp)
    de28:	dc000017 	ldw	r16,0(sp)
    de2c:	dec00304 	addi	sp,sp,12
    de30:	f800283a 	ret

0000de34 <_isatty_r>:
    de34:	defffd04 	addi	sp,sp,-12
    de38:	dc400115 	stw	r17,4(sp)
    de3c:	dc000015 	stw	r16,0(sp)
    de40:	2023883a 	mov	r17,r4
    de44:	04000074 	movhi	r16,1
    de48:	8418c904 	addi	r16,r16,25380
    de4c:	2809883a 	mov	r4,r5
    de50:	dfc00215 	stw	ra,8(sp)
    de54:	80000015 	stw	zero,0(r16)
    de58:	000f9a00 	call	f9a0 <isatty>
    de5c:	00ffffc4 	movi	r3,-1
    de60:	10c00526 	beq	r2,r3,de78 <_isatty_r+0x44>
    de64:	dfc00217 	ldw	ra,8(sp)
    de68:	dc400117 	ldw	r17,4(sp)
    de6c:	dc000017 	ldw	r16,0(sp)
    de70:	dec00304 	addi	sp,sp,12
    de74:	f800283a 	ret
    de78:	80c00017 	ldw	r3,0(r16)
    de7c:	183ff926 	beq	r3,zero,de64 <_gp+0xffff15e8>
    de80:	88c00015 	stw	r3,0(r17)
    de84:	dfc00217 	ldw	ra,8(sp)
    de88:	dc400117 	ldw	r17,4(sp)
    de8c:	dc000017 	ldw	r16,0(sp)
    de90:	dec00304 	addi	sp,sp,12
    de94:	f800283a 	ret

0000de98 <_lseek_r>:
    de98:	defffd04 	addi	sp,sp,-12
    de9c:	dc400115 	stw	r17,4(sp)
    dea0:	dc000015 	stw	r16,0(sp)
    dea4:	2023883a 	mov	r17,r4
    dea8:	04000074 	movhi	r16,1
    deac:	8418c904 	addi	r16,r16,25380
    deb0:	2809883a 	mov	r4,r5
    deb4:	300b883a 	mov	r5,r6
    deb8:	380d883a 	mov	r6,r7
    debc:	dfc00215 	stw	ra,8(sp)
    dec0:	80000015 	stw	zero,0(r16)
    dec4:	000fb7c0 	call	fb7c <lseek>
    dec8:	00ffffc4 	movi	r3,-1
    decc:	10c00526 	beq	r2,r3,dee4 <_lseek_r+0x4c>
    ded0:	dfc00217 	ldw	ra,8(sp)
    ded4:	dc400117 	ldw	r17,4(sp)
    ded8:	dc000017 	ldw	r16,0(sp)
    dedc:	dec00304 	addi	sp,sp,12
    dee0:	f800283a 	ret
    dee4:	80c00017 	ldw	r3,0(r16)
    dee8:	183ff926 	beq	r3,zero,ded0 <_gp+0xffff1654>
    deec:	88c00015 	stw	r3,0(r17)
    def0:	dfc00217 	ldw	ra,8(sp)
    def4:	dc400117 	ldw	r17,4(sp)
    def8:	dc000017 	ldw	r16,0(sp)
    defc:	dec00304 	addi	sp,sp,12
    df00:	f800283a 	ret

0000df04 <_read_r>:
    df04:	defffd04 	addi	sp,sp,-12
    df08:	dc400115 	stw	r17,4(sp)
    df0c:	dc000015 	stw	r16,0(sp)
    df10:	2023883a 	mov	r17,r4
    df14:	04000074 	movhi	r16,1
    df18:	8418c904 	addi	r16,r16,25380
    df1c:	2809883a 	mov	r4,r5
    df20:	300b883a 	mov	r5,r6
    df24:	380d883a 	mov	r6,r7
    df28:	dfc00215 	stw	ra,8(sp)
    df2c:	80000015 	stw	zero,0(r16)
    df30:	000fd540 	call	fd54 <read>
    df34:	00ffffc4 	movi	r3,-1
    df38:	10c00526 	beq	r2,r3,df50 <_read_r+0x4c>
    df3c:	dfc00217 	ldw	ra,8(sp)
    df40:	dc400117 	ldw	r17,4(sp)
    df44:	dc000017 	ldw	r16,0(sp)
    df48:	dec00304 	addi	sp,sp,12
    df4c:	f800283a 	ret
    df50:	80c00017 	ldw	r3,0(r16)
    df54:	183ff926 	beq	r3,zero,df3c <_gp+0xffff16c0>
    df58:	88c00015 	stw	r3,0(r17)
    df5c:	dfc00217 	ldw	ra,8(sp)
    df60:	dc400117 	ldw	r17,4(sp)
    df64:	dc000017 	ldw	r16,0(sp)
    df68:	dec00304 	addi	sp,sp,12
    df6c:	f800283a 	ret

0000df70 <__udivdi3>:
    df70:	defff504 	addi	sp,sp,-44
    df74:	dd000515 	stw	r20,20(sp)
    df78:	dcc00415 	stw	r19,16(sp)
    df7c:	dc800315 	stw	r18,12(sp)
    df80:	dc400215 	stw	r17,8(sp)
    df84:	dc000115 	stw	r16,4(sp)
    df88:	dfc00a15 	stw	ra,40(sp)
    df8c:	df000915 	stw	fp,36(sp)
    df90:	ddc00815 	stw	r23,32(sp)
    df94:	dd800715 	stw	r22,28(sp)
    df98:	dd400615 	stw	r21,24(sp)
    df9c:	2025883a 	mov	r18,r4
    dfa0:	2823883a 	mov	r17,r5
    dfa4:	3021883a 	mov	r16,r6
    dfa8:	2027883a 	mov	r19,r4
    dfac:	2829883a 	mov	r20,r5
    dfb0:	3800401e 	bne	r7,zero,e0b4 <__udivdi3+0x144>
    dfb4:	2980602e 	bgeu	r5,r6,e138 <__udivdi3+0x1c8>
    dfb8:	00bfffd4 	movui	r2,65535
    dfbc:	1180aa36 	bltu	r2,r6,e268 <__udivdi3+0x2f8>
    dfc0:	00803fc4 	movi	r2,255
    dfc4:	11814436 	bltu	r2,r6,e4d8 <__udivdi3+0x568>
    dfc8:	0005883a 	mov	r2,zero
    dfcc:	0007883a 	mov	r3,zero
    dfd0:	3084d83a 	srl	r2,r6,r2
    dfd4:	01000074 	movhi	r4,1
    dfd8:	210a3504 	addi	r4,r4,10452
    dfdc:	2085883a 	add	r2,r4,r2
    dfe0:	10800003 	ldbu	r2,0(r2)
    dfe4:	10c7883a 	add	r3,r2,r3
    dfe8:	00800804 	movi	r2,32
    dfec:	10c5c83a 	sub	r2,r2,r3
    dff0:	10000526 	beq	r2,zero,e008 <__udivdi3+0x98>
    dff4:	88a2983a 	sll	r17,r17,r2
    dff8:	90c6d83a 	srl	r3,r18,r3
    dffc:	30a0983a 	sll	r16,r6,r2
    e000:	90a6983a 	sll	r19,r18,r2
    e004:	88e8b03a 	or	r20,r17,r3
    e008:	8022d43a 	srli	r17,r16,16
    e00c:	a009883a 	mov	r4,r20
    e010:	857fffcc 	andi	r21,r16,65535
    e014:	880b883a 	mov	r5,r17
    e018:	0005f580 	call	5f58 <__umodsi3>
    e01c:	a009883a 	mov	r4,r20
    e020:	880b883a 	mov	r5,r17
    e024:	102d883a 	mov	r22,r2
    e028:	0005f500 	call	5f50 <__udivsi3>
    e02c:	b02c943a 	slli	r22,r22,16
    e030:	9806d43a 	srli	r3,r19,16
    e034:	1549383a 	mul	r4,r2,r21
    e038:	1025883a 	mov	r18,r2
    e03c:	b0c6b03a 	or	r3,r22,r3
    e040:	1900052e 	bgeu	r3,r4,e058 <__udivdi3+0xe8>
    e044:	1c07883a 	add	r3,r3,r16
    e048:	10bfffc4 	addi	r2,r2,-1
    e04c:	1c000136 	bltu	r3,r16,e054 <__udivdi3+0xe4>
    e050:	19013636 	bltu	r3,r4,e52c <__udivdi3+0x5bc>
    e054:	1025883a 	mov	r18,r2
    e058:	1929c83a 	sub	r20,r3,r4
    e05c:	a009883a 	mov	r4,r20
    e060:	880b883a 	mov	r5,r17
    e064:	0005f580 	call	5f58 <__umodsi3>
    e068:	102d883a 	mov	r22,r2
    e06c:	a009883a 	mov	r4,r20
    e070:	880b883a 	mov	r5,r17
    e074:	0005f500 	call	5f50 <__udivsi3>
    e078:	b02c943a 	slli	r22,r22,16
    e07c:	156b383a 	mul	r21,r2,r21
    e080:	9cffffcc 	andi	r19,r19,65535
    e084:	b4e6b03a 	or	r19,r22,r19
    e088:	1009883a 	mov	r4,r2
    e08c:	9d40052e 	bgeu	r19,r21,e0a4 <__udivdi3+0x134>
    e090:	9c27883a 	add	r19,r19,r16
    e094:	10bfffc4 	addi	r2,r2,-1
    e098:	9c00f736 	bltu	r19,r16,e478 <__udivdi3+0x508>
    e09c:	9d40f62e 	bgeu	r19,r21,e478 <__udivdi3+0x508>
    e0a0:	213fff84 	addi	r4,r4,-2
    e0a4:	9004943a 	slli	r2,r18,16
    e0a8:	0007883a 	mov	r3,zero
    e0ac:	2084b03a 	or	r2,r4,r2
    e0b0:	00001506 	br	e108 <__udivdi3+0x198>
    e0b4:	29c06536 	bltu	r5,r7,e24c <__udivdi3+0x2dc>
    e0b8:	00bfffd4 	movui	r2,65535
    e0bc:	11c0652e 	bgeu	r2,r7,e254 <__udivdi3+0x2e4>
    e0c0:	00804034 	movhi	r2,256
    e0c4:	10bfffc4 	addi	r2,r2,-1
    e0c8:	11c0f736 	bltu	r2,r7,e4a8 <__udivdi3+0x538>
    e0cc:	00c00404 	movi	r3,16
    e0d0:	180b883a 	mov	r5,r3
    e0d4:	38c6d83a 	srl	r3,r7,r3
    e0d8:	01000074 	movhi	r4,1
    e0dc:	210a3504 	addi	r4,r4,10452
    e0e0:	04000804 	movi	r16,32
    e0e4:	20c7883a 	add	r3,r4,r3
    e0e8:	18800003 	ldbu	r2,0(r3)
    e0ec:	1145883a 	add	r2,r2,r5
    e0f0:	80a1c83a 	sub	r16,r16,r2
    e0f4:	8000691e 	bne	r16,zero,e29c <__udivdi3+0x32c>
    e0f8:	0007883a 	mov	r3,zero
    e0fc:	3c406536 	bltu	r7,r17,e294 <__udivdi3+0x324>
    e100:	9180642e 	bgeu	r18,r6,e294 <__udivdi3+0x324>
    e104:	0005883a 	mov	r2,zero
    e108:	dfc00a17 	ldw	ra,40(sp)
    e10c:	df000917 	ldw	fp,36(sp)
    e110:	ddc00817 	ldw	r23,32(sp)
    e114:	dd800717 	ldw	r22,28(sp)
    e118:	dd400617 	ldw	r21,24(sp)
    e11c:	dd000517 	ldw	r20,20(sp)
    e120:	dcc00417 	ldw	r19,16(sp)
    e124:	dc800317 	ldw	r18,12(sp)
    e128:	dc400217 	ldw	r17,8(sp)
    e12c:	dc000117 	ldw	r16,4(sp)
    e130:	dec00b04 	addi	sp,sp,44
    e134:	f800283a 	ret
    e138:	3000041e 	bne	r6,zero,e14c <__udivdi3+0x1dc>
    e13c:	01000044 	movi	r4,1
    e140:	000b883a 	mov	r5,zero
    e144:	0005f500 	call	5f50 <__udivsi3>
    e148:	1021883a 	mov	r16,r2
    e14c:	00bfffd4 	movui	r2,65535
    e150:	14004b2e 	bgeu	r2,r16,e280 <__udivdi3+0x310>
    e154:	00804034 	movhi	r2,256
    e158:	10bfffc4 	addi	r2,r2,-1
    e15c:	1400d836 	bltu	r2,r16,e4c0 <__udivdi3+0x550>
    e160:	00800404 	movi	r2,16
    e164:	1007883a 	mov	r3,r2
    e168:	8084d83a 	srl	r2,r16,r2
    e16c:	01000074 	movhi	r4,1
    e170:	210a3504 	addi	r4,r4,10452
    e174:	2085883a 	add	r2,r4,r2
    e178:	10800003 	ldbu	r2,0(r2)
    e17c:	10c7883a 	add	r3,r2,r3
    e180:	00800804 	movi	r2,32
    e184:	10c5c83a 	sub	r2,r2,r3
    e188:	1000891e 	bne	r2,zero,e3b0 <__udivdi3+0x440>
    e18c:	8028d43a 	srli	r20,r16,16
    e190:	8c23c83a 	sub	r17,r17,r16
    e194:	84bfffcc 	andi	r18,r16,65535
    e198:	00c00044 	movi	r3,1
    e19c:	8809883a 	mov	r4,r17
    e1a0:	a00b883a 	mov	r5,r20
    e1a4:	d8c00015 	stw	r3,0(sp)
    e1a8:	0005f580 	call	5f58 <__umodsi3>
    e1ac:	8809883a 	mov	r4,r17
    e1b0:	a00b883a 	mov	r5,r20
    e1b4:	102b883a 	mov	r21,r2
    e1b8:	0005f500 	call	5f50 <__udivsi3>
    e1bc:	a82a943a 	slli	r21,r21,16
    e1c0:	9808d43a 	srli	r4,r19,16
    e1c4:	148b383a 	mul	r5,r2,r18
    e1c8:	1023883a 	mov	r17,r2
    e1cc:	a908b03a 	or	r4,r21,r4
    e1d0:	d8c00017 	ldw	r3,0(sp)
    e1d4:	2140052e 	bgeu	r4,r5,e1ec <__udivdi3+0x27c>
    e1d8:	2409883a 	add	r4,r4,r16
    e1dc:	10bfffc4 	addi	r2,r2,-1
    e1e0:	24000136 	bltu	r4,r16,e1e8 <__udivdi3+0x278>
    e1e4:	2140ce36 	bltu	r4,r5,e520 <__udivdi3+0x5b0>
    e1e8:	1023883a 	mov	r17,r2
    e1ec:	216bc83a 	sub	r21,r4,r5
    e1f0:	a809883a 	mov	r4,r21
    e1f4:	a00b883a 	mov	r5,r20
    e1f8:	d8c00015 	stw	r3,0(sp)
    e1fc:	0005f580 	call	5f58 <__umodsi3>
    e200:	102d883a 	mov	r22,r2
    e204:	a809883a 	mov	r4,r21
    e208:	a00b883a 	mov	r5,r20
    e20c:	0005f500 	call	5f50 <__udivsi3>
    e210:	b02c943a 	slli	r22,r22,16
    e214:	14a5383a 	mul	r18,r2,r18
    e218:	9cffffcc 	andi	r19,r19,65535
    e21c:	b4e6b03a 	or	r19,r22,r19
    e220:	1009883a 	mov	r4,r2
    e224:	d8c00017 	ldw	r3,0(sp)
    e228:	9c80052e 	bgeu	r19,r18,e240 <__udivdi3+0x2d0>
    e22c:	9c27883a 	add	r19,r19,r16
    e230:	10bfffc4 	addi	r2,r2,-1
    e234:	9c009236 	bltu	r19,r16,e480 <__udivdi3+0x510>
    e238:	9c80912e 	bgeu	r19,r18,e480 <__udivdi3+0x510>
    e23c:	213fff84 	addi	r4,r4,-2
    e240:	8804943a 	slli	r2,r17,16
    e244:	2084b03a 	or	r2,r4,r2
    e248:	003faf06 	br	e108 <_gp+0xffff188c>
    e24c:	0007883a 	mov	r3,zero
    e250:	003fac06 	br	e104 <_gp+0xffff1888>
    e254:	00803fc4 	movi	r2,255
    e258:	11c09636 	bltu	r2,r7,e4b4 <__udivdi3+0x544>
    e25c:	0007883a 	mov	r3,zero
    e260:	000b883a 	mov	r5,zero
    e264:	003f9b06 	br	e0d4 <_gp+0xffff1858>
    e268:	00804034 	movhi	r2,256
    e26c:	10bfffc4 	addi	r2,r2,-1
    e270:	11809636 	bltu	r2,r6,e4cc <__udivdi3+0x55c>
    e274:	00800404 	movi	r2,16
    e278:	1007883a 	mov	r3,r2
    e27c:	003f5406 	br	dfd0 <_gp+0xffff1754>
    e280:	00803fc4 	movi	r2,255
    e284:	14009736 	bltu	r2,r16,e4e4 <__udivdi3+0x574>
    e288:	0005883a 	mov	r2,zero
    e28c:	0007883a 	mov	r3,zero
    e290:	003fb506 	br	e168 <_gp+0xffff18ec>
    e294:	00800044 	movi	r2,1
    e298:	003f9b06 	br	e108 <_gp+0xffff188c>
    e29c:	3086d83a 	srl	r3,r6,r2
    e2a0:	3c0e983a 	sll	r7,r7,r16
    e2a4:	88aad83a 	srl	r21,r17,r2
    e2a8:	9084d83a 	srl	r2,r18,r2
    e2ac:	38e6b03a 	or	r19,r7,r3
    e2b0:	9828d43a 	srli	r20,r19,16
    e2b4:	8c22983a 	sll	r17,r17,r16
    e2b8:	a809883a 	mov	r4,r21
    e2bc:	a00b883a 	mov	r5,r20
    e2c0:	342c983a 	sll	r22,r6,r16
    e2c4:	88a2b03a 	or	r17,r17,r2
    e2c8:	0005f580 	call	5f58 <__umodsi3>
    e2cc:	a809883a 	mov	r4,r21
    e2d0:	a00b883a 	mov	r5,r20
    e2d4:	1039883a 	mov	fp,r2
    e2d8:	0005f500 	call	5f50 <__udivsi3>
    e2dc:	102b883a 	mov	r21,r2
    e2e0:	9dffffcc 	andi	r23,r19,65535
    e2e4:	e008943a 	slli	r4,fp,16
    e2e8:	8804d43a 	srli	r2,r17,16
    e2ec:	adcd383a 	mul	r6,r21,r23
    e2f0:	2088b03a 	or	r4,r4,r2
    e2f4:	2180042e 	bgeu	r4,r6,e308 <__udivdi3+0x398>
    e2f8:	24c9883a 	add	r4,r4,r19
    e2fc:	a8bfffc4 	addi	r2,r21,-1
    e300:	24c07f2e 	bgeu	r4,r19,e500 <__udivdi3+0x590>
    e304:	102b883a 	mov	r21,r2
    e308:	21b9c83a 	sub	fp,r4,r6
    e30c:	e009883a 	mov	r4,fp
    e310:	a00b883a 	mov	r5,r20
    e314:	0005f580 	call	5f58 <__umodsi3>
    e318:	e009883a 	mov	r4,fp
    e31c:	a00b883a 	mov	r5,r20
    e320:	d8800015 	stw	r2,0(sp)
    e324:	0005f500 	call	5f50 <__udivsi3>
    e328:	d8c00017 	ldw	r3,0(sp)
    e32c:	15cb383a 	mul	r5,r2,r23
    e330:	8c7fffcc 	andi	r17,r17,65535
    e334:	1806943a 	slli	r3,r3,16
    e338:	1009883a 	mov	r4,r2
    e33c:	1c46b03a 	or	r3,r3,r17
    e340:	1940042e 	bgeu	r3,r5,e354 <__udivdi3+0x3e4>
    e344:	1cc7883a 	add	r3,r3,r19
    e348:	10bfffc4 	addi	r2,r2,-1
    e34c:	1cc0682e 	bgeu	r3,r19,e4f0 <__udivdi3+0x580>
    e350:	1009883a 	mov	r4,r2
    e354:	a804943a 	slli	r2,r21,16
    e358:	b1ffffcc 	andi	r7,r22,65535
    e35c:	b02cd43a 	srli	r22,r22,16
    e360:	2084b03a 	or	r2,r4,r2
    e364:	113fffcc 	andi	r4,r2,65535
    e368:	100cd43a 	srli	r6,r2,16
    e36c:	21d1383a 	mul	r8,r4,r7
    e370:	2589383a 	mul	r4,r4,r22
    e374:	31cf383a 	mul	r7,r6,r7
    e378:	4012d43a 	srli	r9,r8,16
    e37c:	1947c83a 	sub	r3,r3,r5
    e380:	3909883a 	add	r4,r7,r4
    e384:	2249883a 	add	r4,r4,r9
    e388:	35ad383a 	mul	r22,r6,r22
    e38c:	21c0022e 	bgeu	r4,r7,e398 <__udivdi3+0x428>
    e390:	01400074 	movhi	r5,1
    e394:	b16d883a 	add	r22,r22,r5
    e398:	200ad43a 	srli	r5,r4,16
    e39c:	b16d883a 	add	r22,r22,r5
    e3a0:	1d803e36 	bltu	r3,r22,e49c <__udivdi3+0x52c>
    e3a4:	1d803826 	beq	r3,r22,e488 <__udivdi3+0x518>
    e3a8:	0007883a 	mov	r3,zero
    e3ac:	003f5606 	br	e108 <_gp+0xffff188c>
    e3b0:	80a0983a 	sll	r16,r16,r2
    e3b4:	88ead83a 	srl	r21,r17,r3
    e3b8:	90c6d83a 	srl	r3,r18,r3
    e3bc:	8028d43a 	srli	r20,r16,16
    e3c0:	88a2983a 	sll	r17,r17,r2
    e3c4:	a809883a 	mov	r4,r21
    e3c8:	a00b883a 	mov	r5,r20
    e3cc:	88ecb03a 	or	r22,r17,r3
    e3d0:	90a6983a 	sll	r19,r18,r2
    e3d4:	0005f580 	call	5f58 <__umodsi3>
    e3d8:	a809883a 	mov	r4,r21
    e3dc:	a00b883a 	mov	r5,r20
    e3e0:	1023883a 	mov	r17,r2
    e3e4:	0005f500 	call	5f50 <__udivsi3>
    e3e8:	102b883a 	mov	r21,r2
    e3ec:	84bfffcc 	andi	r18,r16,65535
    e3f0:	8808943a 	slli	r4,r17,16
    e3f4:	b004d43a 	srli	r2,r22,16
    e3f8:	ac87383a 	mul	r3,r21,r18
    e3fc:	2088b03a 	or	r4,r4,r2
    e400:	20c0062e 	bgeu	r4,r3,e41c <__udivdi3+0x4ac>
    e404:	2409883a 	add	r4,r4,r16
    e408:	a8bfffc4 	addi	r2,r21,-1
    e40c:	24004236 	bltu	r4,r16,e518 <__udivdi3+0x5a8>
    e410:	20c0412e 	bgeu	r4,r3,e518 <__udivdi3+0x5a8>
    e414:	ad7fff84 	addi	r21,r21,-2
    e418:	2409883a 	add	r4,r4,r16
    e41c:	20efc83a 	sub	r23,r4,r3
    e420:	b809883a 	mov	r4,r23
    e424:	a00b883a 	mov	r5,r20
    e428:	0005f580 	call	5f58 <__umodsi3>
    e42c:	1023883a 	mov	r17,r2
    e430:	a00b883a 	mov	r5,r20
    e434:	b809883a 	mov	r4,r23
    e438:	0005f500 	call	5f50 <__udivsi3>
    e43c:	8822943a 	slli	r17,r17,16
    e440:	148b383a 	mul	r5,r2,r18
    e444:	b5bfffcc 	andi	r22,r22,65535
    e448:	8da2b03a 	or	r17,r17,r22
    e44c:	8940062e 	bgeu	r17,r5,e468 <__udivdi3+0x4f8>
    e450:	8c23883a 	add	r17,r17,r16
    e454:	10ffffc4 	addi	r3,r2,-1
    e458:	8c002d36 	bltu	r17,r16,e510 <__udivdi3+0x5a0>
    e45c:	89402c2e 	bgeu	r17,r5,e510 <__udivdi3+0x5a0>
    e460:	10bfff84 	addi	r2,r2,-2
    e464:	8c23883a 	add	r17,r17,r16
    e468:	a806943a 	slli	r3,r21,16
    e46c:	8963c83a 	sub	r17,r17,r5
    e470:	10c6b03a 	or	r3,r2,r3
    e474:	003f4906 	br	e19c <_gp+0xffff1920>
    e478:	1009883a 	mov	r4,r2
    e47c:	003f0906 	br	e0a4 <_gp+0xffff1828>
    e480:	1009883a 	mov	r4,r2
    e484:	003f6e06 	br	e240 <_gp+0xffff19c4>
    e488:	2008943a 	slli	r4,r4,16
    e48c:	9420983a 	sll	r16,r18,r16
    e490:	423fffcc 	andi	r8,r8,65535
    e494:	2209883a 	add	r4,r4,r8
    e498:	813fc32e 	bgeu	r16,r4,e3a8 <_gp+0xffff1b2c>
    e49c:	10bfffc4 	addi	r2,r2,-1
    e4a0:	0007883a 	mov	r3,zero
    e4a4:	003f1806 	br	e108 <_gp+0xffff188c>
    e4a8:	00c00604 	movi	r3,24
    e4ac:	180b883a 	mov	r5,r3
    e4b0:	003f0806 	br	e0d4 <_gp+0xffff1858>
    e4b4:	00c00204 	movi	r3,8
    e4b8:	180b883a 	mov	r5,r3
    e4bc:	003f0506 	br	e0d4 <_gp+0xffff1858>
    e4c0:	00800604 	movi	r2,24
    e4c4:	1007883a 	mov	r3,r2
    e4c8:	003f2706 	br	e168 <_gp+0xffff18ec>
    e4cc:	00800604 	movi	r2,24
    e4d0:	1007883a 	mov	r3,r2
    e4d4:	003ebe06 	br	dfd0 <_gp+0xffff1754>
    e4d8:	00800204 	movi	r2,8
    e4dc:	1007883a 	mov	r3,r2
    e4e0:	003ebb06 	br	dfd0 <_gp+0xffff1754>
    e4e4:	00800204 	movi	r2,8
    e4e8:	1007883a 	mov	r3,r2
    e4ec:	003f1e06 	br	e168 <_gp+0xffff18ec>
    e4f0:	197f972e 	bgeu	r3,r5,e350 <_gp+0xffff1ad4>
    e4f4:	213fff84 	addi	r4,r4,-2
    e4f8:	1cc7883a 	add	r3,r3,r19
    e4fc:	003f9506 	br	e354 <_gp+0xffff1ad8>
    e500:	21bf802e 	bgeu	r4,r6,e304 <_gp+0xffff1a88>
    e504:	ad7fff84 	addi	r21,r21,-2
    e508:	24c9883a 	add	r4,r4,r19
    e50c:	003f7e06 	br	e308 <_gp+0xffff1a8c>
    e510:	1805883a 	mov	r2,r3
    e514:	003fd406 	br	e468 <_gp+0xffff1bec>
    e518:	102b883a 	mov	r21,r2
    e51c:	003fbf06 	br	e41c <_gp+0xffff1ba0>
    e520:	8c7fff84 	addi	r17,r17,-2
    e524:	2409883a 	add	r4,r4,r16
    e528:	003f3006 	br	e1ec <_gp+0xffff1970>
    e52c:	94bfff84 	addi	r18,r18,-2
    e530:	1c07883a 	add	r3,r3,r16
    e534:	003ec806 	br	e058 <_gp+0xffff17dc>

0000e538 <__umoddi3>:
    e538:	defff504 	addi	sp,sp,-44
    e53c:	dd000515 	stw	r20,20(sp)
    e540:	dcc00415 	stw	r19,16(sp)
    e544:	dc800315 	stw	r18,12(sp)
    e548:	dc400215 	stw	r17,8(sp)
    e54c:	dc000115 	stw	r16,4(sp)
    e550:	dfc00a15 	stw	ra,40(sp)
    e554:	df000915 	stw	fp,36(sp)
    e558:	ddc00815 	stw	r23,32(sp)
    e55c:	dd800715 	stw	r22,28(sp)
    e560:	dd400615 	stw	r21,24(sp)
    e564:	2025883a 	mov	r18,r4
    e568:	2823883a 	mov	r17,r5
    e56c:	3021883a 	mov	r16,r6
    e570:	2027883a 	mov	r19,r4
    e574:	2829883a 	mov	r20,r5
    e578:	3800351e 	bne	r7,zero,e650 <__umoddi3+0x118>
    e57c:	29804d2e 	bgeu	r5,r6,e6b4 <__umoddi3+0x17c>
    e580:	00bfffd4 	movui	r2,65535
    e584:	11809a36 	bltu	r2,r6,e7f0 <__umoddi3+0x2b8>
    e588:	00803fc4 	movi	r2,255
    e58c:	11813936 	bltu	r2,r6,ea74 <__umoddi3+0x53c>
    e590:	0005883a 	mov	r2,zero
    e594:	0009883a 	mov	r4,zero
    e598:	3084d83a 	srl	r2,r6,r2
    e59c:	00c00074 	movhi	r3,1
    e5a0:	18ca3504 	addi	r3,r3,10452
    e5a4:	05400804 	movi	r21,32
    e5a8:	1885883a 	add	r2,r3,r2
    e5ac:	10800003 	ldbu	r2,0(r2)
    e5b0:	1109883a 	add	r4,r2,r4
    e5b4:	a92bc83a 	sub	r21,r21,r4
    e5b8:	a800ec26 	beq	r21,zero,e96c <__umoddi3+0x434>
    e5bc:	8d62983a 	sll	r17,r17,r21
    e5c0:	9108d83a 	srl	r4,r18,r4
    e5c4:	3560983a 	sll	r16,r6,r21
    e5c8:	9566983a 	sll	r19,r18,r21
    e5cc:	8928b03a 	or	r20,r17,r4
    e5d0:	8022d43a 	srli	r17,r16,16
    e5d4:	a009883a 	mov	r4,r20
    e5d8:	84bfffcc 	andi	r18,r16,65535
    e5dc:	880b883a 	mov	r5,r17
    e5e0:	0005f580 	call	5f58 <__umodsi3>
    e5e4:	a009883a 	mov	r4,r20
    e5e8:	880b883a 	mov	r5,r17
    e5ec:	102d883a 	mov	r22,r2
    e5f0:	0005f500 	call	5f50 <__udivsi3>
    e5f4:	b02c943a 	slli	r22,r22,16
    e5f8:	9806d43a 	srli	r3,r19,16
    e5fc:	1485383a 	mul	r2,r2,r18
    e600:	b0c6b03a 	or	r3,r22,r3
    e604:	1880042e 	bgeu	r3,r2,e618 <__umoddi3+0xe0>
    e608:	1c07883a 	add	r3,r3,r16
    e60c:	1c000236 	bltu	r3,r16,e618 <__umoddi3+0xe0>
    e610:	1880012e 	bgeu	r3,r2,e618 <__umoddi3+0xe0>
    e614:	1c07883a 	add	r3,r3,r16
    e618:	18a9c83a 	sub	r20,r3,r2
    e61c:	a009883a 	mov	r4,r20
    e620:	880b883a 	mov	r5,r17
    e624:	0005f580 	call	5f58 <__umodsi3>
    e628:	102d883a 	mov	r22,r2
    e62c:	a009883a 	mov	r4,r20
    e630:	880b883a 	mov	r5,r17
    e634:	0005f500 	call	5f50 <__udivsi3>
    e638:	b02c943a 	slli	r22,r22,16
    e63c:	1485383a 	mul	r2,r2,r18
    e640:	9cffffcc 	andi	r19,r19,65535
    e644:	b4e6b03a 	or	r19,r22,r19
    e648:	9880522e 	bgeu	r19,r2,e794 <__umoddi3+0x25c>
    e64c:	00004d06 	br	e784 <__umoddi3+0x24c>
    e650:	29c05436 	bltu	r5,r7,e7a4 <__umoddi3+0x26c>
    e654:	00bfffd4 	movui	r2,65535
    e658:	11c0602e 	bgeu	r2,r7,e7dc <__umoddi3+0x2a4>
    e65c:	00804034 	movhi	r2,256
    e660:	10bfffc4 	addi	r2,r2,-1
    e664:	11c0f736 	bltu	r2,r7,ea44 <__umoddi3+0x50c>
    e668:	00c00404 	movi	r3,16
    e66c:	1827883a 	mov	r19,r3
    e670:	38c6d83a 	srl	r3,r7,r3
    e674:	01000074 	movhi	r4,1
    e678:	210a3504 	addi	r4,r4,10452
    e67c:	04000804 	movi	r16,32
    e680:	20c7883a 	add	r3,r4,r3
    e684:	18800003 	ldbu	r2,0(r3)
    e688:	14e7883a 	add	r19,r2,r19
    e68c:	84e1c83a 	sub	r16,r16,r19
    e690:	8000621e 	bne	r16,zero,e81c <__umoddi3+0x2e4>
    e694:	3c400136 	bltu	r7,r17,e69c <__umoddi3+0x164>
    e698:	91810336 	bltu	r18,r6,eaa8 <__umoddi3+0x570>
    e69c:	9185c83a 	sub	r2,r18,r6
    e6a0:	89e3c83a 	sub	r17,r17,r7
    e6a4:	90a5803a 	cmpltu	r18,r18,r2
    e6a8:	8ca9c83a 	sub	r20,r17,r18
    e6ac:	a007883a 	mov	r3,r20
    e6b0:	00003e06 	br	e7ac <__umoddi3+0x274>
    e6b4:	3000041e 	bne	r6,zero,e6c8 <__umoddi3+0x190>
    e6b8:	01000044 	movi	r4,1
    e6bc:	000b883a 	mov	r5,zero
    e6c0:	0005f500 	call	5f50 <__udivsi3>
    e6c4:	1021883a 	mov	r16,r2
    e6c8:	00bfffd4 	movui	r2,65535
    e6cc:	14004e2e 	bgeu	r2,r16,e808 <__umoddi3+0x2d0>
    e6d0:	00804034 	movhi	r2,256
    e6d4:	10bfffc4 	addi	r2,r2,-1
    e6d8:	1400e336 	bltu	r2,r16,ea68 <__umoddi3+0x530>
    e6dc:	00800404 	movi	r2,16
    e6e0:	1007883a 	mov	r3,r2
    e6e4:	8084d83a 	srl	r2,r16,r2
    e6e8:	01000074 	movhi	r4,1
    e6ec:	210a3504 	addi	r4,r4,10452
    e6f0:	05400804 	movi	r21,32
    e6f4:	2085883a 	add	r2,r4,r2
    e6f8:	10800003 	ldbu	r2,0(r2)
    e6fc:	10c7883a 	add	r3,r2,r3
    e700:	a8ebc83a 	sub	r21,r21,r3
    e704:	a8009b1e 	bne	r21,zero,e974 <__umoddi3+0x43c>
    e708:	8028d43a 	srli	r20,r16,16
    e70c:	8c23c83a 	sub	r17,r17,r16
    e710:	85bfffcc 	andi	r22,r16,65535
    e714:	8809883a 	mov	r4,r17
    e718:	a00b883a 	mov	r5,r20
    e71c:	0005f580 	call	5f58 <__umodsi3>
    e720:	8809883a 	mov	r4,r17
    e724:	a00b883a 	mov	r5,r20
    e728:	1025883a 	mov	r18,r2
    e72c:	0005f500 	call	5f50 <__udivsi3>
    e730:	9024943a 	slli	r18,r18,16
    e734:	9806d43a 	srli	r3,r19,16
    e738:	1585383a 	mul	r2,r2,r22
    e73c:	90c6b03a 	or	r3,r18,r3
    e740:	1880032e 	bgeu	r3,r2,e750 <__umoddi3+0x218>
    e744:	1c07883a 	add	r3,r3,r16
    e748:	1c000136 	bltu	r3,r16,e750 <__umoddi3+0x218>
    e74c:	1880d436 	bltu	r3,r2,eaa0 <__umoddi3+0x568>
    e750:	18a3c83a 	sub	r17,r3,r2
    e754:	8809883a 	mov	r4,r17
    e758:	a00b883a 	mov	r5,r20
    e75c:	0005f580 	call	5f58 <__umodsi3>
    e760:	1025883a 	mov	r18,r2
    e764:	8809883a 	mov	r4,r17
    e768:	a00b883a 	mov	r5,r20
    e76c:	0005f500 	call	5f50 <__udivsi3>
    e770:	9024943a 	slli	r18,r18,16
    e774:	1585383a 	mul	r2,r2,r22
    e778:	9cffffcc 	andi	r19,r19,65535
    e77c:	94e6b03a 	or	r19,r18,r19
    e780:	9880042e 	bgeu	r19,r2,e794 <__umoddi3+0x25c>
    e784:	9c27883a 	add	r19,r19,r16
    e788:	9c000236 	bltu	r19,r16,e794 <__umoddi3+0x25c>
    e78c:	9880012e 	bgeu	r19,r2,e794 <__umoddi3+0x25c>
    e790:	9c27883a 	add	r19,r19,r16
    e794:	98a7c83a 	sub	r19,r19,r2
    e798:	9d44d83a 	srl	r2,r19,r21
    e79c:	0007883a 	mov	r3,zero
    e7a0:	00000206 	br	e7ac <__umoddi3+0x274>
    e7a4:	2005883a 	mov	r2,r4
    e7a8:	2807883a 	mov	r3,r5
    e7ac:	dfc00a17 	ldw	ra,40(sp)
    e7b0:	df000917 	ldw	fp,36(sp)
    e7b4:	ddc00817 	ldw	r23,32(sp)
    e7b8:	dd800717 	ldw	r22,28(sp)
    e7bc:	dd400617 	ldw	r21,24(sp)
    e7c0:	dd000517 	ldw	r20,20(sp)
    e7c4:	dcc00417 	ldw	r19,16(sp)
    e7c8:	dc800317 	ldw	r18,12(sp)
    e7cc:	dc400217 	ldw	r17,8(sp)
    e7d0:	dc000117 	ldw	r16,4(sp)
    e7d4:	dec00b04 	addi	sp,sp,44
    e7d8:	f800283a 	ret
    e7dc:	00803fc4 	movi	r2,255
    e7e0:	11c09536 	bltu	r2,r7,ea38 <__umoddi3+0x500>
    e7e4:	0007883a 	mov	r3,zero
    e7e8:	0027883a 	mov	r19,zero
    e7ec:	003fa006 	br	e670 <_gp+0xffff1df4>
    e7f0:	00804034 	movhi	r2,256
    e7f4:	10bfffc4 	addi	r2,r2,-1
    e7f8:	11809536 	bltu	r2,r6,ea50 <__umoddi3+0x518>
    e7fc:	00800404 	movi	r2,16
    e800:	1009883a 	mov	r4,r2
    e804:	003f6406 	br	e598 <_gp+0xffff1d1c>
    e808:	00803fc4 	movi	r2,255
    e80c:	14009336 	bltu	r2,r16,ea5c <__umoddi3+0x524>
    e810:	0005883a 	mov	r2,zero
    e814:	0007883a 	mov	r3,zero
    e818:	003fb206 	br	e6e4 <_gp+0xffff1e68>
    e81c:	34c4d83a 	srl	r2,r6,r19
    e820:	3c0e983a 	sll	r7,r7,r16
    e824:	8ceed83a 	srl	r23,r17,r19
    e828:	8c22983a 	sll	r17,r17,r16
    e82c:	38a8b03a 	or	r20,r7,r2
    e830:	a02ad43a 	srli	r21,r20,16
    e834:	94c4d83a 	srl	r2,r18,r19
    e838:	b809883a 	mov	r4,r23
    e83c:	a80b883a 	mov	r5,r21
    e840:	88a2b03a 	or	r17,r17,r2
    e844:	342c983a 	sll	r22,r6,r16
    e848:	0005f580 	call	5f58 <__umodsi3>
    e84c:	b809883a 	mov	r4,r23
    e850:	a80b883a 	mov	r5,r21
    e854:	d8800015 	stw	r2,0(sp)
    e858:	0005f500 	call	5f50 <__udivsi3>
    e85c:	d8c00017 	ldw	r3,0(sp)
    e860:	102f883a 	mov	r23,r2
    e864:	a73fffcc 	andi	fp,r20,65535
    e868:	180a943a 	slli	r5,r3,16
    e86c:	8804d43a 	srli	r2,r17,16
    e870:	bf09383a 	mul	r4,r23,fp
    e874:	9424983a 	sll	r18,r18,r16
    e878:	288ab03a 	or	r5,r5,r2
    e87c:	2900042e 	bgeu	r5,r4,e890 <__umoddi3+0x358>
    e880:	2d0b883a 	add	r5,r5,r20
    e884:	b8bfffc4 	addi	r2,r23,-1
    e888:	2d00812e 	bgeu	r5,r20,ea90 <__umoddi3+0x558>
    e88c:	102f883a 	mov	r23,r2
    e890:	2907c83a 	sub	r3,r5,r4
    e894:	1809883a 	mov	r4,r3
    e898:	a80b883a 	mov	r5,r21
    e89c:	d8c00015 	stw	r3,0(sp)
    e8a0:	0005f580 	call	5f58 <__umodsi3>
    e8a4:	d8c00017 	ldw	r3,0(sp)
    e8a8:	a80b883a 	mov	r5,r21
    e8ac:	d8800015 	stw	r2,0(sp)
    e8b0:	1809883a 	mov	r4,r3
    e8b4:	0005f500 	call	5f50 <__udivsi3>
    e8b8:	d9800017 	ldw	r6,0(sp)
    e8bc:	8c7fffcc 	andi	r17,r17,65535
    e8c0:	3008943a 	slli	r4,r6,16
    e8c4:	170d383a 	mul	r6,r2,fp
    e8c8:	2448b03a 	or	r4,r4,r17
    e8cc:	2180042e 	bgeu	r4,r6,e8e0 <__umoddi3+0x3a8>
    e8d0:	2509883a 	add	r4,r4,r20
    e8d4:	10ffffc4 	addi	r3,r2,-1
    e8d8:	2500692e 	bgeu	r4,r20,ea80 <__umoddi3+0x548>
    e8dc:	1805883a 	mov	r2,r3
    e8e0:	b82e943a 	slli	r23,r23,16
    e8e4:	b010d43a 	srli	r8,r22,16
    e8e8:	b1ffffcc 	andi	r7,r22,65535
    e8ec:	15eeb03a 	or	r23,r2,r23
    e8f0:	b8bfffcc 	andi	r2,r23,65535
    e8f4:	b82ed43a 	srli	r23,r23,16
    e8f8:	11c7383a 	mul	r3,r2,r7
    e8fc:	1205383a 	mul	r2,r2,r8
    e900:	b9cf383a 	mul	r7,r23,r7
    e904:	400b883a 	mov	r5,r8
    e908:	1810d43a 	srli	r8,r3,16
    e90c:	3885883a 	add	r2,r7,r2
    e910:	2189c83a 	sub	r4,r4,r6
    e914:	1205883a 	add	r2,r2,r8
    e918:	b94b383a 	mul	r5,r23,r5
    e91c:	11c0022e 	bgeu	r2,r7,e928 <__umoddi3+0x3f0>
    e920:	01800074 	movhi	r6,1
    e924:	298b883a 	add	r5,r5,r6
    e928:	100cd43a 	srli	r6,r2,16
    e92c:	1004943a 	slli	r2,r2,16
    e930:	18ffffcc 	andi	r3,r3,65535
    e934:	298b883a 	add	r5,r5,r6
    e938:	10c5883a 	add	r2,r2,r3
    e93c:	21403836 	bltu	r4,r5,ea20 <__umoddi3+0x4e8>
    e940:	21405c26 	beq	r4,r5,eab4 <__umoddi3+0x57c>
    e944:	2147c83a 	sub	r3,r4,r5
    e948:	102d883a 	mov	r22,r2
    e94c:	95adc83a 	sub	r22,r18,r22
    e950:	95a5803a 	cmpltu	r18,r18,r22
    e954:	1c87c83a 	sub	r3,r3,r18
    e958:	1cc4983a 	sll	r2,r3,r19
    e95c:	b42cd83a 	srl	r22,r22,r16
    e960:	1c06d83a 	srl	r3,r3,r16
    e964:	1584b03a 	or	r2,r2,r22
    e968:	003f9006 	br	e7ac <_gp+0xffff1f30>
    e96c:	002b883a 	mov	r21,zero
    e970:	003f1706 	br	e5d0 <_gp+0xffff1d54>
    e974:	8560983a 	sll	r16,r16,r21
    e978:	88e6d83a 	srl	r19,r17,r3
    e97c:	90c6d83a 	srl	r3,r18,r3
    e980:	8028d43a 	srli	r20,r16,16
    e984:	8d62983a 	sll	r17,r17,r21
    e988:	9809883a 	mov	r4,r19
    e98c:	a00b883a 	mov	r5,r20
    e990:	88eeb03a 	or	r23,r17,r3
    e994:	0005f580 	call	5f58 <__umodsi3>
    e998:	9809883a 	mov	r4,r19
    e99c:	a00b883a 	mov	r5,r20
    e9a0:	1023883a 	mov	r17,r2
    e9a4:	0005f500 	call	5f50 <__udivsi3>
    e9a8:	85bfffcc 	andi	r22,r16,65535
    e9ac:	880a943a 	slli	r5,r17,16
    e9b0:	b806d43a 	srli	r3,r23,16
    e9b4:	1585383a 	mul	r2,r2,r22
    e9b8:	9566983a 	sll	r19,r18,r21
    e9bc:	28cab03a 	or	r5,r5,r3
    e9c0:	2880042e 	bgeu	r5,r2,e9d4 <__umoddi3+0x49c>
    e9c4:	2c0b883a 	add	r5,r5,r16
    e9c8:	2c000236 	bltu	r5,r16,e9d4 <__umoddi3+0x49c>
    e9cc:	2880012e 	bgeu	r5,r2,e9d4 <__umoddi3+0x49c>
    e9d0:	2c0b883a 	add	r5,r5,r16
    e9d4:	28a5c83a 	sub	r18,r5,r2
    e9d8:	9009883a 	mov	r4,r18
    e9dc:	a00b883a 	mov	r5,r20
    e9e0:	0005f580 	call	5f58 <__umodsi3>
    e9e4:	1023883a 	mov	r17,r2
    e9e8:	9009883a 	mov	r4,r18
    e9ec:	a00b883a 	mov	r5,r20
    e9f0:	0005f500 	call	5f50 <__udivsi3>
    e9f4:	8822943a 	slli	r17,r17,16
    e9f8:	1585383a 	mul	r2,r2,r22
    e9fc:	bdffffcc 	andi	r23,r23,65535
    ea00:	8de2b03a 	or	r17,r17,r23
    ea04:	8880042e 	bgeu	r17,r2,ea18 <__umoddi3+0x4e0>
    ea08:	8c23883a 	add	r17,r17,r16
    ea0c:	8c000236 	bltu	r17,r16,ea18 <__umoddi3+0x4e0>
    ea10:	8880012e 	bgeu	r17,r2,ea18 <__umoddi3+0x4e0>
    ea14:	8c23883a 	add	r17,r17,r16
    ea18:	88a3c83a 	sub	r17,r17,r2
    ea1c:	003f3d06 	br	e714 <_gp+0xffff1e98>
    ea20:	15adc83a 	sub	r22,r2,r22
    ea24:	2d07c83a 	sub	r3,r5,r20
    ea28:	1585803a 	cmpltu	r2,r2,r22
    ea2c:	1887c83a 	sub	r3,r3,r2
    ea30:	20c7c83a 	sub	r3,r4,r3
    ea34:	003fc506 	br	e94c <_gp+0xffff20d0>
    ea38:	00c00204 	movi	r3,8
    ea3c:	1827883a 	mov	r19,r3
    ea40:	003f0b06 	br	e670 <_gp+0xffff1df4>
    ea44:	00c00604 	movi	r3,24
    ea48:	1827883a 	mov	r19,r3
    ea4c:	003f0806 	br	e670 <_gp+0xffff1df4>
    ea50:	00800604 	movi	r2,24
    ea54:	1009883a 	mov	r4,r2
    ea58:	003ecf06 	br	e598 <_gp+0xffff1d1c>
    ea5c:	00800204 	movi	r2,8
    ea60:	1007883a 	mov	r3,r2
    ea64:	003f1f06 	br	e6e4 <_gp+0xffff1e68>
    ea68:	00800604 	movi	r2,24
    ea6c:	1007883a 	mov	r3,r2
    ea70:	003f1c06 	br	e6e4 <_gp+0xffff1e68>
    ea74:	00800204 	movi	r2,8
    ea78:	1009883a 	mov	r4,r2
    ea7c:	003ec606 	br	e598 <_gp+0xffff1d1c>
    ea80:	21bf962e 	bgeu	r4,r6,e8dc <_gp+0xffff2060>
    ea84:	10bfff84 	addi	r2,r2,-2
    ea88:	2509883a 	add	r4,r4,r20
    ea8c:	003f9406 	br	e8e0 <_gp+0xffff2064>
    ea90:	293f7e2e 	bgeu	r5,r4,e88c <_gp+0xffff2010>
    ea94:	bdffff84 	addi	r23,r23,-2
    ea98:	2d0b883a 	add	r5,r5,r20
    ea9c:	003f7c06 	br	e890 <_gp+0xffff2014>
    eaa0:	1c07883a 	add	r3,r3,r16
    eaa4:	003f2a06 	br	e750 <_gp+0xffff1ed4>
    eaa8:	9005883a 	mov	r2,r18
    eaac:	a007883a 	mov	r3,r20
    eab0:	003f3e06 	br	e7ac <_gp+0xffff1f30>
    eab4:	90bfda36 	bltu	r18,r2,ea20 <_gp+0xffff21a4>
    eab8:	102d883a 	mov	r22,r2
    eabc:	0007883a 	mov	r3,zero
    eac0:	003fa206 	br	e94c <_gp+0xffff20d0>

0000eac4 <_fpadd_parts>:
    eac4:	2005883a 	mov	r2,r4
    eac8:	21000017 	ldw	r4,0(r4)
    eacc:	01c00044 	movi	r7,1
    ead0:	3900622e 	bgeu	r7,r4,ec5c <_fpadd_parts+0x198>
    ead4:	28c00017 	ldw	r3,0(r5)
    ead8:	38c05f2e 	bgeu	r7,r3,ec58 <_fpadd_parts+0x194>
    eadc:	01c00104 	movi	r7,4
    eae0:	21c0c626 	beq	r4,r7,edfc <_fpadd_parts+0x338>
    eae4:	19c05c26 	beq	r3,r7,ec58 <_fpadd_parts+0x194>
    eae8:	01c00084 	movi	r7,2
    eaec:	19c06b26 	beq	r3,r7,ec9c <_fpadd_parts+0x1d8>
    eaf0:	21c05926 	beq	r4,r7,ec58 <_fpadd_parts+0x194>
    eaf4:	11c00217 	ldw	r7,8(r2)
    eaf8:	2ac00217 	ldw	r11,8(r5)
    eafc:	13000317 	ldw	r12,12(r2)
    eb00:	13400417 	ldw	r13,16(r2)
    eb04:	3ac9c83a 	sub	r4,r7,r11
    eb08:	2a000317 	ldw	r8,12(r5)
    eb0c:	2a400417 	ldw	r9,16(r5)
    eb10:	2015883a 	mov	r10,r4
    eb14:	20007516 	blt	r4,zero,ecec <_fpadd_parts+0x228>
    eb18:	00c00fc4 	movi	r3,63
    eb1c:	1a805016 	blt	r3,r10,ec60 <_fpadd_parts+0x19c>
    eb20:	0100870e 	bge	zero,r4,ed40 <_fpadd_parts+0x27c>
    eb24:	50fff804 	addi	r3,r10,-32
    eb28:	18009916 	blt	r3,zero,ed90 <_fpadd_parts+0x2cc>
    eb2c:	48d6d83a 	srl	r11,r9,r3
    eb30:	001d883a 	mov	r14,zero
    eb34:	18009e16 	blt	r3,zero,edb0 <_fpadd_parts+0x2ec>
    eb38:	01000044 	movi	r4,1
    eb3c:	20c6983a 	sll	r3,r4,r3
    eb40:	0015883a 	mov	r10,zero
    eb44:	513fffc4 	addi	r4,r10,-1
    eb48:	2295403a 	cmpgeu	r10,r4,r10
    eb4c:	1a87c83a 	sub	r3,r3,r10
    eb50:	1a52703a 	and	r9,r3,r9
    eb54:	2210703a 	and	r8,r4,r8
    eb58:	4250b03a 	or	r8,r8,r9
    eb5c:	4010c03a 	cmpne	r8,r8,zero
    eb60:	42d0b03a 	or	r8,r8,r11
    eb64:	7013883a 	mov	r9,r14
    eb68:	11000117 	ldw	r4,4(r2)
    eb6c:	28800117 	ldw	r2,4(r5)
    eb70:	20804126 	beq	r4,r2,ec78 <_fpadd_parts+0x1b4>
    eb74:	20006326 	beq	r4,zero,ed04 <_fpadd_parts+0x240>
    eb78:	4305c83a 	sub	r2,r8,r12
    eb7c:	4091803a 	cmpltu	r8,r8,r2
    eb80:	4b47c83a 	sub	r3,r9,r13
    eb84:	1a07c83a 	sub	r3,r3,r8
    eb88:	18006316 	blt	r3,zero,ed18 <_fpadd_parts+0x254>
    eb8c:	30000115 	stw	zero,4(r6)
    eb90:	31c00215 	stw	r7,8(r6)
    eb94:	30800315 	stw	r2,12(r6)
    eb98:	30c00415 	stw	r3,16(r6)
    eb9c:	11ffffc4 	addi	r7,r2,-1
    eba0:	388b403a 	cmpgeu	r5,r7,r2
    eba4:	194bc83a 	sub	r5,r3,r5
    eba8:	01040034 	movhi	r4,4096
    ebac:	213fffc4 	addi	r4,r4,-1
    ebb0:	21401736 	bltu	r4,r5,ec10 <_fpadd_parts+0x14c>
    ebb4:	29008226 	beq	r5,r4,edc0 <_fpadd_parts+0x2fc>
    ebb8:	31400217 	ldw	r5,8(r6)
    ebbc:	02840034 	movhi	r10,4096
    ebc0:	52bfffc4 	addi	r10,r10,-1
    ebc4:	033fff84 	movi	r12,-2
    ebc8:	297fffc4 	addi	r5,r5,-1
    ebcc:	00000106 	br	ebd4 <_fpadd_parts+0x110>
    ebd0:	3a804a26 	beq	r7,r10,ecfc <_fpadd_parts+0x238>
    ebd4:	1089883a 	add	r4,r2,r2
    ebd8:	2091803a 	cmpltu	r8,r4,r2
    ebdc:	18c7883a 	add	r3,r3,r3
    ebe0:	227fffc4 	addi	r9,r4,-1
    ebe4:	40d1883a 	add	r8,r8,r3
    ebe8:	490f403a 	cmpgeu	r7,r9,r4
    ebec:	41cfc83a 	sub	r7,r8,r7
    ebf0:	2817883a 	mov	r11,r5
    ebf4:	2005883a 	mov	r2,r4
    ebf8:	4007883a 	mov	r3,r8
    ebfc:	297fffc4 	addi	r5,r5,-1
    ec00:	51fff32e 	bgeu	r10,r7,ebd0 <_gp+0xffff2354>
    ec04:	31000315 	stw	r4,12(r6)
    ec08:	32000415 	stw	r8,16(r6)
    ec0c:	32c00215 	stw	r11,8(r6)
    ec10:	010000c4 	movi	r4,3
    ec14:	31000015 	stw	r4,0(r6)
    ec18:	01080034 	movhi	r4,8192
    ec1c:	213fffc4 	addi	r4,r4,-1
    ec20:	20c00b2e 	bgeu	r4,r3,ec50 <_fpadd_parts+0x18c>
    ec24:	180e97fa 	slli	r7,r3,31
    ec28:	1008d07a 	srli	r4,r2,1
    ec2c:	31400217 	ldw	r5,8(r6)
    ec30:	1806d07a 	srli	r3,r3,1
    ec34:	1080004c 	andi	r2,r2,1
    ec38:	3908b03a 	or	r4,r7,r4
    ec3c:	1108b03a 	or	r4,r2,r4
    ec40:	29400044 	addi	r5,r5,1
    ec44:	31000315 	stw	r4,12(r6)
    ec48:	30c00415 	stw	r3,16(r6)
    ec4c:	31400215 	stw	r5,8(r6)
    ec50:	3005883a 	mov	r2,r6
    ec54:	f800283a 	ret
    ec58:	2805883a 	mov	r2,r5
    ec5c:	f800283a 	ret
    ec60:	59c01e0e 	bge	r11,r7,ecdc <_fpadd_parts+0x218>
    ec64:	11000117 	ldw	r4,4(r2)
    ec68:	28800117 	ldw	r2,4(r5)
    ec6c:	0011883a 	mov	r8,zero
    ec70:	0013883a 	mov	r9,zero
    ec74:	20bfbf1e 	bne	r4,r2,eb74 <_gp+0xffff22f8>
    ec78:	4305883a 	add	r2,r8,r12
    ec7c:	1207803a 	cmpltu	r3,r2,r8
    ec80:	4b53883a 	add	r9,r9,r13
    ec84:	1a47883a 	add	r3,r3,r9
    ec88:	31000115 	stw	r4,4(r6)
    ec8c:	31c00215 	stw	r7,8(r6)
    ec90:	30800315 	stw	r2,12(r6)
    ec94:	30c00415 	stw	r3,16(r6)
    ec98:	003fdd06 	br	ec10 <_gp+0xffff2394>
    ec9c:	20ffef1e 	bne	r4,r3,ec5c <_gp+0xffff23e0>
    eca0:	31000015 	stw	r4,0(r6)
    eca4:	10c00117 	ldw	r3,4(r2)
    eca8:	30c00115 	stw	r3,4(r6)
    ecac:	10c00217 	ldw	r3,8(r2)
    ecb0:	11000117 	ldw	r4,4(r2)
    ecb4:	29400117 	ldw	r5,4(r5)
    ecb8:	30c00215 	stw	r3,8(r6)
    ecbc:	10c00317 	ldw	r3,12(r2)
    ecc0:	2908703a 	and	r4,r5,r4
    ecc4:	30c00315 	stw	r3,12(r6)
    ecc8:	10c00417 	ldw	r3,16(r2)
    eccc:	31000115 	stw	r4,4(r6)
    ecd0:	3005883a 	mov	r2,r6
    ecd4:	30c00415 	stw	r3,16(r6)
    ecd8:	f800283a 	ret
    ecdc:	580f883a 	mov	r7,r11
    ece0:	0019883a 	mov	r12,zero
    ece4:	001b883a 	mov	r13,zero
    ece8:	003f9f06 	br	eb68 <_gp+0xffff22ec>
    ecec:	0115c83a 	sub	r10,zero,r4
    ecf0:	00c00fc4 	movi	r3,63
    ecf4:	1abfda16 	blt	r3,r10,ec60 <_gp+0xffff23e4>
    ecf8:	003f8906 	br	eb20 <_gp+0xffff22a4>
    ecfc:	627fb52e 	bgeu	r12,r9,ebd4 <_gp+0xffff2358>
    ed00:	003fc006 	br	ec04 <_gp+0xffff2388>
    ed04:	6205c83a 	sub	r2,r12,r8
    ed08:	6099803a 	cmpltu	r12,r12,r2
    ed0c:	6a47c83a 	sub	r3,r13,r9
    ed10:	1b07c83a 	sub	r3,r3,r12
    ed14:	183f9d0e 	bge	r3,zero,eb8c <_gp+0xffff2310>
    ed18:	0085c83a 	sub	r2,zero,r2
    ed1c:	1008c03a 	cmpne	r4,r2,zero
    ed20:	00c7c83a 	sub	r3,zero,r3
    ed24:	1907c83a 	sub	r3,r3,r4
    ed28:	01000044 	movi	r4,1
    ed2c:	31000115 	stw	r4,4(r6)
    ed30:	31c00215 	stw	r7,8(r6)
    ed34:	30800315 	stw	r2,12(r6)
    ed38:	30c00415 	stw	r3,16(r6)
    ed3c:	003f9706 	br	eb9c <_gp+0xffff2320>
    ed40:	203f8926 	beq	r4,zero,eb68 <_gp+0xffff22ec>
    ed44:	50fff804 	addi	r3,r10,-32
    ed48:	3a8f883a 	add	r7,r7,r10
    ed4c:	18002316 	blt	r3,zero,eddc <_fpadd_parts+0x318>
    ed50:	68d6d83a 	srl	r11,r13,r3
    ed54:	001d883a 	mov	r14,zero
    ed58:	18001c16 	blt	r3,zero,edcc <_fpadd_parts+0x308>
    ed5c:	01000044 	movi	r4,1
    ed60:	20c6983a 	sll	r3,r4,r3
    ed64:	0015883a 	mov	r10,zero
    ed68:	513fffc4 	addi	r4,r10,-1
    ed6c:	2295403a 	cmpgeu	r10,r4,r10
    ed70:	1a87c83a 	sub	r3,r3,r10
    ed74:	1b5a703a 	and	r13,r3,r13
    ed78:	2318703a 	and	r12,r4,r12
    ed7c:	6358b03a 	or	r12,r12,r13
    ed80:	6018c03a 	cmpne	r12,r12,zero
    ed84:	62d8b03a 	or	r12,r12,r11
    ed88:	701b883a 	mov	r13,r14
    ed8c:	003f7606 	br	eb68 <_gp+0xffff22ec>
    ed90:	4808907a 	slli	r4,r9,1
    ed94:	02c007c4 	movi	r11,31
    ed98:	5a97c83a 	sub	r11,r11,r10
    ed9c:	22c8983a 	sll	r4,r4,r11
    eda0:	4296d83a 	srl	r11,r8,r10
    eda4:	4a9cd83a 	srl	r14,r9,r10
    eda8:	22d6b03a 	or	r11,r4,r11
    edac:	003f6106 	br	eb34 <_gp+0xffff22b8>
    edb0:	00c00044 	movi	r3,1
    edb4:	1a94983a 	sll	r10,r3,r10
    edb8:	0007883a 	mov	r3,zero
    edbc:	003f6106 	br	eb44 <_gp+0xffff22c8>
    edc0:	013fff84 	movi	r4,-2
    edc4:	21ff7c2e 	bgeu	r4,r7,ebb8 <_gp+0xffff233c>
    edc8:	003f9106 	br	ec10 <_gp+0xffff2394>
    edcc:	00c00044 	movi	r3,1
    edd0:	1a94983a 	sll	r10,r3,r10
    edd4:	0007883a 	mov	r3,zero
    edd8:	003fe306 	br	ed68 <_gp+0xffff24ec>
    eddc:	6816907a 	slli	r11,r13,1
    ede0:	010007c4 	movi	r4,31
    ede4:	2289c83a 	sub	r4,r4,r10
    ede8:	5908983a 	sll	r4,r11,r4
    edec:	6296d83a 	srl	r11,r12,r10
    edf0:	6a9cd83a 	srl	r14,r13,r10
    edf4:	22d6b03a 	or	r11,r4,r11
    edf8:	003fd706 	br	ed58 <_gp+0xffff24dc>
    edfc:	193f971e 	bne	r3,r4,ec5c <_gp+0xffff23e0>
    ee00:	11000117 	ldw	r4,4(r2)
    ee04:	28c00117 	ldw	r3,4(r5)
    ee08:	20ff9426 	beq	r4,r3,ec5c <_gp+0xffff23e0>
    ee0c:	00800074 	movhi	r2,1
    ee10:	108a3004 	addi	r2,r2,10432
    ee14:	f800283a 	ret

0000ee18 <__adddf3>:
    ee18:	deffec04 	addi	sp,sp,-80
    ee1c:	d9001115 	stw	r4,68(sp)
    ee20:	d9401215 	stw	r5,72(sp)
    ee24:	d9001104 	addi	r4,sp,68
    ee28:	d9400a04 	addi	r5,sp,40
    ee2c:	dfc01315 	stw	ra,76(sp)
    ee30:	d9c01015 	stw	r7,64(sp)
    ee34:	d9800f15 	stw	r6,60(sp)
    ee38:	00064b00 	call	64b0 <__unpack_d>
    ee3c:	d9000f04 	addi	r4,sp,60
    ee40:	d9400504 	addi	r5,sp,20
    ee44:	00064b00 	call	64b0 <__unpack_d>
    ee48:	d9000a04 	addi	r4,sp,40
    ee4c:	d9400504 	addi	r5,sp,20
    ee50:	d80d883a 	mov	r6,sp
    ee54:	000eac40 	call	eac4 <_fpadd_parts>
    ee58:	1009883a 	mov	r4,r2
    ee5c:	000628c0 	call	628c <__pack_d>
    ee60:	dfc01317 	ldw	ra,76(sp)
    ee64:	dec01404 	addi	sp,sp,80
    ee68:	f800283a 	ret

0000ee6c <__subdf3>:
    ee6c:	deffec04 	addi	sp,sp,-80
    ee70:	d9001115 	stw	r4,68(sp)
    ee74:	d9401215 	stw	r5,72(sp)
    ee78:	d9001104 	addi	r4,sp,68
    ee7c:	d9400a04 	addi	r5,sp,40
    ee80:	dfc01315 	stw	ra,76(sp)
    ee84:	d9c01015 	stw	r7,64(sp)
    ee88:	d9800f15 	stw	r6,60(sp)
    ee8c:	00064b00 	call	64b0 <__unpack_d>
    ee90:	d9000f04 	addi	r4,sp,60
    ee94:	d9400504 	addi	r5,sp,20
    ee98:	00064b00 	call	64b0 <__unpack_d>
    ee9c:	d8800617 	ldw	r2,24(sp)
    eea0:	d9000a04 	addi	r4,sp,40
    eea4:	d9400504 	addi	r5,sp,20
    eea8:	d80d883a 	mov	r6,sp
    eeac:	1080005c 	xori	r2,r2,1
    eeb0:	d8800615 	stw	r2,24(sp)
    eeb4:	000eac40 	call	eac4 <_fpadd_parts>
    eeb8:	1009883a 	mov	r4,r2
    eebc:	000628c0 	call	628c <__pack_d>
    eec0:	dfc01317 	ldw	ra,76(sp)
    eec4:	dec01404 	addi	sp,sp,80
    eec8:	f800283a 	ret

0000eecc <__muldf3>:
    eecc:	deffe404 	addi	sp,sp,-112
    eed0:	d9001115 	stw	r4,68(sp)
    eed4:	d9401215 	stw	r5,72(sp)
    eed8:	d9001104 	addi	r4,sp,68
    eedc:	d9400a04 	addi	r5,sp,40
    eee0:	dfc01b15 	stw	ra,108(sp)
    eee4:	d9800f15 	stw	r6,60(sp)
    eee8:	d9c01015 	stw	r7,64(sp)
    eeec:	ddc01a15 	stw	r23,104(sp)
    eef0:	dd801915 	stw	r22,100(sp)
    eef4:	dd401815 	stw	r21,96(sp)
    eef8:	dd001715 	stw	r20,92(sp)
    eefc:	dcc01615 	stw	r19,88(sp)
    ef00:	dc801515 	stw	r18,84(sp)
    ef04:	dc401415 	stw	r17,80(sp)
    ef08:	dc001315 	stw	r16,76(sp)
    ef0c:	00064b00 	call	64b0 <__unpack_d>
    ef10:	d9000f04 	addi	r4,sp,60
    ef14:	d9400504 	addi	r5,sp,20
    ef18:	00064b00 	call	64b0 <__unpack_d>
    ef1c:	d8c00a17 	ldw	r3,40(sp)
    ef20:	00800044 	movi	r2,1
    ef24:	10c01136 	bltu	r2,r3,ef6c <__muldf3+0xa0>
    ef28:	d8c00b17 	ldw	r3,44(sp)
    ef2c:	d8800617 	ldw	r2,24(sp)
    ef30:	d9000a04 	addi	r4,sp,40
    ef34:	1884c03a 	cmpne	r2,r3,r2
    ef38:	d8800b15 	stw	r2,44(sp)
    ef3c:	000628c0 	call	628c <__pack_d>
    ef40:	dfc01b17 	ldw	ra,108(sp)
    ef44:	ddc01a17 	ldw	r23,104(sp)
    ef48:	dd801917 	ldw	r22,100(sp)
    ef4c:	dd401817 	ldw	r21,96(sp)
    ef50:	dd001717 	ldw	r20,92(sp)
    ef54:	dcc01617 	ldw	r19,88(sp)
    ef58:	dc801517 	ldw	r18,84(sp)
    ef5c:	dc401417 	ldw	r17,80(sp)
    ef60:	dc001317 	ldw	r16,76(sp)
    ef64:	dec01c04 	addi	sp,sp,112
    ef68:	f800283a 	ret
    ef6c:	d9000517 	ldw	r4,20(sp)
    ef70:	11000636 	bltu	r2,r4,ef8c <__muldf3+0xc0>
    ef74:	d8800617 	ldw	r2,24(sp)
    ef78:	d8c00b17 	ldw	r3,44(sp)
    ef7c:	d9000504 	addi	r4,sp,20
    ef80:	1884c03a 	cmpne	r2,r3,r2
    ef84:	d8800615 	stw	r2,24(sp)
    ef88:	003fec06 	br	ef3c <_gp+0xffff26c0>
    ef8c:	00800104 	movi	r2,4
    ef90:	1880051e 	bne	r3,r2,efa8 <__muldf3+0xdc>
    ef94:	00800084 	movi	r2,2
    ef98:	20bfe31e 	bne	r4,r2,ef28 <_gp+0xffff26ac>
    ef9c:	01000074 	movhi	r4,1
    efa0:	210a3004 	addi	r4,r4,10432
    efa4:	003fe506 	br	ef3c <_gp+0xffff26c0>
    efa8:	2080031e 	bne	r4,r2,efb8 <__muldf3+0xec>
    efac:	00800084 	movi	r2,2
    efb0:	18bffa26 	beq	r3,r2,ef9c <_gp+0xffff2720>
    efb4:	003fef06 	br	ef74 <_gp+0xffff26f8>
    efb8:	00800084 	movi	r2,2
    efbc:	18bfda26 	beq	r3,r2,ef28 <_gp+0xffff26ac>
    efc0:	20bfec26 	beq	r4,r2,ef74 <_gp+0xffff26f8>
    efc4:	dc000d17 	ldw	r16,52(sp)
    efc8:	dd000817 	ldw	r20,32(sp)
    efcc:	dc800917 	ldw	r18,36(sp)
    efd0:	8009883a 	mov	r4,r16
    efd4:	000b883a 	mov	r5,zero
    efd8:	a00d883a 	mov	r6,r20
    efdc:	000f883a 	mov	r7,zero
    efe0:	0005f600 	call	5f60 <__muldi3>
    efe4:	dc400e17 	ldw	r17,56(sp)
    efe8:	9009883a 	mov	r4,r18
    efec:	800d883a 	mov	r6,r16
    eff0:	000b883a 	mov	r5,zero
    eff4:	000f883a 	mov	r7,zero
    eff8:	102f883a 	mov	r23,r2
    effc:	1827883a 	mov	r19,r3
    f000:	0005f600 	call	5f60 <__muldi3>
    f004:	900d883a 	mov	r6,r18
    f008:	8809883a 	mov	r4,r17
    f00c:	000b883a 	mov	r5,zero
    f010:	000f883a 	mov	r7,zero
    f014:	102b883a 	mov	r21,r2
    f018:	1821883a 	mov	r16,r3
    f01c:	0005f600 	call	5f60 <__muldi3>
    f020:	8809883a 	mov	r4,r17
    f024:	000b883a 	mov	r5,zero
    f028:	a00d883a 	mov	r6,r20
    f02c:	000f883a 	mov	r7,zero
    f030:	102d883a 	mov	r22,r2
    f034:	1825883a 	mov	r18,r3
    f038:	0005f600 	call	5f60 <__muldi3>
    f03c:	154b883a 	add	r5,r2,r21
    f040:	2889803a 	cmpltu	r4,r5,r2
    f044:	1c07883a 	add	r3,r3,r16
    f048:	20c9883a 	add	r4,r4,r3
    f04c:	24004b36 	bltu	r4,r16,f17c <__muldf3+0x2b0>
    f050:	8100011e 	bne	r16,r4,f058 <__muldf3+0x18c>
    f054:	2d404936 	bltu	r5,r21,f17c <__muldf3+0x2b0>
    f058:	0011883a 	mov	r8,zero
    f05c:	0007883a 	mov	r3,zero
    f060:	2ccb883a 	add	r5,r5,r19
    f064:	b80d883a 	mov	r6,r23
    f068:	2cc0012e 	bgeu	r5,r19,f070 <__muldf3+0x1a4>
    f06c:	02000044 	movi	r8,1
    f070:	258f883a 	add	r7,r4,r22
    f074:	3909803a 	cmpltu	r4,r7,r4
    f078:	da400c17 	ldw	r9,48(sp)
    f07c:	2489883a 	add	r4,r4,r18
    f080:	d8800717 	ldw	r2,28(sp)
    f084:	20c9883a 	add	r4,r4,r3
    f088:	da800b17 	ldw	r10,44(sp)
    f08c:	d8c00617 	ldw	r3,24(sp)
    f090:	3a11883a 	add	r8,r7,r8
    f094:	4885883a 	add	r2,r9,r2
    f098:	50c6c03a 	cmpne	r3,r10,r3
    f09c:	41cf803a 	cmpltu	r7,r8,r7
    f0a0:	12400104 	addi	r9,r2,4
    f0a4:	d8c00115 	stw	r3,4(sp)
    f0a8:	3909883a 	add	r4,r7,r4
    f0ac:	da400215 	stw	r9,8(sp)
    f0b0:	03480034 	movhi	r13,8192
    f0b4:	6b7fffc4 	addi	r13,r13,-1
    f0b8:	4007883a 	mov	r3,r8
    f0bc:	6900102e 	bgeu	r13,r4,f100 <__muldf3+0x234>
    f0c0:	10800144 	addi	r2,r2,5
    f0c4:	180ed07a 	srli	r7,r3,1
    f0c8:	18c0004c 	andi	r3,r3,1
    f0cc:	201097fa 	slli	r8,r4,31
    f0d0:	281697fa 	slli	r11,r5,31
    f0d4:	2008d07a 	srli	r4,r4,1
    f0d8:	3014d07a 	srli	r10,r6,1
    f0dc:	2812d07a 	srli	r9,r5,1
    f0e0:	1019883a 	mov	r12,r2
    f0e4:	18000226 	beq	r3,zero,f0f0 <__muldf3+0x224>
    f0e8:	5a8cb03a 	or	r6,r11,r10
    f0ec:	49600034 	orhi	r5,r9,32768
    f0f0:	41c6b03a 	or	r3,r8,r7
    f0f4:	10800044 	addi	r2,r2,1
    f0f8:	693ff236 	bltu	r13,r4,f0c4 <_gp+0xffff2848>
    f0fc:	db000215 	stw	r12,8(sp)
    f100:	03440034 	movhi	r13,4096
    f104:	6b7fffc4 	addi	r13,r13,-1
    f108:	69001336 	bltu	r13,r4,f158 <__muldf3+0x28c>
    f10c:	d8800217 	ldw	r2,8(sp)
    f110:	10bfffc4 	addi	r2,r2,-1
    f114:	18d3883a 	add	r9,r3,r3
    f118:	48c7803a 	cmpltu	r3,r9,r3
    f11c:	2109883a 	add	r4,r4,r4
    f120:	190f883a 	add	r7,r3,r4
    f124:	3191883a 	add	r8,r6,r6
    f128:	4197803a 	cmpltu	r11,r8,r6
    f12c:	2955883a 	add	r10,r5,r5
    f130:	1019883a 	mov	r12,r2
    f134:	4807883a 	mov	r3,r9
    f138:	3809883a 	mov	r4,r7
    f13c:	2800010e 	bge	r5,zero,f144 <__muldf3+0x278>
    f140:	48c00054 	ori	r3,r9,1
    f144:	400d883a 	mov	r6,r8
    f148:	5a8b883a 	add	r5,r11,r10
    f14c:	10bfffc4 	addi	r2,r2,-1
    f150:	69fff02e 	bgeu	r13,r7,f114 <_gp+0xffff2898>
    f154:	db000215 	stw	r12,8(sp)
    f158:	18803fcc 	andi	r2,r3,255
    f15c:	01c02004 	movi	r7,128
    f160:	11c00926 	beq	r2,r7,f188 <__muldf3+0x2bc>
    f164:	008000c4 	movi	r2,3
    f168:	d9000415 	stw	r4,16(sp)
    f16c:	d8c00315 	stw	r3,12(sp)
    f170:	d8800015 	stw	r2,0(sp)
    f174:	d809883a 	mov	r4,sp
    f178:	003f7006 	br	ef3c <_gp+0xffff26c0>
    f17c:	0011883a 	mov	r8,zero
    f180:	00c00044 	movi	r3,1
    f184:	003fb606 	br	f060 <_gp+0xffff27e4>
    f188:	19c0400c 	andi	r7,r3,256
    f18c:	383ff51e 	bne	r7,zero,f164 <_gp+0xffff28e8>
    f190:	314ab03a 	or	r5,r6,r5
    f194:	283ff326 	beq	r5,zero,f164 <_gp+0xffff28e8>
    f198:	1885883a 	add	r2,r3,r2
    f19c:	10cb803a 	cmpltu	r5,r2,r3
    f1a0:	00ffc004 	movi	r3,-256
    f1a4:	10c6703a 	and	r3,r2,r3
    f1a8:	2909883a 	add	r4,r5,r4
    f1ac:	003fed06 	br	f164 <_gp+0xffff28e8>

0000f1b0 <__eqdf2>:
    f1b0:	defff104 	addi	sp,sp,-60
    f1b4:	d9000c15 	stw	r4,48(sp)
    f1b8:	d9400d15 	stw	r5,52(sp)
    f1bc:	d9000c04 	addi	r4,sp,48
    f1c0:	d9400504 	addi	r5,sp,20
    f1c4:	dfc00e15 	stw	ra,56(sp)
    f1c8:	d9800a15 	stw	r6,40(sp)
    f1cc:	d9c00b15 	stw	r7,44(sp)
    f1d0:	00064b00 	call	64b0 <__unpack_d>
    f1d4:	d9000a04 	addi	r4,sp,40
    f1d8:	d80b883a 	mov	r5,sp
    f1dc:	00064b00 	call	64b0 <__unpack_d>
    f1e0:	d8c00517 	ldw	r3,20(sp)
    f1e4:	00800044 	movi	r2,1
    f1e8:	10c0052e 	bgeu	r2,r3,f200 <__eqdf2+0x50>
    f1ec:	d8c00017 	ldw	r3,0(sp)
    f1f0:	10c0032e 	bgeu	r2,r3,f200 <__eqdf2+0x50>
    f1f4:	d9000504 	addi	r4,sp,20
    f1f8:	d80b883a 	mov	r5,sp
    f1fc:	000f6400 	call	f640 <__fpcmp_parts_d>
    f200:	dfc00e17 	ldw	ra,56(sp)
    f204:	dec00f04 	addi	sp,sp,60
    f208:	f800283a 	ret

0000f20c <__nedf2>:
    f20c:	defff104 	addi	sp,sp,-60
    f210:	d9000c15 	stw	r4,48(sp)
    f214:	d9400d15 	stw	r5,52(sp)
    f218:	d9000c04 	addi	r4,sp,48
    f21c:	d9400504 	addi	r5,sp,20
    f220:	dfc00e15 	stw	ra,56(sp)
    f224:	d9800a15 	stw	r6,40(sp)
    f228:	d9c00b15 	stw	r7,44(sp)
    f22c:	00064b00 	call	64b0 <__unpack_d>
    f230:	d9000a04 	addi	r4,sp,40
    f234:	d80b883a 	mov	r5,sp
    f238:	00064b00 	call	64b0 <__unpack_d>
    f23c:	d8c00517 	ldw	r3,20(sp)
    f240:	00800044 	movi	r2,1
    f244:	10c0052e 	bgeu	r2,r3,f25c <__nedf2+0x50>
    f248:	d8c00017 	ldw	r3,0(sp)
    f24c:	10c0032e 	bgeu	r2,r3,f25c <__nedf2+0x50>
    f250:	d9000504 	addi	r4,sp,20
    f254:	d80b883a 	mov	r5,sp
    f258:	000f6400 	call	f640 <__fpcmp_parts_d>
    f25c:	dfc00e17 	ldw	ra,56(sp)
    f260:	dec00f04 	addi	sp,sp,60
    f264:	f800283a 	ret

0000f268 <__gtdf2>:
    f268:	defff104 	addi	sp,sp,-60
    f26c:	d9000c15 	stw	r4,48(sp)
    f270:	d9400d15 	stw	r5,52(sp)
    f274:	d9000c04 	addi	r4,sp,48
    f278:	d9400504 	addi	r5,sp,20
    f27c:	dfc00e15 	stw	ra,56(sp)
    f280:	d9800a15 	stw	r6,40(sp)
    f284:	d9c00b15 	stw	r7,44(sp)
    f288:	00064b00 	call	64b0 <__unpack_d>
    f28c:	d9000a04 	addi	r4,sp,40
    f290:	d80b883a 	mov	r5,sp
    f294:	00064b00 	call	64b0 <__unpack_d>
    f298:	d8c00517 	ldw	r3,20(sp)
    f29c:	00800044 	movi	r2,1
    f2a0:	10c0082e 	bgeu	r2,r3,f2c4 <__gtdf2+0x5c>
    f2a4:	d8c00017 	ldw	r3,0(sp)
    f2a8:	10c0062e 	bgeu	r2,r3,f2c4 <__gtdf2+0x5c>
    f2ac:	d9000504 	addi	r4,sp,20
    f2b0:	d80b883a 	mov	r5,sp
    f2b4:	000f6400 	call	f640 <__fpcmp_parts_d>
    f2b8:	dfc00e17 	ldw	ra,56(sp)
    f2bc:	dec00f04 	addi	sp,sp,60
    f2c0:	f800283a 	ret
    f2c4:	00bfffc4 	movi	r2,-1
    f2c8:	003ffb06 	br	f2b8 <_gp+0xffff2a3c>

0000f2cc <__gedf2>:
    f2cc:	defff104 	addi	sp,sp,-60
    f2d0:	d9000c15 	stw	r4,48(sp)
    f2d4:	d9400d15 	stw	r5,52(sp)
    f2d8:	d9000c04 	addi	r4,sp,48
    f2dc:	d9400504 	addi	r5,sp,20
    f2e0:	dfc00e15 	stw	ra,56(sp)
    f2e4:	d9800a15 	stw	r6,40(sp)
    f2e8:	d9c00b15 	stw	r7,44(sp)
    f2ec:	00064b00 	call	64b0 <__unpack_d>
    f2f0:	d9000a04 	addi	r4,sp,40
    f2f4:	d80b883a 	mov	r5,sp
    f2f8:	00064b00 	call	64b0 <__unpack_d>
    f2fc:	d8c00517 	ldw	r3,20(sp)
    f300:	00800044 	movi	r2,1
    f304:	10c0082e 	bgeu	r2,r3,f328 <__gedf2+0x5c>
    f308:	d8c00017 	ldw	r3,0(sp)
    f30c:	10c0062e 	bgeu	r2,r3,f328 <__gedf2+0x5c>
    f310:	d9000504 	addi	r4,sp,20
    f314:	d80b883a 	mov	r5,sp
    f318:	000f6400 	call	f640 <__fpcmp_parts_d>
    f31c:	dfc00e17 	ldw	ra,56(sp)
    f320:	dec00f04 	addi	sp,sp,60
    f324:	f800283a 	ret
    f328:	00bfffc4 	movi	r2,-1
    f32c:	003ffb06 	br	f31c <_gp+0xffff2aa0>

0000f330 <__ltdf2>:
    f330:	defff104 	addi	sp,sp,-60
    f334:	d9000c15 	stw	r4,48(sp)
    f338:	d9400d15 	stw	r5,52(sp)
    f33c:	d9000c04 	addi	r4,sp,48
    f340:	d9400504 	addi	r5,sp,20
    f344:	dfc00e15 	stw	ra,56(sp)
    f348:	d9800a15 	stw	r6,40(sp)
    f34c:	d9c00b15 	stw	r7,44(sp)
    f350:	00064b00 	call	64b0 <__unpack_d>
    f354:	d9000a04 	addi	r4,sp,40
    f358:	d80b883a 	mov	r5,sp
    f35c:	00064b00 	call	64b0 <__unpack_d>
    f360:	d8c00517 	ldw	r3,20(sp)
    f364:	00800044 	movi	r2,1
    f368:	10c0052e 	bgeu	r2,r3,f380 <__ltdf2+0x50>
    f36c:	d8c00017 	ldw	r3,0(sp)
    f370:	10c0032e 	bgeu	r2,r3,f380 <__ltdf2+0x50>
    f374:	d9000504 	addi	r4,sp,20
    f378:	d80b883a 	mov	r5,sp
    f37c:	000f6400 	call	f640 <__fpcmp_parts_d>
    f380:	dfc00e17 	ldw	ra,56(sp)
    f384:	dec00f04 	addi	sp,sp,60
    f388:	f800283a 	ret

0000f38c <__floatsidf>:
    f38c:	2004d7fa 	srli	r2,r4,31
    f390:	defff904 	addi	sp,sp,-28
    f394:	00c000c4 	movi	r3,3
    f398:	dfc00615 	stw	ra,24(sp)
    f39c:	dc000515 	stw	r16,20(sp)
    f3a0:	d8c00015 	stw	r3,0(sp)
    f3a4:	d8800115 	stw	r2,4(sp)
    f3a8:	2000081e 	bne	r4,zero,f3cc <__floatsidf+0x40>
    f3ac:	00800084 	movi	r2,2
    f3b0:	d8800015 	stw	r2,0(sp)
    f3b4:	d809883a 	mov	r4,sp
    f3b8:	000628c0 	call	628c <__pack_d>
    f3bc:	dfc00617 	ldw	ra,24(sp)
    f3c0:	dc000517 	ldw	r16,20(sp)
    f3c4:	dec00704 	addi	sp,sp,28
    f3c8:	f800283a 	ret
    f3cc:	00c00f04 	movi	r3,60
    f3d0:	d8c00215 	stw	r3,8(sp)
    f3d4:	10000f1e 	bne	r2,zero,f414 <__floatsidf+0x88>
    f3d8:	2021883a 	mov	r16,r4
    f3dc:	8009883a 	mov	r4,r16
    f3e0:	0005fc00 	call	5fc0 <__clzsi2>
    f3e4:	11000744 	addi	r4,r2,29
    f3e8:	0100110e 	bge	zero,r4,f430 <__floatsidf+0xa4>
    f3ec:	10ffff44 	addi	r3,r2,-3
    f3f0:	18001216 	blt	r3,zero,f43c <__floatsidf+0xb0>
    f3f4:	80c6983a 	sll	r3,r16,r3
    f3f8:	0009883a 	mov	r4,zero
    f3fc:	014007c4 	movi	r5,31
    f400:	2885c83a 	sub	r2,r5,r2
    f404:	d9000315 	stw	r4,12(sp)
    f408:	d8c00415 	stw	r3,16(sp)
    f40c:	d8800215 	stw	r2,8(sp)
    f410:	003fe806 	br	f3b4 <_gp+0xffff2b38>
    f414:	00a00034 	movhi	r2,32768
    f418:	20800e26 	beq	r4,r2,f454 <__floatsidf+0xc8>
    f41c:	0121c83a 	sub	r16,zero,r4
    f420:	8009883a 	mov	r4,r16
    f424:	0005fc00 	call	5fc0 <__clzsi2>
    f428:	11000744 	addi	r4,r2,29
    f42c:	013fef16 	blt	zero,r4,f3ec <_gp+0xffff2b70>
    f430:	dc000315 	stw	r16,12(sp)
    f434:	d8000415 	stw	zero,16(sp)
    f438:	003fde06 	br	f3b4 <_gp+0xffff2b38>
    f43c:	800ad07a 	srli	r5,r16,1
    f440:	00c007c4 	movi	r3,31
    f444:	1907c83a 	sub	r3,r3,r4
    f448:	28c6d83a 	srl	r3,r5,r3
    f44c:	8108983a 	sll	r4,r16,r4
    f450:	003fea06 	br	f3fc <_gp+0xffff2b80>
    f454:	0005883a 	mov	r2,zero
    f458:	00f07834 	movhi	r3,49632
    f45c:	003fd706 	br	f3bc <_gp+0xffff2b40>

0000f460 <__fixdfsi>:
    f460:	defff804 	addi	sp,sp,-32
    f464:	d9000515 	stw	r4,20(sp)
    f468:	d9400615 	stw	r5,24(sp)
    f46c:	d9000504 	addi	r4,sp,20
    f470:	d80b883a 	mov	r5,sp
    f474:	dfc00715 	stw	ra,28(sp)
    f478:	00064b00 	call	64b0 <__unpack_d>
    f47c:	d8800017 	ldw	r2,0(sp)
    f480:	00c00084 	movi	r3,2
    f484:	10c01c26 	beq	r2,r3,f4f8 <__fixdfsi+0x98>
    f488:	00c00044 	movi	r3,1
    f48c:	18801a2e 	bgeu	r3,r2,f4f8 <__fixdfsi+0x98>
    f490:	00c00104 	movi	r3,4
    f494:	10c01126 	beq	r2,r3,f4dc <__fixdfsi+0x7c>
    f498:	d8800217 	ldw	r2,8(sp)
    f49c:	10001616 	blt	r2,zero,f4f8 <__fixdfsi+0x98>
    f4a0:	00c00784 	movi	r3,30
    f4a4:	18800d16 	blt	r3,r2,f4dc <__fixdfsi+0x7c>
    f4a8:	00c00f04 	movi	r3,60
    f4ac:	1885c83a 	sub	r2,r3,r2
    f4b0:	10fff804 	addi	r3,r2,-32
    f4b4:	d9400317 	ldw	r5,12(sp)
    f4b8:	d9000417 	ldw	r4,16(sp)
    f4bc:	18001216 	blt	r3,zero,f508 <__fixdfsi+0xa8>
    f4c0:	20c4d83a 	srl	r2,r4,r3
    f4c4:	d8c00117 	ldw	r3,4(sp)
    f4c8:	18000826 	beq	r3,zero,f4ec <__fixdfsi+0x8c>
    f4cc:	0085c83a 	sub	r2,zero,r2
    f4d0:	dfc00717 	ldw	ra,28(sp)
    f4d4:	dec00804 	addi	sp,sp,32
    f4d8:	f800283a 	ret
    f4dc:	d8800117 	ldw	r2,4(sp)
    f4e0:	00e00034 	movhi	r3,32768
    f4e4:	1005003a 	cmpeq	r2,r2,zero
    f4e8:	1885c83a 	sub	r2,r3,r2
    f4ec:	dfc00717 	ldw	ra,28(sp)
    f4f0:	dec00804 	addi	sp,sp,32
    f4f4:	f800283a 	ret
    f4f8:	0005883a 	mov	r2,zero
    f4fc:	dfc00717 	ldw	ra,28(sp)
    f500:	dec00804 	addi	sp,sp,32
    f504:	f800283a 	ret
    f508:	2008907a 	slli	r4,r4,1
    f50c:	018007c4 	movi	r6,31
    f510:	308dc83a 	sub	r6,r6,r2
    f514:	2188983a 	sll	r4,r4,r6
    f518:	2884d83a 	srl	r2,r5,r2
    f51c:	2084b03a 	or	r2,r4,r2
    f520:	003fe806 	br	f4c4 <_gp+0xffff2c48>

0000f524 <__floatunsidf>:
    f524:	defff904 	addi	sp,sp,-28
    f528:	dc000515 	stw	r16,20(sp)
    f52c:	dfc00615 	stw	ra,24(sp)
    f530:	d8000115 	stw	zero,4(sp)
    f534:	2021883a 	mov	r16,r4
    f538:	20001726 	beq	r4,zero,f598 <__floatunsidf+0x74>
    f53c:	008000c4 	movi	r2,3
    f540:	d8800015 	stw	r2,0(sp)
    f544:	00800f04 	movi	r2,60
    f548:	d8800215 	stw	r2,8(sp)
    f54c:	0005fc00 	call	5fc0 <__clzsi2>
    f550:	10c00744 	addi	r3,r2,29
    f554:	18001816 	blt	r3,zero,f5b8 <__floatunsidf+0x94>
    f558:	18002d26 	beq	r3,zero,f610 <__floatunsidf+0xec>
    f55c:	113fff44 	addi	r4,r2,-3
    f560:	20002e16 	blt	r4,zero,f61c <__floatunsidf+0xf8>
    f564:	8108983a 	sll	r4,r16,r4
    f568:	0021883a 	mov	r16,zero
    f56c:	014007c4 	movi	r5,31
    f570:	2885c83a 	sub	r2,r5,r2
    f574:	dc000315 	stw	r16,12(sp)
    f578:	d9000415 	stw	r4,16(sp)
    f57c:	d8800215 	stw	r2,8(sp)
    f580:	d809883a 	mov	r4,sp
    f584:	000628c0 	call	628c <__pack_d>
    f588:	dfc00617 	ldw	ra,24(sp)
    f58c:	dc000517 	ldw	r16,20(sp)
    f590:	dec00704 	addi	sp,sp,28
    f594:	f800283a 	ret
    f598:	00800084 	movi	r2,2
    f59c:	d809883a 	mov	r4,sp
    f5a0:	d8800015 	stw	r2,0(sp)
    f5a4:	000628c0 	call	628c <__pack_d>
    f5a8:	dfc00617 	ldw	ra,24(sp)
    f5ac:	dc000517 	ldw	r16,20(sp)
    f5b0:	dec00704 	addi	sp,sp,28
    f5b4:	f800283a 	ret
    f5b8:	00c7c83a 	sub	r3,zero,r3
    f5bc:	193ff804 	addi	r4,r3,-32
    f5c0:	20001c16 	blt	r4,zero,f634 <__floatunsidf+0x110>
    f5c4:	000b883a 	mov	r5,zero
    f5c8:	2009d7fa 	srai	r4,r4,31
    f5cc:	80c6d83a 	srl	r3,r16,r3
    f5d0:	297fffc4 	addi	r5,r5,-1
    f5d4:	2c20703a 	and	r16,r5,r16
    f5d8:	8020c03a 	cmpne	r16,r16,zero
    f5dc:	1906703a 	and	r3,r3,r4
    f5e0:	010007c4 	movi	r4,31
    f5e4:	80c6b03a 	or	r3,r16,r3
    f5e8:	2085c83a 	sub	r2,r4,r2
    f5ec:	d809883a 	mov	r4,sp
    f5f0:	d8c00315 	stw	r3,12(sp)
    f5f4:	d8000415 	stw	zero,16(sp)
    f5f8:	d8800215 	stw	r2,8(sp)
    f5fc:	000628c0 	call	628c <__pack_d>
    f600:	dfc00617 	ldw	ra,24(sp)
    f604:	dc000517 	ldw	r16,20(sp)
    f608:	dec00704 	addi	sp,sp,28
    f60c:	f800283a 	ret
    f610:	dc000315 	stw	r16,12(sp)
    f614:	d8000415 	stw	zero,16(sp)
    f618:	003fd906 	br	f580 <_gp+0xffff2d04>
    f61c:	800ad07a 	srli	r5,r16,1
    f620:	010007c4 	movi	r4,31
    f624:	20c9c83a 	sub	r4,r4,r3
    f628:	2908d83a 	srl	r4,r5,r4
    f62c:	80e0983a 	sll	r16,r16,r3
    f630:	003fce06 	br	f56c <_gp+0xffff2cf0>
    f634:	01400044 	movi	r5,1
    f638:	28ca983a 	sll	r5,r5,r3
    f63c:	003fe206 	br	f5c8 <_gp+0xffff2d4c>

0000f640 <__fpcmp_parts_d>:
    f640:	20c00017 	ldw	r3,0(r4)
    f644:	00800044 	movi	r2,1
    f648:	10c0142e 	bgeu	r2,r3,f69c <__fpcmp_parts_d+0x5c>
    f64c:	29800017 	ldw	r6,0(r5)
    f650:	1180122e 	bgeu	r2,r6,f69c <__fpcmp_parts_d+0x5c>
    f654:	01c00104 	movi	r7,4
    f658:	19c02826 	beq	r3,r7,f6fc <__fpcmp_parts_d+0xbc>
    f65c:	31c00926 	beq	r6,r7,f684 <__fpcmp_parts_d+0x44>
    f660:	01c00084 	movi	r7,2
    f664:	19c00626 	beq	r3,r7,f680 <__fpcmp_parts_d+0x40>
    f668:	31c00a26 	beq	r6,r7,f694 <__fpcmp_parts_d+0x54>
    f66c:	20c00117 	ldw	r3,4(r4)
    f670:	29800117 	ldw	r6,4(r5)
    f674:	19800b26 	beq	r3,r6,f6a4 <__fpcmp_parts_d+0x64>
    f678:	1800041e 	bne	r3,zero,f68c <__fpcmp_parts_d+0x4c>
    f67c:	f800283a 	ret
    f680:	30c01a26 	beq	r6,r3,f6ec <__fpcmp_parts_d+0xac>
    f684:	28800117 	ldw	r2,4(r5)
    f688:	1000041e 	bne	r2,zero,f69c <__fpcmp_parts_d+0x5c>
    f68c:	00bfffc4 	movi	r2,-1
    f690:	f800283a 	ret
    f694:	20800117 	ldw	r2,4(r4)
    f698:	103ffc1e 	bne	r2,zero,f68c <_gp+0xffff2e10>
    f69c:	00800044 	movi	r2,1
    f6a0:	f800283a 	ret
    f6a4:	21c00217 	ldw	r7,8(r4)
    f6a8:	29800217 	ldw	r6,8(r5)
    f6ac:	31c0020e 	bge	r6,r7,f6b8 <__fpcmp_parts_d+0x78>
    f6b0:	183ff61e 	bne	r3,zero,f68c <_gp+0xffff2e10>
    f6b4:	f800283a 	ret
    f6b8:	39800a16 	blt	r7,r6,f6e4 <__fpcmp_parts_d+0xa4>
    f6bc:	20800417 	ldw	r2,16(r4)
    f6c0:	29800417 	ldw	r6,16(r5)
    f6c4:	21c00317 	ldw	r7,12(r4)
    f6c8:	29000317 	ldw	r4,12(r5)
    f6cc:	30800936 	bltu	r6,r2,f6f4 <__fpcmp_parts_d+0xb4>
    f6d0:	1180011e 	bne	r2,r6,f6d8 <__fpcmp_parts_d+0x98>
    f6d4:	21c00736 	bltu	r4,r7,f6f4 <__fpcmp_parts_d+0xb4>
    f6d8:	11800236 	bltu	r2,r6,f6e4 <__fpcmp_parts_d+0xa4>
    f6dc:	3080031e 	bne	r6,r2,f6ec <__fpcmp_parts_d+0xac>
    f6e0:	3900022e 	bgeu	r7,r4,f6ec <__fpcmp_parts_d+0xac>
    f6e4:	183fe926 	beq	r3,zero,f68c <_gp+0xffff2e10>
    f6e8:	003fec06 	br	f69c <_gp+0xffff2e20>
    f6ec:	0005883a 	mov	r2,zero
    f6f0:	f800283a 	ret
    f6f4:	183fe926 	beq	r3,zero,f69c <_gp+0xffff2e20>
    f6f8:	003fe406 	br	f68c <_gp+0xffff2e10>
    f6fc:	30ffe51e 	bne	r6,r3,f694 <_gp+0xffff2e18>
    f700:	28c00117 	ldw	r3,4(r5)
    f704:	20800117 	ldw	r2,4(r4)
    f708:	1885c83a 	sub	r2,r3,r2
    f70c:	f800283a 	ret

0000f710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f710:	defffe04 	addi	sp,sp,-8
    f714:	dfc00115 	stw	ra,4(sp)
    f718:	df000015 	stw	fp,0(sp)
    f71c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f720:	00800074 	movhi	r2,1
    f724:	10922a04 	addi	r2,r2,18600
    f728:	10800017 	ldw	r2,0(r2)
    f72c:	10000526 	beq	r2,zero,f744 <alt_get_errno+0x34>
    f730:	00800074 	movhi	r2,1
    f734:	10922a04 	addi	r2,r2,18600
    f738:	10800017 	ldw	r2,0(r2)
    f73c:	103ee83a 	callr	r2
    f740:	00000206 	br	f74c <alt_get_errno+0x3c>
    f744:	00800074 	movhi	r2,1
    f748:	1098c904 	addi	r2,r2,25380
}
    f74c:	e037883a 	mov	sp,fp
    f750:	dfc00117 	ldw	ra,4(sp)
    f754:	df000017 	ldw	fp,0(sp)
    f758:	dec00204 	addi	sp,sp,8
    f75c:	f800283a 	ret

0000f760 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f760:	defffb04 	addi	sp,sp,-20
    f764:	dfc00415 	stw	ra,16(sp)
    f768:	df000315 	stw	fp,12(sp)
    f76c:	df000304 	addi	fp,sp,12
    f770:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f774:	e0bfff17 	ldw	r2,-4(fp)
    f778:	10000616 	blt	r2,zero,f794 <close+0x34>
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	10c00324 	muli	r3,r2,12
    f784:	00800074 	movhi	r2,1
    f788:	108da704 	addi	r2,r2,13980
    f78c:	1885883a 	add	r2,r3,r2
    f790:	00000106 	br	f798 <close+0x38>
    f794:	0005883a 	mov	r2,zero
    f798:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f79c:	e0bffd17 	ldw	r2,-12(fp)
    f7a0:	10001826 	beq	r2,zero,f804 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f7a4:	e0bffd17 	ldw	r2,-12(fp)
    f7a8:	10800017 	ldw	r2,0(r2)
    f7ac:	10800417 	ldw	r2,16(r2)
    f7b0:	10000626 	beq	r2,zero,f7cc <close+0x6c>
    f7b4:	e0bffd17 	ldw	r2,-12(fp)
    f7b8:	10800017 	ldw	r2,0(r2)
    f7bc:	10800417 	ldw	r2,16(r2)
    f7c0:	e13ffd17 	ldw	r4,-12(fp)
    f7c4:	103ee83a 	callr	r2
    f7c8:	00000106 	br	f7d0 <close+0x70>
    f7cc:	0005883a 	mov	r2,zero
    f7d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f7d4:	e13fff17 	ldw	r4,-4(fp)
    f7d8:	000fe440 	call	fe44 <alt_release_fd>
    if (rval < 0)
    f7dc:	e0bffe17 	ldw	r2,-8(fp)
    f7e0:	1000060e 	bge	r2,zero,f7fc <close+0x9c>
    {
      ALT_ERRNO = -rval;
    f7e4:	000f7100 	call	f710 <alt_get_errno>
    f7e8:	e0fffe17 	ldw	r3,-8(fp)
    f7ec:	00c7c83a 	sub	r3,zero,r3
    f7f0:	10c00015 	stw	r3,0(r2)
      return -1;
    f7f4:	00bfffc4 	movi	r2,-1
    f7f8:	00000606 	br	f814 <close+0xb4>
    }
    return 0;
    f7fc:	0005883a 	mov	r2,zero
    f800:	00000406 	br	f814 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f804:	000f7100 	call	f710 <alt_get_errno>
    f808:	00c01444 	movi	r3,81
    f80c:	10c00015 	stw	r3,0(r2)
    return -1;
    f810:	00bfffc4 	movi	r2,-1
  }
}
    f814:	e037883a 	mov	sp,fp
    f818:	dfc00117 	ldw	ra,4(sp)
    f81c:	df000017 	ldw	fp,0(sp)
    f820:	dec00204 	addi	sp,sp,8
    f824:	f800283a 	ret

0000f828 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f828:	defffc04 	addi	sp,sp,-16
    f82c:	df000315 	stw	fp,12(sp)
    f830:	df000304 	addi	fp,sp,12
    f834:	e13ffd15 	stw	r4,-12(fp)
    f838:	e17ffe15 	stw	r5,-8(fp)
    f83c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f840:	e0bfff17 	ldw	r2,-4(fp)
}
    f844:	e037883a 	mov	sp,fp
    f848:	df000017 	ldw	fp,0(sp)
    f84c:	dec00104 	addi	sp,sp,4
    f850:	f800283a 	ret

0000f854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f854:	defffe04 	addi	sp,sp,-8
    f858:	dfc00115 	stw	ra,4(sp)
    f85c:	df000015 	stw	fp,0(sp)
    f860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f864:	00800074 	movhi	r2,1
    f868:	10922a04 	addi	r2,r2,18600
    f86c:	10800017 	ldw	r2,0(r2)
    f870:	10000526 	beq	r2,zero,f888 <alt_get_errno+0x34>
    f874:	00800074 	movhi	r2,1
    f878:	10922a04 	addi	r2,r2,18600
    f87c:	10800017 	ldw	r2,0(r2)
    f880:	103ee83a 	callr	r2
    f884:	00000206 	br	f890 <alt_get_errno+0x3c>
    f888:	00800074 	movhi	r2,1
    f88c:	1098c904 	addi	r2,r2,25380
}
    f890:	e037883a 	mov	sp,fp
    f894:	dfc00117 	ldw	ra,4(sp)
    f898:	df000017 	ldw	fp,0(sp)
    f89c:	dec00204 	addi	sp,sp,8
    f8a0:	f800283a 	ret

0000f8a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f8a4:	defffb04 	addi	sp,sp,-20
    f8a8:	dfc00415 	stw	ra,16(sp)
    f8ac:	df000315 	stw	fp,12(sp)
    f8b0:	df000304 	addi	fp,sp,12
    f8b4:	e13ffe15 	stw	r4,-8(fp)
    f8b8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f8bc:	e0bffe17 	ldw	r2,-8(fp)
    f8c0:	10000616 	blt	r2,zero,f8dc <fstat+0x38>
    f8c4:	e0bffe17 	ldw	r2,-8(fp)
    f8c8:	10c00324 	muli	r3,r2,12
    f8cc:	00800074 	movhi	r2,1
    f8d0:	108da704 	addi	r2,r2,13980
    f8d4:	1885883a 	add	r2,r3,r2
    f8d8:	00000106 	br	f8e0 <fstat+0x3c>
    f8dc:	0005883a 	mov	r2,zero
    f8e0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f8e4:	e0bffd17 	ldw	r2,-12(fp)
    f8e8:	10001026 	beq	r2,zero,f92c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f8ec:	e0bffd17 	ldw	r2,-12(fp)
    f8f0:	10800017 	ldw	r2,0(r2)
    f8f4:	10800817 	ldw	r2,32(r2)
    f8f8:	10000726 	beq	r2,zero,f918 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f8fc:	e0bffd17 	ldw	r2,-12(fp)
    f900:	10800017 	ldw	r2,0(r2)
    f904:	10800817 	ldw	r2,32(r2)
    f908:	e13ffd17 	ldw	r4,-12(fp)
    f90c:	e17fff17 	ldw	r5,-4(fp)
    f910:	103ee83a 	callr	r2
    f914:	00000906 	br	f93c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f918:	e0bfff17 	ldw	r2,-4(fp)
    f91c:	00c80004 	movi	r3,8192
    f920:	10c00115 	stw	r3,4(r2)
      return 0;
    f924:	0005883a 	mov	r2,zero
    f928:	00000406 	br	f93c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f92c:	000f8540 	call	f854 <alt_get_errno>
    f930:	00c01444 	movi	r3,81
    f934:	10c00015 	stw	r3,0(r2)
    return -1;
    f938:	00bfffc4 	movi	r2,-1
  }
}
    f93c:	e037883a 	mov	sp,fp
    f940:	dfc00117 	ldw	ra,4(sp)
    f944:	df000017 	ldw	fp,0(sp)
    f948:	dec00204 	addi	sp,sp,8
    f94c:	f800283a 	ret

0000f950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f950:	defffe04 	addi	sp,sp,-8
    f954:	dfc00115 	stw	ra,4(sp)
    f958:	df000015 	stw	fp,0(sp)
    f95c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f960:	00800074 	movhi	r2,1
    f964:	10922a04 	addi	r2,r2,18600
    f968:	10800017 	ldw	r2,0(r2)
    f96c:	10000526 	beq	r2,zero,f984 <alt_get_errno+0x34>
    f970:	00800074 	movhi	r2,1
    f974:	10922a04 	addi	r2,r2,18600
    f978:	10800017 	ldw	r2,0(r2)
    f97c:	103ee83a 	callr	r2
    f980:	00000206 	br	f98c <alt_get_errno+0x3c>
    f984:	00800074 	movhi	r2,1
    f988:	1098c904 	addi	r2,r2,25380
}
    f98c:	e037883a 	mov	sp,fp
    f990:	dfc00117 	ldw	ra,4(sp)
    f994:	df000017 	ldw	fp,0(sp)
    f998:	dec00204 	addi	sp,sp,8
    f99c:	f800283a 	ret

0000f9a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f9a0:	deffed04 	addi	sp,sp,-76
    f9a4:	dfc01215 	stw	ra,72(sp)
    f9a8:	df001115 	stw	fp,68(sp)
    f9ac:	df001104 	addi	fp,sp,68
    f9b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f9b4:	e0bfff17 	ldw	r2,-4(fp)
    f9b8:	10000616 	blt	r2,zero,f9d4 <isatty+0x34>
    f9bc:	e0bfff17 	ldw	r2,-4(fp)
    f9c0:	10c00324 	muli	r3,r2,12
    f9c4:	00800074 	movhi	r2,1
    f9c8:	108da704 	addi	r2,r2,13980
    f9cc:	1885883a 	add	r2,r3,r2
    f9d0:	00000106 	br	f9d8 <isatty+0x38>
    f9d4:	0005883a 	mov	r2,zero
    f9d8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f9dc:	e0bfef17 	ldw	r2,-68(fp)
    f9e0:	10000e26 	beq	r2,zero,fa1c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f9e4:	e0bfef17 	ldw	r2,-68(fp)
    f9e8:	10800017 	ldw	r2,0(r2)
    f9ec:	10800817 	ldw	r2,32(r2)
    f9f0:	1000021e 	bne	r2,zero,f9fc <isatty+0x5c>
    {
      return 1;
    f9f4:	00800044 	movi	r2,1
    f9f8:	00000c06 	br	fa2c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f9fc:	e0bff004 	addi	r2,fp,-64
    fa00:	e13fff17 	ldw	r4,-4(fp)
    fa04:	100b883a 	mov	r5,r2
    fa08:	000f8a40 	call	f8a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fa0c:	e0bff117 	ldw	r2,-60(fp)
    fa10:	10880020 	cmpeqi	r2,r2,8192
    fa14:	10803fcc 	andi	r2,r2,255
    fa18:	00000406 	br	fa2c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fa1c:	000f9500 	call	f950 <alt_get_errno>
    fa20:	00c01444 	movi	r3,81
    fa24:	10c00015 	stw	r3,0(r2)
    return 0;
    fa28:	0005883a 	mov	r2,zero
  }
}
    fa2c:	e037883a 	mov	sp,fp
    fa30:	dfc00117 	ldw	ra,4(sp)
    fa34:	df000017 	ldw	fp,0(sp)
    fa38:	dec00204 	addi	sp,sp,8
    fa3c:	f800283a 	ret

0000fa40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    fa40:	defffc04 	addi	sp,sp,-16
    fa44:	df000315 	stw	fp,12(sp)
    fa48:	df000304 	addi	fp,sp,12
    fa4c:	e13ffd15 	stw	r4,-12(fp)
    fa50:	e17ffe15 	stw	r5,-8(fp)
    fa54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    fa58:	e0fffe17 	ldw	r3,-8(fp)
    fa5c:	e0bffd17 	ldw	r2,-12(fp)
    fa60:	18800e26 	beq	r3,r2,fa9c <alt_load_section+0x5c>
  {
    while( to != end )
    fa64:	00000a06 	br	fa90 <alt_load_section+0x50>
    {
      *to++ = *from++;
    fa68:	e0bffd17 	ldw	r2,-12(fp)
    fa6c:	10c00017 	ldw	r3,0(r2)
    fa70:	e0bffe17 	ldw	r2,-8(fp)
    fa74:	10c00015 	stw	r3,0(r2)
    fa78:	e0bffe17 	ldw	r2,-8(fp)
    fa7c:	10800104 	addi	r2,r2,4
    fa80:	e0bffe15 	stw	r2,-8(fp)
    fa84:	e0bffd17 	ldw	r2,-12(fp)
    fa88:	10800104 	addi	r2,r2,4
    fa8c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    fa90:	e0fffe17 	ldw	r3,-8(fp)
    fa94:	e0bfff17 	ldw	r2,-4(fp)
    fa98:	18bff31e 	bne	r3,r2,fa68 <_gp+0xffff31ec>
    {
      *to++ = *from++;
    }
  }
}
    fa9c:	e037883a 	mov	sp,fp
    faa0:	df000017 	ldw	fp,0(sp)
    faa4:	dec00104 	addi	sp,sp,4
    faa8:	f800283a 	ret

0000faac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    faac:	defffe04 	addi	sp,sp,-8
    fab0:	dfc00115 	stw	ra,4(sp)
    fab4:	df000015 	stw	fp,0(sp)
    fab8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fabc:	01000074 	movhi	r4,1
    fac0:	21122f04 	addi	r4,r4,18620
    fac4:	01400074 	movhi	r5,1
    fac8:	294b9804 	addi	r5,r5,11872
    facc:	01800074 	movhi	r6,1
    fad0:	31922f04 	addi	r6,r6,18620
    fad4:	000fa400 	call	fa40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fad8:	01000034 	movhi	r4,0
    fadc:	21000804 	addi	r4,r4,32
    fae0:	01400034 	movhi	r5,0
    fae4:	29400804 	addi	r5,r5,32
    fae8:	01800034 	movhi	r6,0
    faec:	31806e04 	addi	r6,r6,440
    faf0:	000fa400 	call	fa40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    faf4:	01000074 	movhi	r4,1
    faf8:	21081d04 	addi	r4,r4,8308
    fafc:	01400074 	movhi	r5,1
    fb00:	29481d04 	addi	r5,r5,8308
    fb04:	01800074 	movhi	r6,1
    fb08:	318b9804 	addi	r6,r6,11872
    fb0c:	000fa400 	call	fa40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fb10:	00111100 	call	11110 <alt_dcache_flush_all>
  alt_icache_flush_all();
    fb14:	00112fc0 	call	112fc <alt_icache_flush_all>
}
    fb18:	e037883a 	mov	sp,fp
    fb1c:	dfc00117 	ldw	ra,4(sp)
    fb20:	df000017 	ldw	fp,0(sp)
    fb24:	dec00204 	addi	sp,sp,8
    fb28:	f800283a 	ret

0000fb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb2c:	defffe04 	addi	sp,sp,-8
    fb30:	dfc00115 	stw	ra,4(sp)
    fb34:	df000015 	stw	fp,0(sp)
    fb38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb3c:	00800074 	movhi	r2,1
    fb40:	10922a04 	addi	r2,r2,18600
    fb44:	10800017 	ldw	r2,0(r2)
    fb48:	10000526 	beq	r2,zero,fb60 <alt_get_errno+0x34>
    fb4c:	00800074 	movhi	r2,1
    fb50:	10922a04 	addi	r2,r2,18600
    fb54:	10800017 	ldw	r2,0(r2)
    fb58:	103ee83a 	callr	r2
    fb5c:	00000206 	br	fb68 <alt_get_errno+0x3c>
    fb60:	00800074 	movhi	r2,1
    fb64:	1098c904 	addi	r2,r2,25380
}
    fb68:	e037883a 	mov	sp,fp
    fb6c:	dfc00117 	ldw	ra,4(sp)
    fb70:	df000017 	ldw	fp,0(sp)
    fb74:	dec00204 	addi	sp,sp,8
    fb78:	f800283a 	ret

0000fb7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fb7c:	defff904 	addi	sp,sp,-28
    fb80:	dfc00615 	stw	ra,24(sp)
    fb84:	df000515 	stw	fp,20(sp)
    fb88:	df000504 	addi	fp,sp,20
    fb8c:	e13ffd15 	stw	r4,-12(fp)
    fb90:	e17ffe15 	stw	r5,-8(fp)
    fb94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fb98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb9c:	e0bffd17 	ldw	r2,-12(fp)
    fba0:	10000616 	blt	r2,zero,fbbc <lseek+0x40>
    fba4:	e0bffd17 	ldw	r2,-12(fp)
    fba8:	10c00324 	muli	r3,r2,12
    fbac:	00800074 	movhi	r2,1
    fbb0:	108da704 	addi	r2,r2,13980
    fbb4:	1885883a 	add	r2,r3,r2
    fbb8:	00000106 	br	fbc0 <lseek+0x44>
    fbbc:	0005883a 	mov	r2,zero
    fbc0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fbc4:	e0bffc17 	ldw	r2,-16(fp)
    fbc8:	10001026 	beq	r2,zero,fc0c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fbcc:	e0bffc17 	ldw	r2,-16(fp)
    fbd0:	10800017 	ldw	r2,0(r2)
    fbd4:	10800717 	ldw	r2,28(r2)
    fbd8:	10000926 	beq	r2,zero,fc00 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fbdc:	e0bffc17 	ldw	r2,-16(fp)
    fbe0:	10800017 	ldw	r2,0(r2)
    fbe4:	10800717 	ldw	r2,28(r2)
    fbe8:	e13ffc17 	ldw	r4,-16(fp)
    fbec:	e17ffe17 	ldw	r5,-8(fp)
    fbf0:	e1bfff17 	ldw	r6,-4(fp)
    fbf4:	103ee83a 	callr	r2
    fbf8:	e0bffb15 	stw	r2,-20(fp)
    fbfc:	00000506 	br	fc14 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fc00:	00bfde84 	movi	r2,-134
    fc04:	e0bffb15 	stw	r2,-20(fp)
    fc08:	00000206 	br	fc14 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    fc0c:	00bfebc4 	movi	r2,-81
    fc10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fc14:	e0bffb17 	ldw	r2,-20(fp)
    fc18:	1000060e 	bge	r2,zero,fc34 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
    fc1c:	000fb2c0 	call	fb2c <alt_get_errno>
    fc20:	e0fffb17 	ldw	r3,-20(fp)
    fc24:	00c7c83a 	sub	r3,zero,r3
    fc28:	10c00015 	stw	r3,0(r2)
    rc = -1;
    fc2c:	00bfffc4 	movi	r2,-1
    fc30:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fc34:	e0bffb17 	ldw	r2,-20(fp)
}
    fc38:	e037883a 	mov	sp,fp
    fc3c:	dfc00117 	ldw	ra,4(sp)
    fc40:	df000017 	ldw	fp,0(sp)
    fc44:	dec00204 	addi	sp,sp,8
    fc48:	f800283a 	ret

0000fc4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    fc4c:	defffd04 	addi	sp,sp,-12
    fc50:	dfc00215 	stw	ra,8(sp)
    fc54:	df000115 	stw	fp,4(sp)
    fc58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    fc5c:	0009883a 	mov	r4,zero
    fc60:	00102940 	call	10294 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    fc64:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    fc68:	00102c80 	call	102c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    fc6c:	01000074 	movhi	r4,1
    fc70:	210b9004 	addi	r4,r4,11840
    fc74:	01400074 	movhi	r5,1
    fc78:	294b9004 	addi	r5,r5,11840
    fc7c:	01800074 	movhi	r6,1
    fc80:	318b9004 	addi	r6,r6,11840
    fc84:	00116b40 	call	116b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fc88:	00112440 	call	11244 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fc8c:	01000074 	movhi	r4,1
    fc90:	2104a804 	addi	r4,r4,4768
    fc94:	0011ca00 	call	11ca0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fc98:	d126ae17 	ldw	r4,-25928(gp)
    fc9c:	d0e6af17 	ldw	r3,-25924(gp)
    fca0:	d0a6b017 	ldw	r2,-25920(gp)
    fca4:	180b883a 	mov	r5,r3
    fca8:	100d883a 	mov	r6,r2
    fcac:	00004b40 	call	4b4 <main>
    fcb0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    fcb4:	01000044 	movi	r4,1
    fcb8:	000f7600 	call	f760 <close>
  exit (result);
    fcbc:	e13fff17 	ldw	r4,-4(fp)
    fcc0:	0011cb40 	call	11cb4 <exit>

0000fcc4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fcc4:	defffe04 	addi	sp,sp,-8
    fcc8:	df000115 	stw	fp,4(sp)
    fccc:	df000104 	addi	fp,sp,4
    fcd0:	e13fff15 	stw	r4,-4(fp)
}
    fcd4:	e037883a 	mov	sp,fp
    fcd8:	df000017 	ldw	fp,0(sp)
    fcdc:	dec00104 	addi	sp,sp,4
    fce0:	f800283a 	ret

0000fce4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fce4:	defffe04 	addi	sp,sp,-8
    fce8:	df000115 	stw	fp,4(sp)
    fcec:	df000104 	addi	fp,sp,4
    fcf0:	e13fff15 	stw	r4,-4(fp)
}
    fcf4:	e037883a 	mov	sp,fp
    fcf8:	df000017 	ldw	fp,0(sp)
    fcfc:	dec00104 	addi	sp,sp,4
    fd00:	f800283a 	ret

0000fd04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fd04:	defffe04 	addi	sp,sp,-8
    fd08:	dfc00115 	stw	ra,4(sp)
    fd0c:	df000015 	stw	fp,0(sp)
    fd10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fd14:	00800074 	movhi	r2,1
    fd18:	10922a04 	addi	r2,r2,18600
    fd1c:	10800017 	ldw	r2,0(r2)
    fd20:	10000526 	beq	r2,zero,fd38 <alt_get_errno+0x34>
    fd24:	00800074 	movhi	r2,1
    fd28:	10922a04 	addi	r2,r2,18600
    fd2c:	10800017 	ldw	r2,0(r2)
    fd30:	103ee83a 	callr	r2
    fd34:	00000206 	br	fd40 <alt_get_errno+0x3c>
    fd38:	00800074 	movhi	r2,1
    fd3c:	1098c904 	addi	r2,r2,25380
}
    fd40:	e037883a 	mov	sp,fp
    fd44:	dfc00117 	ldw	ra,4(sp)
    fd48:	df000017 	ldw	fp,0(sp)
    fd4c:	dec00204 	addi	sp,sp,8
    fd50:	f800283a 	ret

0000fd54 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fd54:	defff904 	addi	sp,sp,-28
    fd58:	dfc00615 	stw	ra,24(sp)
    fd5c:	df000515 	stw	fp,20(sp)
    fd60:	df000504 	addi	fp,sp,20
    fd64:	e13ffd15 	stw	r4,-12(fp)
    fd68:	e17ffe15 	stw	r5,-8(fp)
    fd6c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fd70:	e0bffd17 	ldw	r2,-12(fp)
    fd74:	10000616 	blt	r2,zero,fd90 <read+0x3c>
    fd78:	e0bffd17 	ldw	r2,-12(fp)
    fd7c:	10c00324 	muli	r3,r2,12
    fd80:	00800074 	movhi	r2,1
    fd84:	108da704 	addi	r2,r2,13980
    fd88:	1885883a 	add	r2,r3,r2
    fd8c:	00000106 	br	fd94 <read+0x40>
    fd90:	0005883a 	mov	r2,zero
    fd94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fd98:	e0bffb17 	ldw	r2,-20(fp)
    fd9c:	10002026 	beq	r2,zero,fe20 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fda0:	e0bffb17 	ldw	r2,-20(fp)
    fda4:	10800217 	ldw	r2,8(r2)
    fda8:	108000cc 	andi	r2,r2,3
    fdac:	10800060 	cmpeqi	r2,r2,1
    fdb0:	1000171e 	bne	r2,zero,fe10 <read+0xbc>
        (fd->dev->read))
    fdb4:	e0bffb17 	ldw	r2,-20(fp)
    fdb8:	10800017 	ldw	r2,0(r2)
    fdbc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fdc0:	10001326 	beq	r2,zero,fe10 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fdc4:	e0bffb17 	ldw	r2,-20(fp)
    fdc8:	10800017 	ldw	r2,0(r2)
    fdcc:	10c00517 	ldw	r3,20(r2)
    fdd0:	e0bfff17 	ldw	r2,-4(fp)
    fdd4:	e13ffb17 	ldw	r4,-20(fp)
    fdd8:	e17ffe17 	ldw	r5,-8(fp)
    fddc:	100d883a 	mov	r6,r2
    fde0:	183ee83a 	callr	r3
    fde4:	e0bffc15 	stw	r2,-16(fp)
    fde8:	e0bffc17 	ldw	r2,-16(fp)
    fdec:	1000060e 	bge	r2,zero,fe08 <read+0xb4>
        {
          ALT_ERRNO = -rval;
    fdf0:	000fd040 	call	fd04 <alt_get_errno>
    fdf4:	e0fffc17 	ldw	r3,-16(fp)
    fdf8:	00c7c83a 	sub	r3,zero,r3
    fdfc:	10c00015 	stw	r3,0(r2)
          return -1;
    fe00:	00bfffc4 	movi	r2,-1
    fe04:	00000a06 	br	fe30 <read+0xdc>
        }
        return rval;
    fe08:	e0bffc17 	ldw	r2,-16(fp)
    fe0c:	00000806 	br	fe30 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fe10:	000fd040 	call	fd04 <alt_get_errno>
    fe14:	00c00344 	movi	r3,13
    fe18:	10c00015 	stw	r3,0(r2)
    fe1c:	00000306 	br	fe2c <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fe20:	000fd040 	call	fd04 <alt_get_errno>
    fe24:	00c01444 	movi	r3,81
    fe28:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    fe2c:	00bfffc4 	movi	r2,-1
}
    fe30:	e037883a 	mov	sp,fp
    fe34:	dfc00117 	ldw	ra,4(sp)
    fe38:	df000017 	ldw	fp,0(sp)
    fe3c:	dec00204 	addi	sp,sp,8
    fe40:	f800283a 	ret

0000fe44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fe44:	defffe04 	addi	sp,sp,-8
    fe48:	df000115 	stw	fp,4(sp)
    fe4c:	df000104 	addi	fp,sp,4
    fe50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fe54:	e0bfff17 	ldw	r2,-4(fp)
    fe58:	108000d0 	cmplti	r2,r2,3
    fe5c:	10000d1e 	bne	r2,zero,fe94 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fe60:	00c00074 	movhi	r3,1
    fe64:	18cda704 	addi	r3,r3,13980
    fe68:	e0bfff17 	ldw	r2,-4(fp)
    fe6c:	10800324 	muli	r2,r2,12
    fe70:	1885883a 	add	r2,r3,r2
    fe74:	10800204 	addi	r2,r2,8
    fe78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fe7c:	00c00074 	movhi	r3,1
    fe80:	18cda704 	addi	r3,r3,13980
    fe84:	e0bfff17 	ldw	r2,-4(fp)
    fe88:	10800324 	muli	r2,r2,12
    fe8c:	1885883a 	add	r2,r3,r2
    fe90:	10000015 	stw	zero,0(r2)
  }
}
    fe94:	e037883a 	mov	sp,fp
    fe98:	df000017 	ldw	fp,0(sp)
    fe9c:	dec00104 	addi	sp,sp,4
    fea0:	f800283a 	ret

0000fea4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fea4:	defff904 	addi	sp,sp,-28
    fea8:	df000615 	stw	fp,24(sp)
    feac:	df000604 	addi	fp,sp,24
    feb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    feb4:	0005303a 	rdctl	r2,status
    feb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    febc:	e0fffc17 	ldw	r3,-16(fp)
    fec0:	00bfff84 	movi	r2,-2
    fec4:	1884703a 	and	r2,r3,r2
    fec8:	1001703a 	wrctl	status,r2
  
  return context;
    fecc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fed0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fed4:	d0a00c17 	ldw	r2,-32720(gp)
    fed8:	10c000c4 	addi	r3,r2,3
    fedc:	00bfff04 	movi	r2,-4
    fee0:	1884703a 	and	r2,r3,r2
    fee4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fee8:	d0e00c17 	ldw	r3,-32720(gp)
    feec:	e0bfff17 	ldw	r2,-4(fp)
    fef0:	1885883a 	add	r2,r3,r2
    fef4:	00c000b4 	movhi	r3,2
    fef8:	18e1a804 	addi	r3,r3,-31072
    fefc:	1880062e 	bgeu	r3,r2,ff18 <sbrk+0x74>
    ff00:	e0bffa17 	ldw	r2,-24(fp)
    ff04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff08:	e0bffd17 	ldw	r2,-12(fp)
    ff0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ff10:	00bfffc4 	movi	r2,-1
    ff14:	00000b06 	br	ff44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ff18:	d0a00c17 	ldw	r2,-32720(gp)
    ff1c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    ff20:	d0e00c17 	ldw	r3,-32720(gp)
    ff24:	e0bfff17 	ldw	r2,-4(fp)
    ff28:	1885883a 	add	r2,r3,r2
    ff2c:	d0a00c15 	stw	r2,-32720(gp)
    ff30:	e0bffa17 	ldw	r2,-24(fp)
    ff34:	e0bffe15 	stw	r2,-8(fp)
    ff38:	e0bffe17 	ldw	r2,-8(fp)
    ff3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ff40:	e0bffb17 	ldw	r2,-20(fp)
} 
    ff44:	e037883a 	mov	sp,fp
    ff48:	df000017 	ldw	fp,0(sp)
    ff4c:	dec00104 	addi	sp,sp,4
    ff50:	f800283a 	ret

0000ff54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ff54:	defffa04 	addi	sp,sp,-24
    ff58:	df000515 	stw	fp,20(sp)
    ff5c:	df000504 	addi	fp,sp,20
    ff60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff64:	0005303a 	rdctl	r2,status
    ff68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff6c:	e0fffc17 	ldw	r3,-16(fp)
    ff70:	00bfff84 	movi	r2,-2
    ff74:	1884703a 	and	r2,r3,r2
    ff78:	1001703a 	wrctl	status,r2
  
  return context;
    ff7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ff80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    ff84:	e0bfff17 	ldw	r2,-4(fp)
    ff88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ff8c:	e0bffd17 	ldw	r2,-12(fp)
    ff90:	10800017 	ldw	r2,0(r2)
    ff94:	e0fffd17 	ldw	r3,-12(fp)
    ff98:	18c00117 	ldw	r3,4(r3)
    ff9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ffa0:	e0bffd17 	ldw	r2,-12(fp)
    ffa4:	10800117 	ldw	r2,4(r2)
    ffa8:	e0fffd17 	ldw	r3,-12(fp)
    ffac:	18c00017 	ldw	r3,0(r3)
    ffb0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ffb4:	e0bffd17 	ldw	r2,-12(fp)
    ffb8:	e0fffd17 	ldw	r3,-12(fp)
    ffbc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ffc0:	e0bffd17 	ldw	r2,-12(fp)
    ffc4:	e0fffd17 	ldw	r3,-12(fp)
    ffc8:	10c00015 	stw	r3,0(r2)
    ffcc:	e0bffb17 	ldw	r2,-20(fp)
    ffd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffd4:	e0bffe17 	ldw	r2,-8(fp)
    ffd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    ffdc:	e037883a 	mov	sp,fp
    ffe0:	df000017 	ldw	fp,0(sp)
    ffe4:	dec00104 	addi	sp,sp,4
    ffe8:	f800283a 	ret

0000ffec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ffec:	defffb04 	addi	sp,sp,-20
    fff0:	dfc00415 	stw	ra,16(sp)
    fff4:	df000315 	stw	fp,12(sp)
    fff8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fffc:	d0a00d17 	ldw	r2,-32716(gp)
   10000:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10004:	d0a6b217 	ldw	r2,-25912(gp)
   10008:	10800044 	addi	r2,r2,1
   1000c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10010:	00002e06 	br	100cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10014:	e0bffd17 	ldw	r2,-12(fp)
   10018:	10800017 	ldw	r2,0(r2)
   1001c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10020:	e0bffd17 	ldw	r2,-12(fp)
   10024:	10800403 	ldbu	r2,16(r2)
   10028:	10803fcc 	andi	r2,r2,255
   1002c:	10000426 	beq	r2,zero,10040 <alt_tick+0x54>
   10030:	d0a6b217 	ldw	r2,-25912(gp)
   10034:	1000021e 	bne	r2,zero,10040 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10038:	e0bffd17 	ldw	r2,-12(fp)
   1003c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10040:	e0bffd17 	ldw	r2,-12(fp)
   10044:	10800217 	ldw	r2,8(r2)
   10048:	d0e6b217 	ldw	r3,-25912(gp)
   1004c:	18801d36 	bltu	r3,r2,100c4 <alt_tick+0xd8>
   10050:	e0bffd17 	ldw	r2,-12(fp)
   10054:	10800403 	ldbu	r2,16(r2)
   10058:	10803fcc 	andi	r2,r2,255
   1005c:	1000191e 	bne	r2,zero,100c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10060:	e0bffd17 	ldw	r2,-12(fp)
   10064:	10c00317 	ldw	r3,12(r2)
   10068:	e0bffd17 	ldw	r2,-12(fp)
   1006c:	10800517 	ldw	r2,20(r2)
   10070:	1009883a 	mov	r4,r2
   10074:	183ee83a 	callr	r3
   10078:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1007c:	e0bfff17 	ldw	r2,-4(fp)
   10080:	1000031e 	bne	r2,zero,10090 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10084:	e13ffd17 	ldw	r4,-12(fp)
   10088:	000ff540 	call	ff54 <alt_alarm_stop>
   1008c:	00000d06 	br	100c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10090:	e0bffd17 	ldw	r2,-12(fp)
   10094:	10c00217 	ldw	r3,8(r2)
   10098:	e0bfff17 	ldw	r2,-4(fp)
   1009c:	1887883a 	add	r3,r3,r2
   100a0:	e0bffd17 	ldw	r2,-12(fp)
   100a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   100a8:	e0bffd17 	ldw	r2,-12(fp)
   100ac:	10c00217 	ldw	r3,8(r2)
   100b0:	d0a6b217 	ldw	r2,-25912(gp)
   100b4:	1880032e 	bgeu	r3,r2,100c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   100b8:	e0bffd17 	ldw	r2,-12(fp)
   100bc:	00c00044 	movi	r3,1
   100c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   100c4:	e0bffe17 	ldw	r2,-8(fp)
   100c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   100cc:	e0fffd17 	ldw	r3,-12(fp)
   100d0:	d0a00d04 	addi	r2,gp,-32716
   100d4:	18bfcf1e 	bne	r3,r2,10014 <_gp+0xffff3798>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   100d8:	0001883a 	nop
}
   100dc:	e037883a 	mov	sp,fp
   100e0:	dfc00117 	ldw	ra,4(sp)
   100e4:	df000017 	ldw	fp,0(sp)
   100e8:	dec00204 	addi	sp,sp,8
   100ec:	f800283a 	ret

000100f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   100f0:	defffd04 	addi	sp,sp,-12
   100f4:	dfc00215 	stw	ra,8(sp)
   100f8:	df000115 	stw	fp,4(sp)
   100fc:	df000104 	addi	fp,sp,4
   10100:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10104:	e13fff17 	ldw	r4,-4(fp)
   10108:	0010fbc0 	call	10fbc <alt_busy_sleep>
}
   1010c:	e037883a 	mov	sp,fp
   10110:	dfc00117 	ldw	ra,4(sp)
   10114:	df000017 	ldw	fp,0(sp)
   10118:	dec00204 	addi	sp,sp,8
   1011c:	f800283a 	ret

00010120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10120:	defffe04 	addi	sp,sp,-8
   10124:	dfc00115 	stw	ra,4(sp)
   10128:	df000015 	stw	fp,0(sp)
   1012c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10130:	00800074 	movhi	r2,1
   10134:	10922a04 	addi	r2,r2,18600
   10138:	10800017 	ldw	r2,0(r2)
   1013c:	10000526 	beq	r2,zero,10154 <alt_get_errno+0x34>
   10140:	00800074 	movhi	r2,1
   10144:	10922a04 	addi	r2,r2,18600
   10148:	10800017 	ldw	r2,0(r2)
   1014c:	103ee83a 	callr	r2
   10150:	00000206 	br	1015c <alt_get_errno+0x3c>
   10154:	00800074 	movhi	r2,1
   10158:	1098c904 	addi	r2,r2,25380
}
   1015c:	e037883a 	mov	sp,fp
   10160:	dfc00117 	ldw	ra,4(sp)
   10164:	df000017 	ldw	fp,0(sp)
   10168:	dec00204 	addi	sp,sp,8
   1016c:	f800283a 	ret

00010170 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10170:	defff904 	addi	sp,sp,-28
   10174:	dfc00615 	stw	ra,24(sp)
   10178:	df000515 	stw	fp,20(sp)
   1017c:	df000504 	addi	fp,sp,20
   10180:	e13ffd15 	stw	r4,-12(fp)
   10184:	e17ffe15 	stw	r5,-8(fp)
   10188:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10000616 	blt	r2,zero,101ac <write+0x3c>
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10c00324 	muli	r3,r2,12
   1019c:	00800074 	movhi	r2,1
   101a0:	108da704 	addi	r2,r2,13980
   101a4:	1885883a 	add	r2,r3,r2
   101a8:	00000106 	br	101b0 <write+0x40>
   101ac:	0005883a 	mov	r2,zero
   101b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   101b4:	e0bffb17 	ldw	r2,-20(fp)
   101b8:	10001f26 	beq	r2,zero,10238 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   101bc:	e0bffb17 	ldw	r2,-20(fp)
   101c0:	10800217 	ldw	r2,8(r2)
   101c4:	108000cc 	andi	r2,r2,3
   101c8:	10001726 	beq	r2,zero,10228 <write+0xb8>
   101cc:	e0bffb17 	ldw	r2,-20(fp)
   101d0:	10800017 	ldw	r2,0(r2)
   101d4:	10800617 	ldw	r2,24(r2)
   101d8:	10001326 	beq	r2,zero,10228 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   101dc:	e0bffb17 	ldw	r2,-20(fp)
   101e0:	10800017 	ldw	r2,0(r2)
   101e4:	10c00617 	ldw	r3,24(r2)
   101e8:	e0bfff17 	ldw	r2,-4(fp)
   101ec:	e13ffb17 	ldw	r4,-20(fp)
   101f0:	e17ffe17 	ldw	r5,-8(fp)
   101f4:	100d883a 	mov	r6,r2
   101f8:	183ee83a 	callr	r3
   101fc:	e0bffc15 	stw	r2,-16(fp)
   10200:	e0bffc17 	ldw	r2,-16(fp)
   10204:	1000060e 	bge	r2,zero,10220 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   10208:	00101200 	call	10120 <alt_get_errno>
   1020c:	e0fffc17 	ldw	r3,-16(fp)
   10210:	00c7c83a 	sub	r3,zero,r3
   10214:	10c00015 	stw	r3,0(r2)
        return -1;
   10218:	00bfffc4 	movi	r2,-1
   1021c:	00000a06 	br	10248 <write+0xd8>
      }
      return rval;
   10220:	e0bffc17 	ldw	r2,-16(fp)
   10224:	00000806 	br	10248 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10228:	00101200 	call	10120 <alt_get_errno>
   1022c:	00c00344 	movi	r3,13
   10230:	10c00015 	stw	r3,0(r2)
   10234:	00000306 	br	10244 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10238:	00101200 	call	10120 <alt_get_errno>
   1023c:	00c01444 	movi	r3,81
   10240:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   10244:	00bfffc4 	movi	r2,-1
}
   10248:	e037883a 	mov	sp,fp
   1024c:	dfc00117 	ldw	ra,4(sp)
   10250:	df000017 	ldw	fp,0(sp)
   10254:	dec00204 	addi	sp,sp,8
   10258:	f800283a 	ret

0001025c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1025c:	defffd04 	addi	sp,sp,-12
   10260:	dfc00215 	stw	ra,8(sp)
   10264:	df000115 	stw	fp,4(sp)
   10268:	df000104 	addi	fp,sp,4
   1026c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10270:	e13fff17 	ldw	r4,-4(fp)
   10274:	01400074 	movhi	r5,1
   10278:	29522704 	addi	r5,r5,18588
   1027c:	00111a40 	call	111a4 <alt_dev_llist_insert>
}
   10280:	e037883a 	mov	sp,fp
   10284:	dfc00117 	ldw	ra,4(sp)
   10288:	df000017 	ldw	fp,0(sp)
   1028c:	dec00204 	addi	sp,sp,8
   10290:	f800283a 	ret

00010294 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10294:	defffd04 	addi	sp,sp,-12
   10298:	dfc00215 	stw	ra,8(sp)
   1029c:	df000115 	stw	fp,4(sp)
   102a0:	df000104 	addi	fp,sp,4
   102a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   102a8:	001199c0 	call	1199c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   102ac:	00800044 	movi	r2,1
   102b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   102b4:	e037883a 	mov	sp,fp
   102b8:	dfc00117 	ldw	ra,4(sp)
   102bc:	df000017 	ldw	fp,0(sp)
   102c0:	dec00204 	addi	sp,sp,8
   102c4:	f800283a 	ret

000102c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   102c8:	defffe04 	addi	sp,sp,-8
   102cc:	dfc00115 	stw	ra,4(sp)
   102d0:	df000015 	stw	fp,0(sp)
   102d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   102d8:	01004034 	movhi	r4,256
   102dc:	000b883a 	mov	r5,zero
   102e0:	000d883a 	mov	r6,zero
   102e4:	01c0fa04 	movi	r7,1000
   102e8:	0010df40 	call	10df4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   102ec:	01000074 	movhi	r4,1
   102f0:	210e1104 	addi	r4,r4,14404
   102f4:	000b883a 	mov	r5,zero
   102f8:	01800104 	movi	r6,4
   102fc:	00104840 	call	10484 <altera_avalon_jtag_uart_init>
   10300:	01000074 	movhi	r4,1
   10304:	210e0704 	addi	r4,r4,14364
   10308:	001025c0 	call	1025c <alt_dev_reg>
}
   1030c:	e037883a 	mov	sp,fp
   10310:	dfc00117 	ldw	ra,4(sp)
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00204 	addi	sp,sp,8
   1031c:	f800283a 	ret

00010320 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10320:	defffa04 	addi	sp,sp,-24
   10324:	dfc00515 	stw	ra,20(sp)
   10328:	df000415 	stw	fp,16(sp)
   1032c:	df000404 	addi	fp,sp,16
   10330:	e13ffd15 	stw	r4,-12(fp)
   10334:	e17ffe15 	stw	r5,-8(fp)
   10338:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	10800017 	ldw	r2,0(r2)
   10344:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10348:	e0bffc17 	ldw	r2,-16(fp)
   1034c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   10350:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10354:	10800217 	ldw	r2,8(r2)
   10358:	1809883a 	mov	r4,r3
   1035c:	e17ffe17 	ldw	r5,-8(fp)
   10360:	e1bfff17 	ldw	r6,-4(fp)
   10364:	100f883a 	mov	r7,r2
   10368:	00109480 	call	10948 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1036c:	e037883a 	mov	sp,fp
   10370:	dfc00117 	ldw	ra,4(sp)
   10374:	df000017 	ldw	fp,0(sp)
   10378:	dec00204 	addi	sp,sp,8
   1037c:	f800283a 	ret

00010380 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10380:	defffa04 	addi	sp,sp,-24
   10384:	dfc00515 	stw	ra,20(sp)
   10388:	df000415 	stw	fp,16(sp)
   1038c:	df000404 	addi	fp,sp,16
   10390:	e13ffd15 	stw	r4,-12(fp)
   10394:	e17ffe15 	stw	r5,-8(fp)
   10398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1039c:	e0bffd17 	ldw	r2,-12(fp)
   103a0:	10800017 	ldw	r2,0(r2)
   103a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   103a8:	e0bffc17 	ldw	r2,-16(fp)
   103ac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   103b0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   103b4:	10800217 	ldw	r2,8(r2)
   103b8:	1809883a 	mov	r4,r3
   103bc:	e17ffe17 	ldw	r5,-8(fp)
   103c0:	e1bfff17 	ldw	r6,-4(fp)
   103c4:	100f883a 	mov	r7,r2
   103c8:	0010b600 	call	10b60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   103cc:	e037883a 	mov	sp,fp
   103d0:	dfc00117 	ldw	ra,4(sp)
   103d4:	df000017 	ldw	fp,0(sp)
   103d8:	dec00204 	addi	sp,sp,8
   103dc:	f800283a 	ret

000103e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   103e0:	defffc04 	addi	sp,sp,-16
   103e4:	dfc00315 	stw	ra,12(sp)
   103e8:	df000215 	stw	fp,8(sp)
   103ec:	df000204 	addi	fp,sp,8
   103f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   103f4:	e0bfff17 	ldw	r2,-4(fp)
   103f8:	10800017 	ldw	r2,0(r2)
   103fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10400:	e0bffe17 	ldw	r2,-8(fp)
   10404:	10c00a04 	addi	r3,r2,40
   10408:	e0bfff17 	ldw	r2,-4(fp)
   1040c:	10800217 	ldw	r2,8(r2)
   10410:	1809883a 	mov	r4,r3
   10414:	100b883a 	mov	r5,r2
   10418:	00107ec0 	call	107ec <altera_avalon_jtag_uart_close>
}
   1041c:	e037883a 	mov	sp,fp
   10420:	dfc00117 	ldw	ra,4(sp)
   10424:	df000017 	ldw	fp,0(sp)
   10428:	dec00204 	addi	sp,sp,8
   1042c:	f800283a 	ret

00010430 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10430:	defffa04 	addi	sp,sp,-24
   10434:	dfc00515 	stw	ra,20(sp)
   10438:	df000415 	stw	fp,16(sp)
   1043c:	df000404 	addi	fp,sp,16
   10440:	e13ffd15 	stw	r4,-12(fp)
   10444:	e17ffe15 	stw	r5,-8(fp)
   10448:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1044c:	e0bffd17 	ldw	r2,-12(fp)
   10450:	10800017 	ldw	r2,0(r2)
   10454:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10800a04 	addi	r2,r2,40
   10460:	1009883a 	mov	r4,r2
   10464:	e17ffe17 	ldw	r5,-8(fp)
   10468:	e1bfff17 	ldw	r6,-4(fp)
   1046c:	00108540 	call	10854 <altera_avalon_jtag_uart_ioctl>
}
   10470:	e037883a 	mov	sp,fp
   10474:	dfc00117 	ldw	ra,4(sp)
   10478:	df000017 	ldw	fp,0(sp)
   1047c:	dec00204 	addi	sp,sp,8
   10480:	f800283a 	ret

00010484 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10484:	defffa04 	addi	sp,sp,-24
   10488:	dfc00515 	stw	ra,20(sp)
   1048c:	df000415 	stw	fp,16(sp)
   10490:	df000404 	addi	fp,sp,16
   10494:	e13ffd15 	stw	r4,-12(fp)
   10498:	e17ffe15 	stw	r5,-8(fp)
   1049c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   104a0:	e0bffd17 	ldw	r2,-12(fp)
   104a4:	00c00044 	movi	r3,1
   104a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   104ac:	e0bffd17 	ldw	r2,-12(fp)
   104b0:	10800017 	ldw	r2,0(r2)
   104b4:	10800104 	addi	r2,r2,4
   104b8:	e0fffd17 	ldw	r3,-12(fp)
   104bc:	18c00817 	ldw	r3,32(r3)
   104c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   104c4:	e0fffe17 	ldw	r3,-8(fp)
   104c8:	e0bfff17 	ldw	r2,-4(fp)
   104cc:	d8000015 	stw	zero,0(sp)
   104d0:	1809883a 	mov	r4,r3
   104d4:	100b883a 	mov	r5,r2
   104d8:	01800074 	movhi	r6,1
   104dc:	31815104 	addi	r6,r6,1348
   104e0:	e1fffd17 	ldw	r7,-12(fp)
   104e4:	001132c0 	call	1132c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   104e8:	e0bffd17 	ldw	r2,-12(fp)
   104ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   104f0:	e0bffd17 	ldw	r2,-12(fp)
   104f4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   104f8:	00800074 	movhi	r2,1
   104fc:	1098d004 	addi	r2,r2,25408
   10500:	10800017 	ldw	r2,0(r2)
   10504:	1809883a 	mov	r4,r3
   10508:	100b883a 	mov	r5,r2
   1050c:	01800074 	movhi	r6,1
   10510:	3181d204 	addi	r6,r6,1864
   10514:	e1fffd17 	ldw	r7,-12(fp)
   10518:	0010e7c0 	call	10e7c <alt_alarm_start>
   1051c:	1000040e 	bge	r2,zero,10530 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10520:	e0bffd17 	ldw	r2,-12(fp)
   10524:	00e00034 	movhi	r3,32768
   10528:	18ffffc4 	addi	r3,r3,-1
   1052c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10530:	e037883a 	mov	sp,fp
   10534:	dfc00117 	ldw	ra,4(sp)
   10538:	df000017 	ldw	fp,0(sp)
   1053c:	dec00204 	addi	sp,sp,8
   10540:	f800283a 	ret

00010544 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10544:	defff804 	addi	sp,sp,-32
   10548:	df000715 	stw	fp,28(sp)
   1054c:	df000704 	addi	fp,sp,28
   10550:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10554:	e0bfff17 	ldw	r2,-4(fp)
   10558:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1055c:	e0bffb17 	ldw	r2,-20(fp)
   10560:	10800017 	ldw	r2,0(r2)
   10564:	e0bffc15 	stw	r2,-16(fp)
   10568:	00000106 	br	10570 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   1056c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10570:	e0bffc17 	ldw	r2,-16(fp)
   10574:	10800104 	addi	r2,r2,4
   10578:	10800037 	ldwio	r2,0(r2)
   1057c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10580:	e0bffd17 	ldw	r2,-12(fp)
   10584:	1080c00c 	andi	r2,r2,768
   10588:	10006a26 	beq	r2,zero,10734 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1058c:	e0bffd17 	ldw	r2,-12(fp)
   10590:	1080400c 	andi	r2,r2,256
   10594:	10003326 	beq	r2,zero,10664 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10598:	00800074 	movhi	r2,1
   1059c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   105a0:	e0bffb17 	ldw	r2,-20(fp)
   105a4:	10800a17 	ldw	r2,40(r2)
   105a8:	10800044 	addi	r2,r2,1
   105ac:	1081ffcc 	andi	r2,r2,2047
   105b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   105b4:	e0bffb17 	ldw	r2,-20(fp)
   105b8:	10c00b17 	ldw	r3,44(r2)
   105bc:	e0bffe17 	ldw	r2,-8(fp)
   105c0:	18801426 	beq	r3,r2,10614 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	10800037 	ldwio	r2,0(r2)
   105cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   105d0:	e0bff917 	ldw	r2,-28(fp)
   105d4:	10a0000c 	andi	r2,r2,32768
   105d8:	10001026 	beq	r2,zero,1061c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   105dc:	e0bffb17 	ldw	r2,-20(fp)
   105e0:	10800a17 	ldw	r2,40(r2)
   105e4:	e0fff917 	ldw	r3,-28(fp)
   105e8:	e13ffb17 	ldw	r4,-20(fp)
   105ec:	2085883a 	add	r2,r4,r2
   105f0:	10800e04 	addi	r2,r2,56
   105f4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   105f8:	e0bffb17 	ldw	r2,-20(fp)
   105fc:	10800a17 	ldw	r2,40(r2)
   10600:	10800044 	addi	r2,r2,1
   10604:	10c1ffcc 	andi	r3,r2,2047
   10608:	e0bffb17 	ldw	r2,-20(fp)
   1060c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10610:	003fe306 	br	105a0 <_gp+0xffff3d24>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10614:	0001883a 	nop
   10618:	00000106 	br	10620 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1061c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10620:	e0bff917 	ldw	r2,-28(fp)
   10624:	10bfffec 	andhi	r2,r2,65535
   10628:	10000e26 	beq	r2,zero,10664 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1062c:	e0bffb17 	ldw	r2,-20(fp)
   10630:	10c00817 	ldw	r3,32(r2)
   10634:	00bfff84 	movi	r2,-2
   10638:	1886703a 	and	r3,r3,r2
   1063c:	e0bffb17 	ldw	r2,-20(fp)
   10640:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10644:	e0bffc17 	ldw	r2,-16(fp)
   10648:	10800104 	addi	r2,r2,4
   1064c:	e0fffb17 	ldw	r3,-20(fp)
   10650:	18c00817 	ldw	r3,32(r3)
   10654:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10658:	e0bffc17 	ldw	r2,-16(fp)
   1065c:	10800104 	addi	r2,r2,4
   10660:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10664:	e0bffd17 	ldw	r2,-12(fp)
   10668:	1080800c 	andi	r2,r2,512
   1066c:	103fbf26 	beq	r2,zero,1056c <_gp+0xffff3cf0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	1004d43a 	srli	r2,r2,16
   10678:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1067c:	00001406 	br	106d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10680:	e0bffc17 	ldw	r2,-16(fp)
   10684:	e0fffb17 	ldw	r3,-20(fp)
   10688:	18c00d17 	ldw	r3,52(r3)
   1068c:	e13ffb17 	ldw	r4,-20(fp)
   10690:	20c7883a 	add	r3,r4,r3
   10694:	18c20e04 	addi	r3,r3,2104
   10698:	18c00003 	ldbu	r3,0(r3)
   1069c:	18c03fcc 	andi	r3,r3,255
   106a0:	18c0201c 	xori	r3,r3,128
   106a4:	18ffe004 	addi	r3,r3,-128
   106a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106ac:	e0bffb17 	ldw	r2,-20(fp)
   106b0:	10800d17 	ldw	r2,52(r2)
   106b4:	10800044 	addi	r2,r2,1
   106b8:	10c1ffcc 	andi	r3,r2,2047
   106bc:	e0bffb17 	ldw	r2,-20(fp)
   106c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   106c4:	e0bffa17 	ldw	r2,-24(fp)
   106c8:	10bfffc4 	addi	r2,r2,-1
   106cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   106d0:	e0bffa17 	ldw	r2,-24(fp)
   106d4:	10000526 	beq	r2,zero,106ec <altera_avalon_jtag_uart_irq+0x1a8>
   106d8:	e0bffb17 	ldw	r2,-20(fp)
   106dc:	10c00d17 	ldw	r3,52(r2)
   106e0:	e0bffb17 	ldw	r2,-20(fp)
   106e4:	10800c17 	ldw	r2,48(r2)
   106e8:	18bfe51e 	bne	r3,r2,10680 <_gp+0xffff3e04>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   106ec:	e0bffa17 	ldw	r2,-24(fp)
   106f0:	103f9e26 	beq	r2,zero,1056c <_gp+0xffff3cf0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106f4:	e0bffb17 	ldw	r2,-20(fp)
   106f8:	10c00817 	ldw	r3,32(r2)
   106fc:	00bfff44 	movi	r2,-3
   10700:	1886703a 	and	r3,r3,r2
   10704:	e0bffb17 	ldw	r2,-20(fp)
   10708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1070c:	e0bffb17 	ldw	r2,-20(fp)
   10710:	10800017 	ldw	r2,0(r2)
   10714:	10800104 	addi	r2,r2,4
   10718:	e0fffb17 	ldw	r3,-20(fp)
   1071c:	18c00817 	ldw	r3,32(r3)
   10720:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10724:	e0bffc17 	ldw	r2,-16(fp)
   10728:	10800104 	addi	r2,r2,4
   1072c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10730:	003f8e06 	br	1056c <_gp+0xffff3cf0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10734:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10738:	e037883a 	mov	sp,fp
   1073c:	df000017 	ldw	fp,0(sp)
   10740:	dec00104 	addi	sp,sp,4
   10744:	f800283a 	ret

00010748 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10748:	defffc04 	addi	sp,sp,-16
   1074c:	df000315 	stw	fp,12(sp)
   10750:	df000304 	addi	fp,sp,12
   10754:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10760:	e0bffd17 	ldw	r2,-12(fp)
   10764:	10800017 	ldw	r2,0(r2)
   10768:	10800104 	addi	r2,r2,4
   1076c:	10800037 	ldwio	r2,0(r2)
   10770:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10774:	e0bffe17 	ldw	r2,-8(fp)
   10778:	1081000c 	andi	r2,r2,1024
   1077c:	10000a26 	beq	r2,zero,107a8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10780:	e0bffd17 	ldw	r2,-12(fp)
   10784:	10800017 	ldw	r2,0(r2)
   10788:	10800104 	addi	r2,r2,4
   1078c:	e0fffd17 	ldw	r3,-12(fp)
   10790:	18c00817 	ldw	r3,32(r3)
   10794:	18c10014 	ori	r3,r3,1024
   10798:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1079c:	e0bffd17 	ldw	r2,-12(fp)
   107a0:	10000915 	stw	zero,36(r2)
   107a4:	00000a06 	br	107d0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   107a8:	e0bffd17 	ldw	r2,-12(fp)
   107ac:	10800917 	ldw	r2,36(r2)
   107b0:	00e00034 	movhi	r3,32768
   107b4:	18ffff04 	addi	r3,r3,-4
   107b8:	18800536 	bltu	r3,r2,107d0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   107bc:	e0bffd17 	ldw	r2,-12(fp)
   107c0:	10800917 	ldw	r2,36(r2)
   107c4:	10c00044 	addi	r3,r2,1
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10c00915 	stw	r3,36(r2)
   107d0:	00800074 	movhi	r2,1
   107d4:	1098d004 	addi	r2,r2,25408
   107d8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   107dc:	e037883a 	mov	sp,fp
   107e0:	df000017 	ldw	fp,0(sp)
   107e4:	dec00104 	addi	sp,sp,4
   107e8:	f800283a 	ret

000107ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   107ec:	defffd04 	addi	sp,sp,-12
   107f0:	df000215 	stw	fp,8(sp)
   107f4:	df000204 	addi	fp,sp,8
   107f8:	e13ffe15 	stw	r4,-8(fp)
   107fc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10800:	00000506 	br	10818 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10804:	e0bfff17 	ldw	r2,-4(fp)
   10808:	1090000c 	andi	r2,r2,16384
   1080c:	10000226 	beq	r2,zero,10818 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10810:	00bffd44 	movi	r2,-11
   10814:	00000b06 	br	10844 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10818:	e0bffe17 	ldw	r2,-8(fp)
   1081c:	10c00d17 	ldw	r3,52(r2)
   10820:	e0bffe17 	ldw	r2,-8(fp)
   10824:	10800c17 	ldw	r2,48(r2)
   10828:	18800526 	beq	r3,r2,10840 <altera_avalon_jtag_uart_close+0x54>
   1082c:	e0bffe17 	ldw	r2,-8(fp)
   10830:	10c00917 	ldw	r3,36(r2)
   10834:	e0bffe17 	ldw	r2,-8(fp)
   10838:	10800117 	ldw	r2,4(r2)
   1083c:	18bff136 	bltu	r3,r2,10804 <_gp+0xffff3f88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10840:	0005883a 	mov	r2,zero
}
   10844:	e037883a 	mov	sp,fp
   10848:	df000017 	ldw	fp,0(sp)
   1084c:	dec00104 	addi	sp,sp,4
   10850:	f800283a 	ret

00010854 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10854:	defffa04 	addi	sp,sp,-24
   10858:	df000515 	stw	fp,20(sp)
   1085c:	df000504 	addi	fp,sp,20
   10860:	e13ffd15 	stw	r4,-12(fp)
   10864:	e17ffe15 	stw	r5,-8(fp)
   10868:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1086c:	00bff9c4 	movi	r2,-25
   10870:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10874:	e0bffe17 	ldw	r2,-8(fp)
   10878:	10da8060 	cmpeqi	r3,r2,27137
   1087c:	1800031e 	bne	r3,zero,1088c <altera_avalon_jtag_uart_ioctl+0x38>
   10880:	109a80a0 	cmpeqi	r2,r2,27138
   10884:	1000181e 	bne	r2,zero,108e8 <altera_avalon_jtag_uart_ioctl+0x94>
   10888:	00002606 	br	10924 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10c00117 	ldw	r3,4(r2)
   10894:	00a00034 	movhi	r2,32768
   10898:	10bfffc4 	addi	r2,r2,-1
   1089c:	18802226 	beq	r3,r2,10928 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   108a0:	e0bfff17 	ldw	r2,-4(fp)
   108a4:	10800017 	ldw	r2,0(r2)
   108a8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   108ac:	e0bffc17 	ldw	r2,-16(fp)
   108b0:	10800090 	cmplti	r2,r2,2
   108b4:	1000061e 	bne	r2,zero,108d0 <altera_avalon_jtag_uart_ioctl+0x7c>
   108b8:	e0fffc17 	ldw	r3,-16(fp)
   108bc:	00a00034 	movhi	r2,32768
   108c0:	10bfffc4 	addi	r2,r2,-1
   108c4:	18800226 	beq	r3,r2,108d0 <altera_avalon_jtag_uart_ioctl+0x7c>
   108c8:	e0bffc17 	ldw	r2,-16(fp)
   108cc:	00000206 	br	108d8 <altera_avalon_jtag_uart_ioctl+0x84>
   108d0:	00a00034 	movhi	r2,32768
   108d4:	10bfff84 	addi	r2,r2,-2
   108d8:	e0fffd17 	ldw	r3,-12(fp)
   108dc:	18800115 	stw	r2,4(r3)
      rc = 0;
   108e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   108e4:	00001006 	br	10928 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   108e8:	e0bffd17 	ldw	r2,-12(fp)
   108ec:	10c00117 	ldw	r3,4(r2)
   108f0:	00a00034 	movhi	r2,32768
   108f4:	10bfffc4 	addi	r2,r2,-1
   108f8:	18800d26 	beq	r3,r2,10930 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   108fc:	e0bffd17 	ldw	r2,-12(fp)
   10900:	10c00917 	ldw	r3,36(r2)
   10904:	e0bffd17 	ldw	r2,-12(fp)
   10908:	10800117 	ldw	r2,4(r2)
   1090c:	1885803a 	cmpltu	r2,r3,r2
   10910:	10c03fcc 	andi	r3,r2,255
   10914:	e0bfff17 	ldw	r2,-4(fp)
   10918:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1091c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10920:	00000306 	br	10930 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   10924:	00000306 	br	10934 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10928:	0001883a 	nop
   1092c:	00000106 	br	10934 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10930:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10934:	e0bffb17 	ldw	r2,-20(fp)
}
   10938:	e037883a 	mov	sp,fp
   1093c:	df000017 	ldw	fp,0(sp)
   10940:	dec00104 	addi	sp,sp,4
   10944:	f800283a 	ret

00010948 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10948:	defff304 	addi	sp,sp,-52
   1094c:	dfc00c15 	stw	ra,48(sp)
   10950:	df000b15 	stw	fp,44(sp)
   10954:	df000b04 	addi	fp,sp,44
   10958:	e13ffc15 	stw	r4,-16(fp)
   1095c:	e17ffd15 	stw	r5,-12(fp)
   10960:	e1bffe15 	stw	r6,-8(fp)
   10964:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10968:	e0bffd17 	ldw	r2,-12(fp)
   1096c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10970:	00004706 	br	10a90 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10974:	e0bffc17 	ldw	r2,-16(fp)
   10978:	10800a17 	ldw	r2,40(r2)
   1097c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10980:	e0bffc17 	ldw	r2,-16(fp)
   10984:	10800b17 	ldw	r2,44(r2)
   10988:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1098c:	e0fff717 	ldw	r3,-36(fp)
   10990:	e0bff817 	ldw	r2,-32(fp)
   10994:	18800536 	bltu	r3,r2,109ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10998:	e0fff717 	ldw	r3,-36(fp)
   1099c:	e0bff817 	ldw	r2,-32(fp)
   109a0:	1885c83a 	sub	r2,r3,r2
   109a4:	e0bff615 	stw	r2,-40(fp)
   109a8:	00000406 	br	109bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   109ac:	00c20004 	movi	r3,2048
   109b0:	e0bff817 	ldw	r2,-32(fp)
   109b4:	1885c83a 	sub	r2,r3,r2
   109b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   109bc:	e0bff617 	ldw	r2,-40(fp)
   109c0:	10001e26 	beq	r2,zero,10a3c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   109c4:	e0fffe17 	ldw	r3,-8(fp)
   109c8:	e0bff617 	ldw	r2,-40(fp)
   109cc:	1880022e 	bgeu	r3,r2,109d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   109d0:	e0bffe17 	ldw	r2,-8(fp)
   109d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   109d8:	e0bff817 	ldw	r2,-32(fp)
   109dc:	10800e04 	addi	r2,r2,56
   109e0:	e0fffc17 	ldw	r3,-16(fp)
   109e4:	1885883a 	add	r2,r3,r2
   109e8:	e13ff517 	ldw	r4,-44(fp)
   109ec:	100b883a 	mov	r5,r2
   109f0:	e1bff617 	ldw	r6,-40(fp)
   109f4:	0006de80 	call	6de8 <memcpy>
      ptr   += n;
   109f8:	e0fff517 	ldw	r3,-44(fp)
   109fc:	e0bff617 	ldw	r2,-40(fp)
   10a00:	1885883a 	add	r2,r3,r2
   10a04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10a08:	e0fffe17 	ldw	r3,-8(fp)
   10a0c:	e0bff617 	ldw	r2,-40(fp)
   10a10:	1885c83a 	sub	r2,r3,r2
   10a14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10a18:	e0fff817 	ldw	r3,-32(fp)
   10a1c:	e0bff617 	ldw	r2,-40(fp)
   10a20:	1885883a 	add	r2,r3,r2
   10a24:	10c1ffcc 	andi	r3,r2,2047
   10a28:	e0bffc17 	ldw	r2,-16(fp)
   10a2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10a30:	e0bffe17 	ldw	r2,-8(fp)
   10a34:	00bfcf16 	blt	zero,r2,10974 <_gp+0xffff40f8>
   10a38:	00000106 	br	10a40 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10a3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10a40:	e0fff517 	ldw	r3,-44(fp)
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	1880141e 	bne	r3,r2,10a9c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10a4c:	e0bfff17 	ldw	r2,-4(fp)
   10a50:	1090000c 	andi	r2,r2,16384
   10a54:	1000131e 	bne	r2,zero,10aa4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10a58:	0001883a 	nop
   10a5c:	e0bffc17 	ldw	r2,-16(fp)
   10a60:	10c00a17 	ldw	r3,40(r2)
   10a64:	e0bff717 	ldw	r2,-36(fp)
   10a68:	1880051e 	bne	r3,r2,10a80 <altera_avalon_jtag_uart_read+0x138>
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	10c00917 	ldw	r3,36(r2)
   10a74:	e0bffc17 	ldw	r2,-16(fp)
   10a78:	10800117 	ldw	r2,4(r2)
   10a7c:	18bff736 	bltu	r3,r2,10a5c <_gp+0xffff41e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10a80:	e0bffc17 	ldw	r2,-16(fp)
   10a84:	10c00a17 	ldw	r3,40(r2)
   10a88:	e0bff717 	ldw	r2,-36(fp)
   10a8c:	18800726 	beq	r3,r2,10aac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10a90:	e0bffe17 	ldw	r2,-8(fp)
   10a94:	00bfb716 	blt	zero,r2,10974 <_gp+0xffff40f8>
   10a98:	00000506 	br	10ab0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   10a9c:	0001883a 	nop
   10aa0:	00000306 	br	10ab0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   10aa4:	0001883a 	nop
   10aa8:	00000106 	br	10ab0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   10aac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10ab0:	e0fff517 	ldw	r3,-44(fp)
   10ab4:	e0bffd17 	ldw	r2,-12(fp)
   10ab8:	18801726 	beq	r3,r2,10b18 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10abc:	0005303a 	rdctl	r2,status
   10ac0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ac4:	e0fffa17 	ldw	r3,-24(fp)
   10ac8:	00bfff84 	movi	r2,-2
   10acc:	1884703a 	and	r2,r3,r2
   10ad0:	1001703a 	wrctl	status,r2
  
  return context;
   10ad4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10ad8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10adc:	e0bffc17 	ldw	r2,-16(fp)
   10ae0:	10800817 	ldw	r2,32(r2)
   10ae4:	10c00054 	ori	r3,r2,1
   10ae8:	e0bffc17 	ldw	r2,-16(fp)
   10aec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10af0:	e0bffc17 	ldw	r2,-16(fp)
   10af4:	10800017 	ldw	r2,0(r2)
   10af8:	10800104 	addi	r2,r2,4
   10afc:	e0fffc17 	ldw	r3,-16(fp)
   10b00:	18c00817 	ldw	r3,32(r3)
   10b04:	10c00035 	stwio	r3,0(r2)
   10b08:	e0bff917 	ldw	r2,-28(fp)
   10b0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b10:	e0bffb17 	ldw	r2,-20(fp)
   10b14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10b18:	e0fff517 	ldw	r3,-44(fp)
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	18800426 	beq	r3,r2,10b34 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   10b24:	e0fff517 	ldw	r3,-44(fp)
   10b28:	e0bffd17 	ldw	r2,-12(fp)
   10b2c:	1885c83a 	sub	r2,r3,r2
   10b30:	00000606 	br	10b4c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   10b34:	e0bfff17 	ldw	r2,-4(fp)
   10b38:	1090000c 	andi	r2,r2,16384
   10b3c:	10000226 	beq	r2,zero,10b48 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   10b40:	00bffd44 	movi	r2,-11
   10b44:	00000106 	br	10b4c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   10b48:	00bffec4 	movi	r2,-5
}
   10b4c:	e037883a 	mov	sp,fp
   10b50:	dfc00117 	ldw	ra,4(sp)
   10b54:	df000017 	ldw	fp,0(sp)
   10b58:	dec00204 	addi	sp,sp,8
   10b5c:	f800283a 	ret

00010b60 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10b60:	defff304 	addi	sp,sp,-52
   10b64:	dfc00c15 	stw	ra,48(sp)
   10b68:	df000b15 	stw	fp,44(sp)
   10b6c:	df000b04 	addi	fp,sp,44
   10b70:	e13ffc15 	stw	r4,-16(fp)
   10b74:	e17ffd15 	stw	r5,-12(fp)
   10b78:	e1bffe15 	stw	r6,-8(fp)
   10b7c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10b80:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10b84:	e0bffd17 	ldw	r2,-12(fp)
   10b88:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10b8c:	00003706 	br	10c6c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10b90:	e0bffc17 	ldw	r2,-16(fp)
   10b94:	10800c17 	ldw	r2,48(r2)
   10b98:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   10b9c:	e0bffc17 	ldw	r2,-16(fp)
   10ba0:	10800d17 	ldw	r2,52(r2)
   10ba4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10ba8:	e0fff817 	ldw	r3,-32(fp)
   10bac:	e0bff517 	ldw	r2,-44(fp)
   10bb0:	1880062e 	bgeu	r3,r2,10bcc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10bb4:	e0fff517 	ldw	r3,-44(fp)
   10bb8:	e0bff817 	ldw	r2,-32(fp)
   10bbc:	1885c83a 	sub	r2,r3,r2
   10bc0:	10bfffc4 	addi	r2,r2,-1
   10bc4:	e0bff615 	stw	r2,-40(fp)
   10bc8:	00000b06 	br	10bf8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10bcc:	e0bff517 	ldw	r2,-44(fp)
   10bd0:	10000526 	beq	r2,zero,10be8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10bd4:	00c20004 	movi	r3,2048
   10bd8:	e0bff817 	ldw	r2,-32(fp)
   10bdc:	1885c83a 	sub	r2,r3,r2
   10be0:	e0bff615 	stw	r2,-40(fp)
   10be4:	00000406 	br	10bf8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10be8:	00c1ffc4 	movi	r3,2047
   10bec:	e0bff817 	ldw	r2,-32(fp)
   10bf0:	1885c83a 	sub	r2,r3,r2
   10bf4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10bf8:	e0bff617 	ldw	r2,-40(fp)
   10bfc:	10001e26 	beq	r2,zero,10c78 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10c00:	e0fffe17 	ldw	r3,-8(fp)
   10c04:	e0bff617 	ldw	r2,-40(fp)
   10c08:	1880022e 	bgeu	r3,r2,10c14 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10c0c:	e0bffe17 	ldw	r2,-8(fp)
   10c10:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10c14:	e0bff817 	ldw	r2,-32(fp)
   10c18:	10820e04 	addi	r2,r2,2104
   10c1c:	e0fffc17 	ldw	r3,-16(fp)
   10c20:	1885883a 	add	r2,r3,r2
   10c24:	1009883a 	mov	r4,r2
   10c28:	e17ffd17 	ldw	r5,-12(fp)
   10c2c:	e1bff617 	ldw	r6,-40(fp)
   10c30:	0006de80 	call	6de8 <memcpy>
      ptr   += n;
   10c34:	e0fffd17 	ldw	r3,-12(fp)
   10c38:	e0bff617 	ldw	r2,-40(fp)
   10c3c:	1885883a 	add	r2,r3,r2
   10c40:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10c44:	e0fffe17 	ldw	r3,-8(fp)
   10c48:	e0bff617 	ldw	r2,-40(fp)
   10c4c:	1885c83a 	sub	r2,r3,r2
   10c50:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c54:	e0fff817 	ldw	r3,-32(fp)
   10c58:	e0bff617 	ldw	r2,-40(fp)
   10c5c:	1885883a 	add	r2,r3,r2
   10c60:	10c1ffcc 	andi	r3,r2,2047
   10c64:	e0bffc17 	ldw	r2,-16(fp)
   10c68:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10c6c:	e0bffe17 	ldw	r2,-8(fp)
   10c70:	00bfc716 	blt	zero,r2,10b90 <_gp+0xffff4314>
   10c74:	00000106 	br	10c7c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10c78:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c7c:	0005303a 	rdctl	r2,status
   10c80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c84:	e0fffa17 	ldw	r3,-24(fp)
   10c88:	00bfff84 	movi	r2,-2
   10c8c:	1884703a 	and	r2,r3,r2
   10c90:	1001703a 	wrctl	status,r2
  
  return context;
   10c94:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10c98:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10c9c:	e0bffc17 	ldw	r2,-16(fp)
   10ca0:	10800817 	ldw	r2,32(r2)
   10ca4:	10c00094 	ori	r3,r2,2
   10ca8:	e0bffc17 	ldw	r2,-16(fp)
   10cac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10cb0:	e0bffc17 	ldw	r2,-16(fp)
   10cb4:	10800017 	ldw	r2,0(r2)
   10cb8:	10800104 	addi	r2,r2,4
   10cbc:	e0fffc17 	ldw	r3,-16(fp)
   10cc0:	18c00817 	ldw	r3,32(r3)
   10cc4:	10c00035 	stwio	r3,0(r2)
   10cc8:	e0bff917 	ldw	r2,-28(fp)
   10ccc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cd0:	e0bffb17 	ldw	r2,-20(fp)
   10cd4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10cd8:	e0bffe17 	ldw	r2,-8(fp)
   10cdc:	0080100e 	bge	zero,r2,10d20 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
   10ce0:	e0bfff17 	ldw	r2,-4(fp)
   10ce4:	1090000c 	andi	r2,r2,16384
   10ce8:	1000101e 	bne	r2,zero,10d2c <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10cec:	0001883a 	nop
   10cf0:	e0bffc17 	ldw	r2,-16(fp)
   10cf4:	10c00d17 	ldw	r3,52(r2)
   10cf8:	e0bff517 	ldw	r2,-44(fp)
   10cfc:	1880051e 	bne	r3,r2,10d14 <altera_avalon_jtag_uart_write+0x1b4>
   10d00:	e0bffc17 	ldw	r2,-16(fp)
   10d04:	10c00917 	ldw	r3,36(r2)
   10d08:	e0bffc17 	ldw	r2,-16(fp)
   10d0c:	10800117 	ldw	r2,4(r2)
   10d10:	18bff736 	bltu	r3,r2,10cf0 <_gp+0xffff4474>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10d14:	e0bffc17 	ldw	r2,-16(fp)
   10d18:	10800917 	ldw	r2,36(r2)
   10d1c:	1000051e 	bne	r2,zero,10d34 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
   10d20:	e0bffe17 	ldw	r2,-8(fp)
   10d24:	00bfd116 	blt	zero,r2,10c6c <_gp+0xffff43f0>
   10d28:	00000306 	br	10d38 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10d2c:	0001883a 	nop
   10d30:	00000106 	br	10d38 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10d34:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10d38:	e0fffd17 	ldw	r3,-12(fp)
   10d3c:	e0bff717 	ldw	r2,-36(fp)
   10d40:	18800426 	beq	r3,r2,10d54 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
   10d44:	e0fffd17 	ldw	r3,-12(fp)
   10d48:	e0bff717 	ldw	r2,-36(fp)
   10d4c:	1885c83a 	sub	r2,r3,r2
   10d50:	00000606 	br	10d6c <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
   10d54:	e0bfff17 	ldw	r2,-4(fp)
   10d58:	1090000c 	andi	r2,r2,16384
   10d5c:	10000226 	beq	r2,zero,10d68 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
   10d60:	00bffd44 	movi	r2,-11
   10d64:	00000106 	br	10d6c <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10d68:	00bffec4 	movi	r2,-5
}
   10d6c:	e037883a 	mov	sp,fp
   10d70:	dfc00117 	ldw	ra,4(sp)
   10d74:	df000017 	ldw	fp,0(sp)
   10d78:	dec00204 	addi	sp,sp,8
   10d7c:	f800283a 	ret

00010d80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10d80:	defffa04 	addi	sp,sp,-24
   10d84:	dfc00515 	stw	ra,20(sp)
   10d88:	df000415 	stw	fp,16(sp)
   10d8c:	df000404 	addi	fp,sp,16
   10d90:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10d94:	0007883a 	mov	r3,zero
   10d98:	e0bfff17 	ldw	r2,-4(fp)
   10d9c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10da0:	e0bfff17 	ldw	r2,-4(fp)
   10da4:	10800104 	addi	r2,r2,4
   10da8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10dac:	0005303a 	rdctl	r2,status
   10db0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10db4:	e0fffd17 	ldw	r3,-12(fp)
   10db8:	00bfff84 	movi	r2,-2
   10dbc:	1884703a 	and	r2,r3,r2
   10dc0:	1001703a 	wrctl	status,r2
  
  return context;
   10dc4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10dc8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10dcc:	000ffec0 	call	ffec <alt_tick>
   10dd0:	e0bffc17 	ldw	r2,-16(fp)
   10dd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dd8:	e0bffe17 	ldw	r2,-8(fp)
   10ddc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10de0:	e037883a 	mov	sp,fp
   10de4:	dfc00117 	ldw	ra,4(sp)
   10de8:	df000017 	ldw	fp,0(sp)
   10dec:	dec00204 	addi	sp,sp,8
   10df0:	f800283a 	ret

00010df4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10df4:	defff804 	addi	sp,sp,-32
   10df8:	dfc00715 	stw	ra,28(sp)
   10dfc:	df000615 	stw	fp,24(sp)
   10e00:	df000604 	addi	fp,sp,24
   10e04:	e13ffc15 	stw	r4,-16(fp)
   10e08:	e17ffd15 	stw	r5,-12(fp)
   10e0c:	e1bffe15 	stw	r6,-8(fp)
   10e10:	e1ffff15 	stw	r7,-4(fp)
   10e14:	e0bfff17 	ldw	r2,-4(fp)
   10e18:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10e1c:	00800074 	movhi	r2,1
   10e20:	1098d004 	addi	r2,r2,25408
   10e24:	10800017 	ldw	r2,0(r2)
   10e28:	1000041e 	bne	r2,zero,10e3c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   10e2c:	00800074 	movhi	r2,1
   10e30:	1098d004 	addi	r2,r2,25408
   10e34:	e0fffb17 	ldw	r3,-20(fp)
   10e38:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10e3c:	e0bffc17 	ldw	r2,-16(fp)
   10e40:	10800104 	addi	r2,r2,4
   10e44:	00c001c4 	movi	r3,7
   10e48:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10e4c:	d8000015 	stw	zero,0(sp)
   10e50:	e13ffd17 	ldw	r4,-12(fp)
   10e54:	e17ffe17 	ldw	r5,-8(fp)
   10e58:	01800074 	movhi	r6,1
   10e5c:	31836004 	addi	r6,r6,3456
   10e60:	e1fffc17 	ldw	r7,-16(fp)
   10e64:	001132c0 	call	1132c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10e68:	e037883a 	mov	sp,fp
   10e6c:	dfc00117 	ldw	ra,4(sp)
   10e70:	df000017 	ldw	fp,0(sp)
   10e74:	dec00204 	addi	sp,sp,8
   10e78:	f800283a 	ret

00010e7c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10e7c:	defff504 	addi	sp,sp,-44
   10e80:	df000a15 	stw	fp,40(sp)
   10e84:	df000a04 	addi	fp,sp,40
   10e88:	e13ffc15 	stw	r4,-16(fp)
   10e8c:	e17ffd15 	stw	r5,-12(fp)
   10e90:	e1bffe15 	stw	r6,-8(fp)
   10e94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10e98:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e9c:	00800074 	movhi	r2,1
   10ea0:	1098d004 	addi	r2,r2,25408
   10ea4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10ea8:	10003f26 	beq	r2,zero,10fa8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10eac:	e0bffc17 	ldw	r2,-16(fp)
   10eb0:	10003b26 	beq	r2,zero,10fa0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10eb4:	e0bffc17 	ldw	r2,-16(fp)
   10eb8:	e0fffe17 	ldw	r3,-8(fp)
   10ebc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10ec0:	e0bffc17 	ldw	r2,-16(fp)
   10ec4:	e0ffff17 	ldw	r3,-4(fp)
   10ec8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ecc:	0005303a 	rdctl	r2,status
   10ed0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ed4:	e0fff817 	ldw	r3,-32(fp)
   10ed8:	00bfff84 	movi	r2,-2
   10edc:	1884703a 	and	r2,r3,r2
   10ee0:	1001703a 	wrctl	status,r2
  
  return context;
   10ee4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10ee8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10eec:	00800074 	movhi	r2,1
   10ef0:	1098d104 	addi	r2,r2,25412
   10ef4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10ef8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10efc:	e0fffd17 	ldw	r3,-12(fp)
   10f00:	e0bff617 	ldw	r2,-40(fp)
   10f04:	1885883a 	add	r2,r3,r2
   10f08:	10c00044 	addi	r3,r2,1
   10f0c:	e0bffc17 	ldw	r2,-16(fp)
   10f10:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10f14:	e0bffc17 	ldw	r2,-16(fp)
   10f18:	10c00217 	ldw	r3,8(r2)
   10f1c:	e0bff617 	ldw	r2,-40(fp)
   10f20:	1880042e 	bgeu	r3,r2,10f34 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10f24:	e0bffc17 	ldw	r2,-16(fp)
   10f28:	00c00044 	movi	r3,1
   10f2c:	10c00405 	stb	r3,16(r2)
   10f30:	00000206 	br	10f3c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10f34:	e0bffc17 	ldw	r2,-16(fp)
   10f38:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10f3c:	e0bffc17 	ldw	r2,-16(fp)
   10f40:	00c00074 	movhi	r3,1
   10f44:	18d22c04 	addi	r3,r3,18608
   10f48:	e0fff915 	stw	r3,-28(fp)
   10f4c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10f50:	e0bffa17 	ldw	r2,-24(fp)
   10f54:	e0fff917 	ldw	r3,-28(fp)
   10f58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10f5c:	e0bff917 	ldw	r2,-28(fp)
   10f60:	10c00017 	ldw	r3,0(r2)
   10f64:	e0bffa17 	ldw	r2,-24(fp)
   10f68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10f6c:	e0bff917 	ldw	r2,-28(fp)
   10f70:	10800017 	ldw	r2,0(r2)
   10f74:	e0fffa17 	ldw	r3,-24(fp)
   10f78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10f7c:	e0bff917 	ldw	r2,-28(fp)
   10f80:	e0fffa17 	ldw	r3,-24(fp)
   10f84:	10c00015 	stw	r3,0(r2)
   10f88:	e0bff717 	ldw	r2,-36(fp)
   10f8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f90:	e0bffb17 	ldw	r2,-20(fp)
   10f94:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10f98:	0005883a 	mov	r2,zero
   10f9c:	00000306 	br	10fac <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   10fa0:	00bffa84 	movi	r2,-22
   10fa4:	00000106 	br	10fac <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10fa8:	00bfde84 	movi	r2,-134
  }
}
   10fac:	e037883a 	mov	sp,fp
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00104 	addi	sp,sp,4
   10fb8:	f800283a 	ret

00010fbc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10fbc:	defffa04 	addi	sp,sp,-24
   10fc0:	dfc00515 	stw	ra,20(sp)
   10fc4:	df000415 	stw	fp,16(sp)
   10fc8:	df000404 	addi	fp,sp,16
   10fcc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10fd0:	008000c4 	movi	r2,3
   10fd4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10fd8:	e0fffd17 	ldw	r3,-12(fp)
   10fdc:	008003f4 	movhi	r2,15
   10fe0:	10909004 	addi	r2,r2,16960
   10fe4:	1885383a 	mul	r2,r3,r2
   10fe8:	01017db4 	movhi	r4,1526
   10fec:	21384004 	addi	r4,r4,-7936
   10ff0:	100b883a 	mov	r5,r2
   10ff4:	0005f500 	call	5f50 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10ff8:	01200034 	movhi	r4,32768
   10ffc:	213fffc4 	addi	r4,r4,-1
   11000:	100b883a 	mov	r5,r2
   11004:	0005f500 	call	5f50 <__udivsi3>
   11008:	e13fff17 	ldw	r4,-4(fp)
   1100c:	100b883a 	mov	r5,r2
   11010:	0005f500 	call	5f50 <__udivsi3>
   11014:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11018:	e0bffe17 	ldw	r2,-8(fp)
   1101c:	10002926 	beq	r2,zero,110c4 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   11020:	e03ffc15 	stw	zero,-16(fp)
   11024:	00001606 	br	11080 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11028:	00a00034 	movhi	r2,32768
   1102c:	10bfffc4 	addi	r2,r2,-1
   11030:	10bfffc4 	addi	r2,r2,-1
   11034:	103ffe1e 	bne	r2,zero,11030 <_gp+0xffff47b4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11038:	e0fffd17 	ldw	r3,-12(fp)
   1103c:	008003f4 	movhi	r2,15
   11040:	10909004 	addi	r2,r2,16960
   11044:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11048:	01017db4 	movhi	r4,1526
   1104c:	21384004 	addi	r4,r4,-7936
   11050:	100b883a 	mov	r5,r2
   11054:	0005f500 	call	5f50 <__udivsi3>
   11058:	01200034 	movhi	r4,32768
   1105c:	213fffc4 	addi	r4,r4,-1
   11060:	100b883a 	mov	r5,r2
   11064:	0005f500 	call	5f50 <__udivsi3>
   11068:	e0ffff17 	ldw	r3,-4(fp)
   1106c:	1885c83a 	sub	r2,r3,r2
   11070:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11074:	e0bffc17 	ldw	r2,-16(fp)
   11078:	10800044 	addi	r2,r2,1
   1107c:	e0bffc15 	stw	r2,-16(fp)
   11080:	e0fffc17 	ldw	r3,-16(fp)
   11084:	e0bffe17 	ldw	r2,-8(fp)
   11088:	18bfe716 	blt	r3,r2,11028 <_gp+0xffff47ac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1108c:	e0fffd17 	ldw	r3,-12(fp)
   11090:	008003f4 	movhi	r2,15
   11094:	10909004 	addi	r2,r2,16960
   11098:	1885383a 	mul	r2,r3,r2
   1109c:	01017db4 	movhi	r4,1526
   110a0:	21384004 	addi	r4,r4,-7936
   110a4:	100b883a 	mov	r5,r2
   110a8:	0005f500 	call	5f50 <__udivsi3>
   110ac:	1007883a 	mov	r3,r2
   110b0:	e0bfff17 	ldw	r2,-4(fp)
   110b4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   110b8:	10bfffc4 	addi	r2,r2,-1
   110bc:	103ffe1e 	bne	r2,zero,110b8 <_gp+0xffff483c>
   110c0:	00000d06 	br	110f8 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   110c4:	e0fffd17 	ldw	r3,-12(fp)
   110c8:	008003f4 	movhi	r2,15
   110cc:	10909004 	addi	r2,r2,16960
   110d0:	1885383a 	mul	r2,r3,r2
   110d4:	01017db4 	movhi	r4,1526
   110d8:	21384004 	addi	r4,r4,-7936
   110dc:	100b883a 	mov	r5,r2
   110e0:	0005f500 	call	5f50 <__udivsi3>
   110e4:	1007883a 	mov	r3,r2
   110e8:	e0bfff17 	ldw	r2,-4(fp)
   110ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   110f0:	10bfffc4 	addi	r2,r2,-1
   110f4:	00bffe16 	blt	zero,r2,110f0 <_gp+0xffff4874>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   110f8:	0005883a 	mov	r2,zero
}
   110fc:	e037883a 	mov	sp,fp
   11100:	dfc00117 	ldw	ra,4(sp)
   11104:	df000017 	ldw	fp,0(sp)
   11108:	dec00204 	addi	sp,sp,8
   1110c:	f800283a 	ret

00011110 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11110:	defffe04 	addi	sp,sp,-8
   11114:	df000115 	stw	fp,4(sp)
   11118:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1111c:	e03fff15 	stw	zero,-4(fp)
   11120:	00000506 	br	11138 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11124:	e0bfff17 	ldw	r2,-4(fp)
   11128:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1112c:	e0bfff17 	ldw	r2,-4(fp)
   11130:	10800804 	addi	r2,r2,32
   11134:	e0bfff15 	stw	r2,-4(fp)
   11138:	e0bfff17 	ldw	r2,-4(fp)
   1113c:	10900030 	cmpltui	r2,r2,16384
   11140:	103ff81e 	bne	r2,zero,11124 <_gp+0xffff48a8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11144:	e037883a 	mov	sp,fp
   11148:	df000017 	ldw	fp,0(sp)
   1114c:	dec00104 	addi	sp,sp,4
   11150:	f800283a 	ret

00011154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11154:	defffe04 	addi	sp,sp,-8
   11158:	dfc00115 	stw	ra,4(sp)
   1115c:	df000015 	stw	fp,0(sp)
   11160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11164:	00800074 	movhi	r2,1
   11168:	10922a04 	addi	r2,r2,18600
   1116c:	10800017 	ldw	r2,0(r2)
   11170:	10000526 	beq	r2,zero,11188 <alt_get_errno+0x34>
   11174:	00800074 	movhi	r2,1
   11178:	10922a04 	addi	r2,r2,18600
   1117c:	10800017 	ldw	r2,0(r2)
   11180:	103ee83a 	callr	r2
   11184:	00000206 	br	11190 <alt_get_errno+0x3c>
   11188:	00800074 	movhi	r2,1
   1118c:	1098c904 	addi	r2,r2,25380
}
   11190:	e037883a 	mov	sp,fp
   11194:	dfc00117 	ldw	ra,4(sp)
   11198:	df000017 	ldw	fp,0(sp)
   1119c:	dec00204 	addi	sp,sp,8
   111a0:	f800283a 	ret

000111a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   111a4:	defffa04 	addi	sp,sp,-24
   111a8:	dfc00515 	stw	ra,20(sp)
   111ac:	df000415 	stw	fp,16(sp)
   111b0:	df000404 	addi	fp,sp,16
   111b4:	e13ffe15 	stw	r4,-8(fp)
   111b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   111bc:	e0bffe17 	ldw	r2,-8(fp)
   111c0:	10000326 	beq	r2,zero,111d0 <alt_dev_llist_insert+0x2c>
   111c4:	e0bffe17 	ldw	r2,-8(fp)
   111c8:	10800217 	ldw	r2,8(r2)
   111cc:	1000051e 	bne	r2,zero,111e4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   111d0:	00111540 	call	11154 <alt_get_errno>
   111d4:	00c00584 	movi	r3,22
   111d8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   111dc:	00bffa84 	movi	r2,-22
   111e0:	00001306 	br	11230 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   111e4:	e0bffe17 	ldw	r2,-8(fp)
   111e8:	e0ffff17 	ldw	r3,-4(fp)
   111ec:	e0fffc15 	stw	r3,-16(fp)
   111f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   111f4:	e0bffd17 	ldw	r2,-12(fp)
   111f8:	e0fffc17 	ldw	r3,-16(fp)
   111fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11200:	e0bffc17 	ldw	r2,-16(fp)
   11204:	10c00017 	ldw	r3,0(r2)
   11208:	e0bffd17 	ldw	r2,-12(fp)
   1120c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11210:	e0bffc17 	ldw	r2,-16(fp)
   11214:	10800017 	ldw	r2,0(r2)
   11218:	e0fffd17 	ldw	r3,-12(fp)
   1121c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11220:	e0bffc17 	ldw	r2,-16(fp)
   11224:	e0fffd17 	ldw	r3,-12(fp)
   11228:	10c00015 	stw	r3,0(r2)

  return 0;  
   1122c:	0005883a 	mov	r2,zero
}
   11230:	e037883a 	mov	sp,fp
   11234:	dfc00117 	ldw	ra,4(sp)
   11238:	df000017 	ldw	fp,0(sp)
   1123c:	dec00204 	addi	sp,sp,8
   11240:	f800283a 	ret

00011244 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11244:	defffd04 	addi	sp,sp,-12
   11248:	dfc00215 	stw	ra,8(sp)
   1124c:	df000115 	stw	fp,4(sp)
   11250:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11254:	00800074 	movhi	r2,1
   11258:	10881c04 	addi	r2,r2,8304
   1125c:	e0bfff15 	stw	r2,-4(fp)
   11260:	00000606 	br	1127c <_do_ctors+0x38>
        (*ctor) (); 
   11264:	e0bfff17 	ldw	r2,-4(fp)
   11268:	10800017 	ldw	r2,0(r2)
   1126c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11270:	e0bfff17 	ldw	r2,-4(fp)
   11274:	10bfff04 	addi	r2,r2,-4
   11278:	e0bfff15 	stw	r2,-4(fp)
   1127c:	e0ffff17 	ldw	r3,-4(fp)
   11280:	00800074 	movhi	r2,1
   11284:	10881d04 	addi	r2,r2,8308
   11288:	18bff62e 	bgeu	r3,r2,11264 <_gp+0xffff49e8>
        (*ctor) (); 
}
   1128c:	e037883a 	mov	sp,fp
   11290:	dfc00117 	ldw	ra,4(sp)
   11294:	df000017 	ldw	fp,0(sp)
   11298:	dec00204 	addi	sp,sp,8
   1129c:	f800283a 	ret

000112a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   112a0:	defffd04 	addi	sp,sp,-12
   112a4:	dfc00215 	stw	ra,8(sp)
   112a8:	df000115 	stw	fp,4(sp)
   112ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   112b0:	00800074 	movhi	r2,1
   112b4:	10881c04 	addi	r2,r2,8304
   112b8:	e0bfff15 	stw	r2,-4(fp)
   112bc:	00000606 	br	112d8 <_do_dtors+0x38>
        (*dtor) (); 
   112c0:	e0bfff17 	ldw	r2,-4(fp)
   112c4:	10800017 	ldw	r2,0(r2)
   112c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	10bfff04 	addi	r2,r2,-4
   112d4:	e0bfff15 	stw	r2,-4(fp)
   112d8:	e0ffff17 	ldw	r3,-4(fp)
   112dc:	00800074 	movhi	r2,1
   112e0:	10881d04 	addi	r2,r2,8308
   112e4:	18bff62e 	bgeu	r3,r2,112c0 <_gp+0xffff4a44>
        (*dtor) (); 
}
   112e8:	e037883a 	mov	sp,fp
   112ec:	dfc00117 	ldw	ra,4(sp)
   112f0:	df000017 	ldw	fp,0(sp)
   112f4:	dec00204 	addi	sp,sp,8
   112f8:	f800283a 	ret

000112fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   112fc:	defffe04 	addi	sp,sp,-8
   11300:	dfc00115 	stw	ra,4(sp)
   11304:	df000015 	stw	fp,0(sp)
   11308:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1130c:	0009883a 	mov	r4,zero
   11310:	01440004 	movi	r5,4096
   11314:	0011c140 	call	11c14 <alt_icache_flush>
#endif
}
   11318:	e037883a 	mov	sp,fp
   1131c:	dfc00117 	ldw	ra,4(sp)
   11320:	df000017 	ldw	fp,0(sp)
   11324:	dec00204 	addi	sp,sp,8
   11328:	f800283a 	ret

0001132c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1132c:	defff904 	addi	sp,sp,-28
   11330:	dfc00615 	stw	ra,24(sp)
   11334:	df000515 	stw	fp,20(sp)
   11338:	df000504 	addi	fp,sp,20
   1133c:	e13ffc15 	stw	r4,-16(fp)
   11340:	e17ffd15 	stw	r5,-12(fp)
   11344:	e1bffe15 	stw	r6,-8(fp)
   11348:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1134c:	e0800217 	ldw	r2,8(fp)
   11350:	d8800015 	stw	r2,0(sp)
   11354:	e13ffc17 	ldw	r4,-16(fp)
   11358:	e17ffd17 	ldw	r5,-12(fp)
   1135c:	e1bffe17 	ldw	r6,-8(fp)
   11360:	e1ffff17 	ldw	r7,-4(fp)
   11364:	00115040 	call	11504 <alt_iic_isr_register>
}  
   11368:	e037883a 	mov	sp,fp
   1136c:	dfc00117 	ldw	ra,4(sp)
   11370:	df000017 	ldw	fp,0(sp)
   11374:	dec00204 	addi	sp,sp,8
   11378:	f800283a 	ret

0001137c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1137c:	defff904 	addi	sp,sp,-28
   11380:	df000615 	stw	fp,24(sp)
   11384:	df000604 	addi	fp,sp,24
   11388:	e13ffe15 	stw	r4,-8(fp)
   1138c:	e17fff15 	stw	r5,-4(fp)
   11390:	e0bfff17 	ldw	r2,-4(fp)
   11394:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11398:	0005303a 	rdctl	r2,status
   1139c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113a0:	e0fffb17 	ldw	r3,-20(fp)
   113a4:	00bfff84 	movi	r2,-2
   113a8:	1884703a 	and	r2,r3,r2
   113ac:	1001703a 	wrctl	status,r2
  
  return context;
   113b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   113b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   113b8:	e0bffa17 	ldw	r2,-24(fp)
   113bc:	00c00044 	movi	r3,1
   113c0:	1884983a 	sll	r2,r3,r2
   113c4:	1007883a 	mov	r3,r2
   113c8:	00800074 	movhi	r2,1
   113cc:	1098d204 	addi	r2,r2,25416
   113d0:	10800017 	ldw	r2,0(r2)
   113d4:	1886b03a 	or	r3,r3,r2
   113d8:	00800074 	movhi	r2,1
   113dc:	1098d204 	addi	r2,r2,25416
   113e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   113e4:	00800074 	movhi	r2,1
   113e8:	1098d204 	addi	r2,r2,25416
   113ec:	10800017 	ldw	r2,0(r2)
   113f0:	100170fa 	wrctl	ienable,r2
   113f4:	e0bffc17 	ldw	r2,-16(fp)
   113f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113fc:	e0bffd17 	ldw	r2,-12(fp)
   11400:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11404:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   11408:	e037883a 	mov	sp,fp
   1140c:	df000017 	ldw	fp,0(sp)
   11410:	dec00104 	addi	sp,sp,4
   11414:	f800283a 	ret

00011418 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11418:	defff904 	addi	sp,sp,-28
   1141c:	df000615 	stw	fp,24(sp)
   11420:	df000604 	addi	fp,sp,24
   11424:	e13ffe15 	stw	r4,-8(fp)
   11428:	e17fff15 	stw	r5,-4(fp)
   1142c:	e0bfff17 	ldw	r2,-4(fp)
   11430:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11434:	0005303a 	rdctl	r2,status
   11438:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1143c:	e0fffb17 	ldw	r3,-20(fp)
   11440:	00bfff84 	movi	r2,-2
   11444:	1884703a 	and	r2,r3,r2
   11448:	1001703a 	wrctl	status,r2
  
  return context;
   1144c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11450:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11454:	e0bffa17 	ldw	r2,-24(fp)
   11458:	00c00044 	movi	r3,1
   1145c:	1884983a 	sll	r2,r3,r2
   11460:	0084303a 	nor	r2,zero,r2
   11464:	1007883a 	mov	r3,r2
   11468:	00800074 	movhi	r2,1
   1146c:	1098d204 	addi	r2,r2,25416
   11470:	10800017 	ldw	r2,0(r2)
   11474:	1886703a 	and	r3,r3,r2
   11478:	00800074 	movhi	r2,1
   1147c:	1098d204 	addi	r2,r2,25416
   11480:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11484:	00800074 	movhi	r2,1
   11488:	1098d204 	addi	r2,r2,25416
   1148c:	10800017 	ldw	r2,0(r2)
   11490:	100170fa 	wrctl	ienable,r2
   11494:	e0bffc17 	ldw	r2,-16(fp)
   11498:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1149c:	e0bffd17 	ldw	r2,-12(fp)
   114a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   114a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   114a8:	e037883a 	mov	sp,fp
   114ac:	df000017 	ldw	fp,0(sp)
   114b0:	dec00104 	addi	sp,sp,4
   114b4:	f800283a 	ret

000114b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   114b8:	defffc04 	addi	sp,sp,-16
   114bc:	df000315 	stw	fp,12(sp)
   114c0:	df000304 	addi	fp,sp,12
   114c4:	e13ffe15 	stw	r4,-8(fp)
   114c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   114cc:	000530fa 	rdctl	r2,ienable
   114d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   114d4:	e0bfff17 	ldw	r2,-4(fp)
   114d8:	00c00044 	movi	r3,1
   114dc:	1884983a 	sll	r2,r3,r2
   114e0:	1007883a 	mov	r3,r2
   114e4:	e0bffd17 	ldw	r2,-12(fp)
   114e8:	1884703a 	and	r2,r3,r2
   114ec:	1004c03a 	cmpne	r2,r2,zero
   114f0:	10803fcc 	andi	r2,r2,255
}
   114f4:	e037883a 	mov	sp,fp
   114f8:	df000017 	ldw	fp,0(sp)
   114fc:	dec00104 	addi	sp,sp,4
   11500:	f800283a 	ret

00011504 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11504:	defff504 	addi	sp,sp,-44
   11508:	dfc00a15 	stw	ra,40(sp)
   1150c:	df000915 	stw	fp,36(sp)
   11510:	df000904 	addi	fp,sp,36
   11514:	e13ffc15 	stw	r4,-16(fp)
   11518:	e17ffd15 	stw	r5,-12(fp)
   1151c:	e1bffe15 	stw	r6,-8(fp)
   11520:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11524:	00bffa84 	movi	r2,-22
   11528:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1152c:	e0bffd17 	ldw	r2,-12(fp)
   11530:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11534:	e0bff817 	ldw	r2,-32(fp)
   11538:	10800808 	cmpgei	r2,r2,32
   1153c:	1000271e 	bne	r2,zero,115dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11540:	0005303a 	rdctl	r2,status
   11544:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11548:	e0fffa17 	ldw	r3,-24(fp)
   1154c:	00bfff84 	movi	r2,-2
   11550:	1884703a 	and	r2,r3,r2
   11554:	1001703a 	wrctl	status,r2
  
  return context;
   11558:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1155c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11560:	00c00074 	movhi	r3,1
   11564:	18d8eb04 	addi	r3,r3,25516
   11568:	e0bff817 	ldw	r2,-32(fp)
   1156c:	100490fa 	slli	r2,r2,3
   11570:	1885883a 	add	r2,r3,r2
   11574:	e0fffe17 	ldw	r3,-8(fp)
   11578:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1157c:	00c00074 	movhi	r3,1
   11580:	18d8eb04 	addi	r3,r3,25516
   11584:	e0bff817 	ldw	r2,-32(fp)
   11588:	100490fa 	slli	r2,r2,3
   1158c:	1885883a 	add	r2,r3,r2
   11590:	10800104 	addi	r2,r2,4
   11594:	e0ffff17 	ldw	r3,-4(fp)
   11598:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1159c:	e0bffe17 	ldw	r2,-8(fp)
   115a0:	10000526 	beq	r2,zero,115b8 <alt_iic_isr_register+0xb4>
   115a4:	e0bff817 	ldw	r2,-32(fp)
   115a8:	e13ffc17 	ldw	r4,-16(fp)
   115ac:	100b883a 	mov	r5,r2
   115b0:	001137c0 	call	1137c <alt_ic_irq_enable>
   115b4:	00000406 	br	115c8 <alt_iic_isr_register+0xc4>
   115b8:	e0bff817 	ldw	r2,-32(fp)
   115bc:	e13ffc17 	ldw	r4,-16(fp)
   115c0:	100b883a 	mov	r5,r2
   115c4:	00114180 	call	11418 <alt_ic_irq_disable>
   115c8:	e0bff715 	stw	r2,-36(fp)
   115cc:	e0bff917 	ldw	r2,-28(fp)
   115d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115d4:	e0bffb17 	ldw	r2,-20(fp)
   115d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   115dc:	e0bff717 	ldw	r2,-36(fp)
}
   115e0:	e037883a 	mov	sp,fp
   115e4:	dfc00117 	ldw	ra,4(sp)
   115e8:	df000017 	ldw	fp,0(sp)
   115ec:	dec00204 	addi	sp,sp,8
   115f0:	f800283a 	ret

000115f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   115f4:	defff904 	addi	sp,sp,-28
   115f8:	dfc00615 	stw	ra,24(sp)
   115fc:	df000515 	stw	fp,20(sp)
   11600:	df000504 	addi	fp,sp,20
   11604:	e13ffc15 	stw	r4,-16(fp)
   11608:	e17ffd15 	stw	r5,-12(fp)
   1160c:	e1bffe15 	stw	r6,-8(fp)
   11610:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11614:	e13ffd17 	ldw	r4,-12(fp)
   11618:	e17ffe17 	ldw	r5,-8(fp)
   1161c:	e1bfff17 	ldw	r6,-4(fp)
   11620:	00118480 	call	11848 <open>
   11624:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11628:	e0bffb17 	ldw	r2,-20(fp)
   1162c:	10001c16 	blt	r2,zero,116a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11630:	00c00074 	movhi	r3,1
   11634:	18cda704 	addi	r3,r3,13980
   11638:	e0bffb17 	ldw	r2,-20(fp)
   1163c:	10800324 	muli	r2,r2,12
   11640:	1885883a 	add	r2,r3,r2
   11644:	10c00017 	ldw	r3,0(r2)
   11648:	e0bffc17 	ldw	r2,-16(fp)
   1164c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11650:	00c00074 	movhi	r3,1
   11654:	18cda704 	addi	r3,r3,13980
   11658:	e0bffb17 	ldw	r2,-20(fp)
   1165c:	10800324 	muli	r2,r2,12
   11660:	1885883a 	add	r2,r3,r2
   11664:	10800104 	addi	r2,r2,4
   11668:	10c00017 	ldw	r3,0(r2)
   1166c:	e0bffc17 	ldw	r2,-16(fp)
   11670:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11674:	00c00074 	movhi	r3,1
   11678:	18cda704 	addi	r3,r3,13980
   1167c:	e0bffb17 	ldw	r2,-20(fp)
   11680:	10800324 	muli	r2,r2,12
   11684:	1885883a 	add	r2,r3,r2
   11688:	10800204 	addi	r2,r2,8
   1168c:	10c00017 	ldw	r3,0(r2)
   11690:	e0bffc17 	ldw	r2,-16(fp)
   11694:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11698:	e13ffb17 	ldw	r4,-20(fp)
   1169c:	000fe440 	call	fe44 <alt_release_fd>
  }
} 
   116a0:	e037883a 	mov	sp,fp
   116a4:	dfc00117 	ldw	ra,4(sp)
   116a8:	df000017 	ldw	fp,0(sp)
   116ac:	dec00204 	addi	sp,sp,8
   116b0:	f800283a 	ret

000116b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   116b4:	defffb04 	addi	sp,sp,-20
   116b8:	dfc00415 	stw	ra,16(sp)
   116bc:	df000315 	stw	fp,12(sp)
   116c0:	df000304 	addi	fp,sp,12
   116c4:	e13ffd15 	stw	r4,-12(fp)
   116c8:	e17ffe15 	stw	r5,-8(fp)
   116cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   116d0:	01000074 	movhi	r4,1
   116d4:	210daa04 	addi	r4,r4,13992
   116d8:	e17ffd17 	ldw	r5,-12(fp)
   116dc:	01800044 	movi	r6,1
   116e0:	01c07fc4 	movi	r7,511
   116e4:	00115f40 	call	115f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   116e8:	01000074 	movhi	r4,1
   116ec:	210da704 	addi	r4,r4,13980
   116f0:	e17ffe17 	ldw	r5,-8(fp)
   116f4:	000d883a 	mov	r6,zero
   116f8:	01c07fc4 	movi	r7,511
   116fc:	00115f40 	call	115f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11700:	01000074 	movhi	r4,1
   11704:	210dad04 	addi	r4,r4,14004
   11708:	e17fff17 	ldw	r5,-4(fp)
   1170c:	01800044 	movi	r6,1
   11710:	01c07fc4 	movi	r7,511
   11714:	00115f40 	call	115f4 <alt_open_fd>
}  
   11718:	e037883a 	mov	sp,fp
   1171c:	dfc00117 	ldw	ra,4(sp)
   11720:	df000017 	ldw	fp,0(sp)
   11724:	dec00204 	addi	sp,sp,8
   11728:	f800283a 	ret

0001172c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1172c:	defffe04 	addi	sp,sp,-8
   11730:	dfc00115 	stw	ra,4(sp)
   11734:	df000015 	stw	fp,0(sp)
   11738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1173c:	00800074 	movhi	r2,1
   11740:	10922a04 	addi	r2,r2,18600
   11744:	10800017 	ldw	r2,0(r2)
   11748:	10000526 	beq	r2,zero,11760 <alt_get_errno+0x34>
   1174c:	00800074 	movhi	r2,1
   11750:	10922a04 	addi	r2,r2,18600
   11754:	10800017 	ldw	r2,0(r2)
   11758:	103ee83a 	callr	r2
   1175c:	00000206 	br	11768 <alt_get_errno+0x3c>
   11760:	00800074 	movhi	r2,1
   11764:	1098c904 	addi	r2,r2,25380
}
   11768:	e037883a 	mov	sp,fp
   1176c:	dfc00117 	ldw	ra,4(sp)
   11770:	df000017 	ldw	fp,0(sp)
   11774:	dec00204 	addi	sp,sp,8
   11778:	f800283a 	ret

0001177c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1177c:	defffd04 	addi	sp,sp,-12
   11780:	df000215 	stw	fp,8(sp)
   11784:	df000204 	addi	fp,sp,8
   11788:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1178c:	e0bfff17 	ldw	r2,-4(fp)
   11790:	10800217 	ldw	r2,8(r2)
   11794:	10d00034 	orhi	r3,r2,16384
   11798:	e0bfff17 	ldw	r2,-4(fp)
   1179c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   117a0:	e03ffe15 	stw	zero,-8(fp)
   117a4:	00001d06 	br	1181c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   117a8:	00c00074 	movhi	r3,1
   117ac:	18cda704 	addi	r3,r3,13980
   117b0:	e0bffe17 	ldw	r2,-8(fp)
   117b4:	10800324 	muli	r2,r2,12
   117b8:	1885883a 	add	r2,r3,r2
   117bc:	10c00017 	ldw	r3,0(r2)
   117c0:	e0bfff17 	ldw	r2,-4(fp)
   117c4:	10800017 	ldw	r2,0(r2)
   117c8:	1880111e 	bne	r3,r2,11810 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   117cc:	00c00074 	movhi	r3,1
   117d0:	18cda704 	addi	r3,r3,13980
   117d4:	e0bffe17 	ldw	r2,-8(fp)
   117d8:	10800324 	muli	r2,r2,12
   117dc:	1885883a 	add	r2,r3,r2
   117e0:	10800204 	addi	r2,r2,8
   117e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   117e8:	1000090e 	bge	r2,zero,11810 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   117ec:	e0bffe17 	ldw	r2,-8(fp)
   117f0:	10c00324 	muli	r3,r2,12
   117f4:	00800074 	movhi	r2,1
   117f8:	108da704 	addi	r2,r2,13980
   117fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11800:	e0bfff17 	ldw	r2,-4(fp)
   11804:	18800226 	beq	r3,r2,11810 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11808:	00bffcc4 	movi	r2,-13
   1180c:	00000a06 	br	11838 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11810:	e0bffe17 	ldw	r2,-8(fp)
   11814:	10800044 	addi	r2,r2,1
   11818:	e0bffe15 	stw	r2,-8(fp)
   1181c:	00800074 	movhi	r2,1
   11820:	10922904 	addi	r2,r2,18596
   11824:	10800017 	ldw	r2,0(r2)
   11828:	1007883a 	mov	r3,r2
   1182c:	e0bffe17 	ldw	r2,-8(fp)
   11830:	18bfdd2e 	bgeu	r3,r2,117a8 <_gp+0xffff4f2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11834:	0005883a 	mov	r2,zero
}
   11838:	e037883a 	mov	sp,fp
   1183c:	df000017 	ldw	fp,0(sp)
   11840:	dec00104 	addi	sp,sp,4
   11844:	f800283a 	ret

00011848 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11848:	defff604 	addi	sp,sp,-40
   1184c:	dfc00915 	stw	ra,36(sp)
   11850:	df000815 	stw	fp,32(sp)
   11854:	df000804 	addi	fp,sp,32
   11858:	e13ffd15 	stw	r4,-12(fp)
   1185c:	e17ffe15 	stw	r5,-8(fp)
   11860:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11864:	00bfffc4 	movi	r2,-1
   11868:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1186c:	00bffb44 	movi	r2,-19
   11870:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11874:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11878:	e13ffd17 	ldw	r4,-12(fp)
   1187c:	01400074 	movhi	r5,1
   11880:	29522704 	addi	r5,r5,18588
   11884:	00119bc0 	call	119bc <alt_find_dev>
   11888:	e0bff815 	stw	r2,-32(fp)
   1188c:	e0bff817 	ldw	r2,-32(fp)
   11890:	1000051e 	bne	r2,zero,118a8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11894:	e13ffd17 	ldw	r4,-12(fp)
   11898:	0011a4c0 	call	11a4c <alt_find_file>
   1189c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   118a0:	00800044 	movi	r2,1
   118a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   118a8:	e0bff817 	ldw	r2,-32(fp)
   118ac:	10002926 	beq	r2,zero,11954 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   118b0:	e13ff817 	ldw	r4,-32(fp)
   118b4:	0011b600 	call	11b60 <alt_get_fd>
   118b8:	e0bff915 	stw	r2,-28(fp)
   118bc:	e0bff917 	ldw	r2,-28(fp)
   118c0:	1000030e 	bge	r2,zero,118d0 <open+0x88>
    {
      status = index;
   118c4:	e0bff917 	ldw	r2,-28(fp)
   118c8:	e0bffa15 	stw	r2,-24(fp)
   118cc:	00002306 	br	1195c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   118d0:	e0bff917 	ldw	r2,-28(fp)
   118d4:	10c00324 	muli	r3,r2,12
   118d8:	00800074 	movhi	r2,1
   118dc:	108da704 	addi	r2,r2,13980
   118e0:	1885883a 	add	r2,r3,r2
   118e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   118e8:	e0fffe17 	ldw	r3,-8(fp)
   118ec:	00900034 	movhi	r2,16384
   118f0:	10bfffc4 	addi	r2,r2,-1
   118f4:	1886703a 	and	r3,r3,r2
   118f8:	e0bffc17 	ldw	r2,-16(fp)
   118fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11900:	e0bffb17 	ldw	r2,-20(fp)
   11904:	1000051e 	bne	r2,zero,1191c <open+0xd4>
   11908:	e13ffc17 	ldw	r4,-16(fp)
   1190c:	001177c0 	call	1177c <alt_file_locked>
   11910:	e0bffa15 	stw	r2,-24(fp)
   11914:	e0bffa17 	ldw	r2,-24(fp)
   11918:	10001016 	blt	r2,zero,1195c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1191c:	e0bff817 	ldw	r2,-32(fp)
   11920:	10800317 	ldw	r2,12(r2)
   11924:	10000826 	beq	r2,zero,11948 <open+0x100>
   11928:	e0bff817 	ldw	r2,-32(fp)
   1192c:	10800317 	ldw	r2,12(r2)
   11930:	e13ffc17 	ldw	r4,-16(fp)
   11934:	e17ffd17 	ldw	r5,-12(fp)
   11938:	e1bffe17 	ldw	r6,-8(fp)
   1193c:	e1ffff17 	ldw	r7,-4(fp)
   11940:	103ee83a 	callr	r2
   11944:	00000106 	br	1194c <open+0x104>
   11948:	0005883a 	mov	r2,zero
   1194c:	e0bffa15 	stw	r2,-24(fp)
   11950:	00000206 	br	1195c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11954:	00bffb44 	movi	r2,-19
   11958:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1195c:	e0bffa17 	ldw	r2,-24(fp)
   11960:	1000080e 	bge	r2,zero,11984 <open+0x13c>
  {
    alt_release_fd (index);  
   11964:	e13ff917 	ldw	r4,-28(fp)
   11968:	000fe440 	call	fe44 <alt_release_fd>
    ALT_ERRNO = -status;
   1196c:	001172c0 	call	1172c <alt_get_errno>
   11970:	e0fffa17 	ldw	r3,-24(fp)
   11974:	00c7c83a 	sub	r3,zero,r3
   11978:	10c00015 	stw	r3,0(r2)
    return -1;
   1197c:	00bfffc4 	movi	r2,-1
   11980:	00000106 	br	11988 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11984:	e0bff917 	ldw	r2,-28(fp)
}
   11988:	e037883a 	mov	sp,fp
   1198c:	dfc00117 	ldw	ra,4(sp)
   11990:	df000017 	ldw	fp,0(sp)
   11994:	dec00204 	addi	sp,sp,8
   11998:	f800283a 	ret

0001199c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1199c:	deffff04 	addi	sp,sp,-4
   119a0:	df000015 	stw	fp,0(sp)
   119a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   119a8:	000170fa 	wrctl	ienable,zero
}
   119ac:	e037883a 	mov	sp,fp
   119b0:	df000017 	ldw	fp,0(sp)
   119b4:	dec00104 	addi	sp,sp,4
   119b8:	f800283a 	ret

000119bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   119bc:	defffa04 	addi	sp,sp,-24
   119c0:	dfc00515 	stw	ra,20(sp)
   119c4:	df000415 	stw	fp,16(sp)
   119c8:	df000404 	addi	fp,sp,16
   119cc:	e13ffe15 	stw	r4,-8(fp)
   119d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   119d4:	e0bfff17 	ldw	r2,-4(fp)
   119d8:	10800017 	ldw	r2,0(r2)
   119dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   119e0:	e13ffe17 	ldw	r4,-8(fp)
   119e4:	00073600 	call	7360 <strlen>
   119e8:	10800044 	addi	r2,r2,1
   119ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   119f0:	00000d06 	br	11a28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   119f4:	e0bffc17 	ldw	r2,-16(fp)
   119f8:	10c00217 	ldw	r3,8(r2)
   119fc:	e0bffd17 	ldw	r2,-12(fp)
   11a00:	1809883a 	mov	r4,r3
   11a04:	e17ffe17 	ldw	r5,-8(fp)
   11a08:	100d883a 	mov	r6,r2
   11a0c:	0011cec0 	call	11cec <memcmp>
   11a10:	1000021e 	bne	r2,zero,11a1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11a14:	e0bffc17 	ldw	r2,-16(fp)
   11a18:	00000706 	br	11a38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11a1c:	e0bffc17 	ldw	r2,-16(fp)
   11a20:	10800017 	ldw	r2,0(r2)
   11a24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11a28:	e0fffc17 	ldw	r3,-16(fp)
   11a2c:	e0bfff17 	ldw	r2,-4(fp)
   11a30:	18bff01e 	bne	r3,r2,119f4 <_gp+0xffff5178>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11a34:	0005883a 	mov	r2,zero
}
   11a38:	e037883a 	mov	sp,fp
   11a3c:	dfc00117 	ldw	ra,4(sp)
   11a40:	df000017 	ldw	fp,0(sp)
   11a44:	dec00204 	addi	sp,sp,8
   11a48:	f800283a 	ret

00011a4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11a4c:	defffb04 	addi	sp,sp,-20
   11a50:	dfc00415 	stw	ra,16(sp)
   11a54:	df000315 	stw	fp,12(sp)
   11a58:	df000304 	addi	fp,sp,12
   11a5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11a60:	00800074 	movhi	r2,1
   11a64:	10922504 	addi	r2,r2,18580
   11a68:	10800017 	ldw	r2,0(r2)
   11a6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11a70:	00003106 	br	11b38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11a74:	e0bffd17 	ldw	r2,-12(fp)
   11a78:	10800217 	ldw	r2,8(r2)
   11a7c:	1009883a 	mov	r4,r2
   11a80:	00073600 	call	7360 <strlen>
   11a84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11a88:	e0bffd17 	ldw	r2,-12(fp)
   11a8c:	10c00217 	ldw	r3,8(r2)
   11a90:	e0bffe17 	ldw	r2,-8(fp)
   11a94:	10bfffc4 	addi	r2,r2,-1
   11a98:	1885883a 	add	r2,r3,r2
   11a9c:	10800003 	ldbu	r2,0(r2)
   11aa0:	10803fcc 	andi	r2,r2,255
   11aa4:	1080201c 	xori	r2,r2,128
   11aa8:	10bfe004 	addi	r2,r2,-128
   11aac:	10800bd8 	cmpnei	r2,r2,47
   11ab0:	1000031e 	bne	r2,zero,11ac0 <alt_find_file+0x74>
    {
      len -= 1;
   11ab4:	e0bffe17 	ldw	r2,-8(fp)
   11ab8:	10bfffc4 	addi	r2,r2,-1
   11abc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11ac0:	e0bffe17 	ldw	r2,-8(fp)
   11ac4:	e0ffff17 	ldw	r3,-4(fp)
   11ac8:	1885883a 	add	r2,r3,r2
   11acc:	10800003 	ldbu	r2,0(r2)
   11ad0:	10803fcc 	andi	r2,r2,255
   11ad4:	1080201c 	xori	r2,r2,128
   11ad8:	10bfe004 	addi	r2,r2,-128
   11adc:	10800be0 	cmpeqi	r2,r2,47
   11ae0:	1000081e 	bne	r2,zero,11b04 <alt_find_file+0xb8>
   11ae4:	e0bffe17 	ldw	r2,-8(fp)
   11ae8:	e0ffff17 	ldw	r3,-4(fp)
   11aec:	1885883a 	add	r2,r3,r2
   11af0:	10800003 	ldbu	r2,0(r2)
   11af4:	10803fcc 	andi	r2,r2,255
   11af8:	1080201c 	xori	r2,r2,128
   11afc:	10bfe004 	addi	r2,r2,-128
   11b00:	10000a1e 	bne	r2,zero,11b2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11b04:	e0bffd17 	ldw	r2,-12(fp)
   11b08:	10c00217 	ldw	r3,8(r2)
   11b0c:	e0bffe17 	ldw	r2,-8(fp)
   11b10:	1809883a 	mov	r4,r3
   11b14:	e17fff17 	ldw	r5,-4(fp)
   11b18:	100d883a 	mov	r6,r2
   11b1c:	0011cec0 	call	11cec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11b20:	1000021e 	bne	r2,zero,11b2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11b24:	e0bffd17 	ldw	r2,-12(fp)
   11b28:	00000806 	br	11b4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   11b2c:	e0bffd17 	ldw	r2,-12(fp)
   11b30:	10800017 	ldw	r2,0(r2)
   11b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11b38:	e0fffd17 	ldw	r3,-12(fp)
   11b3c:	00800074 	movhi	r2,1
   11b40:	10922504 	addi	r2,r2,18580
   11b44:	18bfcb1e 	bne	r3,r2,11a74 <_gp+0xffff51f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11b48:	0005883a 	mov	r2,zero
}
   11b4c:	e037883a 	mov	sp,fp
   11b50:	dfc00117 	ldw	ra,4(sp)
   11b54:	df000017 	ldw	fp,0(sp)
   11b58:	dec00204 	addi	sp,sp,8
   11b5c:	f800283a 	ret

00011b60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11b60:	defffc04 	addi	sp,sp,-16
   11b64:	df000315 	stw	fp,12(sp)
   11b68:	df000304 	addi	fp,sp,12
   11b6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11b70:	00bffa04 	movi	r2,-24
   11b74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11b78:	e03ffd15 	stw	zero,-12(fp)
   11b7c:	00001d06 	br	11bf4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   11b80:	00c00074 	movhi	r3,1
   11b84:	18cda704 	addi	r3,r3,13980
   11b88:	e0bffd17 	ldw	r2,-12(fp)
   11b8c:	10800324 	muli	r2,r2,12
   11b90:	1885883a 	add	r2,r3,r2
   11b94:	10800017 	ldw	r2,0(r2)
   11b98:	1000131e 	bne	r2,zero,11be8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   11b9c:	00c00074 	movhi	r3,1
   11ba0:	18cda704 	addi	r3,r3,13980
   11ba4:	e0bffd17 	ldw	r2,-12(fp)
   11ba8:	10800324 	muli	r2,r2,12
   11bac:	1885883a 	add	r2,r3,r2
   11bb0:	e0ffff17 	ldw	r3,-4(fp)
   11bb4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11bb8:	00800074 	movhi	r2,1
   11bbc:	10922904 	addi	r2,r2,18596
   11bc0:	10c00017 	ldw	r3,0(r2)
   11bc4:	e0bffd17 	ldw	r2,-12(fp)
   11bc8:	1880040e 	bge	r3,r2,11bdc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   11bcc:	00800074 	movhi	r2,1
   11bd0:	10922904 	addi	r2,r2,18596
   11bd4:	e0fffd17 	ldw	r3,-12(fp)
   11bd8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11bdc:	e0bffd17 	ldw	r2,-12(fp)
   11be0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11be4:	00000606 	br	11c00 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11be8:	e0bffd17 	ldw	r2,-12(fp)
   11bec:	10800044 	addi	r2,r2,1
   11bf0:	e0bffd15 	stw	r2,-12(fp)
   11bf4:	e0bffd17 	ldw	r2,-12(fp)
   11bf8:	10800810 	cmplti	r2,r2,32
   11bfc:	103fe01e 	bne	r2,zero,11b80 <_gp+0xffff5304>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11c00:	e0bffe17 	ldw	r2,-8(fp)
}
   11c04:	e037883a 	mov	sp,fp
   11c08:	df000017 	ldw	fp,0(sp)
   11c0c:	dec00104 	addi	sp,sp,4
   11c10:	f800283a 	ret

00011c14 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11c14:	defffb04 	addi	sp,sp,-20
   11c18:	df000415 	stw	fp,16(sp)
   11c1c:	df000404 	addi	fp,sp,16
   11c20:	e13ffe15 	stw	r4,-8(fp)
   11c24:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11c28:	e0bfff17 	ldw	r2,-4(fp)
   11c2c:	10840070 	cmpltui	r2,r2,4097
   11c30:	1000021e 	bne	r2,zero,11c3c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11c34:	00840004 	movi	r2,4096
   11c38:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11c3c:	e0fffe17 	ldw	r3,-8(fp)
   11c40:	e0bfff17 	ldw	r2,-4(fp)
   11c44:	1885883a 	add	r2,r3,r2
   11c48:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11c4c:	e0bffe17 	ldw	r2,-8(fp)
   11c50:	e0bffc15 	stw	r2,-16(fp)
   11c54:	00000506 	br	11c6c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11c58:	e0bffc17 	ldw	r2,-16(fp)
   11c5c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11c60:	e0bffc17 	ldw	r2,-16(fp)
   11c64:	10800804 	addi	r2,r2,32
   11c68:	e0bffc15 	stw	r2,-16(fp)
   11c6c:	e0fffc17 	ldw	r3,-16(fp)
   11c70:	e0bffd17 	ldw	r2,-12(fp)
   11c74:	18bff836 	bltu	r3,r2,11c58 <_gp+0xffff53dc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	108007cc 	andi	r2,r2,31
   11c80:	10000226 	beq	r2,zero,11c8c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11c84:	e0bffc17 	ldw	r2,-16(fp)
   11c88:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11c8c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11c90:	e037883a 	mov	sp,fp
   11c94:	df000017 	ldw	fp,0(sp)
   11c98:	dec00104 	addi	sp,sp,4
   11c9c:	f800283a 	ret

00011ca0 <atexit>:
   11ca0:	200b883a 	mov	r5,r4
   11ca4:	000d883a 	mov	r6,zero
   11ca8:	0009883a 	mov	r4,zero
   11cac:	000f883a 	mov	r7,zero
   11cb0:	0011d681 	jmpi	11d68 <__register_exitproc>

00011cb4 <exit>:
   11cb4:	defffe04 	addi	sp,sp,-8
   11cb8:	000b883a 	mov	r5,zero
   11cbc:	dc000015 	stw	r16,0(sp)
   11cc0:	dfc00115 	stw	ra,4(sp)
   11cc4:	2021883a 	mov	r16,r4
   11cc8:	0011e980 	call	11e98 <__call_exitprocs>
   11ccc:	00800074 	movhi	r2,1
   11cd0:	10922204 	addi	r2,r2,18568
   11cd4:	11000017 	ldw	r4,0(r2)
   11cd8:	20800f17 	ldw	r2,60(r4)
   11cdc:	10000126 	beq	r2,zero,11ce4 <exit+0x30>
   11ce0:	103ee83a 	callr	r2
   11ce4:	8009883a 	mov	r4,r16
   11ce8:	00120380 	call	12038 <_exit>

00011cec <memcmp>:
   11cec:	01c000c4 	movi	r7,3
   11cf0:	3980192e 	bgeu	r7,r6,11d58 <memcmp+0x6c>
   11cf4:	2904b03a 	or	r2,r5,r4
   11cf8:	11c4703a 	and	r2,r2,r7
   11cfc:	10000f26 	beq	r2,zero,11d3c <memcmp+0x50>
   11d00:	20c00003 	ldbu	r3,0(r4)
   11d04:	28800003 	ldbu	r2,0(r5)
   11d08:	1880151e 	bne	r3,r2,11d60 <memcmp+0x74>
   11d0c:	31bfff84 	addi	r6,r6,-2
   11d10:	01ffffc4 	movi	r7,-1
   11d14:	00000406 	br	11d28 <memcmp+0x3c>
   11d18:	20c00003 	ldbu	r3,0(r4)
   11d1c:	28800003 	ldbu	r2,0(r5)
   11d20:	31bfffc4 	addi	r6,r6,-1
   11d24:	18800e1e 	bne	r3,r2,11d60 <memcmp+0x74>
   11d28:	21000044 	addi	r4,r4,1
   11d2c:	29400044 	addi	r5,r5,1
   11d30:	31fff91e 	bne	r6,r7,11d18 <_gp+0xffff549c>
   11d34:	0005883a 	mov	r2,zero
   11d38:	f800283a 	ret
   11d3c:	20c00017 	ldw	r3,0(r4)
   11d40:	28800017 	ldw	r2,0(r5)
   11d44:	1880041e 	bne	r3,r2,11d58 <memcmp+0x6c>
   11d48:	31bfff04 	addi	r6,r6,-4
   11d4c:	21000104 	addi	r4,r4,4
   11d50:	29400104 	addi	r5,r5,4
   11d54:	39bff936 	bltu	r7,r6,11d3c <_gp+0xffff54c0>
   11d58:	303fe91e 	bne	r6,zero,11d00 <_gp+0xffff5484>
   11d5c:	003ff506 	br	11d34 <_gp+0xffff54b8>
   11d60:	1885c83a 	sub	r2,r3,r2
   11d64:	f800283a 	ret

00011d68 <__register_exitproc>:
   11d68:	defffa04 	addi	sp,sp,-24
   11d6c:	00800074 	movhi	r2,1
   11d70:	10922204 	addi	r2,r2,18568
   11d74:	dc000315 	stw	r16,12(sp)
   11d78:	14000017 	ldw	r16,0(r2)
   11d7c:	dc400415 	stw	r17,16(sp)
   11d80:	dfc00515 	stw	ra,20(sp)
   11d84:	80805217 	ldw	r2,328(r16)
   11d88:	2023883a 	mov	r17,r4
   11d8c:	10003e26 	beq	r2,zero,11e88 <__register_exitproc+0x120>
   11d90:	10c00117 	ldw	r3,4(r2)
   11d94:	020007c4 	movi	r8,31
   11d98:	40c0180e 	bge	r8,r3,11dfc <__register_exitproc+0x94>
   11d9c:	00800034 	movhi	r2,0
   11da0:	10998f04 	addi	r2,r2,26172
   11da4:	1000061e 	bne	r2,zero,11dc0 <__register_exitproc+0x58>
   11da8:	00bfffc4 	movi	r2,-1
   11dac:	dfc00517 	ldw	ra,20(sp)
   11db0:	dc400417 	ldw	r17,16(sp)
   11db4:	dc000317 	ldw	r16,12(sp)
   11db8:	dec00604 	addi	sp,sp,24
   11dbc:	f800283a 	ret
   11dc0:	01006404 	movi	r4,400
   11dc4:	d9400015 	stw	r5,0(sp)
   11dc8:	d9800115 	stw	r6,4(sp)
   11dcc:	d9c00215 	stw	r7,8(sp)
   11dd0:	000663c0 	call	663c <malloc>
   11dd4:	d9400017 	ldw	r5,0(sp)
   11dd8:	d9800117 	ldw	r6,4(sp)
   11ddc:	d9c00217 	ldw	r7,8(sp)
   11de0:	103ff126 	beq	r2,zero,11da8 <_gp+0xffff552c>
   11de4:	80c05217 	ldw	r3,328(r16)
   11de8:	10000115 	stw	zero,4(r2)
   11dec:	10c00015 	stw	r3,0(r2)
   11df0:	80805215 	stw	r2,328(r16)
   11df4:	10006215 	stw	zero,392(r2)
   11df8:	10006315 	stw	zero,396(r2)
   11dfc:	10c00117 	ldw	r3,4(r2)
   11e00:	88000d1e 	bne	r17,zero,11e38 <__register_exitproc+0xd0>
   11e04:	19000084 	addi	r4,r3,2
   11e08:	2109883a 	add	r4,r4,r4
   11e0c:	18c00044 	addi	r3,r3,1
   11e10:	2109883a 	add	r4,r4,r4
   11e14:	1109883a 	add	r4,r2,r4
   11e18:	10c00115 	stw	r3,4(r2)
   11e1c:	0005883a 	mov	r2,zero
   11e20:	21400015 	stw	r5,0(r4)
   11e24:	dfc00517 	ldw	ra,20(sp)
   11e28:	dc400417 	ldw	r17,16(sp)
   11e2c:	dc000317 	ldw	r16,12(sp)
   11e30:	dec00604 	addi	sp,sp,24
   11e34:	f800283a 	ret
   11e38:	02400044 	movi	r9,1
   11e3c:	12806217 	ldw	r10,392(r2)
   11e40:	48d2983a 	sll	r9,r9,r3
   11e44:	19000804 	addi	r4,r3,32
   11e48:	18d1883a 	add	r8,r3,r3
   11e4c:	2109883a 	add	r4,r4,r4
   11e50:	4211883a 	add	r8,r8,r8
   11e54:	2109883a 	add	r4,r4,r4
   11e58:	1109883a 	add	r4,r2,r4
   11e5c:	1211883a 	add	r8,r2,r8
   11e60:	5254b03a 	or	r10,r10,r9
   11e64:	21c02215 	stw	r7,136(r4)
   11e68:	41802215 	stw	r6,136(r8)
   11e6c:	12806215 	stw	r10,392(r2)
   11e70:	01000084 	movi	r4,2
   11e74:	893fe31e 	bne	r17,r4,11e04 <_gp+0xffff5588>
   11e78:	11006317 	ldw	r4,396(r2)
   11e7c:	2252b03a 	or	r9,r4,r9
   11e80:	12406315 	stw	r9,396(r2)
   11e84:	003fdf06 	br	11e04 <_gp+0xffff5588>
   11e88:	00800074 	movhi	r2,1
   11e8c:	10992b04 	addi	r2,r2,25772
   11e90:	80805215 	stw	r2,328(r16)
   11e94:	003fbe06 	br	11d90 <_gp+0xffff5514>

00011e98 <__call_exitprocs>:
   11e98:	00800074 	movhi	r2,1
   11e9c:	10922204 	addi	r2,r2,18568
   11ea0:	10800017 	ldw	r2,0(r2)
   11ea4:	defff304 	addi	sp,sp,-52
   11ea8:	df000b15 	stw	fp,44(sp)
   11eac:	d8800015 	stw	r2,0(sp)
   11eb0:	10805204 	addi	r2,r2,328
   11eb4:	dd400815 	stw	r21,32(sp)
   11eb8:	dfc00c15 	stw	ra,48(sp)
   11ebc:	ddc00a15 	stw	r23,40(sp)
   11ec0:	dd800915 	stw	r22,36(sp)
   11ec4:	dd000715 	stw	r20,28(sp)
   11ec8:	dcc00615 	stw	r19,24(sp)
   11ecc:	dc800515 	stw	r18,20(sp)
   11ed0:	dc400415 	stw	r17,16(sp)
   11ed4:	dc000315 	stw	r16,12(sp)
   11ed8:	d9000115 	stw	r4,4(sp)
   11edc:	2839883a 	mov	fp,r5
   11ee0:	d8800215 	stw	r2,8(sp)
   11ee4:	057fffc4 	movi	r21,-1
   11ee8:	d8800017 	ldw	r2,0(sp)
   11eec:	ddc00217 	ldw	r23,8(sp)
   11ef0:	14805217 	ldw	r18,328(r2)
   11ef4:	90001726 	beq	r18,zero,11f54 <__call_exitprocs+0xbc>
   11ef8:	94400117 	ldw	r17,4(r18)
   11efc:	8c3fffc4 	addi	r16,r17,-1
   11f00:	80001116 	blt	r16,zero,11f48 <__call_exitprocs+0xb0>
   11f04:	8c400044 	addi	r17,r17,1
   11f08:	8427883a 	add	r19,r16,r16
   11f0c:	8c63883a 	add	r17,r17,r17
   11f10:	95802204 	addi	r22,r18,136
   11f14:	9ce7883a 	add	r19,r19,r19
   11f18:	8c63883a 	add	r17,r17,r17
   11f1c:	b4e7883a 	add	r19,r22,r19
   11f20:	9463883a 	add	r17,r18,r17
   11f24:	e0001726 	beq	fp,zero,11f84 <__call_exitprocs+0xec>
   11f28:	8c87c83a 	sub	r3,r17,r18
   11f2c:	b0c7883a 	add	r3,r22,r3
   11f30:	18c01e17 	ldw	r3,120(r3)
   11f34:	1f001326 	beq	r3,fp,11f84 <__call_exitprocs+0xec>
   11f38:	843fffc4 	addi	r16,r16,-1
   11f3c:	9cffff04 	addi	r19,r19,-4
   11f40:	8c7fff04 	addi	r17,r17,-4
   11f44:	857ff71e 	bne	r16,r21,11f24 <_gp+0xffff56a8>
   11f48:	00800034 	movhi	r2,0
   11f4c:	10999404 	addi	r2,r2,26192
   11f50:	10002a1e 	bne	r2,zero,11ffc <__call_exitprocs+0x164>
   11f54:	dfc00c17 	ldw	ra,48(sp)
   11f58:	df000b17 	ldw	fp,44(sp)
   11f5c:	ddc00a17 	ldw	r23,40(sp)
   11f60:	dd800917 	ldw	r22,36(sp)
   11f64:	dd400817 	ldw	r21,32(sp)
   11f68:	dd000717 	ldw	r20,28(sp)
   11f6c:	dcc00617 	ldw	r19,24(sp)
   11f70:	dc800517 	ldw	r18,20(sp)
   11f74:	dc400417 	ldw	r17,16(sp)
   11f78:	dc000317 	ldw	r16,12(sp)
   11f7c:	dec00d04 	addi	sp,sp,52
   11f80:	f800283a 	ret
   11f84:	91000117 	ldw	r4,4(r18)
   11f88:	88c00017 	ldw	r3,0(r17)
   11f8c:	213fffc4 	addi	r4,r4,-1
   11f90:	24001526 	beq	r4,r16,11fe8 <__call_exitprocs+0x150>
   11f94:	88000015 	stw	zero,0(r17)
   11f98:	183fe726 	beq	r3,zero,11f38 <_gp+0xffff56bc>
   11f9c:	00800044 	movi	r2,1
   11fa0:	1408983a 	sll	r4,r2,r16
   11fa4:	91406217 	ldw	r5,392(r18)
   11fa8:	95000117 	ldw	r20,4(r18)
   11fac:	214a703a 	and	r5,r4,r5
   11fb0:	28000b26 	beq	r5,zero,11fe0 <__call_exitprocs+0x148>
   11fb4:	91406317 	ldw	r5,396(r18)
   11fb8:	2148703a 	and	r4,r4,r5
   11fbc:	20000c1e 	bne	r4,zero,11ff0 <__call_exitprocs+0x158>
   11fc0:	99400017 	ldw	r5,0(r19)
   11fc4:	d9000117 	ldw	r4,4(sp)
   11fc8:	183ee83a 	callr	r3
   11fcc:	90c00117 	ldw	r3,4(r18)
   11fd0:	1d3fc51e 	bne	r3,r20,11ee8 <_gp+0xffff566c>
   11fd4:	b8c00017 	ldw	r3,0(r23)
   11fd8:	1cbfd726 	beq	r3,r18,11f38 <_gp+0xffff56bc>
   11fdc:	003fc206 	br	11ee8 <_gp+0xffff566c>
   11fe0:	183ee83a 	callr	r3
   11fe4:	003ff906 	br	11fcc <_gp+0xffff5750>
   11fe8:	94000115 	stw	r16,4(r18)
   11fec:	003fea06 	br	11f98 <_gp+0xffff571c>
   11ff0:	99000017 	ldw	r4,0(r19)
   11ff4:	183ee83a 	callr	r3
   11ff8:	003ff406 	br	11fcc <_gp+0xffff5750>
   11ffc:	90c00117 	ldw	r3,4(r18)
   12000:	1800071e 	bne	r3,zero,12020 <__call_exitprocs+0x188>
   12004:	90c00017 	ldw	r3,0(r18)
   12008:	18000926 	beq	r3,zero,12030 <__call_exitprocs+0x198>
   1200c:	9009883a 	mov	r4,r18
   12010:	b8c00015 	stw	r3,0(r23)
   12014:	00066500 	call	6650 <free>
   12018:	bc800017 	ldw	r18,0(r23)
   1201c:	003fb506 	br	11ef4 <_gp+0xffff5678>
   12020:	90c00017 	ldw	r3,0(r18)
   12024:	902f883a 	mov	r23,r18
   12028:	1825883a 	mov	r18,r3
   1202c:	003fb106 	br	11ef4 <_gp+0xffff5678>
   12030:	0007883a 	mov	r3,zero
   12034:	003ffb06 	br	12024 <_gp+0xffff57a8>

00012038 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12038:	defffc04 	addi	sp,sp,-16
   1203c:	df000315 	stw	fp,12(sp)
   12040:	df000304 	addi	fp,sp,12
   12044:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12048:	0001883a 	nop
   1204c:	e0bfff17 	ldw	r2,-4(fp)
   12050:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   12054:	e0bffd17 	ldw	r2,-12(fp)
   12058:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1205c:	e0bffe17 	ldw	r2,-8(fp)
   12060:	10000226 	beq	r2,zero,1206c <_exit+0x34>
    ALT_SIM_FAIL();
   12064:	002af070 	cmpltui	zero,zero,43969
   12068:	00000106 	br	12070 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1206c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12070:	003fff06 	br	12070 <_gp+0xffff57f4>
